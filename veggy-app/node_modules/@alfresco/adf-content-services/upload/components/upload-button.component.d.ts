/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { AlfrescoApiService, LogService, NodePermissionSubject, TranslationService, UploadService } from '@alfresco/adf-core';
import { EventEmitter, OnChanges, OnInit, SimpleChanges } from '@angular/core';
import { MinimalNodeEntryEntity } from 'alfresco-js-api';
import { Observable } from 'rxjs/Observable';
import { PermissionModel } from '../../document-list/models/permissions.model';
import 'rxjs/add/observable/throw';
export declare class UploadButtonComponent implements OnInit, OnChanges, NodePermissionSubject {
    private uploadService;
    private translateService;
    private logService;
    private apiService;
    disabled: boolean;
    uploadFolders: boolean;
    multipleFiles: boolean;
    versioning: boolean;
    acceptedFilesType: string;
    maxFilesSize: number;
    staticTitle: string;
    tooltip: string;
    rootFolderId: string;
    success: EventEmitter<{}>;
    error: EventEmitter<{}>;
    createFolder: EventEmitter<{}>;
    permissionEvent: EventEmitter<PermissionModel>;
    private hasPermission;
    private permissionValue;
    constructor(uploadService: UploadService, translateService: TranslationService, logService: LogService, apiService: AlfrescoApiService);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    isButtonDisabled(): boolean;
    onFilesAdded($event: any): void;
    onDirectoryAdded($event: any): void;
    /**
     * Upload a list of file in the specified path
     * @param files
     * @param path
     */
    uploadFiles(files: File[]): void;
    /**
     * Creates FileModel from File
     *
     * @param file
     */
    private createFileModel(file);
    /**
     * Checks if the given file is allowed by the extension filters
     *
     * @param file FileModel
     */
    private isFileAcceptable(file);
    /**
     * Checks if the given file is an acceptable size
     *
     * @param file FileModel
     */
    private isFileSizeAcceptable(file);
    checkPermission(): void;
    getFolderNode(nodeId: string): Observable<MinimalNodeEntryEntity>;
    private handleError(error);
    private hasCreatePermission(node);
}
