{"version":3,"file":"adf-content-services.umd.min.js","sources":["~/@alfresco/adf-content-services/document-list/models/document-library.model.ts","~/@alfresco/adf-content-services/document-list/models/permissions-style.model.ts","~/@alfresco/adf-content-services/content.module.ts","~/@alfresco/adf-content-services/content-metadata/content-metadata.module.ts","~/@alfresco/adf-content-services/content-metadata/content-metadata-card.component.ts","~/@alfresco/adf-content-services/content-metadata/content-metadata.component.ts","~/@alfresco/adf-content-services/content-metadata/content-metadata.service.ts","~/@alfresco/adf-content-services/folder-directive/folder-directive.module.ts","~/@alfresco/adf-content-services/folder-directive/folder-edit.directive.ts","~/@alfresco/adf-content-services/folder-directive/folder-create.directive.ts","~/@alfresco/adf-content-services/dialogs/dialog.module.ts","~/@alfresco/adf-content-services/dialogs/folder-name.validators.ts","~/@alfresco/adf-content-services/dialogs/folder.dialog.ts","~/@alfresco/adf-content-services/dialogs/download-zip.dialog.ts","~/@alfresco/adf-content-services/content-node-selector/content-node-selector.module.ts","~/@alfresco/adf-content-services/version-manager/version-manager.module.ts","~/@alfresco/adf-content-services/version-manager/version-list.component.ts","~/@alfresco/adf-content-services/version-manager/version-manager.component.ts","~/@alfresco/adf-content-services/version-manager/version-upload.component.ts","~/@alfresco/adf-content-services/breadcrumb/breadcrumb.module.ts","~/@alfresco/adf-content-services/breadcrumb/dropdown-breadcrumb.component.ts","~/@alfresco/adf-content-services/breadcrumb/breadcrumb.component.ts","~/@alfresco/adf-content-services/site-dropdown/sites-dropdown.module.ts","~/@alfresco/adf-content-services/site-dropdown/sites-dropdown.component.ts","~/@alfresco/adf-content-services/search/search.module.ts","~/@alfresco/adf-content-services/search/components/search-control.component.ts","~/@alfresco/adf-content-services/search/components/search.component.ts","~/@alfresco/adf-content-services/search/components/search-trigger.directive.ts","~/@alfresco/adf-content-services/document-list/document-list.module.ts","~/@alfresco/adf-content-services/document-list/components/no-permission/no-permission-content.directive.ts","~/@alfresco/adf-content-services/document-list/components/empty-folder/empty-folder-content.directive.ts","~/@alfresco/adf-content-services/document-list/components/content-column/content-column.component.ts","~/@alfresco/adf-content-services/document-list/components/content-column/content-column-list.component.ts","~/@alfresco/adf-content-services/document-list/components/content-action/content-action.component.ts","~/@alfresco/adf-content-services/document-list/services/folder-actions.service.ts","~/@alfresco/adf-content-services/document-list/services/document-actions.service.ts","~/@alfresco/adf-content-services/document-list/services/node-actions.service.ts","~/@alfresco/adf-content-services/content-node-selector/content-node-selector.service.ts","../../../../node_modules/src/util/tryCatch.ts","../../../../node_modules/src/util/errorObject.ts","../../../../node_modules/src/util/isFunction.ts","../../../../node_modules/src/util/isArray.ts","../../../../node_modules/src/util/isObject.ts","../../../../node_modules/src/util/UnsubscriptionError.ts","../../../../node_modules/src/Subscription.ts","../../../../node_modules/src/Observer.ts","../../../../node_modules/src/util/root.ts","../../../../node_modules/src/symbol/rxSubscriber.ts","../../../../node_modules/src/Subscriber.ts","../../../../node_modules/src/OuterSubscriber.ts","../../../../node_modules/src/util/isArrayLike.ts","../../../../node_modules/src/util/isPromise.ts","../../../../node_modules/src/util/toSubscriber.ts","../../../../node_modules/src/symbol/observable.ts","../../../../node_modules/src/util/noop.ts","../../../../node_modules/src/util/pipe.ts","../../../../node_modules/src/Observable.ts","../../../../node_modules/src/symbol/iterator.ts","../../../../node_modules/src/InnerSubscriber.ts","../../../../node_modules/src/util/subscribeToResult.ts","../../../../node_modules/src/operators/audit.ts","../../../../node_modules/src/scheduler/Action.ts","../../../../node_modules/src/scheduler/AsyncAction.ts","../../../../node_modules/src/Scheduler.ts","../../../../node_modules/src/scheduler/AsyncScheduler.ts","../../../../node_modules/src/scheduler/async.ts","../../../../node_modules/src/util/isNumeric.ts","../../../../node_modules/src/util/isScheduler.ts","../../../../node_modules/src/util/isDate.ts","../../../../node_modules/src/observable/TimerObservable.ts","../../../../node_modules/src/operators/buffer.ts","../../../../node_modules/src/operators/bufferCount.ts","../../../../node_modules/src/operators/bufferTime.ts","../../../../node_modules/src/operators/bufferToggle.ts","../../../../node_modules/src/operators/bufferWhen.ts","../../../../node_modules/src/operators/catchError.ts","../../../../node_modules/src/observable/ScalarObservable.ts","../../../../node_modules/src/observable/EmptyObservable.ts","../../../../node_modules/src/observable/ArrayObservable.ts","../../../../node_modules/src/operators/combineLatest.ts","../../../../node_modules/src/observable/PromiseObservable.ts","../../../../node_modules/src/observable/IteratorObservable.ts","../../../../node_modules/src/observable/ArrayLikeObservable.ts","../../../../node_modules/src/Notification.ts","../../../../node_modules/src/operators/observeOn.ts","../../../../node_modules/src/observable/FromObservable.ts","../../../../node_modules/src/operators/mergeMap.ts","../../../../node_modules/src/operators/count.ts","../../../../node_modules/src/operators/debounce.ts","../../../../node_modules/src/operators/debounceTime.ts","../../../../node_modules/src/operators/defaultIfEmpty.ts","../../../../node_modules/src/operators/delay.ts","../../../../node_modules/src/operators/delayWhen.ts","../../../../node_modules/src/operators/dematerialize.ts","../../../../node_modules/src/util/Set.ts","../../../../node_modules/src/operators/distinct.ts","../../../../node_modules/src/operators/distinctUntilChanged.ts","../../../../node_modules/src/util/ArgumentOutOfRangeError.ts","../../../../node_modules/src/operators/elementAt.ts","../../../../node_modules/src/operators/every.ts","../../../../node_modules/src/operators/exhaust.ts","../../../../node_modules/src/operators/exhaustMap.ts","../../../../node_modules/src/operators/expand.ts","../../../../node_modules/src/operators/filter.ts","../../../../node_modules/src/operators/finalize.ts","../../../../node_modules/src/operators/find.ts","../../../../node_modules/src/util/EmptyError.ts","../../../../node_modules/src/operators/first.ts","../../../../node_modules/src/util/ObjectUnsubscribedError.ts","../../../../node_modules/src/SubjectSubscription.ts","../../../../node_modules/src/Subject.ts","../../../../node_modules/src/util/MapPolyfill.ts","../../../../node_modules/src/util/Map.ts","../../../../node_modules/src/util/FastMap.ts","../../../../node_modules/src/operators/groupBy.ts","../../../../node_modules/src/operators/ignoreElements.ts","../../../../node_modules/src/operators/isEmpty.ts","../../../../node_modules/src/operators/last.ts","../../../../node_modules/src/operators/map.ts","../../../../node_modules/src/operators/mapTo.ts","../../../../node_modules/src/operators/materialize.ts","../../../../node_modules/src/operators/scan.ts","../../../../node_modules/src/operators/takeLast.ts","../../../../node_modules/src/operators/mergeMapTo.ts","../../../../node_modules/src/operators/mergeScan.ts","../../../../node_modules/src/operators/refCount.ts","../../../../node_modules/src/observable/ConnectableObservable.ts","../../../../node_modules/src/operators/onErrorResumeNext.ts","../../../../node_modules/src/operators/pairwise.ts","../../../../node_modules/src/BehaviorSubject.ts","../../../../node_modules/src/AsyncSubject.ts","../../../../node_modules/src/scheduler/QueueAction.ts","../../../../node_modules/src/scheduler/queue.ts","../../../../node_modules/src/scheduler/QueueScheduler.ts","../../../../node_modules/src/ReplaySubject.ts","../../../../node_modules/src/observable/race.ts","../../../../node_modules/src/operators/repeat.ts","../../../../node_modules/src/operators/repeatWhen.ts","../../../../node_modules/src/operators/retry.ts","../../../../node_modules/src/operators/retryWhen.ts","../../../../node_modules/src/operators/sample.ts","../../../../node_modules/src/operators/sampleTime.ts","../../../../node_modules/src/operators/sequenceEqual.ts","../../../../node_modules/src/operators/single.ts","../../../../node_modules/src/operators/skip.ts","../../../../node_modules/src/operators/skipLast.ts","../../../../node_modules/src/operators/skipUntil.ts","../../../../node_modules/src/operators/skipWhile.ts","../../../../node_modules/src/operators/switchMap.ts","../../../../node_modules/src/operators/switchMapTo.ts","../../../../node_modules/src/operators/take.ts","../../../../node_modules/src/operators/takeUntil.ts","../../../../node_modules/src/operators/takeWhile.ts","../../../../node_modules/src/operators/tap.ts","../../../../node_modules/src/operators/throttle.ts","../../../../node_modules/src/operators/throttleTime.ts","../../../../node_modules/src/operators/timeInterval.ts","../../../../node_modules/src/util/TimeoutError.ts","../../../../node_modules/src/operators/timeout.ts","../../../../node_modules/src/operators/timeoutWith.ts","../../../../node_modules/src/operators/window.ts","../../../../node_modules/src/operators/windowCount.ts","../../../../node_modules/src/operators/windowTime.ts","../../../../node_modules/src/operators/windowToggle.ts","../../../../node_modules/src/operators/windowWhen.ts","../../../../node_modules/src/operators/withLatestFrom.ts","../../../../node_modules/src/operators/zip.ts","../../../../node_modules/src/operators/index.ts","~/@alfresco/adf-content-services/content-node-selector/content-node-selector.component.ts","~/@alfresco/adf-content-services/document-list/components/content-action/content-action-list.component.ts","~/@alfresco/adf-content-services/document-list/components/node.event.ts","~/@alfresco/adf-content-services/document-list/components/document-list.component.ts","~/@alfresco/adf-content-services/document-list/data/share-datatable-adapter.ts","~/@alfresco/adf-content-services/document-list/models/content-action.model.ts","~/@alfresco/adf-content-services/document-list/services/document-list.service.ts","~/@alfresco/adf-content-services/document-list/models/preset.model.ts","~/@alfresco/adf-content-services/document-list/data/share-data-row.model.ts","~/@alfresco/adf-content-services/upload/upload.module.ts","~/@alfresco/adf-content-services/upload/directives/file-draggable.directive.ts","~/@alfresco/adf-content-services/upload/components/upload-drag-area.component.ts","~/@alfresco/adf-content-services/upload/components/file-uploading-list-row.component.ts","~/@alfresco/adf-content-services/document-list/models/permissions.model.ts","~/@alfresco/adf-content-services/upload/components/upload-button.component.ts","~/@alfresco/adf-content-services/upload/components/file-uploading-dialog.component.ts","~/@alfresco/adf-content-services/upload/components/file-uploading-list.component.ts","~/@alfresco/adf-content-services/webscript/webscript.module.ts","~/@alfresco/adf-content-services/webscript/webscript.component.ts","~/@alfresco/adf-content-services/tag/tag.module.ts","~/@alfresco/adf-content-services/tag/tag-node-list.component.ts","~/@alfresco/adf-content-services/tag/tag-list.component.ts","~/@alfresco/adf-content-services/tag/tag-actions.component.ts","~/@alfresco/adf-content-services/tag/services/tag.service.ts","~/@alfresco/adf-content-services/social/social.module.ts","~/@alfresco/adf-content-services/social/rating.component.ts","~/@alfresco/adf-content-services/social/like.component.ts","~/@alfresco/adf-content-services/social/services/rating.service.ts","~/@alfresco/adf-content-services/material.module.ts"],"sourcesContent":["/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// note: contains only limited subset of available fields\n\n\nimport { MinimalNodeEntity, MinimalNodeEntryEntity } from 'alfresco-js-api';\nexport class NodePaging {\n    list: NodePagingList;\n}\n\nfunction NodePaging_tsickle_Closure_declarations() {\n/** @type {?} */\nNodePaging.prototype.list;\n}\n\nexport class NodePagingList {\n    pagination: Pagination;\n    entries: NodeMinimalEntry[];\n}\n\nfunction NodePagingList_tsickle_Closure_declarations() {\n/** @type {?} */\nNodePagingList.prototype.pagination;\n/** @type {?} */\nNodePagingList.prototype.entries;\n}\n\nexport class NodeMinimalEntry implements MinimalNodeEntity {\n    entry: NodeMinimal;\n}\n\nfunction NodeMinimalEntry_tsickle_Closure_declarations() {\n/** @type {?} */\nNodeMinimalEntry.prototype.entry;\n}\n\nexport class Pagination {\n    count: number;\n    hasMoreItems: boolean;\n    totalItems: number;\n    skipCount: number;\n    maxItems: number;\n}\n\nfunction Pagination_tsickle_Closure_declarations() {\n/** @type {?} */\nPagination.prototype.count;\n/** @type {?} */\nPagination.prototype.hasMoreItems;\n/** @type {?} */\nPagination.prototype.totalItems;\n/** @type {?} */\nPagination.prototype.skipCount;\n/** @type {?} */\nPagination.prototype.maxItems;\n}\n\nexport class NodeMinimal implements MinimalNodeEntryEntity {\n    id: string;\n    parentId: string;\n    name: string;\n    nodeType: string;\n    isFolder: boolean;\n    isFile: boolean;\n    modifiedAt: Date;\n    modifiedByUser: UserInfo;\n    createdAt: Date;\n    createdByUser: UserInfo;\n    content: ContentInfo;\n    path: PathInfoEntity;\n    properties: NodeProperties = {};\n}\n\nfunction NodeMinimal_tsickle_Closure_declarations() {\n/** @type {?} */\nNodeMinimal.prototype.id;\n/** @type {?} */\nNodeMinimal.prototype.parentId;\n/** @type {?} */\nNodeMinimal.prototype.name;\n/** @type {?} */\nNodeMinimal.prototype.nodeType;\n/** @type {?} */\nNodeMinimal.prototype.isFolder;\n/** @type {?} */\nNodeMinimal.prototype.isFile;\n/** @type {?} */\nNodeMinimal.prototype.modifiedAt;\n/** @type {?} */\nNodeMinimal.prototype.modifiedByUser;\n/** @type {?} */\nNodeMinimal.prototype.createdAt;\n/** @type {?} */\nNodeMinimal.prototype.createdByUser;\n/** @type {?} */\nNodeMinimal.prototype.content;\n/** @type {?} */\nNodeMinimal.prototype.path;\n/** @type {?} */\nNodeMinimal.prototype.properties;\n}\n\nexport class UserInfo {\n    displayName: string;\n    id: string;\n}\n\nfunction UserInfo_tsickle_Closure_declarations() {\n/** @type {?} */\nUserInfo.prototype.displayName;\n/** @type {?} */\nUserInfo.prototype.id;\n}\n\nexport class ContentInfo {\n    mimeType: string;\n    mimeTypeName: string;\n    sizeInBytes: number;\n    encoding: string;\n}\n\nfunction ContentInfo_tsickle_Closure_declarations() {\n/** @type {?} */\nContentInfo.prototype.mimeType;\n/** @type {?} */\nContentInfo.prototype.mimeTypeName;\n/** @type {?} */\nContentInfo.prototype.sizeInBytes;\n/** @type {?} */\nContentInfo.prototype.encoding;\n}\n\nexport class PathInfoEntity {\n    elements: PathElementEntity[];\n    isComplete: boolean;\n    name: string;\n}\n\nfunction PathInfoEntity_tsickle_Closure_declarations() {\n/** @type {?} */\nPathInfoEntity.prototype.elements;\n/** @type {?} */\nPathInfoEntity.prototype.isComplete;\n/** @type {?} */\nPathInfoEntity.prototype.name;\n}\n\nexport class PathElementEntity {\n    id: string;\n    name: string;\n}\n\nfunction PathElementEntity_tsickle_Closure_declarations() {\n/** @type {?} */\nPathElementEntity.prototype.id;\n/** @type {?} */\nPathElementEntity.prototype.name;\n}\n\n\nexport interface NodeProperties {\n    [key: string]: any;\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { PermissionsEnum } from '@alfresco/adf-core';\nexport class PermissionStyleModel {\n    css: string;\n    permission: PermissionsEnum;\n    isFolder: boolean = true;\n    isFile: boolean = true;\n/**\n * @param {?} css\n * @param {?} permission\n * @param {?=} isFile\n * @param {?=} isFolder\n */\nconstructor(css: string, permission: PermissionsEnum, isFile: boolean = true, isFolder: boolean = true) {\n        this.css = css;\n        this.permission = permission;\n        this.isFile = isFile;\n        this.isFolder = isFolder;\n    }\n}\n\nfunction PermissionStyleModel_tsickle_Closure_declarations() {\n/** @type {?} */\nPermissionStyleModel.prototype.css;\n/** @type {?} */\nPermissionStyleModel.prototype.permission;\n/** @type {?} */\nPermissionStyleModel.prototype.isFolder;\n/** @type {?} */\nPermissionStyleModel.prototype.isFile;\n}\n\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { CoreModule, TRANSLATION_PROVIDER } from '@alfresco/adf-core';\n\nimport { MaterialModule } from './material.module';\n\nimport { SocialModule } from './social/social.module';\nimport { TagModule } from './tag/tag.module';\nimport { WebScriptModule } from './webscript/webscript.module';\nimport { DocumentListModule } from './document-list/document-list.module';\nimport { UploadModule } from './upload/upload.module';\nimport { SearchModule } from './search/search.module';\nimport { SitesDropdownModule } from './site-dropdown/sites-dropdown.module';\nimport { BreadcrumbModule } from './breadcrumb/breadcrumb.module';\nimport { VersionManagerModule } from './version-manager/version-manager.module';\nimport { ContentNodeSelectorModule } from './content-node-selector/content-node-selector.module';\nimport { DialogModule } from './dialogs/dialog.module';\nimport { FolderDirectiveModule } from './folder-directive/folder-directive.module';\nimport { ContentMetadataModule } from './content-metadata/content-metadata.module';\nexport class ContentModule {\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [\n        CoreModule,\n        SocialModule,\n        TagModule,\n        CommonModule,\n        WebScriptModule,\n        FormsModule,\n        ReactiveFormsModule,\n        SearchModule,\n        BrowserAnimationsModule,\n        DocumentListModule,\n        UploadModule,\n        MaterialModule,\n        SitesDropdownModule,\n        BreadcrumbModule,\n        VersionManagerModule,\n        ContentNodeSelectorModule,\n        ContentMetadataModule,\n        DialogModule,\n        FolderDirectiveModule\n    ],\n    providers: [\n        {\n            provide: TRANSLATION_PROVIDER,\n            multi: true,\n            useValue: {\n                name: 'adf-content-services',\n                source: 'assets/adf-content-services'\n            }\n        }\n    ],\n    exports: [\n        CoreModule,\n        SocialModule,\n        TagModule,\n        WebScriptModule,\n        DocumentListModule,\n        UploadModule,\n        SearchModule,\n        SitesDropdownModule,\n        BreadcrumbModule,\n        VersionManagerModule,\n        ContentNodeSelectorModule,\n        ContentMetadataModule,\n        DialogModule,\n        FolderDirectiveModule,\n        MaterialModule\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ContentModule_tsickle_Closure_declarations() {\n/** @type {?} */\nContentModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nContentModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { CommonModule } from '@angular/common';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { NgModule } from '@angular/core';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { MaterialModule } from '../material.module';\nimport { CardViewModule } from '@alfresco/adf-core';\n\nimport { ContentMetadataComponent } from './content-metadata.component';\nimport { ContentMetadataCardComponent } from './content-metadata-card.component';\nexport class ContentMetadataModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [\n        CommonModule,\n        MaterialModule,\n        TranslateModule,\n        FlexLayoutModule,\n        CardViewModule\n    ],\n    exports: [\n        ContentMetadataComponent,\n        ContentMetadataCardComponent\n    ],\n    declarations: [\n        ContentMetadataComponent,\n        ContentMetadataCardComponent\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ContentMetadataModule_tsickle_Closure_declarations() {\n/** @type {?} */\nContentMetadataModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nContentMetadataModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { Component, Input, ViewEncapsulation } from '@angular/core';\nimport { MinimalNodeEntryEntity } from 'alfresco-js-api';\n\nconst /** @type {?} */ PROPERTY_COUNTER_WHILE_COLLAPSED = 5;\nexport class ContentMetadataCardComponent {\n    \n    node: MinimalNodeEntryEntity;\n\n    editable: boolean = false;\n    expanded: boolean = false;\n/**\n * @return {?}\n */\ntoggleEdit(): void {\n        this.editable = !this.editable;\n    }\n/**\n * @return {?}\n */\ntoggleExpanded(): void {\n        this.expanded = !this.expanded;\n    }\n/**\n * @return {?}\n */\nget maxPropertiesToShow(): number {\n        return this.expanded ? Infinity : PROPERTY_COUNTER_WHILE_COLLAPSED;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'adf-content-metadata-card',\n    template: `\n      <mat-card *ngIf=\"node\">\n          <mat-card-content>\n              <adf-content-metadata [node]=\"node\" [editable]=\"editable\" [maxPropertiesToShow]=\"maxPropertiesToShow\"></adf-content-metadata>\n          </mat-card-content>\n          <mat-card-footer class=\"adf-viewer-default-sidebar-card-footer\" fxLayout=\"row\" fxLayoutAlign=\"space-between stretch\">\n              <div>\n                  <button mat-icon-button>\n                      <mat-icon>star_border</mat-icon>\n                  </button>\n                  <button mat-icon-button (click)=\"toggleEdit()\">\n                      <mat-icon>mode_edit</mat-icon>\n                  </button>\n              </div>\n              <button mat-button (click)=\"toggleExpanded()\">\n                  <ng-container *ngIf=\"!expanded\">\n                      <span>{{ 'ADF_VIEWER.SIDEBAR.METADATA.MORE_INFORMATION' | translate }}</span>\n                      <mat-icon>keyboard_arrow_down</mat-icon>\n                  </ng-container>\n                  <ng-container *ngIf=\"expanded\">\n                      <span>{{ 'ADF_VIEWER.SIDEBAR.METADATA.LESS_INFORMATION' | translate }}</span>\n                      <mat-icon>keyboard_arrow_up</mat-icon>\n                  </ng-container>\n              </button>\n          </mat-card-footer>\n      </mat-card>\n    `,\n    styles: [`\n\n    `],\n    encapsulation: ViewEncapsulation.None,\n    host: { 'class': 'adf-viewer-default-sidebar' }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'node': [{ type: Input },],\n};\n}\n\nfunction ContentMetadataCardComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nContentMetadataCardComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nContentMetadataCardComponent.ctorParameters;\n/** @type {?} */\nContentMetadataCardComponent.propDecorators;\n/** @type {?} */\nContentMetadataCardComponent.prototype.node;\n/** @type {?} */\nContentMetadataCardComponent.prototype.editable;\n/** @type {?} */\nContentMetadataCardComponent.prototype.expanded;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { ChangeDetectionStrategy, Component, Input, OnChanges, OnInit, ViewEncapsulation } from '@angular/core';\nimport { MinimalNodeEntryEntity } from 'alfresco-js-api';\nimport { Observable } from 'rxjs/Observable';\nimport { CardViewItem, CardViewUpdateService, FileSizePipe, NodesApiService } from '@alfresco/adf-core';\nimport { ContentMetadataService } from './content-metadata.service';\nexport class ContentMetadataComponent implements OnChanges, OnInit {\n\n    \n    node: MinimalNodeEntryEntity;\n\n    \n    editable: boolean = false;\n\n    \n    maxPropertiesToShow: number = Infinity;\n\n    properties: CardViewItem[] = [];\n/**\n * @param {?} contentMetadataService\n * @param {?} cardViewUpdateService\n * @param {?} nodesApi\n */\nconstructor(private contentMetadataService: ContentMetadataService,\nprivate cardViewUpdateService: CardViewUpdateService,\nprivate nodesApi: NodesApiService) {}\n/**\n * @return {?}\n */\nngOnInit(): void {\n        this.cardViewUpdateService.itemUpdated$\n            .switchMap(this.saveNode.bind(this))\n            .subscribe(\n                node => this.node = node,\n                error => this.handleError(error)\n            );\n    }\n/**\n * @return {?}\n */\nngOnChanges(): void {\n        this.recalculateProperties();\n    }\n/**\n * @param {?} __0\n * @return {?}\n */\nprivate saveNode({ changed: nodeBody }): Observable<MinimalNodeEntryEntity> {\n        return this.nodesApi.updateNode(this.node.id, nodeBody);\n    }\n/**\n * @param {?} error\n * @return {?}\n */\nprivate handleError(error): void {\n        /*tslint:disable-next-line*/\n        console.log(error);\n    }\n/**\n * @return {?}\n */\nprivate recalculateProperties(): void {\n        let /** @type {?} */ basicProperties = this.contentMetadataService.getBasicProperties(this.node);\n\n        if (this.maxPropertiesToShow) {\n            basicProperties = basicProperties.slice(0, this.maxPropertiesToShow);\n        }\n\n        this.properties = [...basicProperties];\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'adf-content-metadata',\n    template: `\n      <div class=\"adf-metadata-properties\">\n          <adf-card-view [properties]=\"properties\" [editable]=\"editable\"></adf-card-view>\n      </div>\n    `,\n    styles: [`\n\n    `],\n    host: { 'class': 'adf-content-metadata' },\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    providers: [ CardViewUpdateService ],\n    viewProviders: [ ContentMetadataService, FileSizePipe ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ContentMetadataService, },\n{type: CardViewUpdateService, },\n{type: NodesApiService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'node': [{ type: Input },],\n'editable': [{ type: Input },],\n'maxPropertiesToShow': [{ type: Input },],\n};\n}\n\nfunction ContentMetadataComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nContentMetadataComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nContentMetadataComponent.ctorParameters;\n/** @type {?} */\nContentMetadataComponent.propDecorators;\n/** @type {?} */\nContentMetadataComponent.prototype.node;\n/** @type {?} */\nContentMetadataComponent.prototype.editable;\n/** @type {?} */\nContentMetadataComponent.prototype.maxPropertiesToShow;\n/** @type {?} */\nContentMetadataComponent.prototype.properties;\n/** @type {?} */\nContentMetadataComponent.prototype.contentMetadataService;\n/** @type {?} */\nContentMetadataComponent.prototype.cardViewUpdateService;\n/** @type {?} */\nContentMetadataComponent.prototype.nodesApi;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { Injectable } from '@angular/core';\nimport { MinimalNodeEntryEntity } from 'alfresco-js-api';\nimport { CardViewDateItemModel, CardViewTextItemModel, FileSizePipe } from '@alfresco/adf-core';\nexport class ContentMetadataService {\n/**\n * @param {?} fileSizePipe\n */\nconstructor(private fileSizePipe: FileSizePipe) {}\n/**\n * @param {?} node\n * @return {?}\n */\ngetBasicProperties(node: MinimalNodeEntryEntity) {\n        return [\n            new CardViewTextItemModel({\n                label: 'CORE.METADATA.BASIC.NAME',\n                value: node.name,\n                key: 'name',\n                editable: true\n            }),\n            new CardViewTextItemModel({\n                label: 'CORE.METADATA.BASIC.TITLE',\n                value: node.properties['cm:title'],\n                key: 'properties.cm:title',\n                editable: true\n            }),\n            new CardViewTextItemModel({\n                label: 'CORE.METADATA.BASIC.CREATOR',\n                value: node.createdByUser.displayName,\n                key: 'createdByUser.displayName',\n                editable: false\n            }),\n            new CardViewDateItemModel({\n                label: 'CORE.METADATA.BASIC.CREATED_DATE',\n                value: node.createdAt,\n                key: 'createdAt',\n                editable: false\n            }),\n            new CardViewTextItemModel({\n                label: 'CORE.METADATA.BASIC.SIZE',\n                value: node.content.sizeInBytes,\n                key: 'content.sizeInBytes',\n                pipes: [{ pipe: this.fileSizePipe }],\n                editable: false\n            }),\n            new CardViewTextItemModel({\n                label: 'CORE.METADATA.BASIC.MODIFIER',\n                value: node.modifiedByUser.displayName,\n                key: 'modifiedByUser.displayName',\n                editable: false\n            }),\n            new CardViewDateItemModel({\n                label: 'CORE.METADATA.BASIC.MODIFIED_DATE',\n                value: node.modifiedAt,\n                key: 'modifiedAt',\n                editable: false\n            }),\n            new CardViewTextItemModel({\n                label: 'CORE.METADATA.BASIC.MIMETYPE',\n                value: node.content.mimeTypeName,\n                key: 'content.mimeTypeName',\n                editable: false\n            }),\n            new CardViewTextItemModel({\n                label: 'CORE.METADATA.BASIC.AUTHOR',\n                value: node.properties['cm:author'],\n                key: 'properties.cm:author',\n                editable: true\n            }),\n            new CardViewTextItemModel({\n                label: 'CORE.METADATA.BASIC.DESCRIPTION',\n                value: node.properties['cm:description'],\n                key: 'properties.cm:description',\n                multiline: true,\n                editable: true\n            })\n        ];\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: FileSizePipe, },\n];\n}\n\nfunction ContentMetadataService_tsickle_Closure_declarations() {\n/** @type {?} */\nContentMetadataService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nContentMetadataService.ctorParameters;\n/** @type {?} */\nContentMetadataService.prototype.fileSizePipe;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MaterialModule } from '../material.module';\n\nimport { FolderCreateDirective } from './folder-create.directive';\nimport { FolderEditDirective } from './folder-edit.directive';\nexport class FolderDirectiveModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [\n        CommonModule,\n        MaterialModule\n    ],\n    declarations: [\n        FolderCreateDirective,\n        FolderEditDirective\n    ],\n    exports: [\n        FolderCreateDirective,\n        FolderEditDirective\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction FolderDirectiveModule_tsickle_Closure_declarations() {\n/** @type {?} */\nFolderDirectiveModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFolderDirectiveModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { Directive, ElementRef, HostListener, Input } from '@angular/core';\nimport { MatDialog, MatDialogConfig } from '@angular/material';\n\nimport { MinimalNodeEntryEntity } from 'alfresco-js-api';\n\nimport { FolderDialogComponent } from '../dialogs/folder.dialog';\nimport { ContentService } from '@alfresco/adf-core';\nexport class FolderEditDirective {\n    static DIALOG_WIDTH: number = 400;\n\n    \n    folder: MinimalNodeEntryEntity;\n/**\n * @param {?} event\n * @return {?}\n */\nonClick(event) {\n        event.preventDefault();\n        if (this.folder) {\n            this.openDialog();\n        }\n    }\n/**\n * @param {?} dialogRef\n * @param {?} elementRef\n * @param {?} content\n */\nconstructor(\npublic dialogRef: MatDialog,\npublic elementRef: ElementRef,\npublic content: ContentService\n    ) {}\n/**\n * @return {?}\n */\nprivate get dialogConfig(): MatDialogConfig {\n        const { DIALOG_WIDTH: width } = FolderEditDirective;\n        const { folder } = this;\n\n        return {\n            data: { folder },\n            width: `${width}px`\n        };\n    }\n/**\n * @return {?}\n */\nprivate openDialog(): void {\n        const { dialogRef, dialogConfig, content } = this;\n        const /** @type {?} */ dialogInstance = dialogRef.open(FolderDialogComponent, dialogConfig);\n\n        dialogInstance.afterClosed().subscribe((node: MinimalNodeEntryEntity) => {\n            if (node) {\n                content.folderEdit.next(node);\n            }\n        });\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: '[adf-edit-folder]'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MatDialog, },\n{type: ElementRef, },\n{type: ContentService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'folder': [{ type: Input, args: ['adf-edit-folder', ] },],\n'onClick': [{ type: HostListener, args: ['click', [ '$event' ], ] },],\n};\n}\n\nfunction FolderEditDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nFolderEditDirective.DIALOG_WIDTH;\n/** @type {?} */\nFolderEditDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFolderEditDirective.ctorParameters;\n/** @type {?} */\nFolderEditDirective.propDecorators;\n/** @type {?} */\nFolderEditDirective.prototype.folder;\n/** @type {?} */\nFolderEditDirective.prototype.dialogRef;\n/** @type {?} */\nFolderEditDirective.prototype.elementRef;\n/** @type {?} */\nFolderEditDirective.prototype.content;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { Directive, HostListener, Input } from '@angular/core';\nimport { MatDialog, MatDialogConfig } from '@angular/material';\nimport { MinimalNodeEntryEntity } from 'alfresco-js-api';\nimport { FolderDialogComponent } from '../dialogs/folder.dialog';\nimport { ContentService } from '@alfresco/adf-core';\n\nconst /** @type {?} */ DEFAULT_FOLDER_PARENT_ID = '-my-';\nexport class FolderCreateDirective {\n    static DIALOG_WIDTH: number = 400;\n\n    \n    parentNodeId: string = DEFAULT_FOLDER_PARENT_ID;\n/**\n * @param {?} event\n * @return {?}\n */\nonClick(event) {\n        event.preventDefault();\n        this.openDialog();\n    }\n/**\n * @param {?} dialogRef\n * @param {?} content\n */\nconstructor(\npublic dialogRef: MatDialog,\npublic content: ContentService\n    ) {}\n/**\n * @return {?}\n */\nprivate get dialogConfig(): MatDialogConfig {\n        const { DIALOG_WIDTH: width } = FolderCreateDirective;\n        const { parentNodeId } = this;\n\n        return {\n            data: { parentNodeId },\n            width: `${width}px`\n        };\n    }\n/**\n * @return {?}\n */\nprivate openDialog(): void {\n        const { dialogRef, dialogConfig, content } = this;\n        const /** @type {?} */ dialogInstance = dialogRef.open(FolderDialogComponent, dialogConfig);\n\n        dialogInstance.afterClosed().subscribe((node: MinimalNodeEntryEntity) => {\n            if (node) {\n                content.folderCreate.next(node);\n            }\n        });\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: '[adf-create-folder]'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MatDialog, },\n{type: ContentService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'parentNodeId': [{ type: Input, args: ['adf-create-folder', ] },],\n'onClick': [{ type: HostListener, args: ['click', [ '$event' ], ] },],\n};\n}\n\nfunction FolderCreateDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nFolderCreateDirective.DIALOG_WIDTH;\n/** @type {?} */\nFolderCreateDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFolderCreateDirective.ctorParameters;\n/** @type {?} */\nFolderCreateDirective.propDecorators;\n/** @type {?} */\nFolderCreateDirective.prototype.parentNodeId;\n/** @type {?} */\nFolderCreateDirective.prototype.dialogRef;\n/** @type {?} */\nFolderCreateDirective.prototype.content;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MaterialModule } from '../material.module';\n\nimport { DownloadZipDialogComponent } from './download-zip.dialog';\nimport { FolderDialogComponent } from './folder.dialog';\n\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { NodesApiService, NotificationService, TranslationService } from '@alfresco/adf-core';\nexport class DialogModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [\n        CommonModule,\n        MaterialModule,\n        TranslateModule,\n        FormsModule,\n        ReactiveFormsModule\n    ],\n    declarations: [\n        DownloadZipDialogComponent,\n        FolderDialogComponent\n    ],\n    providers: [\n        NodesApiService,\n        NotificationService,\n        TranslationService\n    ],\n    exports: [\n        DownloadZipDialogComponent,\n        FolderDialogComponent\n    ],\n    entryComponents: [\n        DownloadZipDialogComponent,\n        FolderDialogComponent\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction DialogModule_tsickle_Closure_declarations() {\n/** @type {?} */\nDialogModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDialogModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { FormControl } from '@angular/forms';\n\nconst /** @type {?} */ I18N_ERRORS_PATH = 'CORE.FOLDER_DIALOG.FOLDER_NAME.ERRORS';\n/**\n * @param {?} __0\n * @return {?}\n */\nexport function forbidSpecialCharacters({ value }: FormControl) {\n    const /** @type {?} */ specialCharacters: RegExp = /([\\*\\\"\\<\\>\\\\\\/\\?\\:\\|])/;\n    const /** @type {?} */ isValid: boolean = !specialCharacters.test(value);\n\n    return (isValid) ? null : {\n        message: `${I18N_ERRORS_PATH}.SPECIAL_CHARACTERS`\n    };\n}\n/**\n * @param {?} __0\n * @return {?}\n */\nexport function forbidEndingDot({ value }: FormControl) {\n    const /** @type {?} */ isValid: boolean = ((value || '').trim().split('').pop() !== '.');\n\n    return isValid ? null : {\n        message: `${I18N_ERRORS_PATH}.ENDING_DOT`\n    };\n}\n/**\n * @param {?} __0\n * @return {?}\n */\nexport function forbidOnlySpaces({ value }: FormControl) {\n    const /** @type {?} */ isValid: boolean = !!((value || '')).trim();\n\n    return isValid ? null : {\n        message: `${I18N_ERRORS_PATH}.ONLY_SPACES`\n    };\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { Observable } from 'rxjs/Observable';\n\nimport { Component, Inject, OnInit, Optional } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material';\n\nimport { MinimalNodeEntryEntity } from 'alfresco-js-api';\nimport { NodesApiService, NotificationService, TranslationService } from '@alfresco/adf-core';\n\nimport { forbidEndingDot, forbidOnlySpaces, forbidSpecialCharacters } from './folder-name.validators';\nexport class FolderDialogComponent implements OnInit {\n    form: FormGroup;\n    folder: MinimalNodeEntryEntity = null;\n/**\n * @param {?} formBuilder\n * @param {?} dialog\n * @param {?} nodesApi\n * @param {?} translation\n * @param {?} notification\n * @param {?} data\n */\nconstructor(\nprivate formBuilder: FormBuilder,\nprivate dialog: MatDialogRef<FolderDialogComponent>,\nprivate nodesApi: NodesApiService,\nprivate translation: TranslationService,\nprivate notification: NotificationService,\npublic data: any\n    ) {}\n/**\n * @return {?}\n */\nget editing(): boolean {\n        return !!this.data.folder;\n    }\n/**\n * @return {?}\n */\nngOnInit() {\n        const { folder } = this.data;\n        let /** @type {?} */ name = '';\n        let /** @type {?} */ description = '';\n\n        if (folder) {\n            const { properties } = folder;\n\n            name = folder.name || '';\n            description = properties ? properties['cm:description'] : '';\n        }\n\n        const /** @type {?} */ validators = {\n            name: [\n                Validators.required,\n                forbidSpecialCharacters,\n                forbidEndingDot,\n                forbidOnlySpaces\n            ]\n        };\n\n        this.form = this.formBuilder.group({\n            name: [ name, validators.name ],\n            description: [ description ]\n        });\n    }\n/**\n * @return {?}\n */\nget name(): string {\n        let { name } = this.form.value;\n\n        return (name || '').trim();\n    }\n/**\n * @return {?}\n */\nget description(): string {\n        let { description } = this.form.value;\n\n        return (description || '').trim();\n    }\n/**\n * @return {?}\n */\nprivate get properties(): any {\n        const { name: title, description } = this;\n\n        return {\n            'cm:title': title,\n            'cm:description': description\n        };\n    }\n/**\n * @return {?}\n */\nprivate create(): Observable<MinimalNodeEntryEntity> {\n        const { name, properties, nodesApi, data: { parentNodeId} } = this;\n        return nodesApi.createFolder(parentNodeId, { name, properties });\n    }\n/**\n * @return {?}\n */\nprivate edit(): Observable<MinimalNodeEntryEntity> {\n        const { name, properties, nodesApi, data: { folder: { id: nodeId }} } = this;\n        return nodesApi.updateNode(nodeId, { name, properties });\n    }\n/**\n * @return {?}\n */\nsubmit() {\n        const { form, dialog, editing } = this;\n\n        if (!form.valid) { return; }\n\n        (editing ? this.edit() : this.create())\n            .subscribe(\n                (folder: MinimalNodeEntryEntity) => dialog.close(folder),\n                (error) => this.handleError(error)\n            );\n    }\n/**\n * @param {?} error\n * @return {?}\n */\nhandleError(error: any): any {\n        let /** @type {?} */ i18nMessageString = 'CORE.MESSAGES.ERRORS.GENERIC';\n\n        try {\n            const { error: { statusCode } } = JSON.parse(error.message);\n\n            if (statusCode === 409) {\n                i18nMessageString = 'CORE.MESSAGES.ERRORS.EXISTENT_FOLDER';\n            }\n        } catch ( /** @type {?} */err) { /* Do nothing, keep the original message */ }\n\n        this.translation.get(i18nMessageString).subscribe(message => {\n            this.notification.openSnackMessage(message, 3000);\n        });\n\n        return error;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'adf-folder-dialog',\n    styles: [`\n      .adf-fill-remaining-space {\n        -webkit-box-flex: 1;\n            -ms-flex: 1 1 auto;\n                flex: 1 1 auto; }\n\n      .adf-full-width {\n        width: 100%; }\n    `],\n    template: `\n      <h2 mat-dialog-title>\n          {{\n          (editing\n          ? 'CORE.FOLDER_DIALOG.EDIT_FOLDER_TITLE'\n          : 'CORE.FOLDER_DIALOG.CREATE_FOLDER_TITLE'\n          ) | translate\n          }}\n      </h2>\n\n      <mat-dialog-content>\n          <form [formGroup]=\"form\" (submit)=\"submit()\">\n              <mat-input-container class=\"adf-full-width\">\n                  <input\n                      placeholder=\"{{ 'CORE.FOLDER_DIALOG.FOLDER_NAME.LABEL' | translate }}\"\n                      matInput\n                      required\n                      [formControl]=\"form.controls['name']\"\n                  />\n\n                  <mat-hint *ngIf=\"form.controls['name'].dirty\">\n                      <span *ngIf=\"form.controls['name'].errors?.required\">\n                          {{ 'CORE.FOLDER_DIALOG.FOLDER_NAME.ERRORS.REQUIRED' | translate }}\n                      </span>\n\n                      <span *ngIf=\"!form.controls['name'].errors?.required && form.controls['name'].errors?.message\">\n                          {{ form.controls['name'].errors?.message | translate }}\n                      </span>\n                  </mat-hint>\n              </mat-input-container>\n\n              <br />\n              <br />\n\n              <mat-input-container class=\"adf-full-width\">\n                  <textarea\n                      matInput\n                      placeholder=\"{{ 'CORE.FOLDER_DIALOG.FOLDER_DESCRIPTION.LABEL' | translate }}\"\n                      rows=\"4\"\n                      [formControl]=\"form.controls['description']\"></textarea>\n              </mat-input-container>\n          </form>\n      </mat-dialog-content>\n\n      <mat-dialog-actions class=\"adf-dialog-buttons\">\n          <span class=\"adf-fill-remaining-space\"></span>\n\n          <button\n              mat-button\n              mat-dialog-close>\n              {{ 'CORE.FOLDER_DIALOG.CANCEL_BUTTON.LABEL' | translate }}\n          </button>\n\n          <button class=\"adf-dialog-action-button\"\n                  mat-button\n                  (click)=\"submit()\"\n                  [disabled]=\"!form.valid\">\n              {{\n              (editing\n              ? 'CORE.FOLDER_DIALOG.UPDATE_BUTTON.LABEL'\n              : 'CORE.FOLDER_DIALOG.CREATE_BUTTON.LABEL'\n              ) | translate\n              }}\n          </button>\n      </mat-dialog-actions>\n    `\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: FormBuilder, },\n{type: MatDialogRef, },\n{type: NodesApiService, },\n{type: TranslationService, },\n{type: NotificationService, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DIALOG_DATA, ] }, ]},\n];\n}\n\nfunction FolderDialogComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nFolderDialogComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFolderDialogComponent.ctorParameters;\n/** @type {?} */\nFolderDialogComponent.prototype.form;\n/** @type {?} */\nFolderDialogComponent.prototype.folder;\n/** @type {?} */\nFolderDialogComponent.prototype.formBuilder;\n/** @type {?} */\nFolderDialogComponent.prototype.dialog;\n/** @type {?} */\nFolderDialogComponent.prototype.nodesApi;\n/** @type {?} */\nFolderDialogComponent.prototype.translation;\n/** @type {?} */\nFolderDialogComponent.prototype.notification;\n/** @type {?} */\nFolderDialogComponent.prototype.data;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { Component, Inject, OnInit, ViewEncapsulation } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material';\nimport { DownloadEntry, MinimalNodeEntity } from 'alfresco-js-api';\nimport { LogService, AlfrescoApiService } from '@alfresco/adf-core';\nexport class DownloadZipDialogComponent implements OnInit {\nprivate cancelled = false;\n/**\n * @param {?} apiService\n * @param {?} dialogRef\n * @param {?} data\n * @param {?} logService\n */\nconstructor(private apiService: AlfrescoApiService,\nprivate dialogRef: MatDialogRef<DownloadZipDialogComponent>,\nprivate data: { nodeIds?: string[] },\nprivate logService: LogService) {\n    }\n/**\n * @return {?}\n */\nprivate get downloadsApi() {\n        return this.apiService.getInstance().core.downloadsApi;\n    }\n/**\n * @return {?}\n */\nprivate get nodesApi() {\n        return this.apiService.getInstance().core.nodesApi;\n    }\n/**\n * @return {?}\n */\nprivate get contentApi() {\n        return this.apiService.getInstance().content;\n    }\n/**\n * @return {?}\n */\nngOnInit() {\n        if (this.data && this.data.nodeIds && this.data.nodeIds.length > 0) {\n            // change timeout to have a delay for demo purposes\n            setTimeout(() => {\n                if (!this.cancelled) {\n                    this.downloadZip(this.data.nodeIds);\n                } else {\n                    this.logService.log('Cancelled');\n                }\n            }, 0);\n        }\n    }\n/**\n * @return {?}\n */\ncancelDownload() {\n        this.cancelled = true;\n        this.dialogRef.close(false);\n    }\n/**\n * @param {?} nodeIds\n * @return {?}\n */\ndownloadZip(nodeIds: string[]) {\n        if (nodeIds && nodeIds.length > 0) {\n\n            const /** @type {?} */ promise: any = this.downloadsApi.createDownload({ nodeIds });\n\n            promise.on('progress', progress => this.logService.log('Progress', progress));\n            promise.on('error', error => this.logService.error('Error', error));\n            promise.on('abort', data => this.logService.log('Abort', data));\n\n            promise.on('success', (data: DownloadEntry) => {\n                if (data && data.entry && data.entry.id) {\n                    const /** @type {?} */ url = this.contentApi.getContentUrl(data.entry.id, true);\n                    // the call is needed only to get the name of the package\n                    this.nodesApi.getNode(data.entry.id).then((downloadNode: MinimalNodeEntity) => {\n                        this.logService.log(downloadNode);\n                        const /** @type {?} */ fileName = downloadNode.entry.name;\n                        this.waitAndDownload(data.entry.id, url, fileName);\n                    });\n                }\n            });\n        }\n    }\n/**\n * @param {?} downloadId\n * @param {?} url\n * @param {?} fileName\n * @return {?}\n */\nwaitAndDownload(downloadId: string, url: string, fileName: string) {\n        if (this.cancelled) {\n            return;\n        }\n\n        this.downloadsApi.getDownload(downloadId).then((d: DownloadEntry) => {\n            if (d.entry) {\n                if (d.entry.status === 'DONE') {\n                    this.download(url, fileName);\n                } else {\n                    setTimeout(() => {\n                        this.waitAndDownload(downloadId, url, fileName);\n                    }, 1000);\n                }\n            }\n        });\n    }\n/**\n * @param {?} url\n * @param {?} fileName\n * @return {?}\n */\ndownload(url: string, fileName: string) {\n        if (url && fileName) {\n            const /** @type {?} */ link = document.createElement('a');\n\n            link.style.display = 'none';\n            link.download = fileName;\n            link.href = url;\n\n            document.body.appendChild(link);\n            link.click();\n            document.body.removeChild(link);\n        }\n        this.dialogRef.close(true);\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'adf-download-zip-dialog',\n    template: `\n      <h1 matDialogTitle>{{ 'CORE.DIALOG.DOWNLOAD_ZIP.TITLE' | translate }}</h1>\n      <div mat-dialog-content>\n          <mat-progress-bar color=\"primary\" mode=\"indeterminate\"></mat-progress-bar>\n      </div>\n      <div mat-dialog-actions>\n          <span class=\"spacer\"></span>\n          <button mat-button color=\"primary\" (click)=\"cancelDownload()\">\n              {{ 'CORE.DIALOG.DOWNLOAD_ZIP.ACTIONS.CANCEL' | translate }}\n          </button>\n      </div>\n    `,\n    styles: [`\n      .spacer {\n        -webkit-box-flex: 1;\n            -ms-flex: 1 1 auto;\n                flex: 1 1 auto; }\n\n      .adf-download-zip-dialog .mat-dialog-actions .mat-button-wrapper {\n        text-transform: uppercase; }\n    `],\n    host: { 'class': 'adf-download-zip-dialog' },\n    encapsulation: ViewEncapsulation.None\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: AlfrescoApiService, },\n{type: MatDialogRef, },\n{type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_DATA, ] }, ]},\n{type: LogService, },\n];\n}\n\nfunction DownloadZipDialogComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nDownloadZipDialogComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDownloadZipDialogComponent.ctorParameters;\n/** @type {?} */\nDownloadZipDialogComponent.prototype.cancelled;\n/** @type {?} */\nDownloadZipDialogComponent.prototype.apiService;\n/** @type {?} */\nDownloadZipDialogComponent.prototype.dialogRef;\n/** @type {?} */\nDownloadZipDialogComponent.prototype.data;\n/** @type {?} */\nDownloadZipDialogComponent.prototype.logService;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MaterialModule } from '../material.module';\nimport { TranslateModule } from '@ngx-translate/core';\n\nimport { ContentNodeSelectorComponent } from './content-node-selector.component';\nimport { ContentNodeSelectorService } from './content-node-selector.service';\nimport { SitesDropdownModule } from '../site-dropdown/sites-dropdown.module';\nimport { BreadcrumbModule } from '../breadcrumb/breadcrumb.module';\nimport { PaginationModule, ToolbarModule, DirectiveModule } from '@alfresco/adf-core';\nimport { DocumentListModule } from '../document-list/document-list.module';\nexport class ContentNodeSelectorModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [\n        FormsModule,\n        ReactiveFormsModule,\n        DirectiveModule,\n        CommonModule,\n        MaterialModule,\n        TranslateModule,\n        SitesDropdownModule,\n        BreadcrumbModule,\n        ToolbarModule,\n        DocumentListModule,\n        PaginationModule\n    ],\n    exports: [\n        ContentNodeSelectorComponent\n    ],\n    entryComponents: [\n        ContentNodeSelectorComponent\n    ],\n    declarations: [\n        ContentNodeSelectorComponent\n    ],\n    providers: [\n        ContentNodeSelectorService\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ContentNodeSelectorModule_tsickle_Closure_declarations() {\n/** @type {?} */\nContentNodeSelectorModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nContentNodeSelectorModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MaterialModule } from '../material.module';\nimport { TranslateModule } from '@ngx-translate/core';\n\nimport { VersionUploadComponent } from './version-upload.component';\nimport { VersionManagerComponent } from './version-manager.component';\nimport { VersionListComponent } from './version-list.component';\nimport { UploadModule } from '../upload/upload.module';\nexport class VersionManagerModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [\n        CommonModule,\n        MaterialModule,\n        TranslateModule,\n        UploadModule\n    ],\n    exports: [\n        VersionUploadComponent,\n        VersionManagerComponent,\n        VersionListComponent\n    ],\n    declarations: [\n        VersionUploadComponent,\n        VersionManagerComponent,\n        VersionListComponent\n    ],\n    providers: []\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction VersionManagerModule_tsickle_Closure_declarations() {\n/** @type {?} */\nVersionManagerModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nVersionManagerModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { AlfrescoApiService } from '@alfresco/adf-core';\nimport { Component, Input, OnChanges, ViewEncapsulation } from '@angular/core';\nimport { VersionsApi } from 'alfresco-js-api';\nexport class VersionListComponent implements OnChanges {\nprivate versionsApi: VersionsApi;\n    versions: any = [];\n    isLoading: boolean = true;\n\n    \n    id: string;\n/**\n * @param {?} alfrescoApi\n */\nconstructor(private alfrescoApi: AlfrescoApiService) {\n        this.versionsApi = this.alfrescoApi.versionsApi;\n    }\n/**\n * @return {?}\n */\nngOnChanges() {\n        this.loadVersionHistory();\n    }\n/**\n * @param {?} versionId\n * @return {?}\n */\nrestore(versionId) {\n        this.versionsApi\n            .revertVersion(this.id, versionId, { majorVersion: true, comment: ''})\n            .then(this.loadVersionHistory.bind(this));\n    }\n/**\n * @return {?}\n */\nprivate loadVersionHistory() {\n        this.isLoading = true;\n        this.versionsApi.listVersionHistory(this.id).then((data) => {\n            this.versions = data.list.entries;\n            this.isLoading = false;\n        });\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'adf-version-list',\n    template: `\n      <mat-list class=\"adf-version-list\" *ngIf=\"!isLoading; else loading_template\">\n          <mat-list-item *ngFor=\"let version of versions\">\n              <mat-icon mat-list-icon>insert_drive_file</mat-icon>\n              <h4 mat-line class=\"adf-version-list-item-name\">{{version.entry.name}}</h4>\n              <p mat-line>\n                  <span class=\"adf-version-list-item-version\">{{version.entry.id}}</span> -\n                  <span class=\"adf-version-list-item-date\">{{version.entry.modifiedAt | date}}</span>\n              </p>\n              <p mat-line class=\"adf-version-list-item-comment\">{{version.entry.versionComment}}</p>\n\n              <mat-menu #versionMenu=\"matMenu\" yPosition=\"below\" xPosition=\"before\">\n                  <button mat-menu-item (click)=\"restore(version.entry.id)\"> Restore </button>\n              </mat-menu>\n\n              <button mat-icon-button [matMenuTriggerFor]=\"versionMenu\">\n                  <mat-icon>more_vert</mat-icon>\n              </button>\n          </mat-list-item>\n      </mat-list>\n\n      <ng-template #loading_template>\n          <mat-progress-bar data-automation-id=\"version-history-loading-bar\" mode=\"indeterminate\" color=\"accent\"></mat-progress-bar>\n      </ng-template>\n    `,\n    styles: [`\n      .adf-version-list .mat-list-item {\n        border-bottom: 1px solid #d8d8d8; }\n\n      .adf-version-list-item-version {\n        font-weight: bold; }\n\n      .adf-version-list-item-date {\n        opacity: 0.6; }\n\n      .adf-version-list-item-comment {\n        opacity: 0.5; }\n    `],\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        'class': 'adf-version-list'\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: AlfrescoApiService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'id': [{ type: Input },],\n};\n}\n\nfunction VersionListComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nVersionListComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nVersionListComponent.ctorParameters;\n/** @type {?} */\nVersionListComponent.propDecorators;\n/** @type {?} */\nVersionListComponent.prototype.versionsApi;\n/** @type {?} */\nVersionListComponent.prototype.versions;\n/** @type {?} */\nVersionListComponent.prototype.isLoading;\n/** @type {?} */\nVersionListComponent.prototype.id;\n/** @type {?} */\nVersionListComponent.prototype.alfrescoApi;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { Component, Input, ViewEncapsulation } from '@angular/core';\nimport { MinimalNodeEntryEntity } from 'alfresco-js-api';\nexport class VersionManagerComponent {\n\n    \n    node: MinimalNodeEntryEntity;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'adf-version-manager',\n    template: `\n      <div class=\"adf-new-version-uploader-container\" fxLayout=\"row\" fxLayoutAlign=\"end center\">\n          <adf-version-upload [node]=\"node\"></adf-version-upload>\n      </div>\n      <div class=\"adf-version-list-container\">\n          <adf-version-list [id]=\"node.id\"></adf-version-list>\n      </div>\n    `,\n    styles: [`\n      .adf-button.upload-new-version {\n        -webkit-box-shadow: none;\n                box-shadow: none; }\n\n      .adf-new-version-uploader-container {\n        border-bottom: 1px solid #d8d8d8;\n        padding: 16px 0; }\n    `],\n    encapsulation: ViewEncapsulation.None\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'node': [{ type: Input },],\n};\n}\n\nfunction VersionManagerComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nVersionManagerComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nVersionManagerComponent.ctorParameters;\n/** @type {?} */\nVersionManagerComponent.propDecorators;\n/** @type {?} */\nVersionManagerComponent.prototype.node;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { Component, Input, ViewEncapsulation } from '@angular/core';\nimport { MinimalNodeEntryEntity } from 'alfresco-js-api';\nexport class VersionUploadComponent {\n\n    \n    node: MinimalNodeEntryEntity;\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'adf-version-upload',\n    template: `\n      <adf-upload-button\n          data-automation-id=\"adf-new-version-file-upload\"\n          class=\"adf-new-version-file-upload\"\n          staticTitle=\"Upload new version\"\n          [rootFolderId]=\"node.parentId\"\n          tooltip=\"Restriction: upload file with the same name to create a new version of it\"\n          [versioning]=\"true\">\n      </adf-upload-button>\n    `,\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        'class': 'adf-version-upload'\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'node': [{ type: Input },],\n};\n}\n\nfunction VersionUploadComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nVersionUploadComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nVersionUploadComponent.ctorParameters;\n/** @type {?} */\nVersionUploadComponent.propDecorators;\n/** @type {?} */\nVersionUploadComponent.prototype.node;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MaterialModule } from '../material.module';\nimport { TranslateModule } from '@ngx-translate/core';\n\nimport { BreadcrumbComponent } from './breadcrumb.component';\nimport { DropdownBreadcrumbComponent } from './dropdown-breadcrumb.component';\nexport class BreadcrumbModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [\n        CommonModule,\n        MaterialModule,\n        TranslateModule\n    ],\n    exports: [\n        BreadcrumbComponent,\n        DropdownBreadcrumbComponent\n    ],\n    declarations: [\n        BreadcrumbComponent,\n        DropdownBreadcrumbComponent\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction BreadcrumbModule_tsickle_Closure_declarations() {\n/** @type {?} */\nBreadcrumbModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nBreadcrumbModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { Component, OnChanges, SimpleChanges, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { MatSelect } from '@angular/material';\nimport { PathElementEntity } from 'alfresco-js-api';\nimport { BreadcrumbComponent } from './breadcrumb.component';\nexport class DropdownBreadcrumbComponent extends BreadcrumbComponent implements OnChanges {\n\n    \n    selectbox: MatSelect;\n\n    currentNode: PathElementEntity;\n    previousNodes: PathElementEntity[];\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges): void {\n        super.ngOnChanges(changes);\n        this.recalculateNodes();\n    }\n/**\n * Calculate the current and previous nodes from the route array\n * @return {?}\n */\nprivate recalculateNodes(): void {\n        this.currentNode = this.route[this.route.length - 1];\n        this.previousNodes = this.route.slice(0, this.route.length - 1).reverse();\n    }\n/**\n * Opens the selectbox overlay\n * @return {?}\n */\nopen(): void {\n        if (this.selectbox) {\n            this.selectbox.open();\n        }\n    }\n/**\n * Return if route has more than one element (means: we are not in the root directory)\n * @return {?}\n */\nhasPreviousNodes(): boolean {\n        return this.previousNodes.length > 0;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'adf-dropdown-breadcrumb',\n    template: `\n      <ng-container *ngIf=\"route.length > 0\">\n\n          <button\n              tabindex=\"0\"\n              class=\"adf-dropdown-breadcumb-trigger\"\n              (click)=\"open()\"\n              data-automation-id=\"dropdown-breadcrumb-trigger\">\n              <mat-icon [class.isRoot]=\"!hasPreviousNodes()\">folder</mat-icon>\n          </button>\n          <mat-icon class=\"adf-dropddown-breadcrumb-item-chevron\">chevron_right</mat-icon>\n\n          <mat-select\n              *ngIf=\"hasPreviousNodes()\"\n              class=\"adf-dropdown-breadcrumb-path\"\n              tabindex=\"0\"\n              data-automation-id=\"dropdown-breadcrumb-path\" >\n\n              <mat-option\n                  *ngFor=\"let node of previousNodes;\"\n                  (click)=\"onRoutePathClick(node, $event)\"\n                  class=\"adf-dropdown-breadcrumb-path-option\"\n                  tabindex=\"0\"\n                  data-automation-class=\"dropdown-breadcrumb-path-option\">\n                  {{ node.name }}\n              </mat-option>\n          </mat-select>\n\n          <span\n              class=\"adf-current-folder\"\n              [class.isRoot]=\"!hasPreviousNodes()\"\n              data-automation-id=\"current-folder\">{{ currentNode.name }}</span>\n      </ng-container>\n    `,\n    styles: [`\n\n    `],\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        'class': 'adf-dropdown-breadcrumb'\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'selectbox': [{ type: ViewChild, args: [MatSelect, ] },],\n};\n}\n\nfunction DropdownBreadcrumbComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nDropdownBreadcrumbComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDropdownBreadcrumbComponent.ctorParameters;\n/** @type {?} */\nDropdownBreadcrumbComponent.propDecorators;\n/** @type {?} */\nDropdownBreadcrumbComponent.prototype.selectbox;\n/** @type {?} */\nDropdownBreadcrumbComponent.prototype.currentNode;\n/** @type {?} */\nDropdownBreadcrumbComponent.prototype.previousNodes;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { Component, EventEmitter, Input, OnChanges, Output, SimpleChanges, ViewEncapsulation } from '@angular/core';\nimport { MinimalNodeEntryEntity, PathElementEntity } from 'alfresco-js-api';\nimport { DocumentListComponent } from '../document-list';\nexport class BreadcrumbComponent implements OnChanges {\n\n    \n    folderNode: MinimalNodeEntryEntity = null;\n\n    \n    root: string = null;\n\n    \n    rootId: string = null;\n\n    \n    target: DocumentListComponent;\n\n    route: PathElementEntity[] = [];\n/**\n * @return {?}\n */\nget hasRoot(): boolean {\n        return !!this.root;\n    }\n\n    \n    navigate: EventEmitter<PathElementEntity> = new EventEmitter<PathElementEntity>();\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges): void {\n        if (changes.folderNode) {\n            const /** @type {?} */ node: MinimalNodeEntryEntity = changes.folderNode.currentValue;\n            this.route = this.parseRoute(node);\n        }\n    }\n/**\n * @param {?} node\n * @return {?}\n */\nparseRoute(node: MinimalNodeEntryEntity): PathElementEntity[] {\n        if (node && node.path) {\n            const /** @type {?} */ route = /** @type {?} */(( <PathElementEntity[]> (node.path.elements || []).slice()));\n\n            route.push( /** @type {?} */((<PathElementEntity> {\n                id: node.id,\n                name: node.name\n            })));\n\n            const /** @type {?} */ rootPos = this.getElementPosition(route, this.rootId);\n            if (rootPos > 0) {\n                route.splice(0, rootPos);\n            }\n\n            if (rootPos === -1 && this.rootId) {\n                route[0].id = this.rootId;\n            }\n\n            if (this.root) {\n                route[0].name = this.root;\n            }\n\n            return route;\n        }\n\n        return [];\n    }\n/**\n * @param {?} route\n * @param {?} nodeId\n * @return {?}\n */\nprivate getElementPosition(route: PathElementEntity[], nodeId: string): number {\n        let /** @type {?} */ result: number = -1;\n\n        if (route && route.length > 0 && nodeId) {\n            result = route.findIndex(el => el.id === nodeId);\n        }\n\n        return result;\n    }\n/**\n * @param {?} route\n * @param {?=} event\n * @return {?}\n */\nonRoutePathClick(route: PathElementEntity, event?: Event): void {\n        if (event) {\n            event.preventDefault();\n        }\n\n        if (route) {\n            this.navigate.emit(route);\n\n            if (this.target) {\n                this.target.loadFolderByNodeId(route.id);\n            }\n        }\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'adf-breadcrumb',\n    template: `\n      <div *ngIf=\"folderNode\" data-automation-id=\"breadcrumb\" class=\"adf-breadcrumb-container\">\n          <li *ngFor=\"let item of route; let last = last\"\n              [class.active]=\"last\"\n              [ngSwitch]=\"last\"\n              title=\"{{ item.name | translate }}\"\n              class=\"adf-breadcrumb-item\">\n\n              <a *ngSwitchDefault href=\"#\" [attr.data-automation-id]=\"'breadcrumb_' + item.name\"\n                 class=\"adf-breadcrumb-item-anchor\"\n                 (click)=\"onRoutePathClick(item, $event)\">\n                  {{ item.name | translate }}\n              </a>\n\n              <div *ngSwitchCase=\"true\" class=\"adf-breadcrumb-item-current\">\n                  {{ item.name | translate }}\n              </div>\n\n              <mat-icon class=\"adf-breadcrumb-item-chevron\" *ngIf=\"!last\">\n                  chevron_right\n              </mat-icon>\n          </li>\n      </div>\n      <div *ngIf=\"!folderNode && hasRoot\">\n          <li class=\"adf-breadcrumb-item\">\n              <div class=\"adf-breadcrumb-item-current\">\n                  {{ root | translate }}\n              </div>\n          </li>\n      </div>\n    `,\n    styles: [`\n\n    `],\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        'class': 'adf-breadcrumb'\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'folderNode': [{ type: Input },],\n'root': [{ type: Input },],\n'rootId': [{ type: Input },],\n'target': [{ type: Input },],\n'navigate': [{ type: Output },],\n};\n}\n\nfunction BreadcrumbComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nBreadcrumbComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nBreadcrumbComponent.ctorParameters;\n/** @type {?} */\nBreadcrumbComponent.propDecorators;\n/** @type {?} */\nBreadcrumbComponent.prototype.folderNode;\n/** @type {?} */\nBreadcrumbComponent.prototype.root;\n/** @type {?} */\nBreadcrumbComponent.prototype.rootId;\n/** @type {?} */\nBreadcrumbComponent.prototype.target;\n/** @type {?} */\nBreadcrumbComponent.prototype.route;\n/** @type {?} */\nBreadcrumbComponent.prototype.navigate;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MaterialModule } from '../material.module';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { DropdownSitesComponent } from './sites-dropdown.component';\nexport class SitesDropdownModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [\n        CommonModule,\n        MaterialModule,\n        TranslateModule,\n        FormsModule,\n        ReactiveFormsModule\n    ],\n    exports: [\n        DropdownSitesComponent\n    ],\n    declarations: [\n        DropdownSitesComponent\n    ],\n    providers: []\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction SitesDropdownModule_tsickle_Closure_declarations() {\n/** @type {?} */\nSitesDropdownModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSitesDropdownModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { SiteModel, SitesService } from '@alfresco/adf-core';\nimport { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nexport class DropdownSitesComponent implements OnInit {\n\n    \n    hideMyFiles: boolean = false;\n\n    \n    siteList: any[] = null;\n\n    \n    placeholder: string = 'DROPDOWN.PLACEHOLDER_LABEL';\n\n    \n    change: EventEmitter<SiteModel> = new EventEmitter();\npublic MY_FILES_VALUE = 'default';\npublic siteSelected: string;\n/**\n * @param {?} sitesService\n */\nconstructor(private sitesService: SitesService) {}\n/**\n * @return {?}\n */\nngOnInit() {\n        if (!this.siteList) {\n            this.setDefaultSiteList();\n        }\n    }\n/**\n * @return {?}\n */\nselectedSite() {\n        let /** @type {?} */ siteFound;\n        if (this.siteSelected === this.MY_FILES_VALUE) {\n            siteFound = new SiteModel();\n        }else {\n           siteFound = this.siteList.find( site => site.guid === this.siteSelected);\n        }\n        this.change.emit(siteFound);\n    }\n/**\n * @return {?}\n */\nsetDefaultSiteList() {\n        this.siteList = [];\n        this.sitesService.getSites().subscribe((result) => {\n                this.siteList = result;\n            },\n            (error) => {});\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'adf-sites-dropdown',\n    styles: [`\n\n    `],\n    template: `\n      <div id=\"site-dropdown-container\" class=\"adf-site-dropdown-container\">\n          <mat-form-field>\n              <mat-select\n                  class=\"adf-site-dropdown-list-element\"\n                  id=\"site-dropdown\"\n                  placeholder=\"{{placeholder | translate}}\"\n                  floatPlaceholder=\"never\"\n                  data-automation-id=\"site-my-files-select\"\n                  [(ngModel)]=\"siteSelected\"\n                  (ngModelChange)=\"selectedSite()\">\n                  <mat-option *ngIf=\"!hideMyFiles\" data-automation-id=\"site-my-files-option\" id=\"default_site_option\" [value]=\"MY_FILES_VALUE\">{{'DROPDOWN.MY_FILES_OPTION' | translate}}</mat-option>\n                  <mat-option *ngFor=\"let site of siteList\" [value]=\"site.guid\">\n                      {{ site.title | translate }}\n                  </mat-option>\n              </mat-select>\n          </mat-form-field>\n      </div>\n    `\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: SitesService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'hideMyFiles': [{ type: Input },],\n'siteList': [{ type: Input },],\n'placeholder': [{ type: Input },],\n'change': [{ type: Output },],\n};\n}\n\nfunction DropdownSitesComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nDropdownSitesComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDropdownSitesComponent.ctorParameters;\n/** @type {?} */\nDropdownSitesComponent.propDecorators;\n/** @type {?} */\nDropdownSitesComponent.prototype.hideMyFiles;\n/** @type {?} */\nDropdownSitesComponent.prototype.siteList;\n/** @type {?} */\nDropdownSitesComponent.prototype.placeholder;\n/** @type {?} */\nDropdownSitesComponent.prototype.change;\n/** @type {?} */\nDropdownSitesComponent.prototype.MY_FILES_VALUE;\n/** @type {?} */\nDropdownSitesComponent.prototype.siteSelected;\n/** @type {?} */\nDropdownSitesComponent.prototype.sitesService;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { MaterialModule } from '../material.module';\n\nimport { PipeModule, SearchService } from '@alfresco/adf-core';\n\nimport { SearchTriggerDirective } from './components/search-trigger.directive';\n\nimport { SearchControlComponent } from './components/search-control.component';\nimport { SearchComponent } from './components/search.component';\n\nexport const /** @type {?} */ ALFRESCO_SEARCH_DIRECTIVES: [any] = [\n    SearchComponent,\n    SearchControlComponent,\n    SearchTriggerDirective\n];\n\nexport const /** @type {?} */ ALFRESCO_SEARCH_PROVIDERS: [any] = [\n    SearchService\n];\nexport class SearchModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        MaterialModule,\n        PipeModule,\n        TranslateModule\n    ],\n    declarations: [\n        ...ALFRESCO_SEARCH_DIRECTIVES\n    ],\n    providers: [\n        ...ALFRESCO_SEARCH_PROVIDERS\n    ],\n    exports: [\n        ...ALFRESCO_SEARCH_DIRECTIVES\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction SearchModule_tsickle_Closure_declarations() {\n/** @type {?} */\nSearchModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSearchModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { AuthenticationService, ThumbnailService } from '@alfresco/adf-core';\nimport { animate, state, style, transition, trigger } from '@angular/animations';\nimport { Component, EventEmitter, Input, OnDestroy, OnInit, Output,\n         QueryList, ViewEncapsulation, ViewChild, ViewChildren, ElementRef } from '@angular/core';\nimport { MinimalNodeEntity, QueryBody } from 'alfresco-js-api';\nimport { Observable } from 'rxjs/Observable';\nimport { Subject } from 'rxjs/Subject';\nimport { SearchComponent } from './search.component';\nimport { MatListItem } from '@angular/material';\nexport class SearchControlComponent implements OnInit, OnDestroy {\n\n    \n    expandable: boolean = true;\n\n    \n    highlight: boolean = false;\n\n    \n    inputType: string = 'text';\n\n    \n    autocomplete: boolean = false;\n\n    \n    liveSearchEnabled: boolean = true;\n\n    \n    liveSearchMaxResults: number = 5;\n\n    \n    customQueryBody: QueryBody;\n\n    \n    submit: EventEmitter<any> = new EventEmitter();\n\n    \n    searchChange: EventEmitter<string> = new EventEmitter();\n\n    \n    optionClicked: EventEmitter<any> = new EventEmitter();\n\n    \n    searchAutocomplete: SearchComponent;\n\n    \n    searchInput: ElementRef;\nprivate listResultElement: QueryList<MatListItem>;\n\n    searchTerm: string = '';\n    subscriptAnimationState: string;\nprivate toggleSearch = new Subject<any>();\nprivate focusSubject = new Subject<FocusEvent>();\n/**\n * @param {?} authService\n * @param {?} thumbnailService\n */\nconstructor(public authService: AuthenticationService,\nprivate thumbnailService: ThumbnailService) {\n\n        this.toggleSearch.asObservable().debounceTime(100).subscribe(() => {\n            if (this.expandable) {\n                this.subscriptAnimationState = this.subscriptAnimationState === 'inactive' ? 'active' : 'inactive';\n\n                if (this.subscriptAnimationState === 'inactive') {\n                    this.searchTerm = '';\n                    this.searchAutocomplete.resetResults();\n                    if ( document.activeElement.id === this.searchInput.nativeElement.id) {\n                        this.searchInput.nativeElement.blur();\n                    }\n                }\n            }\n        });\n    }\n/**\n * @param {?} animationDoneEvent\n * @return {?}\n */\napplySearchFocus(animationDoneEvent) {\n        if (animationDoneEvent.toState === 'active') {\n            this.searchInput.nativeElement.focus();\n        }\n    }\n/**\n * @return {?}\n */\nngOnInit() {\n        this.subscriptAnimationState = this.expandable ? 'inactive' : 'no-animation';\n        this.setupFocusEventHandlers();\n    }\n/**\n * @return {?}\n */\nngOnDestroy(): void {\n        if (this.focusSubject) {\n            this.focusSubject.unsubscribe();\n            this.focusSubject = null;\n        }\n\n        if (this.toggleSearch) {\n            this.toggleSearch.unsubscribe();\n            this.toggleSearch = null;\n        }\n    }\n/**\n * @return {?}\n */\nisLoggedIn(): boolean {\n        return this.authService.isEcmLoggedIn();\n    }\n/**\n * @param {?} event\n * @return {?}\n */\nsearchSubmit(event: any) {\n        this.submit.emit(event);\n        this.toggleSearchBar();\n    }\n/**\n * @param {?} event\n * @return {?}\n */\ninputChange(event: any) {\n        this.searchChange.emit(event);\n    }\n/**\n * @return {?}\n */\ngetAutoComplete(): string {\n        return this.autocomplete ? 'on' : 'off';\n    }\n/**\n * @param {?} node\n * @return {?}\n */\ngetMimeTypeIcon(node: MinimalNodeEntity): string {\n        let /** @type {?} */ mimeType;\n\n        if (node.entry.content && node.entry.content.mimeType) {\n            mimeType = node.entry.content.mimeType;\n        }\n        if (node.entry.isFolder) {\n            mimeType = 'folder';\n        }\n\n        return this.thumbnailService.getMimeTypeIcon(mimeType);\n    }\n/**\n * @return {?}\n */\nisSearchBarActive() {\n        return this.subscriptAnimationState === 'active' && this.liveSearchEnabled;\n    }\n/**\n * @return {?}\n */\ntoggleSearchBar() {\n        if (this.toggleSearch) {\n            this.toggleSearch.next();\n        }\n    }\n/**\n * @param {?} item\n * @return {?}\n */\nelementClicked(item: any) {\n        if (item.entry) {\n            this.optionClicked.next(item);\n            this.toggleSearchBar();\n        }\n    }\n/**\n * @param {?} $event\n * @return {?}\n */\nonFocus($event): void {\n        this.focusSubject.next($event);\n    }\n/**\n * @param {?} $event\n * @return {?}\n */\nonBlur($event): void {\n        this.focusSubject.next($event);\n    }\n/**\n * @return {?}\n */\nactivateToolbar() {\n        if (!this.isSearchBarActive()) {\n            this.toggleSearchBar();\n        }\n    }\n/**\n * @return {?}\n */\nselectFirstResult() {\n        if ( this.listResultElement && this.listResultElement.length > 0) {\n            let /** @type {?} */ firstElement: MatListItem = /** @type {?} */(( <MatListItem> this.listResultElement.first));\n            firstElement._getHostElement().focus();\n        }\n    }\n/**\n * @param {?} $event\n * @return {?}\n */\nonRowArrowDown($event: KeyboardEvent): void {\n        let /** @type {?} */ nextElement: any = this.getNextElementSibling( /** @type {?} */((<Element> $event.target)));\n        if (nextElement) {\n            nextElement.focus();\n        }\n    }\n/**\n * @param {?} $event\n * @return {?}\n */\nonRowArrowUp($event: KeyboardEvent): void {\n        let /** @type {?} */ previousElement: any = this.getPreviousElementSibling( /** @type {?} */((<Element> $event.target)));\n        if (previousElement) {\n            previousElement.focus();\n        }else {\n            this.searchInput.nativeElement.focus();\n            this.focusSubject.next(new FocusEvent('focus'));\n        }\n    }\n/**\n * @return {?}\n */\nprivate setupFocusEventHandlers() {\n        let /** @type {?} */ focusEvents: Observable<FocusEvent> = this.focusSubject.asObservable()\n            .debounceTime(50);\n        focusEvents.filter(($event: any) => {\n            return this.isSearchBarActive() && ($event.type === 'blur' || $event.type === 'focusout');\n        }).subscribe(() => {\n            this.toggleSearchBar();\n        });\n    }\n/**\n * @param {?} node\n * @return {?}\n */\nprivate getNextElementSibling(node: Element): Element {\n        return node.nextElementSibling;\n    }\n/**\n * @param {?} node\n * @return {?}\n */\nprivate getPreviousElementSibling(node: Element): Element {\n        return node.previousElementSibling;\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'adf-search-control',\n    template: `\n      <div class=\"adf-search-container\">\n          <div *ngIf=\"isLoggedIn()\" [@transitionMessages]=\"subscriptAnimationState\" (@transitionMessages.done)=\"applySearchFocus($event)\">\n              <a mat-icon-button\n                  *ngIf=\"expandable\"\n                  id=\"adf-search-button\"\n                  class=\"adf-search-button\"\n                  (click)=\"toggleSearchBar($event)\"\n                  (keyup.enter)=\"toggleSearchBar($event)\">\n                  <mat-icon aria-label=\"search button\">search</mat-icon>\n              </a>\n              <mat-form-field class=\"adf-input-form-field-divider\">\n                  <input matInput #searchInput\n                      [type]=\"inputType\"\n                      [autocomplete]=\"getAutoComplete()\"\n                      id=\"adf-control-input\"\n                      [(ngModel)]=\"searchTerm\"\n                      (focus)=\"activateToolbar($event)\"\n                      (blur)=\"onBlur($event)\"\n                      (keyup.escape)=\"toggleSearchBar()\"\n                      (keyup.arrowdown)=\"selectFirstResult()\"\n                      (ngModelChange)=\"inputChange($event)\"\n                      [searchAutocomplete]=\"auto\"\n                      (keyup.enter)=\"searchSubmit($event)\">\n              </mat-form-field>\n          </div>\n      </div>\n\n      <adf-search #auto=\"searchAutocomplete\"\n                  class=\"adf-search-result-autocomplete\"\n                  [queryBody]=\"customQueryBody\"\n                  [maxResults]=\"liveSearchMaxResults\">\n          <ng-template let-data>\n              <mat-list *ngIf=\"isSearchBarActive()\" id=\"autocomplete-search-result-list\">\n                  <mat-list-item\n                      *ngFor=\"let item of data?.list?.entries; let idx = index\"\n                      id=\"result_option_{{idx}}\"\n                      [tabindex]=\"0\"\n                      (focus)=\"onFocus($event)\"\n                      (blur)=\"onBlur($event)\"\n                      (keyup.arrowdown)=\"onRowArrowDown($event)\"\n                      (keyup.arrowup)=\"onRowArrowUp($event)\"\n                      class=\"adf-search-autocomplete-item\"\n                      (click)=\"elementClicked(item)\"\n                      (keyup.enter)=\"elementClicked(item)\">\n                      <mat-icon mat-list-icon>\n                          <img [src]=\"getMimeTypeIcon(item)\" />\n                      </mat-icon>\n                      <h4 mat-line id=\"result_name_{{idx}}\"\n                          *ngIf=\"highlight; else elseBlock\"\n                          class=\"adf-search-fixed-text\"\n                          [innerHtml]=\"item.entry.name | highlight: searchTerm\">\n                          {{ item?.entry.name }}\n                      </h4>\n                      <ng-template #elseBlock>\n                          <h4 class=\"adf-search-fixed-text\" mat-line id=\"result_name_{{idx}}\" [innerHtml]=\"item.entry.name\"></h4>\n                      </ng-template>\n                      <p mat-line class=\"adf-search-fixed-text\"> {{item?.entry.createdByUser.displayName}} </p>\n                  </mat-list-item>\n                  <mat-list-item\n                      id=\"search_no_result\"\n                      data-automation-id=\"search_no_result_found\"\n                      *ngIf=\"data?.list?.entries.length === 0\">\n                      <p mat-line class=\"adf-search-fixed-text\">{{ 'SEARCH.RESULTS.NONE' | translate:{searchTerm: searchTerm} }}</p>\n                  </mat-list-item>\n              </mat-list>\n          </ng-template>\n      </adf-search>\n    `,\n    styles: [`\n\n    `],\n    animations: [\n        trigger('transitionMessages', [\n            state('active', style({ transform: 'translateX(0%)', 'margin-left': '13px' })),\n            state('inactive', style({ transform: 'translateX(81%)'})),\n            state('no-animation', style({ transform: 'translateX(0%)', width: '100%' })),\n            transition('inactive => active',\n                animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)')),\n            transition('active => inactive',\n                animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n        ])\n    ],\n    encapsulation: ViewEncapsulation.None,\n    host: { class: 'adf-search-control' }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: AuthenticationService, },\n{type: ThumbnailService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'expandable': [{ type: Input },],\n'highlight': [{ type: Input },],\n'inputType': [{ type: Input },],\n'autocomplete': [{ type: Input },],\n'liveSearchEnabled': [{ type: Input },],\n'liveSearchMaxResults': [{ type: Input },],\n'customQueryBody': [{ type: Input },],\n'submit': [{ type: Output },],\n'searchChange': [{ type: Output },],\n'optionClicked': [{ type: Output },],\n'searchAutocomplete': [{ type: ViewChild, args: [SearchComponent, ] },],\n'searchInput': [{ type: ViewChild, args: ['searchInput', ] },],\n'listResultElement': [{ type: ViewChildren, args: [MatListItem, ] },],\n};\n}\n\nfunction SearchControlComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nSearchControlComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSearchControlComponent.ctorParameters;\n/** @type {?} */\nSearchControlComponent.propDecorators;\n/** @type {?} */\nSearchControlComponent.prototype.expandable;\n/** @type {?} */\nSearchControlComponent.prototype.highlight;\n/** @type {?} */\nSearchControlComponent.prototype.inputType;\n/** @type {?} */\nSearchControlComponent.prototype.autocomplete;\n/** @type {?} */\nSearchControlComponent.prototype.liveSearchEnabled;\n/** @type {?} */\nSearchControlComponent.prototype.liveSearchMaxResults;\n/** @type {?} */\nSearchControlComponent.prototype.customQueryBody;\n/** @type {?} */\nSearchControlComponent.prototype.submit;\n/** @type {?} */\nSearchControlComponent.prototype.searchChange;\n/** @type {?} */\nSearchControlComponent.prototype.optionClicked;\n/** @type {?} */\nSearchControlComponent.prototype.searchAutocomplete;\n/** @type {?} */\nSearchControlComponent.prototype.searchInput;\n/** @type {?} */\nSearchControlComponent.prototype.listResultElement;\n/** @type {?} */\nSearchControlComponent.prototype.searchTerm;\n/** @type {?} */\nSearchControlComponent.prototype.subscriptAnimationState;\n/** @type {?} */\nSearchControlComponent.prototype.toggleSearch;\n/** @type {?} */\nSearchControlComponent.prototype.focusSubject;\n/** @type {?} */\nSearchControlComponent.prototype.authService;\n/** @type {?} */\nSearchControlComponent.prototype.thumbnailService;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { SearchService } from '@alfresco/adf-core';\nimport {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChild,\n    ElementRef,\n    EventEmitter,\n    Input,\n    OnChanges,\n    Output,\n    TemplateRef,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { NodePaging, QueryBody } from 'alfresco-js-api';\nimport { Subject } from 'rxjs/Subject';\nexport class SearchComponent implements AfterContentInit, OnChanges {\n\n    \n    panel: ElementRef;\n\n    \n    template: TemplateRef<any>;\n\n    \n    displayWith: ((value: any) => string) | null = null;\n\n    \n    maxResults: number = 20;\n\n    \n    skipResults: number = 0;\n\n    \n    searchTerm: string = '';\n\n    \n    queryBody: QueryBody;\n/**\n * @param {?} classList\n * @return {?}\n */\nset classList(classList: string) {\n        if (classList && classList.length) {\n            classList.split(' ').forEach(className => this._classList[className.trim()] = true);\n            this._elementRef.nativeElement.className = '';\n        }\n    }\n\n    \n    resultLoaded: EventEmitter<NodePaging> = new EventEmitter();\n\n    \n    error: EventEmitter<any> = new EventEmitter();\n\n    showPanel: boolean = false;\n    results: NodePaging;\n/**\n * @return {?}\n */\nget isOpen(): boolean {\n        return this._isOpen && this.showPanel;\n    }\n/**\n * @param {?} value\n * @return {?}\n */\nset isOpen(value: boolean) {\n        this._isOpen = value;\n    }\n\n    _isOpen: boolean = false;\n\n    keyPressedStream: Subject<string> = new Subject();\n\n    _classList: { [key: string]: boolean } = {};\n/**\n * @param {?} searchService\n * @param {?} changeDetectorRef\n * @param {?} _elementRef\n */\nconstructor(private searchService: SearchService,\nprivate changeDetectorRef: ChangeDetectorRef,\nprivate _elementRef: ElementRef) {\n        this.keyPressedStream.asObservable()\n            .debounceTime(200)\n            .subscribe((searchedWord: string) => {\n                this.loadSearchResults(searchedWord);\n            });\n    }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n        this.setVisibility();\n    }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes) {\n        this.resetResults();\n\n        if (changes.searchTerm && changes.searchTerm.currentValue) {\n            this.loadSearchResults(changes.searchTerm.currentValue);\n        } else if (changes.queryBody && changes.queryBody.currentValue) {\n            this.loadSearchResults();\n        } else {\n            this.loadSearchResults(this.searchTerm);\n        }\n    }\n/**\n * @return {?}\n */\nresetResults() {\n        this.cleanResults();\n        this.setVisibility();\n    }\n/**\n * @return {?}\n */\nreload() {\n        this.loadSearchResults(this.searchTerm);\n    }\n/**\n * @return {?}\n */\nprivate cleanResults() {\n        if (this.results) {\n            this.results = {};\n        }\n    }\n/**\n * @param {?} searchOpts\n * @return {?}\n */\nprivate hasValidSearchQuery(searchOpts: QueryBody) {\n        return searchOpts && searchOpts.query && searchOpts.query.query;\n    }\n/**\n * @param {?=} searchTerm\n * @return {?}\n */\nprivate loadSearchResults(searchTerm?: string) {\n        let /** @type {?} */ searchOpts: QueryBody = this.getQueryBody(searchTerm);\n\n        if (this.hasValidSearchQuery(searchOpts)) {\n            this.searchService\n                .search(searchOpts)\n                .subscribe(\n                    results => {\n                        this.results = /** @type {?} */(( <NodePaging> results));\n                        this.resultLoaded.emit(this.results);\n                        this.isOpen = true;\n                        this.setVisibility();\n                    },\n                    error => {\n                        if (error.status !== 400) {\n                            this.results = null;\n                            this.error.emit(error);\n                        }\n                    });\n        } else {\n            this.cleanResults();\n        }\n    }\n/**\n * @param {?} searchTerm\n * @return {?}\n */\nprivate getQueryBody(searchTerm: string): QueryBody {\n        if (this.queryBody) {\n            if (!this.queryBody.query.query && searchTerm) {\n                this.queryBody.query.query = searchTerm;\n            }\n            return this.queryBody;\n        } else {\n            return this.generateDefaultSearchNode(searchTerm);\n        }\n    }\n/**\n * @param {?} searchTerm\n * @return {?}\n */\nprivate generateDefaultSearchNode(searchTerm: string): QueryBody {\n        let /** @type {?} */ defaultQueryBody: QueryBody = {\n            query: {\n                query: searchTerm ? `${searchTerm}* OR name:${searchTerm}*` : searchTerm\n            },\n            include: ['path', 'allowableOperations'],\n            paging: {\n                maxItems: this.maxResults.toString(),\n                skipCount: this.skipResults.toString()\n            },\n            filterQueries: [\n                { query: \"TYPE:'cm:folder' OR TYPE:'cm:content'\" },\n                { query: 'NOT cm:creator:System' }]\n        };\n\n        return defaultQueryBody;\n    }\n/**\n * @return {?}\n */\nhidePanel() {\n        if (this.isOpen) {\n            this._classList['adf-search-show'] = false;\n            this._classList['adf-search-hide'] = true;\n            this.isOpen = false;\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n/**\n * @return {?}\n */\nsetVisibility() {\n        this.showPanel = !!this.results && !!this.results.list;\n        this._classList['adf-search-show'] = this.showPanel;\n        this._classList['adf-search-hide'] = !this.showPanel;\n        this.changeDetectorRef.markForCheck();\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'adf-search',\n    template: `\n      <div role=\"listbox\" id=\"adf-search-results-content\" [ngClass]=\"_classList\" #panel>\n          <ng-template\n              [ngTemplateOutlet]=\"template\"\n              [ngTemplateOutletContext]=\"{ $implicit: results }\">\n          </ng-template>\n      </div>\n    `,\n    styles: [`\n\n    `],\n    encapsulation: ViewEncapsulation.None,\n    preserveWhitespaces: false,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    exportAs: 'searchAutocomplete',\n    host: {\n        'class': 'adf-search'\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: SearchService, },\n{type: ChangeDetectorRef, },\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'panel': [{ type: ViewChild, args: ['panel', ] },],\n'template': [{ type: ContentChild, args: [TemplateRef, ] },],\n'displayWith': [{ type: Input },],\n'maxResults': [{ type: Input },],\n'skipResults': [{ type: Input },],\n'searchTerm': [{ type: Input },],\n'queryBody': [{ type: Input },],\n'classList': [{ type: Input, args: ['class', ] },],\n'resultLoaded': [{ type: Output },],\n'error': [{ type: Output },],\n};\n}\n\nfunction SearchComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nSearchComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSearchComponent.ctorParameters;\n/** @type {?} */\nSearchComponent.propDecorators;\n/** @type {?} */\nSearchComponent.prototype.panel;\n/** @type {?} */\nSearchComponent.prototype.template;\n/** @type {?} */\nSearchComponent.prototype.displayWith;\n/** @type {?} */\nSearchComponent.prototype.maxResults;\n/** @type {?} */\nSearchComponent.prototype.skipResults;\n/** @type {?} */\nSearchComponent.prototype.searchTerm;\n/** @type {?} */\nSearchComponent.prototype.queryBody;\n/** @type {?} */\nSearchComponent.prototype.resultLoaded;\n/** @type {?} */\nSearchComponent.prototype.error;\n/** @type {?} */\nSearchComponent.prototype.showPanel;\n/** @type {?} */\nSearchComponent.prototype.results;\n/** @type {?} */\nSearchComponent.prototype._isOpen;\n/** @type {?} */\nSearchComponent.prototype.keyPressedStream;\n/** @type {?} */\nSearchComponent.prototype._classList;\n/** @type {?} */\nSearchComponent.prototype.searchService;\n/** @type {?} */\nSearchComponent.prototype.changeDetectorRef;\n/** @type {?} */\nSearchComponent.prototype._elementRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { ENTER, ESCAPE } from '@angular/cdk/keycodes';\nimport {\n    ChangeDetectorRef,\n    Directive,\n    ElementRef,\n    forwardRef,\n    Inject,\n    Input,\n    NgZone,\n    OnDestroy,\n    Optional\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { DOCUMENT } from '@angular/platform-browser';\nimport { Observable } from 'rxjs/Observable';\nimport { fromEvent } from 'rxjs/observable/fromEvent';\nimport { merge } from 'rxjs/observable/merge';\nimport { Subject } from 'rxjs/Subject';\nimport { Subscription } from 'rxjs/Subscription';\nimport { SearchComponent } from './search.component';\n\nexport const /** @type {?} */ SEARCH_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => SearchTriggerDirective),\n    multi: true\n};\nexport class SearchTriggerDirective implements ControlValueAccessor, OnDestroy {\n\n    \n    searchPanel: SearchComponent;\nprivate _panelOpen: boolean = false;\nprivate closingActionsSubscription: Subscription;\nprivate escapeEventStream = new Subject<void>();\n\n    onChange: (value: any) => void = () => { };\n\n    onTouched = () => { };\n/**\n * @param {?} element\n * @param {?} ngZone\n * @param {?} changeDetectorRef\n * @param {?} document\n */\nconstructor(private element: ElementRef,\nprivate ngZone: NgZone,\nprivate changeDetectorRef: ChangeDetectorRef,\nprivate document: any) { }\n/**\n * @return {?}\n */\nngOnDestroy() {\n        if (this.escapeEventStream) {\n            this.escapeEventStream.unsubscribe();\n            this.escapeEventStream = null;\n        }\n        if ( this.closingActionsSubscription ) {\n            this.closingActionsSubscription.unsubscribe();\n        }\n    }\n/**\n * @return {?}\n */\nget panelOpen(): boolean {\n        return this._panelOpen && this.searchPanel.showPanel;\n    }\n/**\n * @return {?}\n */\nopenPanel(): void {\n        this.searchPanel.isOpen = this._panelOpen = true;\n        this.closingActionsSubscription = this.subscribeToClosingActions();\n    }\n/**\n * @return {?}\n */\nclosePanel(): void {\n        if (this._panelOpen) {\n            this.closingActionsSubscription.unsubscribe();\n            this._panelOpen = false;\n            this.searchPanel.resetResults();\n            this.searchPanel.hidePanel();\n            this.changeDetectorRef.detectChanges();\n        }\n    }\n/**\n * @return {?}\n */\nget panelClosingActions(): Observable<any> {\n        return merge(\n            this.escapeEventStream,\n            this.outsideClickStream\n        );\n    }\n/**\n * @return {?}\n */\nprivate get outsideClickStream(): Observable<any> {\n        if (!this.document) {\n            return Observable.of(null);\n        }\n\n        return merge(\n            fromEvent(this.document, 'click'),\n            fromEvent(this.document, 'touchend')\n        ).filter((event: MouseEvent | TouchEvent) => {\n            const /** @type {?} */ clickTarget = /** @type {?} */(( event.target as HTMLElement));\n            return this._panelOpen &&\n                clickTarget !== this.element.nativeElement;\n        });\n    }\n/**\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any): void {\n        Promise.resolve(null).then(() => this.setTriggerValue(value));\n    }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnChange(fn: (value: any) => {}): void {\n        this.onChange = fn;\n    }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnTouched(fn: () => {}) {\n        this.onTouched = fn;\n    }\n/**\n * @param {?} event\n * @return {?}\n */\nhandleKeydown(event: KeyboardEvent): void {\n        const /** @type {?} */ keyCode = event.keyCode;\n\n        if (keyCode === ESCAPE && this.panelOpen) {\n            this.escapeEventStream.next();\n            event.stopPropagation();\n        } else if (keyCode === ENTER) {\n            this.escapeEventStream.next();\n            event.preventDefault();\n        }\n\n    }\n/**\n * @param {?} event\n * @return {?}\n */\nhandleInput(event: KeyboardEvent): void {\n        if (document.activeElement === event.target) {\n            let /** @type {?} */ inputValue: string = ( /** @type {?} */((event.target as HTMLInputElement))).value;\n            this.onChange(inputValue);\n            if (inputValue) {\n                this.searchPanel.keyPressedStream.next(inputValue);\n                this.openPanel();\n            } else {\n                this.searchPanel.resetResults();\n                this.closePanel();\n            }\n        }\n    }\n/**\n * @param {?} event\n * @return {?}\n */\nprivate isPanelOptionClicked(event: MouseEvent) {\n        let /** @type {?} */ isPanelOption: boolean = false;\n        if ( event ) {\n            let /** @type {?} */ clickTarget = /** @type {?} */(( event.target as HTMLElement));\n            isPanelOption = !this.isNoResultOption(event) &&\n                            !!this.searchPanel.panel &&\n                            !!this.searchPanel.panel.nativeElement.contains(clickTarget);\n        }\n        return isPanelOption;\n    }\n/**\n * @param {?} event\n * @return {?}\n */\nprivate isNoResultOption(event: MouseEvent) {\n        return this.searchPanel.results.list ? this.searchPanel.results.list.entries.length === 0 : true;\n    }\n/**\n * @return {?}\n */\nprivate subscribeToClosingActions(): Subscription {\n        const /** @type {?} */ firstStable = this.ngZone.onStable.asObservable();\n        const /** @type {?} */ optionChanges = this.searchPanel.keyPressedStream.asObservable();\n\n        return merge(firstStable, optionChanges)\n            .switchMap(() => {\n                this.searchPanel.setVisibility();\n                return this.panelClosingActions;\n            })\n            .subscribe(event => this.setValueAndClose(event));\n    }\n/**\n * @param {?} value\n * @return {?}\n */\nprivate setTriggerValue(value: any): void {\n        const /** @type {?} */ toDisplay = this.searchPanel && this.searchPanel.displayWith ?\n            this.searchPanel.displayWith(value) : value;\n        const /** @type {?} */ inputValue = toDisplay != null ? toDisplay : '';\n        this.element.nativeElement.value = inputValue;\n    }\n/**\n * @param {?} event\n * @return {?}\n */\nprivate setValueAndClose(event: any | null): void {\n        if (this.isPanelOptionClicked(event)) {\n            this.setTriggerValue(event.target.textContent.trim());\n            this.onChange(event.target.textContent.trim());\n            this.element.nativeElement.focus();\n        }\n        this.closePanel();\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: `input[searchAutocomplete], textarea[searchAutocomplete]`,\n    host: {\n        'role': 'combobox',\n        'autocomplete': 'off',\n        'aria-autocomplete': 'list',\n        '[attr.aria-expanded]': 'panelOpen.toString()',\n        '[attr.aria-owns]': 'autocomplete?.id',\n        '(blur)': 'onTouched()',\n        '(input)': 'handleInput($event)',\n        '(keydown)': 'handleKeydown($event)'\n    },\n    providers: [SEARCH_AUTOCOMPLETE_VALUE_ACCESSOR]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: NgZone, },\n{type: ChangeDetectorRef, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'searchPanel': [{ type: Input, args: ['searchAutocomplete', ] },],\n};\n}\n\nfunction SearchTriggerDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nSearchTriggerDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSearchTriggerDirective.ctorParameters;\n/** @type {?} */\nSearchTriggerDirective.propDecorators;\n/** @type {?} */\nSearchTriggerDirective.prototype.searchPanel;\n/** @type {?} */\nSearchTriggerDirective.prototype._panelOpen;\n/** @type {?} */\nSearchTriggerDirective.prototype.closingActionsSubscription;\n/** @type {?} */\nSearchTriggerDirective.prototype.escapeEventStream;\n/** @type {?} */\nSearchTriggerDirective.prototype.onChange;\n/** @type {?} */\nSearchTriggerDirective.prototype.onTouched;\n/** @type {?} */\nSearchTriggerDirective.prototype.element;\n/** @type {?} */\nSearchTriggerDirective.prototype.ngZone;\n/** @type {?} */\nSearchTriggerDirective.prototype.changeDetectorRef;\n/** @type {?} */\nSearchTriggerDirective.prototype.document;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { DataTableModule, PaginationModule, ToolbarModule } from '@alfresco/adf-core';\n\nimport { MaterialModule } from '../material.module';\nimport { UploadModule } from '../upload/upload.module';\n\nimport { ContentActionListComponent } from './components/content-action/content-action-list.component';\nimport { ContentActionComponent } from './components/content-action/content-action.component';\nimport { ContentColumnListComponent } from './components/content-column/content-column-list.component';\nimport { ContentColumnComponent } from './components/content-column/content-column.component';\nimport { DocumentListComponent } from './components/document-list.component';\n\nimport { EmptyFolderContentDirective } from './components/empty-folder/empty-folder-content.directive';\nimport { NoPermissionContentDirective } from './components/no-permission/no-permission-content.directive';\n\nimport { DocumentActionsService } from './services/document-actions.service';\nimport { DocumentListService } from './services/document-list.service';\nimport { FolderActionsService } from './services/folder-actions.service';\nimport { NodeActionsService } from './services/node-actions.service';\nexport class DocumentListModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [\n        ToolbarModule,\n        CommonModule,\n        DataTableModule,\n        FlexLayoutModule,\n        MaterialModule,\n        UploadModule,\n        TranslateModule,\n        PaginationModule\n    ],\n    declarations: [\n        DocumentListComponent,\n        ContentColumnComponent,\n        ContentColumnListComponent,\n        ContentActionComponent,\n        ContentActionListComponent,\n        EmptyFolderContentDirective,\n        NoPermissionContentDirective\n    ],\n    providers: [\n        DocumentListService,\n        FolderActionsService,\n        DocumentActionsService,\n        NodeActionsService\n    ],\n    exports: [\n        DocumentListComponent,\n        ContentColumnComponent,\n        ContentColumnListComponent,\n        ContentActionComponent,\n        ContentActionListComponent,\n        EmptyFolderContentDirective,\n        NoPermissionContentDirective\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction DocumentListModule_tsickle_Closure_declarations() {\n/** @type {?} */\nDocumentListModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDocumentListModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { AfterContentInit, ContentChild, Directive, TemplateRef } from '@angular/core';\nimport { DocumentListComponent } from './../document-list.component';\nexport class NoPermissionContentDirective implements AfterContentInit {\n\n    \n    template: any;\n/**\n * @param {?} documentList\n */\nconstructor(private documentList: DocumentListComponent) {\n    }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n        this.documentList.noPermissionTemplate = this.template;\n        this.documentList.dataTable.noPermissionTemplate = this.template;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'no-permission-content'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: DocumentListComponent, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'template': [{ type: ContentChild, args: [TemplateRef, ] },],\n};\n}\n\nfunction NoPermissionContentDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nNoPermissionContentDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNoPermissionContentDirective.ctorParameters;\n/** @type {?} */\nNoPermissionContentDirective.propDecorators;\n/** @type {?} */\nNoPermissionContentDirective.prototype.template;\n/** @type {?} */\nNoPermissionContentDirective.prototype.documentList;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { AfterContentInit, ContentChild, Directive, TemplateRef } from '@angular/core';\nimport { DocumentListComponent } from './../document-list.component';\nexport class EmptyFolderContentDirective implements AfterContentInit {\n\n    \n    template: any;\n/**\n * @param {?} documentList\n */\nconstructor(private documentList: DocumentListComponent) {\n    }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n        this.documentList.emptyFolderTemplate = this.template;\n        this.documentList.dataTable.noContentTemplate = this.template;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'empty-folder-content'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: DocumentListComponent, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'template': [{ type: ContentChild, args: [TemplateRef, ] },],\n};\n}\n\nfunction EmptyFolderContentDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nEmptyFolderContentDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nEmptyFolderContentDirective.ctorParameters;\n/** @type {?} */\nEmptyFolderContentDirective.propDecorators;\n/** @type {?} */\nEmptyFolderContentDirective.prototype.template;\n/** @type {?} */\nEmptyFolderContentDirective.prototype.documentList;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n /* tslint:disable:component-selector  */\n\n\nimport { DataColumn } from '@alfresco/adf-core';\nimport { LogService } from '@alfresco/adf-core';\nimport { AfterContentInit, Component, ContentChild, Input, OnInit, TemplateRef } from '@angular/core';\n\nimport { ContentColumnListComponent } from './content-column-list.component';\nexport class ContentColumnComponent implements OnInit, AfterContentInit, DataColumn {\n\n    \n    key: string;\n\n    \n    type: string = 'text';\n\n    \n    format: string;\n\n    \n    sortable: boolean = false;\n\n    \n    title: string = '';\n\n    \n    template: any;\n/**\n * Title to be used for screen readers.\n */\nsrTitle: string;\n\n    \n    cssClass: string;\n/**\n * @param {?} list\n * @param {?} logService\n */\nconstructor(private list: ContentColumnListComponent,\nprivate logService: LogService) {\n        this.logService.log('ContentColumnComponent is deprecated starting with 1.7.0 and may be removed in future versions. Use DataColumnComponent instead.');\n    }\n/**\n * @return {?}\n */\nngOnInit() {\n        if (!this.srTitle && this.key === '$thumbnail') {\n            this.srTitle = 'Thumbnail';\n        }\n    }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n        this.register();\n    }\n/**\n * @return {?}\n */\nregister(): boolean {\n        if (this.list) {\n            return this.list.registerColumn(this);\n        }\n        return false;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'content-column',\n    template: ''\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ContentColumnListComponent, },\n{type: LogService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'key': [{ type: Input },],\n'type': [{ type: Input },],\n'format': [{ type: Input },],\n'sortable': [{ type: Input },],\n'title': [{ type: Input },],\n'template': [{ type: ContentChild, args: [TemplateRef, ] },],\n'srTitle': [{ type: Input, args: ['sr-title', ] },],\n'cssClass': [{ type: Input, args: ['class', ] },],\n};\n}\n\nfunction ContentColumnComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nContentColumnComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nContentColumnComponent.ctorParameters;\n/** @type {?} */\nContentColumnComponent.propDecorators;\n/** @type {?} */\nContentColumnComponent.prototype.key;\n/** @type {?} */\nContentColumnComponent.prototype.type;\n/** @type {?} */\nContentColumnComponent.prototype.format;\n/** @type {?} */\nContentColumnComponent.prototype.sortable;\n/** @type {?} */\nContentColumnComponent.prototype.title;\n/** @type {?} */\nContentColumnComponent.prototype.template;\n/**\n * Title to be used for screen readers.\n * @type {?}\n */\nContentColumnComponent.prototype.srTitle;\n/** @type {?} */\nContentColumnComponent.prototype.cssClass;\n/** @type {?} */\nContentColumnComponent.prototype.list;\n/** @type {?} */\nContentColumnComponent.prototype.logService;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n /* tslint:disable:component-selector  */\n\n\nimport { DataColumn } from '@alfresco/adf-core';\nimport { LogService } from '@alfresco/adf-core';\nimport { Component } from '@angular/core';\n\nimport { DocumentListComponent } from './../document-list.component';\nexport class ContentColumnListComponent {\n/**\n * @param {?} documentList\n * @param {?} logService\n */\nconstructor(private documentList: DocumentListComponent,\nprivate logService: LogService ) {\n        this.logService.log('ContentColumnListComponent is deprecated starting with 1.7.0 and may be removed in future versions. Use DataColumnListComponent instead.');\n    }\n/**\n * Registers column model within the parent document list component.\n * @param {?} column Column definition model to register.\n * @return {?}\n */\nregisterColumn(column: DataColumn): boolean {\n        if (this.documentList && column) {\n            let /** @type {?} */ columns = this.documentList.data.getColumns();\n            columns.push(column);\n            return true;\n        }\n        return false;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'content-columns',\n    template: ''\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: DocumentListComponent, },\n{type: LogService, },\n];\n}\n\nfunction ContentColumnListComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nContentColumnListComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nContentColumnListComponent.ctorParameters;\n/** @type {?} */\nContentColumnListComponent.prototype.documentList;\n/** @type {?} */\nContentColumnListComponent.prototype.logService;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n /* tslint:disable:component-selector  */\n\n\nimport { Component, EventEmitter, Input, OnChanges, OnInit, Output } from '@angular/core';\n\nimport { ContentActionHandler } from '../../models/content-action.model';\nimport { DocumentActionsService } from '../../services/document-actions.service';\nimport { FolderActionsService } from '../../services/folder-actions.service';\nimport { ContentActionModel } from './../../models/content-action.model';\nimport { ContentActionListComponent } from './content-action-list.component';\nexport class ContentActionComponent implements OnInit, OnChanges {\n\n    \n    title: string = 'Action';\n\n    \n    icon: string;\n\n    \n    handler: string;\n\n    \n    target: string;\n\n    \n    permission: string;\n\n    \n    disableWithNoPermission: boolean;\n\n    \n    disabled: boolean = false;\n\n    \n    execute = new EventEmitter();\n\n    \n    permissionEvent = new EventEmitter();\n\n    \n    error = new EventEmitter();\n\n    \n    success = new EventEmitter();\n\n    model: ContentActionModel;\n/**\n * @param {?} list\n * @param {?} documentActions\n * @param {?} folderActions\n */\nconstructor(\nprivate list: ContentActionListComponent,\nprivate documentActions: DocumentActionsService,\nprivate folderActions: FolderActionsService) {\n        this.model = new ContentActionModel();\n    }\n/**\n * @return {?}\n */\nngOnInit() {\n        this.model = new ContentActionModel({\n            title: this.title,\n            icon: this.icon,\n            permission: this.permission,\n            disableWithNoPermission: this.disableWithNoPermission,\n            target: this.target,\n            disabled: this.disabled\n        });\n\n        if (this.handler) {\n            this.model.handler = this.getSystemHandler(this.target, this.handler);\n        }\n\n        if (this.execute) {\n            this.model.execute = (value: any): void => {\n                this.execute.emit({ value });\n            };\n        }\n\n        this.register();\n    }\n/**\n * @return {?}\n */\nregister(): boolean {\n        if (this.list) {\n            return this.list.registerAction(this.model);\n        }\n        return false;\n    }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes) {\n        // update localizable properties\n        this.model.title = this.title;\n    }\n/**\n * @param {?} target\n * @param {?} name\n * @return {?}\n */\ngetSystemHandler(target: string, name: string): ContentActionHandler {\n        if (target) {\n            let /** @type {?} */ ltarget = target.toLowerCase();\n\n            if (ltarget === 'document') {\n                if (this.documentActions) {\n                    this.documentActions.permissionEvent.subscribe((permision) => {\n                        this.permissionEvent.emit(permision);\n                    });\n\n                    this.documentActions.error.subscribe((errors) => {\n                        this.error.emit(errors);\n                    });\n\n                    this.documentActions.success.subscribe((message) => {\n                        this.success.emit(message);\n                    });\n\n                    return this.documentActions.getHandler(name);\n                }\n                return null;\n            }\n\n            if (ltarget === 'folder') {\n                if (this.folderActions) {\n                    this.folderActions.permissionEvent.subscribe((permision) => {\n                        this.permissionEvent.emit(permision);\n                    });\n\n                    this.folderActions.error.subscribe((errors) => {\n                        this.error.emit(errors);\n                    });\n\n                    this.folderActions.success.subscribe((message) => {\n                        this.success.emit(message);\n                    });\n\n                    return this.folderActions.getHandler(name);\n                }\n                return null;\n            }\n        }\n        return null;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'content-action',\n    template: '',\n    providers: [\n        DocumentActionsService,\n        FolderActionsService\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ContentActionListComponent, },\n{type: DocumentActionsService, },\n{type: FolderActionsService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'title': [{ type: Input },],\n'icon': [{ type: Input },],\n'handler': [{ type: Input },],\n'target': [{ type: Input },],\n'permission': [{ type: Input },],\n'disableWithNoPermission': [{ type: Input },],\n'disabled': [{ type: Input },],\n'execute': [{ type: Output },],\n'permissionEvent': [{ type: Output },],\n'error': [{ type: Output },],\n'success': [{ type: Output },],\n};\n}\n\nfunction ContentActionComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nContentActionComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nContentActionComponent.ctorParameters;\n/** @type {?} */\nContentActionComponent.propDecorators;\n/** @type {?} */\nContentActionComponent.prototype.title;\n/** @type {?} */\nContentActionComponent.prototype.icon;\n/** @type {?} */\nContentActionComponent.prototype.handler;\n/** @type {?} */\nContentActionComponent.prototype.target;\n/** @type {?} */\nContentActionComponent.prototype.permission;\n/** @type {?} */\nContentActionComponent.prototype.disableWithNoPermission;\n/** @type {?} */\nContentActionComponent.prototype.disabled;\n/** @type {?} */\nContentActionComponent.prototype.execute;\n/** @type {?} */\nContentActionComponent.prototype.permissionEvent;\n/** @type {?} */\nContentActionComponent.prototype.error;\n/** @type {?} */\nContentActionComponent.prototype.success;\n/** @type {?} */\nContentActionComponent.prototype.model;\n/** @type {?} */\nContentActionComponent.prototype.list;\n/** @type {?} */\nContentActionComponent.prototype.documentActions;\n/** @type {?} */\nContentActionComponent.prototype.folderActions;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { ContentService } from '@alfresco/adf-core';\nimport { Injectable } from '@angular/core';\nimport { MinimalNodeEntity } from 'alfresco-js-api';\nimport { Observable } from 'rxjs/Observable';\nimport { Subject } from 'rxjs/Subject';\nimport { ContentActionHandler } from '../models/content-action.model';\nimport { PermissionModel } from '../models/permissions.model';\nimport { DocumentListService } from './document-list.service';\nimport { NodeActionsService } from './node-actions.service';\nimport'rxjs/add/observable/throw';\nexport class FolderActionsService {\n\n    permissionEvent: Subject<PermissionModel> = new Subject<PermissionModel>();\n    error: Subject<Error> = new Subject<Error>();\n    success: Subject<string> = new Subject<string>();\nprivate handlers: { [id: string]: ContentActionHandler; } = {};\n/**\n * @param {?} nodeActionsService\n * @param {?} documentListService\n * @param {?} contentService\n */\nconstructor(private nodeActionsService: NodeActionsService,\nprivate documentListService: DocumentListService,\nprivate contentService: ContentService) {\n        this.setupActionHandlers();\n    }\n/**\n * @param {?} key\n * @return {?}\n */\ngetHandler(key: string): ContentActionHandler {\n        if (key) {\n            let /** @type {?} */ lkey = key.toLowerCase();\n            return this.handlers[lkey] || null;\n        }\n        return null;\n    }\n/**\n * @param {?} key\n * @param {?} handler\n * @return {?}\n */\nsetHandler(key: string, handler: ContentActionHandler): boolean {\n        if (key) {\n            let /** @type {?} */ lkey = key.toLowerCase();\n            this.handlers[lkey] = handler;\n            return true;\n        }\n        return false;\n    }\n/**\n * @param {?} obj\n * @return {?}\n */\ncanExecuteAction(obj: any): boolean {\n        return this.documentListService && obj && obj.entry.isFolder === true;\n    }\n/**\n * @return {?}\n */\nprivate setupActionHandlers() {\n        this.handlers['copy'] = this.copyNode.bind(this);\n        this.handlers['move'] = this.moveNode.bind(this);\n        this.handlers['delete'] = this.deleteNode.bind(this);\n    }\n/**\n * @param {?} obj\n * @param {?=} target\n * @param {?=} permission\n * @return {?}\n */\nprivate copyNode(obj: MinimalNodeEntity, target?: any, permission?: string) {\n        const /** @type {?} */ actionObservable = this.nodeActionsService.copyFolder(obj.entry, permission);\n        this.prepareHandlers(actionObservable, 'folder', 'copy', target, permission);\n        return actionObservable;\n    }\n/**\n * @param {?} obj\n * @param {?=} target\n * @param {?=} permission\n * @return {?}\n */\nprivate moveNode(obj: MinimalNodeEntity, target?: any, permission?: string) {\n        const /** @type {?} */ actionObservable = this.nodeActionsService.moveFolder(obj.entry, permission);\n        this.prepareHandlers(actionObservable, 'folder', 'move', target, permission);\n        return actionObservable;\n    }\n/**\n * @param {?} actionObservable\n * @param {?} type\n * @param {?} action\n * @param {?=} target\n * @param {?=} permission\n * @return {?}\n */\nprivate prepareHandlers(actionObservable, type: string, action: string, target?: any, permission?: string): void {\n        actionObservable.subscribe(\n            (fileOperationMessage) => {\n                if (target && typeof target.reload === 'function') {\n                    target.reload();\n                }\n                this.success.next(fileOperationMessage);\n            },\n            this.error.next.bind(this.error)\n        );\n    }\n/**\n * @param {?} obj\n * @param {?=} target\n * @param {?=} permission\n * @return {?}\n */\nprivate deleteNode(obj: any, target?: any, permission?: string): Observable<any> {\n        let /** @type {?} */ handlerObservable: Observable<any>;\n\n        if (this.canExecuteAction(obj)) {\n            if (this.contentService.hasPermission(obj.entry, permission)) {\n                handlerObservable = this.documentListService.deleteNode(obj.entry.id);\n                handlerObservable.subscribe(() => {\n                    if (target && typeof target.reload === 'function') {\n                        target.reload();\n                    }\n                    this.success.next(obj.entry.id);\n                });\n                return handlerObservable;\n            } else {\n                this.permissionEvent.next(new PermissionModel({type: 'folder', action: 'delete', permission: permission}));\n                return Observable.throw(new Error('No permission to delete'));\n            }\n        }\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NodeActionsService, },\n{type: DocumentListService, },\n{type: ContentService, },\n];\n}\n\nfunction FolderActionsService_tsickle_Closure_declarations() {\n/** @type {?} */\nFolderActionsService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFolderActionsService.ctorParameters;\n/** @type {?} */\nFolderActionsService.prototype.permissionEvent;\n/** @type {?} */\nFolderActionsService.prototype.error;\n/** @type {?} */\nFolderActionsService.prototype.success;\n/** @type {?} */\nFolderActionsService.prototype.handlers;\n/** @type {?} */\nFolderActionsService.prototype.nodeActionsService;\n/** @type {?} */\nFolderActionsService.prototype.documentListService;\n/** @type {?} */\nFolderActionsService.prototype.contentService;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { ContentService } from '@alfresco/adf-core';\nimport { Injectable } from '@angular/core';\nimport { MinimalNodeEntity } from 'alfresco-js-api';\nimport { Observable } from 'rxjs/Observable';\nimport { Subject } from 'rxjs/Subject';\nimport { ContentActionHandler } from '../models/content-action.model';\nimport { PermissionModel } from '../models/permissions.model';\nimport { DocumentListService } from './document-list.service';\nimport { NodeActionsService } from './node-actions.service';\nimport'rxjs/add/observable/throw';\nexport class DocumentActionsService {\n\n    permissionEvent: Subject<PermissionModel> = new Subject<PermissionModel>();\n    error: Subject<Error> = new Subject<Error>();\n    success: Subject<string> = new Subject<string>();\nprivate handlers: { [id: string]: ContentActionHandler; } = {};\n/**\n * @param {?} nodeActionsService\n * @param {?=} documentListService\n * @param {?=} contentService\n */\nconstructor(private nodeActionsService: NodeActionsService,\nprivate documentListService?: DocumentListService,\nprivate contentService?: ContentService) {\n        this.setupActionHandlers();\n    }\n/**\n * @param {?} key\n * @return {?}\n */\ngetHandler(key: string): ContentActionHandler {\n        if (key) {\n            let /** @type {?} */ lkey = key.toLowerCase();\n            return this.handlers[lkey] || null;\n        }\n        return null;\n    }\n/**\n * @param {?} key\n * @param {?} handler\n * @return {?}\n */\nsetHandler(key: string, handler: ContentActionHandler): boolean {\n        if (key) {\n            let /** @type {?} */ lkey = key.toLowerCase();\n            this.handlers[lkey] = handler;\n            return true;\n        }\n        return false;\n    }\n/**\n * @param {?} obj\n * @return {?}\n */\ncanExecuteAction(obj: any): boolean {\n        return this.documentListService && obj && obj.entry.isFile === true;\n    }\n/**\n * @return {?}\n */\nprivate setupActionHandlers() {\n        this.handlers['download'] = this.download.bind(this);\n        this.handlers['copy'] = this.copyNode.bind(this);\n        this.handlers['move'] = this.moveNode.bind(this);\n        this.handlers['delete'] = this.deleteNode.bind(this);\n    }\n/**\n * @param {?} node\n * @return {?}\n */\nprivate download(node: MinimalNodeEntity): Observable<boolean> {\n        if (this.canExecuteAction(node) && this.contentService) {\n            let /** @type {?} */ link = document.createElement('a');\n            document.body.appendChild(link);\n            link.setAttribute('download', node.entry.name);\n            link.href = this.contentService.getContentUrl(node);\n            link.click();\n            document.body.removeChild(link);\n            return Observable.of(true);\n        }\n        return Observable.of(false);\n    }\n/**\n * @param {?} node\n * @param {?=} target\n * @param {?=} permission\n * @return {?}\n */\nprivate copyNode(node: MinimalNodeEntity, target?: any, permission?: string) {\n        const /** @type {?} */ actionObservable = this.nodeActionsService.copyContent(node.entry, permission);\n        this.prepareHandlers(actionObservable, 'content', 'copy', target, permission);\n        return actionObservable;\n    }\n/**\n * @param {?} node\n * @param {?=} target\n * @param {?=} permission\n * @return {?}\n */\nprivate moveNode(node: MinimalNodeEntity, target?: any, permission?: string) {\n        const /** @type {?} */ actionObservable = this.nodeActionsService.moveContent(node.entry, permission);\n        this.prepareHandlers(actionObservable, 'content', 'move', target, permission);\n        return actionObservable;\n    }\n/**\n * @param {?} actionObservable\n * @param {?} type\n * @param {?} action\n * @param {?=} target\n * @param {?=} permission\n * @return {?}\n */\nprivate prepareHandlers(actionObservable, type: string, action: string, target?: any, permission?: string): void {\n        actionObservable.subscribe(\n            (fileOperationMessage) => {\n                if (target && typeof target.reload === 'function') {\n                    target.reload();\n                }\n                this.success.next(fileOperationMessage);\n            },\n            this.error.next.bind(this.error)\n        );\n    }\n/**\n * @param {?} node\n * @param {?=} target\n * @param {?=} permission\n * @return {?}\n */\nprivate deleteNode(node: any, target?: any, permission?: string): Observable<any> {\n        let /** @type {?} */ handlerObservable;\n\n        if (this.canExecuteAction(node)) {\n            if (this.contentService.hasPermission(node.entry, permission)) {\n                handlerObservable = this.documentListService.deleteNode(node.entry.id);\n                handlerObservable.subscribe(() => {\n                    if (target && typeof target.reload === 'function') {\n                        target.reload();\n                    }\n                    this.success.next(node.entry.id);\n                });\n                return handlerObservable;\n            } else {\n                this.permissionEvent.next(new PermissionModel({type: 'content', action: 'delete', permission: permission}));\n                return Observable.throw(new Error('No permission to delete'));\n            }\n        }\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NodeActionsService, },\n{type: DocumentListService, },\n{type: ContentService, },\n];\n}\n\nfunction DocumentActionsService_tsickle_Closure_declarations() {\n/** @type {?} */\nDocumentActionsService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDocumentActionsService.ctorParameters;\n/** @type {?} */\nDocumentActionsService.prototype.permissionEvent;\n/** @type {?} */\nDocumentActionsService.prototype.error;\n/** @type {?} */\nDocumentActionsService.prototype.success;\n/** @type {?} */\nDocumentActionsService.prototype.handlers;\n/** @type {?} */\nDocumentActionsService.prototype.nodeActionsService;\n/** @type {?} */\nDocumentActionsService.prototype.documentListService;\n/** @type {?} */\nDocumentActionsService.prototype.contentService;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { DataColumn } from '@alfresco/adf-core';\nimport { ContentService } from '@alfresco/adf-core';\nimport { EventEmitter, Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material';\nimport { MinimalNodeEntryEntity } from 'alfresco-js-api';\nimport { Subject } from 'rxjs/Subject';\nimport { ContentNodeSelectorComponent } from '../../content-node-selector/content-node-selector.component';\nimport { ContentNodeSelectorComponentData } from '../../content-node-selector/content-node-selector.component-data.interface';\nimport { ShareDataRow } from '../data/share-data-row.model';\nimport { DocumentListService } from './document-list.service';\nexport class NodeActionsService {\n/**\n * @param {?} dialog\n * @param {?=} documentListService\n * @param {?=} contentService\n */\nconstructor(private dialog: MatDialog,\nprivate documentListService?: DocumentListService,\nprivate contentService?: ContentService) {}\n/**\n * Copy content node\n * \n * @param {?} contentEntry node to copy\n * @param {?=} permission permission which is needed to apply the action\n * @return {?}\n */\npublic copyContent(contentEntry: MinimalNodeEntryEntity, permission?: string): Subject<string> {\n        return this.doFileOperation('copy', 'content', contentEntry, permission);\n    }\n/**\n * Copy folder node\n * \n * @param {?} contentEntry node to copy\n * @param {?=} permission permission which is needed to apply the action\n * @return {?}\n */\npublic copyFolder(contentEntry: MinimalNodeEntryEntity, permission?: string): Subject<string> {\n        return this.doFileOperation('copy', 'folder', contentEntry, permission);\n    }\n/**\n * Move content node\n * \n * @param {?} contentEntry node to move\n * @param {?=} permission permission which is needed to apply the action\n * @return {?}\n */\npublic moveContent(contentEntry: MinimalNodeEntryEntity, permission?: string): Subject<string> {\n        return this.doFileOperation('move', 'content', contentEntry, permission);\n    }\n/**\n * Move folder node\n * \n * @param {?} contentEntry node to move\n * @param {?=} permission permission which is needed to apply the action\n * @return {?}\n */\npublic moveFolder(contentEntry: MinimalNodeEntryEntity, permission?: string): Subject<string> {\n        return this.doFileOperation('move', 'folder', contentEntry, permission);\n    }\n/**\n * General method for performing the given operation (copy|move)\n * \n * @param {?} action the action to perform (copy|move)\n * @param {?} type type of the content (content|folder)\n * @param {?} contentEntry the contentEntry which has to have the action performed on\n * @param {?=} permission permission which is needed to apply the action\n * @return {?}\n */\nprivate doFileOperation(action: string, type: string, contentEntry: MinimalNodeEntryEntity, permission?: string): Subject<string> {\n        const /** @type {?} */ observable: Subject<string> = new Subject<string>();\n\n        if (this.contentService.hasPermission(contentEntry, permission)) {\n            const /** @type {?} */ data: ContentNodeSelectorComponentData = {\n                title: `${action} '${contentEntry.name}' to ...`,\n                actionName: action,\n                currentFolderId: contentEntry.parentId,\n                rowFilter: this.rowFilter.bind(this, contentEntry.id),\n                imageResolver: this.imageResolver.bind(this),\n                select: new EventEmitter<MinimalNodeEntryEntity[]>()\n            };\n\n            this.dialog.open(ContentNodeSelectorComponent, { data, panelClass: 'adf-content-node-selector-dialog', width: '630px' });\n\n            data.select.subscribe((selections: MinimalNodeEntryEntity[]) => {\n                const /** @type {?} */ selection = selections[0];\n                this.documentListService[`${action}Node`].call(this.documentListService, contentEntry.id, selection.id)\n                    .subscribe(\n                        observable.next.bind(observable, `OPERATION.SUCCES.${type.toUpperCase()}.${action.toUpperCase()}`),\n                        observable.error.bind(observable)\n                    );\n                this.dialog.closeAll();\n            });\n\n            return observable;\n        } else {\n            observable.error(new Error(JSON.stringify({ error: { statusCode: 403 } })));\n            return observable;\n        }\n    }\n/**\n * @param {?} currentNodeId\n * @param {?} row\n * @return {?}\n */\nprivate rowFilter(currentNodeId, row: ShareDataRow): boolean {\n        const /** @type {?} */ node: MinimalNodeEntryEntity = row.node.entry;\n\n        if (node.id === currentNodeId || node.isFile) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n/**\n * @param {?} row\n * @param {?} col\n * @return {?}\n */\nprivate imageResolver(row: ShareDataRow, col: DataColumn): string|null {\n        const /** @type {?} */ entry: MinimalNodeEntryEntity = row.node.entry;\n        if (!this.contentService.hasPermission(entry, 'create')) {\n            return this.documentListService.getMimeTypeIcon('disable/folder');\n        }\n\n        return null;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: MatDialog, },\n{type: DocumentListService, },\n{type: ContentService, },\n];\n}\n\nfunction NodeActionsService_tsickle_Closure_declarations() {\n/** @type {?} */\nNodeActionsService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNodeActionsService.ctorParameters;\n/** @type {?} */\nNodeActionsService.prototype.dialog;\n/** @type {?} */\nNodeActionsService.prototype.documentListService;\n/** @type {?} */\nNodeActionsService.prototype.contentService;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { SearchService } from '@alfresco/adf-core';\nimport { Injectable } from '@angular/core';\nimport { NodePaging } from 'alfresco-js-api';\nimport { Observable } from 'rxjs/Observable';\n/**\n * Internal service used by ContentNodeSelector component.\n */\nexport class ContentNodeSelectorService {\n/**\n * @param {?} searchService\n */\nconstructor(private searchService: SearchService) {\n    }\n/**\n * Performs a search for content node selection\n * \n * @param {?} searchTerm    The term to search for\n * @param {?} rootNodeId    The root is to start the search from\n * @param {?=} skipCount     From where to start the loading\n * @param {?=} maxItems      How many items to load\n * @return {?}\n */\npublic search(searchTerm: string, rootNodeId: string, skipCount: number = 0, maxItems: number = 25): Observable<NodePaging> {\n\n        let /** @type {?} */ defaultSearchNode: any = {\n            query: {\n                query: `${searchTerm}* OR name:${searchTerm}*`\n            },\n            include: ['path', 'allowableOperations'],\n            paging: {\n                maxItems: `${maxItems}`,\n                skipCount: `${skipCount}`\n            },\n            filterQueries: [\n                { query: \"TYPE:'cm:folder'\" },\n                { query: 'NOT cm:creator:System' }]\n        };\n\n        if (rootNodeId) {\n            defaultSearchNode.scope = rootNodeId;\n        }\n\n        return this.searchService.search(defaultSearchNode);\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: SearchService, },\n];\n}\n\nfunction ContentNodeSelectorService_tsickle_Closure_declarations() {\n/** @type {?} */\nContentNodeSelectorService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nContentNodeSelectorService.ctorParameters;\n/** @type {?} */\nContentNodeSelectorService.prototype.searchService;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { errorObject } from './errorObject';\n\nlet tryCatchTarget: Function;\n\nfunction tryCatcher(this: any): any {\n  try {\n    return tryCatchTarget.apply(this, arguments);\n  } catch (e) {\n    errorObject.e = e;\n    return errorObject;\n  }\n}\n\nexport function tryCatch<T extends Function>(fn: T): T {\n  tryCatchTarget = fn;\n  return <any>tryCatcher;\n};\n","// typeof any so that it we don't have to cast when comparing a result to the error object\nexport const errorObject: any = { e: {} };","export function isFunction(x: any): x is Function {\n  return typeof x === 'function';\n}\n","export const isArray = Array.isArray || (<T>(x: any): x is T[] => x && typeof x.length === 'number');\n","export function isObject(x: any): x is Object {\n  return x != null && typeof x === 'object';\n}\n","/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nexport class UnsubscriptionError extends Error {\n  constructor(public errors: any[]) {\n    super();\n    const err: any = Error.call(this, errors ?\n      `${errors.length} errors occurred during unsubscription:\n  ${errors.map((err, i) => `${i + 1}) ${err.toString()}`).join('\\n  ')}` : '');\n    (<any> this).name = err.name = 'UnsubscriptionError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { isArray } from './util/isArray';\nimport { isObject } from './util/isObject';\nimport { isFunction } from './util/isFunction';\nimport { tryCatch } from './util/tryCatch';\nimport { errorObject } from './util/errorObject';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\n\nexport interface AnonymousSubscription {\n  unsubscribe(): void;\n}\n\nexport type TeardownLogic = AnonymousSubscription | Function | void;\n\nexport interface ISubscription extends AnonymousSubscription {\n  unsubscribe(): void;\n  readonly closed: boolean;\n}\n\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nexport class Subscription implements ISubscription {\n  public static EMPTY: Subscription = (function(empty: any){\n    empty.closed = true;\n    return empty;\n  }(new Subscription()));\n\n  /**\n   * A flag to indicate whether this Subscription has already been unsubscribed.\n   * @type {boolean}\n   */\n  public closed: boolean = false;\n\n  protected _parent: Subscription = null;\n  protected _parents: Subscription[] = null;\n  private _subscriptions: ISubscription[] = null;\n\n  /**\n   * @param {function(): void} [unsubscribe] A function describing how to\n   * perform the disposal of resources when the `unsubscribe` method is called.\n   */\n  constructor(unsubscribe?: () => void) {\n    if (unsubscribe) {\n      (<any> this)._unsubscribe = unsubscribe;\n    }\n  }\n\n  /**\n   * Disposes the resources held by the subscription. May, for instance, cancel\n   * an ongoing Observable execution or cancel any other type of work that\n   * started when the Subscription was created.\n   * @return {void}\n   */\n  unsubscribe(): void {\n    let hasErrors = false;\n    let errors: any[];\n\n    if (this.closed) {\n      return;\n    }\n\n    let { _parent, _parents, _unsubscribe, _subscriptions } = (<any> this);\n\n    this.closed = true;\n    this._parent = null;\n    this._parents = null;\n    // null out _subscriptions first so any child subscriptions that attempt\n    // to remove themselves from this subscription will noop\n    this._subscriptions = null;\n\n    let index = -1;\n    let len = _parents ? _parents.length : 0;\n\n    // if this._parent is null, then so is this._parents, and we\n    // don't have to remove ourselves from any parent subscriptions.\n    while (_parent) {\n      _parent.remove(this);\n      // if this._parents is null or index >= len,\n      // then _parent is set to null, and the loop exits\n      _parent = ++index < len && _parents[index] || null;\n    }\n\n    if (isFunction(_unsubscribe)) {\n      let trial = tryCatch(_unsubscribe).call(this);\n      if (trial === errorObject) {\n        hasErrors = true;\n        errors = errors || (\n          errorObject.e instanceof UnsubscriptionError ?\n            flattenUnsubscriptionErrors(errorObject.e.errors) : [errorObject.e]\n        );\n      }\n    }\n\n    if (isArray(_subscriptions)) {\n\n      index = -1;\n      len = _subscriptions.length;\n\n      while (++index < len) {\n        const sub = _subscriptions[index];\n        if (isObject(sub)) {\n          let trial = tryCatch(sub.unsubscribe).call(sub);\n          if (trial === errorObject) {\n            hasErrors = true;\n            errors = errors || [];\n            let err = errorObject.e;\n            if (err instanceof UnsubscriptionError) {\n              errors = errors.concat(flattenUnsubscriptionErrors(err.errors));\n            } else {\n              errors.push(err);\n            }\n          }\n        }\n      }\n    }\n\n    if (hasErrors) {\n      throw new UnsubscriptionError(errors);\n    }\n  }\n\n  /**\n   * Adds a tear down to be called during the unsubscribe() of this\n   * Subscription.\n   *\n   * If the tear down being added is a subscription that is already\n   * unsubscribed, is the same reference `add` is being called on, or is\n   * `Subscription.EMPTY`, it will not be added.\n   *\n   * If this subscription is already in an `closed` state, the passed\n   * tear down logic will be executed immediately.\n   *\n   * @param {TeardownLogic} teardown The additional logic to execute on\n   * teardown.\n   * @return {Subscription} Returns the Subscription used or created to be\n   * added to the inner subscriptions list. This Subscription can be used with\n   * `remove()` to remove the passed teardown logic from the inner subscriptions\n   * list.\n   */\n  add(teardown: TeardownLogic): Subscription {\n    if (!teardown || (teardown === Subscription.EMPTY)) {\n      return Subscription.EMPTY;\n    }\n\n    if (teardown === this) {\n      return this;\n    }\n\n    let subscription = (<Subscription> teardown);\n\n    switch (typeof teardown) {\n      case 'function':\n        subscription = new Subscription(<(() => void) > teardown);\n      case 'object':\n        if (subscription.closed || typeof subscription.unsubscribe !== 'function') {\n          return subscription;\n        } else if (this.closed) {\n          subscription.unsubscribe();\n          return subscription;\n        } else if (typeof subscription._addParent !== 'function' /* quack quack */) {\n          const tmp = subscription;\n          subscription = new Subscription();\n          subscription._subscriptions = [tmp];\n        }\n        break;\n      default:\n        throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n    }\n\n    const subscriptions = this._subscriptions || (this._subscriptions = []);\n\n    subscriptions.push(subscription);\n    subscription._addParent(this);\n\n    return subscription;\n  }\n\n  /**\n   * Removes a Subscription from the internal list of subscriptions that will\n   * unsubscribe during the unsubscribe process of this Subscription.\n   * @param {Subscription} subscription The subscription to remove.\n   * @return {void}\n   */\n  remove(subscription: Subscription): void {\n    const subscriptions = this._subscriptions;\n    if (subscriptions) {\n      const subscriptionIndex = subscriptions.indexOf(subscription);\n      if (subscriptionIndex !== -1) {\n        subscriptions.splice(subscriptionIndex, 1);\n      }\n    }\n  }\n\n  private _addParent(parent: Subscription) {\n    let { _parent, _parents } = this;\n    if (!_parent || _parent === parent) {\n      // If we don't have a parent, or the new parent is the same as the\n      // current parent, then set this._parent to the new parent.\n      this._parent = parent;\n    } else if (!_parents) {\n      // If there's already one parent, but not multiple, allocate an Array to\n      // store the rest of the parent Subscriptions.\n      this._parents = [parent];\n    } else if (_parents.indexOf(parent) === -1) {\n      // Only add the new parent to the _parents list if it's not already there.\n      _parents.push(parent);\n    }\n  }\n}\n\nfunction flattenUnsubscriptionErrors(errors: any[]) {\n return errors.reduce((errs, err) => errs.concat((err instanceof UnsubscriptionError) ? err.errors : err), []);\n}\n","export interface NextObserver<T> {\n  closed?: boolean;\n  next: (value: T) => void;\n  error?: (err: any) => void;\n  complete?: () => void;\n}\n\nexport interface ErrorObserver<T> {\n  closed?: boolean;\n  next?: (value: T) => void;\n  error: (err: any) => void;\n  complete?: () => void;\n}\n\nexport interface CompletionObserver<T> {\n  closed?: boolean;\n  next?: (value: T) => void;\n  error?: (err: any) => void;\n  complete: () => void;\n}\n\nexport type PartialObserver<T> = NextObserver<T> | ErrorObserver<T> | CompletionObserver<T>;\n\nexport interface Observer<T> {\n  closed?: boolean;\n  next: (value: T) => void;\n  error: (err: any) => void;\n  complete: () => void;\n}\n\nexport const empty: Observer<any> = {\n  closed: true,\n  next(value: any): void { /* noop */},\n  error(err: any): void { throw err; },\n  complete(): void { /*noop*/ }\n};\n","declare let global: any;\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\ndeclare var WorkerGlobalScope: any;\n// CommonJS / Node have global context exposed as \"global\" variable.\n// We don't want to include the whole node.d.ts this this compilation unit so we'll just fake\n// the global \"global\" var for now.\n\nconst __window = typeof window !== 'undefined' && window;\nconst __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&\n    self instanceof WorkerGlobalScope && self;\nconst __global = typeof global !== 'undefined' && global;\nconst _root: any = __window || __global || __self;\n\n// Workaround Closure Compiler restriction: The body of a goog.module cannot use throw.\n// This is needed when used with angular/tsickle which inserts a goog.module statement.\n// Wrap in IIFE\n(function () {\n  if (!_root) {\n    throw new Error('RxJS could not find any global context (window, self, global)');\n  }\n})();\n\nexport { _root as root };","import { root } from '../util/root';\n\nconst Symbol: any = root.Symbol;\n\nexport const rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function') ?\n  Symbol.for('rxSubscriber') : '@@rxSubscriber';\n\n/**\n * @deprecated use rxSubscriber instead\n */\nexport const $$rxSubscriber = rxSubscriber;\n","import { isFunction } from './util/isFunction';\nimport { Observer, PartialObserver } from './Observer';\nimport { Subscription } from './Subscription';\nimport { empty as emptyObserver } from './Observer';\nimport { rxSubscriber as rxSubscriberSymbol } from './symbol/rxSubscriber';\n\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nexport class Subscriber<T> extends Subscription implements Observer<T> {\n\n  [rxSubscriberSymbol]() { return this; }\n\n  /**\n   * A static factory for a Subscriber, given a (potentially partial) definition\n   * of an Observer.\n   * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n   * Observer represented by the given arguments.\n   */\n  static create<T>(next?: (x?: T) => void,\n                   error?: (e?: any) => void,\n                   complete?: () => void): Subscriber<T> {\n    const subscriber = new Subscriber(next, error, complete);\n    subscriber.syncErrorThrowable = false;\n    return subscriber;\n  }\n\n  public syncErrorValue: any = null;\n  public syncErrorThrown: boolean = false;\n  public syncErrorThrowable: boolean = false;\n\n  protected isStopped: boolean = false;\n  protected destination: PartialObserver<any>; // this `any` is the escape hatch to erase extra type param (e.g. R)\n\n  /**\n   * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n   * defined Observer or a `next` callback function.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   */\n  constructor(destinationOrNext?: PartialObserver<any> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    switch (arguments.length) {\n      case 0:\n        this.destination = emptyObserver;\n        break;\n      case 1:\n        if (!destinationOrNext) {\n          this.destination = emptyObserver;\n          break;\n        }\n        if (typeof destinationOrNext === 'object') {\n          if (destinationOrNext instanceof Subscriber) {\n            this.destination = (<Subscriber<any>> destinationOrNext);\n            (<any> this.destination).add(this);\n          } else {\n            this.syncErrorThrowable = true;\n            this.destination = new SafeSubscriber<T>(this, <PartialObserver<any>> destinationOrNext);\n          }\n          break;\n        }\n      default:\n        this.syncErrorThrowable = true;\n        this.destination = new SafeSubscriber<T>(this, <((value: T) => void)> destinationOrNext, error, complete);\n        break;\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `next` from\n   * the Observable, with a value. The Observable may call this method 0 or more\n   * times.\n   * @param {T} [value] The `next` value.\n   * @return {void}\n   */\n  next(value?: T): void {\n    if (!this.isStopped) {\n      this._next(value);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `error` from\n   * the Observable, with an attached {@link Error}. Notifies the Observer that\n   * the Observable has experienced an error condition.\n   * @param {any} [err] The `error` exception.\n   * @return {void}\n   */\n  error(err?: any): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._error(err);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive a valueless notification of type\n   * `complete` from the Observable. Notifies the Observer that the Observable\n   * has finished sending push-based notifications.\n   * @return {void}\n   */\n  complete(): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._complete();\n    }\n  }\n\n  unsubscribe(): void {\n    if (this.closed) {\n      return;\n    }\n    this.isStopped = true;\n    super.unsubscribe();\n  }\n\n  protected _next(value: T): void {\n    this.destination.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.destination.error(err);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.destination.complete();\n    this.unsubscribe();\n  }\n\n  protected _unsubscribeAndRecycle(): Subscriber<T> {\n    const { _parent, _parents } = this;\n    this._parent = null;\n    this._parents = null;\n    this.unsubscribe();\n    this.closed = false;\n    this.isStopped = false;\n    this._parent = _parent;\n    this._parents = _parents;\n    return this;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SafeSubscriber<T> extends Subscriber<T> {\n\n  private _context: any;\n\n  constructor(private _parentSubscriber: Subscriber<T>,\n              observerOrNext?: PartialObserver<T> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    let next: ((value: T) => void);\n    let context: any = this;\n\n    if (isFunction(observerOrNext)) {\n      next = (<((value: T) => void)> observerOrNext);\n    } else if (observerOrNext) {\n      next = (<PartialObserver<T>> observerOrNext).next;\n      error = (<PartialObserver<T>> observerOrNext).error;\n      complete = (<PartialObserver<T>> observerOrNext).complete;\n      if (observerOrNext !== emptyObserver) {\n        context = Object.create(observerOrNext);\n        if (isFunction(context.unsubscribe)) {\n          this.add(<() => void> context.unsubscribe.bind(context));\n        }\n        context.unsubscribe = this.unsubscribe.bind(this);\n      }\n    }\n\n    this._context = context;\n    this._next = next;\n    this._error = error;\n    this._complete = complete;\n  }\n\n  next(value?: T): void {\n    if (!this.isStopped && this._next) {\n      const { _parentSubscriber } = this;\n      if (!_parentSubscriber.syncErrorThrowable) {\n        this.__tryOrUnsub(this._next, value);\n      } else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  error(err?: any): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      if (this._error) {\n        if (!_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(this._error, err);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, this._error, err);\n          this.unsubscribe();\n        }\n      } else if (!_parentSubscriber.syncErrorThrowable) {\n        this.unsubscribe();\n        throw err;\n      } else {\n        _parentSubscriber.syncErrorValue = err;\n        _parentSubscriber.syncErrorThrown = true;\n        this.unsubscribe();\n      }\n    }\n  }\n\n  complete(): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      if (this._complete) {\n        const wrappedComplete = () => this._complete.call(this._context);\n\n        if (!_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(wrappedComplete);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n          this.unsubscribe();\n        }\n      } else {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  private __tryOrUnsub(fn: Function, value?: any): void {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      this.unsubscribe();\n      throw err;\n    }\n  }\n\n  private __tryOrSetError(parent: Subscriber<T>, fn: Function, value?: any): boolean {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      parent.syncErrorValue = err;\n      parent.syncErrorThrown = true;\n      return true;\n    }\n    return false;\n  }\n\n  protected _unsubscribe(): void {\n    const { _parentSubscriber } = this;\n    this._context = null;\n    this._parentSubscriber = null;\n    _parentSubscriber.unsubscribe();\n  }\n}\n","import { Subscriber } from './Subscriber';\nimport { InnerSubscriber } from './InnerSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class OuterSubscriber<T, R> extends Subscriber<T> {\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(innerValue);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, R>): void {\n    this.destination.error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    this.destination.complete();\n  }\n}\n","export const isArrayLike = (<T>(x: any): x is ArrayLike<T> => x && typeof x.length === 'number');","export function isPromise<T>(value: any | Promise<T>): value is Promise<T> {\n  return value && typeof (<any>value).subscribe !== 'function' && typeof (value as any).then === 'function';\n}\n","import { Subscriber } from '../Subscriber';\nimport { rxSubscriber as rxSubscriberSymbol } from '../symbol/rxSubscriber';\nimport { PartialObserver, empty as emptyObserver } from '../Observer';\n\nexport function toSubscriber<T>(\n  nextOrObserver?: PartialObserver<T> | ((value: T) => void),\n  error?: (error: any) => void,\n  complete?: () => void): Subscriber<T> {\n\n  if (nextOrObserver) {\n    if (nextOrObserver instanceof Subscriber) {\n      return (<Subscriber<T>> nextOrObserver);\n    }\n\n    if (nextOrObserver[rxSubscriberSymbol]) {\n      return nextOrObserver[rxSubscriberSymbol]();\n    }\n  }\n\n  if (!nextOrObserver && !error && !complete) {\n    return new Subscriber(emptyObserver);\n  }\n\n  return new Subscriber(nextOrObserver, error, complete);\n}\n","import { root } from '../util/root';\n\nexport function getSymbolObservable(context: any) {\n  let $$observable: any;\n  let Symbol = context.Symbol;\n\n  if (typeof Symbol === 'function') {\n    if (Symbol.observable) {\n      $$observable = Symbol.observable;\n    } else {\n        $$observable = Symbol('observable');\n        Symbol.observable = $$observable;\n    }\n  } else {\n    $$observable = '@@observable';\n  }\n\n  return $$observable;\n}\n\nexport const observable = getSymbolObservable(root);\n\n/**\n * @deprecated use observable instead\n */\nexport const $$observable = observable;\n","/* tslint:disable:no-empty */\nexport function noop() { }\n","import { noop } from './noop';\nimport { UnaryFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function pipe<T>(): UnaryFunction<T, T>;\nexport function pipe<T, A>(op1: UnaryFunction<T, A>): UnaryFunction<T, A>;\nexport function pipe<T, A, B>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>): UnaryFunction<T, B>;\nexport function pipe<T, A, B, C>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>): UnaryFunction<T, C>;\nexport function pipe<T, A, B, C, D>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>): UnaryFunction<T, D>;\nexport function pipe<T, A, B, C, D, E>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>): UnaryFunction<T, E>;\nexport function pipe<T, A, B, C, D, E, F>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>): UnaryFunction<T, F>;\nexport function pipe<T, A, B, C, D, E, F, G>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>): UnaryFunction<T, G>;\nexport function pipe<T, A, B, C, D, E, F, G, H>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>, op8: UnaryFunction<G, H>): UnaryFunction<T, H>;\nexport function pipe<T, A, B, C, D, E, F, G, H, I>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>, op8: UnaryFunction<G, H>, op9: UnaryFunction<H, I>): UnaryFunction<T, I>;\n/* tslint:enable:max-line-length */\n\nexport function pipe<T, R>(...fns: Array<UnaryFunction<T, R>>): UnaryFunction<T, R> {\n  return pipeFromArray(fns);\n}\n\n/* @internal */\nexport function pipeFromArray<T, R>(fns: Array<UnaryFunction<T, R>>): UnaryFunction<T, R> {\n  if (!fns) {\n    return noop as UnaryFunction<any, any>;\n  }\n\n  if (fns.length === 1) {\n    return fns[0];\n  }\n\n  return function piped(input: T): R {\n    return fns.reduce((prev: any, fn: UnaryFunction<T, R>) => fn(prev), input);\n  };\n}\n","import { PartialObserver } from './Observer';\nimport { Operator } from './Operator';\nimport { Subscriber } from './Subscriber';\nimport { Subscription, AnonymousSubscription, TeardownLogic } from './Subscription';\nimport { root } from './util/root';\nimport { toSubscriber } from './util/toSubscriber';\nimport { IfObservable } from './observable/IfObservable';\nimport { ErrorObservable } from './observable/ErrorObservable';\nimport { observable as Symbol_observable } from './symbol/observable';\nimport { OperatorFunction } from './interfaces';\nimport { pipeFromArray } from './util/pipe';\n\nexport interface Subscribable<T> {\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): AnonymousSubscription;\n}\n\nexport type SubscribableOrPromise<T> = Subscribable<T> | PromiseLike<T>;\nexport type ObservableInput<T> = SubscribableOrPromise<T> | ArrayLike<T>;\n\n/**\n * A representation of any set of values over any amount of time. This is the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nexport class Observable<T> implements Subscribable<T> {\n\n  public _isScalar: boolean = false;\n\n  protected source: Observable<any>;\n  protected operator: Operator<any, T>;\n\n  /**\n   * @constructor\n   * @param {Function} subscribe the function that is called when the Observable is\n   * initially subscribed to. This function is given a Subscriber, to which new values\n   * can be `next`ed, or an `error` method can be called to raise an error, or\n   * `complete` can be called to notify of a successful completion.\n   */\n  constructor(subscribe?: (this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic) {\n    if (subscribe) {\n      this._subscribe = subscribe;\n    }\n  }\n\n  // HACK: Since TypeScript inherits static properties too, we have to\n  // fight against TypeScript here so Subject can have a different static create signature\n  /**\n   * Creates a new cold Observable by calling the Observable constructor\n   * @static true\n   * @owner Observable\n   * @method create\n   * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n   * @return {Observable} a new cold observable\n   */\n  static create: Function = <T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\n    return new Observable<T>(subscribe);\n  }\n\n  /**\n   * Creates a new Observable, with this Observable as the source, and the passed\n   * operator defined as the new observable's operator.\n   * @method lift\n   * @param {Operator} operator the operator defining the operation to take on the observable\n   * @return {Observable} a new observable with the Operator applied\n   */\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const observable = new Observable<R>();\n    observable.source = this;\n    observable.operator = operator;\n    return observable;\n  }\n\n  subscribe(): Subscription;\n  subscribe(observer: PartialObserver<T>): Subscription;\n  subscribe(next?: (value: T) => void, error?: (error: any) => void, complete?: () => void): Subscription;\n  /**\n   * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.\n   *\n   * <span class=\"informal\">Use it when you have all these Observables, but still nothing is happening.</span>\n   *\n   * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It\n   * might be for example a function that you passed to a {@link create} static factory, but most of the time it is\n   * a library implementation, which defines what and when will be emitted by an Observable. This means that calling\n   * `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often\n   * thought.\n   *\n   * Apart from starting the execution of an Observable, this method allows you to listen for values\n   * that an Observable emits, as well as for when it completes or errors. You can achieve this in two\n   * following ways.\n   *\n   * The first way is creating an object that implements {@link Observer} interface. It should have methods\n   * defined by that interface, but note that it should be just a regular JavaScript object, which you can create\n   * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular do\n   * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also\n   * that your object does not have to implement all methods. If you find yourself creating a method that doesn't\n   * do anything, you can simply omit it. Note however, that if `error` method is not provided, all errors will\n   * be left uncaught.\n   *\n   * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.\n   * This means you can provide three functions as arguments to `subscribe`, where first function is equivalent\n   * of a `next` method, second of an `error` method and third of a `complete` method. Just as in case of Observer,\n   * if you do not need to listen for something, you can omit a function, preferably by passing `undefined` or `null`,\n   * since `subscribe` recognizes these functions by where they were placed in function call. When it comes\n   * to `error` function, just as before, if not provided, errors emitted by an Observable will be thrown.\n   *\n   * Whatever style of calling `subscribe` you use, in both cases it returns a Subscription object.\n   * This object allows you to call `unsubscribe` on it, which in turn will stop work that an Observable does and will clean\n   * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback\n   * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.\n   *\n   * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.\n   * It is an Observable itself that decides when these functions will be called. For example {@link of}\n   * by default emits all its values synchronously. Always check documentation for how given Observable\n   * will behave when subscribed and if its default behavior can be modified with a {@link Scheduler}.\n   *\n   * @example <caption>Subscribe with an Observer</caption>\n   * const sumObserver = {\n   *   sum: 0,\n   *   next(value) {\n   *     console.log('Adding: ' + value);\n   *     this.sum = this.sum + value;\n   *   },\n   *   error() { // We actually could just remove this method,\n   *   },        // since we do not really care about errors right now.\n   *   complete() {\n   *     console.log('Sum equals: ' + this.sum);\n   *   }\n   * };\n   *\n   * Rx.Observable.of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.\n   * .subscribe(sumObserver);\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   *\n   *\n   * @example <caption>Subscribe with functions</caption>\n   * let sum = 0;\n   *\n   * Rx.Observable.of(1, 2, 3)\n   * .subscribe(\n   *   function(value) {\n   *     console.log('Adding: ' + value);\n   *     sum = sum + value;\n   *   },\n   *   undefined,\n   *   function() {\n   *     console.log('Sum equals: ' + sum);\n   *   }\n   * );\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   *\n   *\n   * @example <caption>Cancel a subscription</caption>\n   * const subscription = Rx.Observable.interval(1000).subscribe(\n   *   num => console.log(num),\n   *   undefined,\n   *   () => console.log('completed!') // Will not be called, even\n   * );                                // when cancelling subscription\n   *\n   *\n   * setTimeout(() => {\n   *   subscription.unsubscribe();\n   *   console.log('unsubscribed!');\n   * }, 2500);\n   *\n   * // Logs:\n   * // 0 after 1s\n   * // 1 after 2s\n   * // \"unsubscribed!\" after 2.5s\n   *\n   *\n   * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,\n   *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed\n   *  Observable.\n   * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,\n   *  the error will be thrown as unhandled.\n   * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.\n   * @return {ISubscription} a subscription reference to the registered handlers\n   * @method subscribe\n   */\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): Subscription {\n\n    const { operator } = this;\n    const sink = toSubscriber(observerOrNext, error, complete);\n\n    if (operator) {\n      operator.call(sink, this.source);\n    } else {\n      sink.add(this.source ? this._subscribe(sink) : this._trySubscribe(sink));\n    }\n\n    if (sink.syncErrorThrowable) {\n      sink.syncErrorThrowable = false;\n      if (sink.syncErrorThrown) {\n        throw sink.syncErrorValue;\n      }\n    }\n\n    return sink;\n  }\n\n  protected _trySubscribe(sink: Subscriber<T>): TeardownLogic {\n    try {\n      return this._subscribe(sink);\n    } catch (err) {\n      sink.syncErrorThrown = true;\n      sink.syncErrorValue = err;\n      sink.error(err);\n    }\n  }\n\n  /**\n   * @method forEach\n   * @param {Function} next a handler for each value emitted by the observable\n   * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise\n   * @return {Promise} a promise that either resolves on observable completion or\n   *  rejects with the handled error\n   */\n  forEach(next: (value: T) => void, PromiseCtor?: typeof Promise): Promise<void> {\n    if (!PromiseCtor) {\n      if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n        PromiseCtor = root.Rx.config.Promise;\n      } else if (root.Promise) {\n        PromiseCtor = root.Promise;\n      }\n    }\n\n    if (!PromiseCtor) {\n      throw new Error('no Promise impl found');\n    }\n\n    return new PromiseCtor<void>((resolve, reject) => {\n      // Must be declared in a separate statement to avoid a RefernceError when\n      // accessing subscription below in the closure due to Temporal Dead Zone.\n      let subscription: Subscription;\n      subscription = this.subscribe((value) => {\n        if (subscription) {\n          // if there is a subscription, then we can surmise\n          // the next handling is asynchronous. Any errors thrown\n          // need to be rejected explicitly and unsubscribe must be\n          // called manually\n          try {\n            next(value);\n          } catch (err) {\n            reject(err);\n            subscription.unsubscribe();\n          }\n        } else {\n          // if there is NO subscription, then we're getting a nexted\n          // value synchronously during subscription. We can just call it.\n          // If it errors, Observable's `subscribe` will ensure the\n          // unsubscription logic is called, then synchronously rethrow the error.\n          // After that, Promise will trap the error and send it\n          // down the rejection path.\n          next(value);\n        }\n      }, reject, resolve);\n    });\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): TeardownLogic {\n    return this.source.subscribe(subscriber);\n  }\n\n  // `if` and `throw` are special snow flakes, the compiler sees them as reserved words\n  static if: typeof IfObservable.create;\n  static throw: typeof ErrorObservable.create;\n\n  /**\n   * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n   * @method Symbol.observable\n   * @return {Observable} this instance of the observable\n   */\n  [Symbol_observable]() {\n    return this;\n  }\n\n  /* tslint:disable:max-line-length */\n  pipe(): Observable<T>\n  pipe<A>(op1: OperatorFunction<T, A>): Observable<A>\n  pipe<A, B>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>): Observable<B>\n  pipe<A, B, C>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>): Observable<C>\n  pipe<A, B, C, D>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>): Observable<D>\n  pipe<A, B, C, D, E>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>): Observable<E>\n  pipe<A, B, C, D, E, F>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>): Observable<F>\n  pipe<A, B, C, D, E, F, G>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>): Observable<G>\n  pipe<A, B, C, D, E, F, G, H>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>): Observable<H>\n  pipe<A, B, C, D, E, F, G, H, I>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>, op9: OperatorFunction<H, I>): Observable<I>\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Used to stitch together functional operators into a chain.\n   * @method pipe\n   * @return {Observable} the Observable result of all of the operators having\n   * been called in the order they were passed in.\n   *\n   * @example\n   *\n   * import { map, filter, scan } from 'rxjs/operators';\n   *\n   * Rx.Observable.interval(1000)\n   *   .pipe(\n   *     filter(x => x % 2 === 0),\n   *     map(x => x + x),\n   *     scan((acc, x) => acc + x)\n   *   )\n   *   .subscribe(x => console.log(x))\n   */\n  pipe<R>(...operations: OperatorFunction<T, R>[]): Observable<R> {\n    if (operations.length === 0) {\n      return this as any;\n    }\n\n    return pipeFromArray(operations)(this);\n  }\n\n  /* tslint:disable:max-line-length */\n  toPromise<T>(this: Observable<T>): Promise<T>;\n  toPromise<T>(this: Observable<T>, PromiseCtor: typeof Promise): Promise<T>;\n  toPromise<T>(this: Observable<T>, PromiseCtor: PromiseConstructorLike): Promise<T>;\n  /* tslint:enable:max-line-length */\n\n  toPromise(PromiseCtor?: PromiseConstructorLike) {\n    if (!PromiseCtor) {\n      if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n        PromiseCtor = root.Rx.config.Promise;\n      } else if (root.Promise) {\n        PromiseCtor = root.Promise;\n      }\n    }\n\n    if (!PromiseCtor) {\n      throw new Error('no Promise impl found');\n    }\n\n    return new PromiseCtor((resolve, reject) => {\n      let value: any;\n      this.subscribe((x: T) => value = x, (err: any) => reject(err), () => resolve(value));\n    }) as Promise<T>;\n  }\n}\n","import { root } from '../util/root';\n\nexport function symbolIteratorPonyfill(root: any) {\n  const Symbol: any = root.Symbol;\n\n  if (typeof Symbol === 'function') {\n    if (!Symbol.iterator) {\n      Symbol.iterator = Symbol('iterator polyfill');\n    }\n    return Symbol.iterator;\n  } else {\n    // [for Mozilla Gecko 27-35:](https://mzl.la/2ewE1zC)\n    const { Set } = root;\n    if (Set && typeof new Set()['@@iterator'] === 'function') {\n      return '@@iterator';\n    }\n    const { Map } = root;\n    // required for compatability with es6-shim\n    if (Map) {\n      let keys = Object.getOwnPropertyNames(Map.prototype);\n      for (let i = 0; i < keys.length; ++i) {\n        let key = keys[i];\n        // according to spec, Map.prototype[@@iterator] and Map.orototype.entries must be equal.\n        if (key !== 'entries' && key !== 'size' && Map.prototype[key] === Map.prototype['entries']) {\n          return key;\n        }\n      }\n    }\n    return '@@iterator';\n  }\n}\n\nexport const iterator = symbolIteratorPonyfill(root);\n\n/**\n * @deprecated use iterator instead\n */\nexport const $$iterator = iterator;\n","import { Subscriber } from './Subscriber';\nimport { OuterSubscriber } from './OuterSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class InnerSubscriber<T, R> extends Subscriber<R> {\n  private index: number = 0;\n\n  constructor(private parent: OuterSubscriber<T, R>, private outerValue: T, private outerIndex: number) {\n    super();\n  }\n\n  protected _next(value: R): void {\n    this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);\n  }\n\n  protected _error(error: any): void {\n    this.parent.notifyError(error, this);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.parent.notifyComplete(this);\n    this.unsubscribe();\n  }\n}\n","import { root } from './root';\nimport { isArrayLike } from './isArrayLike';\nimport { isPromise } from './isPromise';\nimport { isObject } from './isObject';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { Subscription } from '../Subscription';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { observable as Symbol_observable } from '../symbol/observable';\n\nexport function subscribeToResult<T, R>(outerSubscriber: OuterSubscriber<T, R>,\n                                        result: any,\n                                        outerValue?: T,\n                                        outerIndex?: number): Subscription;\nexport function subscribeToResult<T>(outerSubscriber: OuterSubscriber<any, any>,\n                                     result: ObservableInput<T>,\n                                     outerValue?: T,\n                                     outerIndex?: number): Subscription {\n  let destination: Subscriber<any> = new InnerSubscriber(outerSubscriber, outerValue, outerIndex);\n\n  if (destination.closed) {\n    return null;\n  }\n\n  if (result instanceof Observable) {\n    if (result._isScalar) {\n      destination.next((<any>result).value);\n      destination.complete();\n      return null;\n    } else {\n      destination.syncErrorThrowable = true;\n      return result.subscribe(destination);\n    }\n  } else if (isArrayLike(result)) {\n    for (let i = 0, len = result.length; i < len && !destination.closed; i++) {\n      destination.next(result[i]);\n    }\n    if (!destination.closed) {\n      destination.complete();\n    }\n  } else if (isPromise(result)) {\n    result.then(\n      (value) => {\n        if (!destination.closed) {\n          destination.next(<any>value);\n          destination.complete();\n        }\n      },\n      (err: any) => destination.error(err)\n    )\n    .then(null, (err: any) => {\n      // Escaping the Promise trap: globally throw unhandled errors\n      root.setTimeout(() => { throw err; });\n    });\n    return destination;\n  } else if (result && typeof result[Symbol_iterator] === 'function') {\n    const iterator = <any>result[Symbol_iterator]();\n    do {\n      let item = iterator.next();\n      if (item.done) {\n        destination.complete();\n        break;\n      }\n      destination.next(item.value);\n      if (destination.closed) {\n        break;\n      }\n    } while (true);\n  } else if (result && typeof result[Symbol_observable] === 'function') {\n    const obs = result[Symbol_observable]();\n    if (typeof obs.subscribe !== 'function') {\n      destination.error(new TypeError('Provided object does not correctly implement Symbol.observable'));\n    } else {\n      return obs.subscribe(new InnerSubscriber(outerSubscriber, outerValue, outerIndex));\n    }\n  } else {\n    const value = isObject(result) ? 'an invalid object' : `'${result}'`;\n    const msg = `You provided ${value} where a stream was expected.`\n      + ' You can provide an Observable, Promise, Array, or Iterable.';\n    destination.error(new TypeError(msg));\n  }\n  return null;\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Ignores source values for a duration determined by another Observable, then\n * emits the most recent value from the source Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link auditTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/audit.png\" width=\"100%\">\n *\n * `audit` is similar to `throttle`, but emits the last value from the silenced\n * time window, instead of the first value. `audit` emits the most recent value\n * from the source Observable on the output Observable as soon as its internal\n * timer becomes disabled, and ignores source values while the timer is enabled.\n * Initially, the timer is disabled. As soon as the first source value arrives,\n * the timer is enabled by calling the `durationSelector` function with the\n * source value, which returns the \"duration\" Observable. When the duration\n * Observable emits a value or completes, the timer is disabled, then the most\n * recent source value is emitted on the output Observable, and this process\n * repeats for the next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.audit(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration, returned as an Observable or a Promise.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method audit\n * @owner Observable\n */\nexport function audit<T>(durationSelector: (value: T) => SubscribableOrPromise<any>): MonoTypeOperatorFunction<T> {\n  return function auditOperatorFunction(source: Observable<T>) {\n    return source.lift(new AuditOperator(durationSelector));\n  };\n}\n\nclass AuditOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new AuditSubscriber<T, T>(subscriber, this.durationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass AuditSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private value: T;\n  private hasValue: boolean = false;\n  private throttled: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private durationSelector: (value: T) => SubscribableOrPromise<any>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.value = value;\n    this.hasValue = true;\n    if (!this.throttled) {\n      const duration = tryCatch(this.durationSelector)(value);\n      if (duration === errorObject) {\n        this.destination.error(errorObject.e);\n      } else {\n        const innerSubscription = subscribeToResult(this, duration);\n        if (innerSubscription.closed) {\n          this.clearThrottle();\n        } else {\n          this.add(this.throttled = innerSubscription);\n        }\n      }\n    }\n  }\n\n  clearThrottle() {\n    const { value, hasValue, throttled } = this;\n    if (throttled) {\n      this.remove(throttled);\n      this.throttled = null;\n      throttled.unsubscribe();\n    }\n    if (hasValue) {\n      this.value = null;\n      this.hasValue = false;\n      this.destination.next(value);\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R, outerIndex: number, innerIndex: number): void {\n    this.clearThrottle();\n  }\n\n  notifyComplete(): void {\n    this.clearThrottle();\n  }\n}\n","import { Scheduler } from '../Scheduler';\nimport { Subscription } from '../Subscription';\n\n/**\n * A unit of work to be executed in a {@link Scheduler}. An action is typically\n * created from within a Scheduler and an RxJS user does not need to concern\n * themselves about creating and manipulating an Action.\n *\n * ```ts\n * class Action<T> extends Subscription {\n *   new (scheduler: Scheduler, work: (state?: T) => void);\n *   schedule(state?: T, delay: number = 0): Subscription;\n * }\n * ```\n *\n * @class Action<T>\n */\nexport class Action<T> extends Subscription {\n  constructor(scheduler: Scheduler, work: (this: Action<T>, state?: T) => void) {\n    super();\n  }\n  /**\n   * Schedules this action on its parent Scheduler for execution. May be passed\n   * some context object, `state`. May happen at some point in the future,\n   * according to the `delay` parameter, if specified.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler.\n   * @return {void}\n   */\n  public schedule(state?: T, delay: number = 0): Subscription {\n    return this;\n  }\n}\n","import { root } from '../util/root';\nimport { Action } from './Action';\nimport { Subscription } from '../Subscription';\nimport { AsyncScheduler } from './AsyncScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AsyncAction<T> extends Action<T> {\n\n  public id: any;\n  public state: T;\n  public delay: number;\n  protected pending: boolean = false;\n\n  constructor(protected scheduler: AsyncScheduler,\n              protected work: (this: AsyncAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n\n    if (this.closed) {\n      return this;\n     }\n\n    // Always replace the current state with the new state.\n    this.state = state;\n\n    // Set the pending flag indicating that this action has been scheduled, or\n    // has recursively rescheduled itself.\n    this.pending = true;\n\n    const id = this.id;\n    const scheduler = this.scheduler;\n\n    //\n    // Important implementation note:\n    //\n    // Actions only execute once by default, unless rescheduled from within the\n    // scheduled callback. This allows us to implement single and repeat\n    // actions via the same code path, without adding API surface area, as well\n    // as mimic traditional recursion but across asynchronous boundaries.\n    //\n    // However, JS runtimes and timers distinguish between intervals achieved by\n    // serial `setTimeout` calls vs. a single `setInterval` call. An interval of\n    // serial `setTimeout` calls can be individually delayed, which delays\n    // scheduling the next `setTimeout`, and so on. `setInterval` attempts to\n    // guarantee the interval callback will be invoked more precisely to the\n    // interval period, regardless of load.\n    //\n    // Therefore, we use `setInterval` to schedule single and repeat actions.\n    // If the action reschedules itself with the same delay, the interval is not\n    // canceled. If the action doesn't reschedule, or reschedules with a\n    // different delay, the interval will be canceled after scheduled callback\n    // execution.\n    //\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, delay);\n    }\n\n    this.delay = delay;\n    // If this action has already an async Id, don't request a new one.\n    this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);\n\n    return this;\n  }\n\n  protected requestAsyncId(scheduler: AsyncScheduler, id?: any, delay: number = 0): any {\n    return root.setInterval(scheduler.flush.bind(scheduler, this), delay);\n  }\n\n  protected recycleAsyncId(scheduler: AsyncScheduler, id: any, delay: number = 0): any {\n    // If this action is rescheduled with the same delay time, don't clear the interval id.\n    if (delay !== null && this.delay === delay && this.pending === false) {\n      return id;\n    }\n    // Otherwise, if the action's delay time is different from the current delay,\n    // or the action has been rescheduled before it's executed, clear the interval id\n    return root.clearInterval(id) && undefined || undefined;\n  }\n\n  /**\n   * Immediately executes this action and the `work` it contains.\n   * @return {any}\n   */\n  public execute(state: T, delay: number): any {\n\n    if (this.closed) {\n      return new Error('executing a cancelled action');\n    }\n\n    this.pending = false;\n    const error = this._execute(state, delay);\n    if (error) {\n      return error;\n    } else if (this.pending === false && this.id != null) {\n      // Dequeue if the action didn't reschedule itself. Don't call\n      // unsubscribe(), because the action could reschedule later.\n      // For example:\n      // ```\n      // scheduler.schedule(function doWork(counter) {\n      //   /* ... I'm a busy worker bee ... */\n      //   var originalAction = this;\n      //   /* wait 100ms before rescheduling the action */\n      //   setTimeout(function () {\n      //     originalAction.schedule(counter + 1);\n      //   }, 100);\n      // }, 1000);\n      // ```\n      this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n    }\n  }\n\n  protected _execute(state: T, delay: number): any {\n    let errored: boolean = false;\n    let errorValue: any = undefined;\n    try {\n      this.work(state);\n    } catch (e) {\n      errored = true;\n      errorValue = !!e && e || new Error(e);\n    }\n    if (errored) {\n      this.unsubscribe();\n      return errorValue;\n    }\n  }\n\n  protected _unsubscribe() {\n\n    const id = this.id;\n    const scheduler = this.scheduler;\n    const actions = scheduler.actions;\n    const index = actions.indexOf(this);\n\n    this.work  = null;\n    this.state = null;\n    this.pending = false;\n    this.scheduler = null;\n\n    if (index !== -1) {\n      actions.splice(index, 1);\n    }\n\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, null);\n    }\n\n    this.delay = null;\n  }\n}\n","import { Action } from './scheduler/Action';\nimport { Subscription } from './Subscription';\n\nexport interface IScheduler {\n  now(): number;\n  schedule<T>(work: (this: Action<T>, state?: T) => void, delay?: number, state?: T): Subscription;\n}\n/**\n * An execution context and a data structure to order tasks and schedule their\n * execution. Provides a notion of (potentially virtual) time, through the\n * `now()` getter method.\n *\n * Each unit of work in a Scheduler is called an {@link Action}.\n *\n * ```ts\n * class Scheduler {\n *   now(): number;\n *   schedule(work, delay?, state?): Subscription;\n * }\n * ```\n *\n * @class Scheduler\n */\nexport class Scheduler implements IScheduler {\n\n  public static now: () => number = Date.now ? Date.now : () => +new Date();\n\n  constructor(private SchedulerAction: typeof Action,\n              now: () => number = Scheduler.now) {\n    this.now = now;\n  }\n\n  /**\n   * A getter method that returns a number representing the current time\n   * (at the time this function was called) according to the scheduler's own\n   * internal clock.\n   * @return {number} A number that represents the current time. May or may not\n   * have a relation to wall-clock time. May or may not refer to a time unit\n   * (e.g. milliseconds).\n   */\n  public now: () => number;\n\n  /**\n   * Schedules a function, `work`, for execution. May happen at some point in\n   * the future, according to the `delay` parameter, if specified. May be passed\n   * some context object, `state`, which will be passed to the `work` function.\n   *\n   * The given arguments will be processed an stored as an Action object in a\n   * queue of actions.\n   *\n   * @param {function(state: ?T): ?Subscription} work A function representing a\n   * task, or some unit of work to be executed by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler itself.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @return {Subscription} A subscription in order to be able to unsubscribe\n   * the scheduled work.\n   */\n  public schedule<T>(work: (this: Action<T>, state?: T) => void, delay: number = 0, state?: T): Subscription {\n    return new this.SchedulerAction<T>(this, work).schedule(state, delay);\n  }\n}\n","import { Scheduler } from '../Scheduler';\nimport { AsyncAction } from './AsyncAction';\n\nexport class AsyncScheduler extends Scheduler {\n  public actions: Array<AsyncAction<any>> = [];\n  /**\n   * A flag to indicate whether the Scheduler is currently executing a batch of\n   * queued actions.\n   * @type {boolean}\n   */\n  public active: boolean = false;\n  /**\n   * An internal ID used to track the latest asynchronous task such as those\n   * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and\n   * others.\n   * @type {any}\n   */\n  public scheduled: any = undefined;\n\n  public flush(action: AsyncAction<any>): void {\n\n    const {actions} = this;\n\n    if (this.active) {\n      actions.push(action);\n      return;\n    }\n\n    let error: any;\n    this.active = true;\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (action = actions.shift()); // exhaust the scheduler queue\n\n    this.active = false;\n\n    if (error) {\n      while (action = actions.shift()) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\n/**\n *\n * Async Scheduler\n *\n * <span class=\"informal\">Schedule task as if you used setTimeout(task, duration)</span>\n *\n * `async` scheduler schedules tasks asynchronously, by putting them on the JavaScript\n * event loop queue. It is best used to delay tasks in time or to schedule tasks repeating\n * in intervals.\n *\n * If you just want to \"defer\" task, that is to perform it right after currently\n * executing synchronous code ends (commonly achieved by `setTimeout(deferredTask, 0)`),\n * better choice will be the {@link asap} scheduler.\n *\n * @example <caption>Use async scheduler to delay task</caption>\n * const task = () => console.log('it works!');\n *\n * Rx.Scheduler.async.schedule(task, 2000);\n *\n * // After 2 seconds logs:\n * // \"it works!\"\n *\n *\n * @example <caption>Use async scheduler to repeat task in intervals</caption>\n * function task(state) {\n *   console.log(state);\n *   this.schedule(state + 1, 1000); // `this` references currently executing Action,\n *                                   // which we reschedule with new state and delay\n * }\n *\n * Rx.Scheduler.async.schedule(task, 3000, 0);\n *\n * // Logs:\n * // 0 after 3s\n * // 1 after 4s\n * // 2 after 5s\n * // 3 after 6s\n *\n * @static true\n * @name async\n * @owner Scheduler\n */\n\nexport const async = new AsyncScheduler(AsyncAction);\n","import { isArray } from '../util/isArray';\n\nexport function isNumeric(val: any): val is number {\n  // parseFloat NaNs numeric-cast false positives (null|true|false|\"\")\n  // ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n  // subtraction forces infinities to NaN\n  // adding 1 corrects loss of precision from parseFloat (#15100)\n  return !isArray(val) && (val - parseFloat(val) + 1) >= 0;\n};\n","import { Scheduler } from '../Scheduler';\nexport function isScheduler(value: any): value is Scheduler {\n  return value && typeof (<any>value).schedule === 'function';\n}\n","export function isDate(value: any): value is Date {\n  return value instanceof Date && !isNaN(+value);\n}\n","import { isNumeric } from '../util/isNumeric';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\nimport { isScheduler } from '../util/isScheduler';\nimport { isDate } from '../util/isDate';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class TimerObservable extends Observable<number> {\n\n  /**\n   * Creates an Observable that starts emitting after an `initialDelay` and\n   * emits ever increasing numbers after each `period` of time thereafter.\n   *\n   * <span class=\"informal\">Its like {@link interval}, but you can specify when\n   * should the emissions start.</span>\n   *\n   * <img src=\"./img/timer.png\" width=\"100%\">\n   *\n   * `timer` returns an Observable that emits an infinite sequence of ascending\n   * integers, with a constant interval of time, `period` of your choosing\n   * between those emissions. The first emission happens after the specified\n   * `initialDelay`. The initial delay may be a {@link Date}. By default, this\n   * operator uses the `async` IScheduler to provide a notion of time, but you\n   * may pass any IScheduler to it. If `period` is not specified, the output\n   * Observable emits only one value, `0`. Otherwise, it emits an infinite\n   * sequence.\n   *\n   * @example <caption>Emits ascending numbers, one every second (1000ms), starting after 3 seconds</caption>\n   * var numbers = Rx.Observable.timer(3000, 1000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @example <caption>Emits one number after five seconds</caption>\n   * var numbers = Rx.Observable.timer(5000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link interval}\n   * @see {@link delay}\n   *\n   * @param {number|Date} initialDelay The initial delay time to wait before\n   * emitting the first value of `0`.\n   * @param {number} [period] The period of time between emissions of the\n   * subsequent numbers.\n   * @param {Scheduler} [scheduler=async] The IScheduler to use for scheduling\n   * the emission of values, and providing a notion of \"time\".\n   * @return {Observable} An Observable that emits a `0` after the\n   * `initialDelay` and ever increasing numbers after each `period` of time\n   * thereafter.\n   * @static true\n   * @name timer\n   * @owner Observable\n   */\n  static create(initialDelay: number | Date = 0,\n                period?: number | IScheduler,\n                scheduler?: IScheduler): Observable<number> {\n    return new TimerObservable(initialDelay, period, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { index, period, subscriber } = state;\n    const action = (<any> this);\n\n    subscriber.next(index);\n\n    if (subscriber.closed) {\n      return;\n    } else if (period === -1) {\n      return subscriber.complete();\n    }\n\n    state.index = index + 1;\n    action.schedule(state, period);\n  }\n\n  private period: number = -1;\n  private dueTime: number = 0;\n  private scheduler: IScheduler;\n\n  constructor(dueTime: number | Date = 0,\n              period?: number | IScheduler,\n              scheduler?: IScheduler) {\n    super();\n\n    if (isNumeric(period)) {\n      this.period = Number(period) < 1 && 1 || Number(period);\n    } else if (isScheduler(period)) {\n      scheduler = <IScheduler> period;\n    }\n\n    if (!isScheduler(scheduler)) {\n      scheduler = async;\n    }\n\n    this.scheduler = scheduler;\n    this.dueTime = isDate(dueTime) ?\n      (+dueTime - this.scheduler.now()) :\n      (<number> dueTime);\n  }\n\n  protected _subscribe(subscriber: Subscriber<number>): TeardownLogic {\n    const index = 0;\n    const { period, dueTime, scheduler } = this;\n\n    return scheduler.schedule(TimerObservable.dispatch, dueTime, {\n      index, period, subscriber\n    });\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Buffers the source Observable values until `closingNotifier` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when another Observable emits.</span>\n *\n * <img src=\"./img/buffer.png\" width=\"100%\">\n *\n * Buffers the incoming Observable values until the given `closingNotifier`\n * Observable emits a value, at which point it emits the buffer on the output\n * Observable and starts a new buffer internally, awaiting the next time\n * `closingNotifier` emits.\n *\n * @example <caption>On every click, emit array of most recent interval events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var buffered = interval.buffer(clicks);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link window}\n *\n * @param {Observable<any>} closingNotifier An Observable that signals the\n * buffer to be emitted on the output Observable.\n * @return {Observable<T[]>} An Observable of buffers, which are arrays of\n * values.\n * @method buffer\n * @owner Observable\n */\nexport function buffer<T>(closingNotifier: Observable<any>): OperatorFunction<T, T[]> {\n  return function bufferOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferOperator<T>(closingNotifier));\n  };\n}\n\nclass BufferOperator<T> implements Operator<T, T[]> {\n\n  constructor(private closingNotifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferSubscriber(subscriber, this.closingNotifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferSubscriber<T> extends OuterSubscriber<T, any> {\n  private buffer: T[] = [];\n\n  constructor(destination: Subscriber<T[]>, closingNotifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, closingNotifier));\n  }\n\n  protected _next(value: T) {\n    this.buffer.push(value);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    const buffer = this.buffer;\n    this.buffer = [];\n    this.destination.next(buffer);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Buffers the source Observable values until the size hits the maximum\n * `bufferSize` given.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when its size reaches `bufferSize`.</span>\n *\n * <img src=\"./img/bufferCount.png\" width=\"100%\">\n *\n * Buffers a number of values from the source Observable by `bufferSize` then\n * emits the buffer and clears it, and starts a new buffer each\n * `startBufferEvery` values. If `startBufferEvery` is not provided or is\n * `null`, then new buffers are started immediately at the start of the source\n * and when each buffer closes and is emitted.\n *\n * @example <caption>Emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>On every click, emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2, 1);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link pairwise}\n * @see {@link windowCount}\n *\n * @param {number} bufferSize The maximum size of the buffer emitted.\n * @param {number} [startBufferEvery] Interval at which to start a new buffer.\n * For example if `startBufferEvery` is `2`, then a new buffer will be started\n * on every other value from the source. A new buffer is started at the\n * beginning of the source by default.\n * @return {Observable<T[]>} An Observable of arrays of buffered values.\n * @method bufferCount\n * @owner Observable\n */\nexport function bufferCount<T>(bufferSize: number, startBufferEvery: number = null): OperatorFunction<T, T[]> {\n  return function bufferCountOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferCountOperator<T>(bufferSize, startBufferEvery));\n  };\n}\n\nclass BufferCountOperator<T> implements Operator<T, T[]> {\n  private subscriberClass: any;\n\n  constructor(private bufferSize: number, private startBufferEvery: number) {\n    if (!startBufferEvery || bufferSize === startBufferEvery) {\n      this.subscriberClass = BufferCountSubscriber;\n    } else {\n      this.subscriberClass = BufferSkipCountSubscriber;\n    }\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): TeardownLogic {\n    return source.subscribe(new this.subscriberClass(subscriber, this.bufferSize, this.startBufferEvery));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferCountSubscriber<T> extends Subscriber<T> {\n  private buffer: T[] = [];\n\n  constructor(destination: Subscriber<T[]>, private bufferSize: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const buffer = this.buffer;\n\n    buffer.push(value);\n\n    if (buffer.length == this.bufferSize) {\n      this.destination.next(buffer);\n      this.buffer = [];\n    }\n  }\n\n  protected _complete(): void {\n    const buffer = this.buffer;\n    if (buffer.length > 0) {\n      this.destination.next(buffer);\n    }\n    super._complete();\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferSkipCountSubscriber<T> extends Subscriber<T> {\n  private buffers: Array<T[]> = [];\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T[]>, private bufferSize: number, private startBufferEvery: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const { bufferSize, startBufferEvery, buffers, count } = this;\n\n    this.count++;\n    if (count % startBufferEvery === 0) {\n      buffers.push([]);\n    }\n\n    for (let i = buffers.length; i--; ) {\n      const buffer = buffers[i];\n      buffer.push(value);\n      if (buffer.length === bufferSize) {\n        buffers.splice(i, 1);\n        this.destination.next(buffer);\n      }\n    }\n  }\n\n  protected _complete(): void {\n    const { buffers, destination } = this;\n\n    while (buffers.length > 0) {\n      let buffer = buffers.shift();\n      if (buffer.length > 0) {\n        destination.next(buffer);\n      }\n    }\n    super._complete();\n  }\n\n}\n","import { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { Operator } from '../Operator';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { isScheduler } from '../util/isScheduler';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function bufferTime<T>(bufferTimeSpan: number, scheduler?: IScheduler): OperatorFunction<T, T[]>;\nexport function bufferTime<T>(bufferTimeSpan: number, bufferCreationInterval: number, scheduler?: IScheduler): OperatorFunction<T, T[]>;\nexport function bufferTime<T>(bufferTimeSpan: number, bufferCreationInterval: number, maxBufferSize: number, scheduler?: IScheduler): OperatorFunction<T, T[]>;\n/* tslint:enable:max-line-length */\n\n/**\n * Buffers the source Observable values for a specific time period.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * those arrays periodically in time.</span>\n *\n * <img src=\"./img/bufferTime.png\" width=\"100%\">\n *\n * Buffers values from the source for a specific time duration `bufferTimeSpan`.\n * Unless the optional argument `bufferCreationInterval` is given, it emits and\n * resets the buffer every `bufferTimeSpan` milliseconds. If\n * `bufferCreationInterval` is given, this operator opens the buffer every\n * `bufferCreationInterval` milliseconds and closes (emits and resets) the\n * buffer every `bufferTimeSpan` milliseconds. When the optional argument\n * `maxBufferSize` is specified, the buffer will be closed either after\n * `bufferTimeSpan` milliseconds or when it contains `maxBufferSize` elements.\n *\n * @example <caption>Every second, emit an array of the recent click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(1000);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds, emit the click events from the next 2 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(2000, 5000);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link windowTime}\n *\n * @param {number} bufferTimeSpan The amount of time to fill each buffer array.\n * @param {number} [bufferCreationInterval] The interval at which to start new\n * buffers.\n * @param {number} [maxBufferSize] The maximum buffer size.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine buffer boundaries.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferTime\n * @owner Observable\n */\nexport function bufferTime<T>(bufferTimeSpan: number): OperatorFunction<T, T[]> {\n  let length: number = arguments.length;\n\n  let scheduler: IScheduler = async;\n  if (isScheduler(arguments[arguments.length - 1])) {\n    scheduler = arguments[arguments.length - 1];\n    length--;\n  }\n\n  let bufferCreationInterval: number = null;\n  if (length >= 2) {\n    bufferCreationInterval = arguments[1];\n  }\n\n  let maxBufferSize: number = Number.POSITIVE_INFINITY;\n  if (length >= 3) {\n    maxBufferSize = arguments[2];\n  }\n\n  return function bufferTimeOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferTimeOperator<T>(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler));\n  };\n}\n\nclass BufferTimeOperator<T> implements Operator<T, T[]> {\n  constructor(private bufferTimeSpan: number,\n              private bufferCreationInterval: number,\n              private maxBufferSize: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferTimeSubscriber(\n      subscriber, this.bufferTimeSpan, this.bufferCreationInterval, this.maxBufferSize, this.scheduler\n    ));\n  }\n}\n\nclass Context<T> {\n  buffer: T[] = [];\n  closeAction: Subscription;\n}\n\ntype CreationState<T> = {\n  bufferTimeSpan: number;\n  bufferCreationInterval: number,\n  subscriber: BufferTimeSubscriber<T>;\n  scheduler: IScheduler;\n};\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferTimeSubscriber<T> extends Subscriber<T> {\n  private contexts: Array<Context<T>> = [];\n  private timespanOnly: boolean;\n\n  constructor(destination: Subscriber<T[]>,\n              private bufferTimeSpan: number,\n              private bufferCreationInterval: number,\n              private maxBufferSize: number,\n              private scheduler: IScheduler) {\n    super(destination);\n    const context = this.openContext();\n    this.timespanOnly = bufferCreationInterval == null || bufferCreationInterval < 0;\n    if (this.timespanOnly) {\n      const timeSpanOnlyState = { subscriber: this, context, bufferTimeSpan };\n      this.add(context.closeAction = scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n    } else {\n      const closeState = { subscriber: this, context };\n      const creationState: CreationState<T> = { bufferTimeSpan, bufferCreationInterval, subscriber: this, scheduler };\n      this.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, closeState));\n      this.add(scheduler.schedule(dispatchBufferCreation, bufferCreationInterval, creationState));\n    }\n  }\n\n  protected _next(value: T) {\n    const contexts = this.contexts;\n    const len = contexts.length;\n    let filledBufferContext: Context<T>;\n    for (let i = 0; i < len; i++) {\n      const context = contexts[i];\n      const buffer = context.buffer;\n      buffer.push(value);\n      if (buffer.length == this.maxBufferSize) {\n        filledBufferContext = context;\n      }\n    }\n\n    if (filledBufferContext) {\n      this.onBufferFull(filledBufferContext);\n    }\n  }\n\n  protected _error(err: any) {\n    this.contexts.length = 0;\n    super._error(err);\n  }\n\n  protected _complete() {\n    const { contexts, destination } = this;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      destination.next(context.buffer);\n    }\n    super._complete();\n  }\n\n  protected _unsubscribe() {\n    this.contexts = null;\n  }\n\n  protected onBufferFull(context: Context<T>) {\n    this.closeContext(context);\n    const closeAction = context.closeAction;\n    closeAction.unsubscribe();\n    this.remove(closeAction);\n\n    if (!this.closed && this.timespanOnly) {\n      context = this.openContext();\n      const bufferTimeSpan = this.bufferTimeSpan;\n      const timeSpanOnlyState = { subscriber: this, context, bufferTimeSpan };\n      this.add(context.closeAction = this.scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n    }\n  }\n\n  openContext(): Context<T> {\n    const context: Context<T> = new Context<T>();\n    this.contexts.push(context);\n    return context;\n  }\n\n  closeContext(context: Context<T>) {\n    this.destination.next(context.buffer);\n    const contexts = this.contexts;\n\n    const spliceIndex = contexts ? contexts.indexOf(context) : -1;\n    if (spliceIndex >= 0) {\n      contexts.splice(contexts.indexOf(context), 1);\n    }\n  }\n}\n\nfunction dispatchBufferTimeSpanOnly(this: Action<any>, state: any) {\n  const subscriber: BufferTimeSubscriber<any> = state.subscriber;\n\n  const prevContext = state.context;\n  if (prevContext) {\n    subscriber.closeContext(prevContext);\n  }\n\n  if (!subscriber.closed) {\n    state.context = subscriber.openContext();\n    state.context.closeAction = this.schedule(state, state.bufferTimeSpan);\n  }\n}\n\ninterface DispatchArg<T> {\n  subscriber: BufferTimeSubscriber<T>;\n  context: Context<T>;\n}\n\nfunction dispatchBufferCreation<T>(this: Action<CreationState<T>>, state: CreationState<T>) {\n  const { bufferCreationInterval, bufferTimeSpan, subscriber, scheduler } = state;\n  const context = subscriber.openContext();\n  const action = <Action<CreationState<T>>>this;\n  if (!subscriber.closed) {\n    subscriber.add(context.closeAction = scheduler.schedule<DispatchArg<T>>(dispatchBufferClose, bufferTimeSpan, { subscriber, context }));\n    action.schedule(state, bufferCreationInterval);\n  }\n}\n\nfunction dispatchBufferClose<T>(arg: DispatchArg<T>) {\n  const { subscriber, context } = arg;\n  subscriber.closeContext(context);\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Buffers the source Observable values starting from an emission from\n * `openings` and ending when the output of `closingSelector` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array. Starts\n * collecting only when `opening` emits, and calls the `closingSelector`\n * function to get an Observable that tells when to close the buffer.</span>\n *\n * <img src=\"./img/bufferToggle.png\" width=\"100%\">\n *\n * Buffers values from the source by opening the buffer via signals from an\n * Observable provided to `openings`, and closing and sending the buffers when\n * a Subscribable or Promise returned by the `closingSelector` function emits.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var buffered = clicks.bufferToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferWhen}\n * @see {@link windowToggle}\n *\n * @param {SubscribableOrPromise<O>} openings A Subscribable or Promise of notifications to start new\n * buffers.\n * @param {function(value: O): SubscribableOrPromise} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns a Subscribable or Promise,\n * which, when it emits, signals that the associated buffer should be emitted\n * and cleared.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferToggle\n * @owner Observable\n */\nexport function bufferToggle<T, O>(\n  openings: SubscribableOrPromise<O>,\n  closingSelector: (value: O) => SubscribableOrPromise<any>\n): OperatorFunction<T, T[]> {\n  return function bufferToggleOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferToggleOperator<T, O>(openings, closingSelector));\n  };\n}\n\nclass BufferToggleOperator<T, O> implements Operator<T, T[]> {\n\n  constructor(private openings: SubscribableOrPromise<O>,\n              private closingSelector: (value: O) => SubscribableOrPromise<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferToggleSubscriber(subscriber, this.openings, this.closingSelector));\n  }\n}\n\ninterface BufferContext<T> {\n  buffer: T[];\n  subscription: Subscription;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferToggleSubscriber<T, O> extends OuterSubscriber<T, O> {\n  private contexts: Array<BufferContext<T>> = [];\n\n  constructor(destination: Subscriber<T[]>,\n              private openings: SubscribableOrPromise<O>,\n              private closingSelector: (value: O) => SubscribableOrPromise<any> | void) {\n    super(destination);\n    this.add(subscribeToResult(this, openings));\n  }\n\n  protected _next(value: T): void {\n    const contexts = this.contexts;\n    const len = contexts.length;\n    for (let i = 0; i < len; i++) {\n      contexts[i].buffer.push(value);\n    }\n  }\n\n  protected _error(err: any): void {\n    const contexts = this.contexts;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      context.subscription.unsubscribe();\n      context.buffer = null;\n      context.subscription = null;\n    }\n    this.contexts = null;\n    super._error(err);\n  }\n\n  protected _complete(): void {\n    const contexts = this.contexts;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      this.destination.next(context.buffer);\n      context.subscription.unsubscribe();\n      context.buffer = null;\n      context.subscription = null;\n    }\n    this.contexts = null;\n    super._complete();\n  }\n\n  notifyNext(outerValue: any, innerValue: O,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, O>): void {\n    outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, O>): void {\n    this.closeBuffer((<any> innerSub).context);\n  }\n\n  private openBuffer(value: O): void {\n    try {\n      const closingSelector = this.closingSelector;\n      const closingNotifier = closingSelector.call(this, value);\n      if (closingNotifier) {\n        this.trySubscribe(closingNotifier);\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  }\n\n  private closeBuffer(context: BufferContext<T>): void {\n    const contexts = this.contexts;\n\n    if (contexts && context) {\n      const { buffer, subscription } = context;\n      this.destination.next(buffer);\n      contexts.splice(contexts.indexOf(context), 1);\n      this.remove(subscription);\n      subscription.unsubscribe();\n    }\n  }\n\n  private trySubscribe(closingNotifier: any): void {\n    const contexts = this.contexts;\n\n    const buffer: Array<T> = [];\n    const subscription = new Subscription();\n    const context = { buffer, subscription };\n    contexts.push(context);\n\n    const innerSubscription = subscribeToResult(this, closingNotifier, <any>context);\n\n    if (!innerSubscription || innerSubscription.closed) {\n      this.closeBuffer(context);\n    } else {\n      (<any> innerSubscription).context = context;\n\n      this.add(innerSubscription);\n      subscription.add(innerSubscription);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Buffers the source Observable values, using a factory function of closing\n * Observables to determine when to close, emit, and reset the buffer.\n *\n * <span class=\"informal\">Collects values from the past as an array. When it\n * starts collecting values, it calls a function that returns an Observable that\n * tells when to close the buffer and restart collecting.</span>\n *\n * <img src=\"./img/bufferWhen.png\" width=\"100%\">\n *\n * Opens a buffer immediately, then closes the buffer when the observable\n * returned by calling `closingSelector` function emits a value. When it closes\n * the buffer, it immediately opens a new buffer and repeats the process.\n *\n * @example <caption>Emit an array of the last clicks every [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferWhen(() =>\n *   Rx.Observable.interval(1000 + Math.random() * 4000)\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link windowWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals buffer closure.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferWhen\n * @owner Observable\n */\nexport function bufferWhen<T>(closingSelector: () => Observable<any>): OperatorFunction<T, T[]> {\n  return function (source: Observable<T>) {\n    return source.lift(new BufferWhenOperator(closingSelector));\n  };\n}\n\nclass BufferWhenOperator<T> implements Operator<T, T[]> {\n\n  constructor(private closingSelector: () => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferWhenSubscriber<T> extends OuterSubscriber<T, any> {\n  private buffer: T[];\n  private subscribing: boolean = false;\n  private closingSubscription: Subscription;\n\n  constructor(destination: Subscriber<T[]>, private closingSelector: () => Observable<any>) {\n    super(destination);\n    this.openBuffer();\n  }\n\n  protected _next(value: T) {\n    this.buffer.push(value);\n  }\n\n  protected _complete() {\n    const buffer = this.buffer;\n    if (buffer) {\n      this.destination.next(buffer);\n    }\n    super._complete();\n  }\n\n  protected _unsubscribe() {\n    this.buffer = null;\n    this.subscribing = false;\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openBuffer();\n  }\n\n  notifyComplete(): void {\n    if (this.subscribing) {\n      this.complete();\n    } else {\n      this.openBuffer();\n    }\n  }\n\n  openBuffer() {\n\n    let { closingSubscription } = this;\n\n    if (closingSubscription) {\n      this.remove(closingSubscription);\n      closingSubscription.unsubscribe();\n    }\n\n    const buffer = this.buffer;\n    if (this.buffer) {\n      this.destination.next(buffer);\n    }\n\n    this.buffer = [];\n\n    const closingNotifier = tryCatch(this.closingSelector)();\n\n    if (closingNotifier === errorObject) {\n      this.error(errorObject.e);\n    } else {\n      closingSubscription = new Subscription();\n      this.closingSubscription = closingSubscription;\n      this.add(closingSubscription);\n      this.subscribing = true;\n      closingSubscription.add(subscribeToResult(this, closingNotifier));\n      this.subscribing = false;\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Catches errors on the observable to be handled by returning a new observable or throwing an error.\n *\n * <img src=\"./img/catch.png\" width=\"100%\">\n *\n * @example <caption>Continues with a different Observable when there's an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n == 4) {\n * \t     throw 'four!';\n *     }\n *\t   return n;\n *   })\n *   .catch(err => Observable.of('I', 'II', 'III', 'IV', 'V'))\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, I, II, III, IV, V\n *\n * @example <caption>Retries the caught source Observable again in case of error, similar to retry() operator</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n === 4) {\n * \t     throw 'four!';\n *     }\n * \t   return n;\n *   })\n *   .catch((err, caught) => caught)\n *   .take(30)\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, 1, 2, 3, ...\n *\n * @example <caption>Throws a new error when the source Observable throws an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n *     if (n == 4) {\n *       throw 'four!';\n *     }\n *     return n;\n *   })\n *   .catch(err => {\n *     throw 'error in source. Details: ' + err;\n *   })\n *   .subscribe(\n *     x => console.log(x),\n *     err => console.log(err)\n *   );\n *   // 1, 2, 3, error in source. Details: four!\n *\n * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which\n *  is the source observable, in case you'd like to \"retry\" that observable by returning it again. Whatever observable\n *  is returned by the `selector` will be used to continue the observable chain.\n * @return {Observable} An observable that originates from either the source or the observable returned by the\n *  catch `selector` function.\n * @name catchError\n */\nexport function catchError<T, R>(selector: (err: any, caught: Observable<T>) => ObservableInput<R>): OperatorFunction<T, T | R> {\n  return function catchErrorOperatorFunction(source: Observable<T>): Observable<T | R> {\n    const operator = new CatchOperator(selector);\n    const caught = source.lift(operator);\n    return (operator.caught = caught as Observable<T>);\n  };\n}\n\nclass CatchOperator<T, R> implements Operator<T, T | R> {\n  caught: Observable<T>;\n\n  constructor(private selector: (err: any, caught: Observable<T>) => ObservableInput<T | R>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass CatchSubscriber<T, R> extends OuterSubscriber<T, T | R> {\n  constructor(destination: Subscriber<any>,\n              private selector: (err: any, caught: Observable<T>) => ObservableInput<T | R>,\n              private caught: Observable<T>) {\n    super(destination);\n  }\n\n  // NOTE: overriding `error` instead of `_error` because we don't want\n  // to have this flag this subscriber as `isStopped`. We can mimic the\n  // behavior of the RetrySubscriber (from the `retry` operator), where\n  // we unsubscribe from our source chain, reset our Subscriber flags,\n  // then subscribe to the selector result.\n  error(err: any) {\n    if (!this.isStopped) {\n      let result: any;\n      try {\n        result = this.selector(err, this.caught);\n      } catch (err2) {\n        super.error(err2);\n        return;\n      }\n      this._unsubscribeAndRecycle();\n      this.add(subscribeToResult(this, result));\n    }\n  }\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ScalarObservable<T> extends Observable<T> {\n  static create<T>(value: T, scheduler?: IScheduler): ScalarObservable<T> {\n    return new ScalarObservable(value, scheduler);\n  }\n\n  static dispatch(state: any): void {\n    const { done, value, subscriber } = state;\n\n    if (done) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(value);\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.done = true;\n    (<any> this).schedule(state);\n  }\n\n  _isScalar: boolean = true;\n\n  constructor(public value: T, private scheduler?: IScheduler) {\n    super();\n    if (scheduler) {\n      this._isScalar = false;\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const value = this.value;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(ScalarObservable.dispatch, 0, {\n        done: false, value, subscriber\n      });\n    } else {\n      subscriber.next(value);\n      if (!subscriber.closed) {\n        subscriber.complete();\n      }\n    }\n  }\n}\n","import { IScheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\nexport interface DispatchArg<T> {\n  subscriber: Subscriber<T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class EmptyObservable<T> extends Observable<T> {\n\n  /**\n   * Creates an Observable that emits no items to the Observer and immediately\n   * emits a complete notification.\n   *\n   * <span class=\"informal\">Just emits 'complete', and nothing else.\n   * </span>\n   *\n   * <img src=\"./img/empty.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the complete notification. It can be used for composing with other\n   * Observables, such as in a {@link mergeMap}.\n   *\n   * @example <caption>Emit the number 7, then complete.</caption>\n   * var result = Rx.Observable.empty().startWith(7);\n   * result.subscribe(x => console.log(x));\n   *\n   * @example <caption>Map and flatten only odd numbers to the sequence 'a', 'b', 'c'</caption>\n   * var interval = Rx.Observable.interval(1000);\n   * var result = interval.mergeMap(x =>\n   *   x % 2 === 1 ? Rx.Observable.of('a', 'b', 'c') : Rx.Observable.empty()\n   * );\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following to the console:\n   * // x is equal to the count on the interval eg(0,1,2,3,...)\n   * // x will occur every 1000ms\n   * // if x % 2 is equal to 1 print abc\n   * // if x % 2 is not equal to 1 nothing will be output\n   *\n   * @see {@link create}\n   * @see {@link never}\n   * @see {@link of}\n   * @see {@link throw}\n   *\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emission of the complete notification.\n   * @return {Observable} An \"empty\" Observable: emits only the complete\n   * notification.\n   * @static true\n   * @name empty\n   * @owner Observable\n   */\n  static create<T>(scheduler?: IScheduler): Observable<T> {\n    return new EmptyObservable<T>(scheduler);\n  }\n\n  static dispatch<T>(arg: DispatchArg<T>) {\n    const { subscriber } = arg;\n    subscriber.complete();\n  }\n\n  constructor(private scheduler?: IScheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(EmptyObservable.dispatch, 0, { subscriber });\n    } else {\n      subscriber.complete();\n    }\n  }\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { ScalarObservable } from './ScalarObservable';\nimport { EmptyObservable } from './EmptyObservable';\nimport { Subscriber } from '../Subscriber';\nimport { isScheduler } from '../util/isScheduler';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ArrayObservable<T> extends Observable<T> {\n\n  static create<T>(array: T[], scheduler?: IScheduler): Observable<T> {\n    return new ArrayObservable(array, scheduler);\n  }\n\n  static of<T>(item1: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, item5: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, item5: T, item6: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(...array: Array<T | IScheduler>): Observable<T>;\n  /**\n   * Creates an Observable that emits some values you specify as arguments,\n   * immediately one after the other, and then emits a complete notification.\n   *\n   * <span class=\"informal\">Emits the arguments you provide, then completes.\n   * </span>\n   *\n   * <img src=\"./img/of.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the arguments given, and the complete notification thereafter. It can\n   * be used for composing with other Observables, such as with {@link concat}.\n   * By default, it uses a `null` IScheduler, which means the `next`\n   * notifications are sent synchronously, although with a different IScheduler\n   * it is possible to determine when those notifications will be delivered.\n   *\n   * @example <caption>Emit 10, 20, 30, then 'a', 'b', 'c', then start ticking every second.</caption>\n   * var numbers = Rx.Observable.of(10, 20, 30);\n   * var letters = Rx.Observable.of('a', 'b', 'c');\n   * var interval = Rx.Observable.interval(1000);\n   * var result = numbers.concat(letters).concat(interval);\n   * result.subscribe(x => console.log(x));\n   *\n   * @see {@link create}\n   * @see {@link empty}\n   * @see {@link never}\n   * @see {@link throw}\n   *\n   * @param {...T} values Arguments that represent `next` values to be emitted.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emissions of the `next` notifications.\n   * @return {Observable<T>} An Observable that emits each given input value.\n   * @static true\n   * @name of\n   * @owner Observable\n   */\n  static of<T>(...array: Array<T | IScheduler>): Observable<T> {\n    let scheduler = <IScheduler>array[array.length - 1];\n    if (isScheduler(scheduler)) {\n      array.pop();\n    } else {\n      scheduler = null;\n    }\n\n    const len = array.length;\n    if (len > 1) {\n      return new ArrayObservable<T>(<any>array, scheduler);\n    } else if (len === 1) {\n      return new ScalarObservable<T>(<any>array[0], scheduler);\n    } else {\n      return new EmptyObservable<T>(scheduler);\n    }\n  }\n\n  static dispatch(state: any) {\n\n    const { array, index, count, subscriber } = state;\n\n    if (index >= count) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(array[index]);\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.index = index + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  // value used if Array has one value and _isScalar\n  value: any;\n\n  constructor(private array: T[], private scheduler?: IScheduler) {\n    super();\n    if (!scheduler && array.length === 1) {\n      this._isScalar = true;\n      this.value = array[0];\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    let index = 0;\n    const array = this.array;\n    const count = array.length;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(ArrayObservable.dispatch, 0, {\n        array, index, count, subscriber\n      });\n    } else {\n      for (let i = 0; i < count && !subscriber.closed; i++) {\n        subscriber.next(array[i]);\n      }\n      subscriber.complete();\n    }\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { isArray } from '../util/isArray';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\nconst none = {};\n\n/* tslint:disable:max-line-length */\nexport function combineLatest<T, R>(project: (v1: T) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): OperatorFunction<T, R> ;\nexport function combineLatest<T, T2>(v2: ObservableInput<T2>): OperatorFunction<T, [T, T2]>;\nexport function combineLatest<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, [T, T2, T3]>;\nexport function combineLatest<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, [T, T2, T3, T4]>;\nexport function combineLatest<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, [T, T2, T3, T4, T5]>;\nexport function combineLatest<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, [T, T2, T3, T4, T5, T6]> ;\nexport function combineLatest<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): OperatorFunction<T, R>;\nexport function combineLatest<T, R>(array: ObservableInput<T>[]): OperatorFunction<T, Array<T>>;\nexport function combineLatest<T, TOther, R>(array: ObservableInput<TOther>[], project: (v1: T, ...values: Array<TOther>) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from this Observable with values from\n * Observables passed as arguments. This is done by subscribing to each\n * Observable, in order, and collecting an array of each of the most recent\n * values any time any of the input Observables emits, then either taking that\n * array and passing it as arguments to an optional `project` function and\n * emitting the return value of that, or just emitting the array of recent\n * values directly if there is no `project` function.\n *\n * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = weight.combineLatest(height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method combineLatest\n * @owner Observable\n */\nexport function combineLatest<T, R>(...observables: Array<ObservableInput<any> |\n                                                    Array<ObservableInput<any>> |\n                                                    ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\n  let project: (...values: Array<any>) => R = null;\n  if (typeof observables[observables.length - 1] === 'function') {\n    project = <(...values: Array<any>) => R>observables.pop();\n  }\n\n  // if the first and only other argument besides the resultSelector is an array\n  // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n  if (observables.length === 1 && isArray(observables[0])) {\n    observables = (<any>observables[0]).slice();\n  }\n\n  return (source: Observable<T>) => source.lift.call(new ArrayObservable([source, ...observables]), new CombineLatestOperator(project));\n}\n\nexport class CombineLatestOperator<T, R> implements Operator<T, R> {\n  constructor(private project?: (...values: Array<any>) => R) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new CombineLatestSubscriber(subscriber, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class CombineLatestSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private active: number = 0;\n  private values: any[] = [];\n  private observables: any[] = [];\n  private toRespond: number;\n\n  constructor(destination: Subscriber<R>, private project?: (...values: Array<any>) => R) {\n    super(destination);\n  }\n\n  protected _next(observable: any) {\n    this.values.push(none);\n    this.observables.push(observable);\n  }\n\n  protected _complete() {\n    const observables = this.observables;\n    const len = observables.length;\n    if (len === 0) {\n      this.destination.complete();\n    } else {\n      this.active = len;\n      this.toRespond = len;\n      for (let i = 0; i < len; i++) {\n        const observable = observables[i];\n        this.add(subscribeToResult(this, observable, observable, i));\n      }\n    }\n  }\n\n  notifyComplete(unused: Subscriber<R>): void {\n    if ((this.active -= 1) === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const values = this.values;\n    const oldVal = values[outerIndex];\n    const toRespond = !this.toRespond\n      ? 0\n      : oldVal === none ? --this.toRespond : this.toRespond;\n    values[outerIndex] = innerValue;\n\n    if (toRespond === 0) {\n      if (this.project) {\n        this._tryProject(values);\n      } else {\n        this.destination.next(values.slice());\n      }\n    }\n  }\n\n  private _tryProject(values: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, values);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import { root } from '../util/root';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class PromiseObservable<T> extends Observable<T> {\n\n  public value: T;\n\n  /**\n   * Converts a Promise to an Observable.\n   *\n   * <span class=\"informal\">Returns an Observable that just emits the Promise's\n   * resolved value, then completes.</span>\n   *\n   * Converts an ES2015 Promise or a Promises/A+ spec compliant Promise to an\n   * Observable. If the Promise resolves with a value, the output Observable\n   * emits that resolved value as a `next`, and then completes. If the Promise\n   * is rejected, then the output Observable emits the corresponding Error.\n   *\n   * @example <caption>Convert the Promise returned by Fetch to an Observable</caption>\n   * var result = Rx.Observable.fromPromise(fetch('http://myserver.com/'));\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @see {@link bindCallback}\n   * @see {@link from}\n   *\n   * @param {PromiseLike<T>} promise The promise to be converted.\n   * @param {Scheduler} [scheduler] An optional IScheduler to use for scheduling\n   * the delivery of the resolved value (or the rejection).\n   * @return {Observable<T>} An Observable which wraps the Promise.\n   * @static true\n   * @name fromPromise\n   * @owner Observable\n   */\n  static create<T>(promise: PromiseLike<T>, scheduler?: IScheduler): Observable<T> {\n    return new PromiseObservable(promise, scheduler);\n  }\n\n  constructor(private promise: PromiseLike<T>, private scheduler?: IScheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const promise = this.promise;\n    const scheduler = this.scheduler;\n\n    if (scheduler == null) {\n      if (this._isScalar) {\n        if (!subscriber.closed) {\n          subscriber.next(this.value);\n          subscriber.complete();\n        }\n      } else {\n        promise.then(\n          (value) => {\n            this.value = value;\n            this._isScalar = true;\n            if (!subscriber.closed) {\n              subscriber.next(value);\n              subscriber.complete();\n            }\n          },\n          (err) => {\n            if (!subscriber.closed) {\n              subscriber.error(err);\n            }\n          }\n        )\n        .then(null, err => {\n          // escape the promise trap, throw unhandled errors\n          root.setTimeout(() => { throw err; });\n        });\n      }\n    } else {\n      if (this._isScalar) {\n        if (!subscriber.closed) {\n          return scheduler.schedule(dispatchNext, 0, { value: this.value, subscriber });\n        }\n      } else {\n        promise.then(\n          (value) => {\n            this.value = value;\n            this._isScalar = true;\n            if (!subscriber.closed) {\n              subscriber.add(scheduler.schedule(dispatchNext, 0, { value, subscriber }));\n            }\n          },\n          (err) => {\n            if (!subscriber.closed) {\n              subscriber.add(scheduler.schedule(dispatchError, 0, { err, subscriber }));\n            }\n          })\n          .then(null, (err) => {\n            // escape the promise trap, throw unhandled errors\n            root.setTimeout(() => { throw err; });\n          });\n      }\n    }\n  }\n}\n\ninterface DispatchNextArg<T> {\n  subscriber: Subscriber<T>;\n  value: T;\n}\nfunction dispatchNext<T>(arg: DispatchNextArg<T>) {\n  const { value, subscriber } = arg;\n  if (!subscriber.closed) {\n    subscriber.next(value);\n    subscriber.complete();\n  }\n}\n\ninterface DispatchErrorArg<T> {\n  subscriber: Subscriber<T>;\n  err: any;\n}\nfunction dispatchError<T>(arg: DispatchErrorArg<T>) {\n  const { err, subscriber } = arg;\n  if (!subscriber.closed) {\n    subscriber.error(err);\n  }\n}\n","import { root } from '../util/root';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class IteratorObservable<T> extends Observable<T> {\n  private iterator: any;\n\n  static create<T>(iterator: any, scheduler?: IScheduler): IteratorObservable<T> {\n    return new IteratorObservable(iterator, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { index, hasError, iterator, subscriber } = state;\n\n    if (hasError) {\n      subscriber.error(state.error);\n      return;\n    }\n\n    let result = iterator.next();\n    if (result.done) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(result.value);\n    state.index = index + 1;\n\n    if (subscriber.closed) {\n      if (typeof iterator.return === 'function') {\n        iterator.return();\n      }\n      return;\n    }\n\n    (<any> this).schedule(state);\n  }\n\n  constructor(iterator: any, private scheduler?: IScheduler) {\n    super();\n\n    if (iterator == null) {\n      throw new Error('iterator cannot be null.');\n    }\n\n    this.iterator = getIterator(iterator);\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n\n    let index = 0;\n    const { iterator, scheduler } = this;\n\n    if (scheduler) {\n      return scheduler.schedule(IteratorObservable.dispatch, 0, {\n        index, iterator, subscriber\n      });\n    } else {\n      do {\n        let result = iterator.next();\n        if (result.done) {\n          subscriber.complete();\n          break;\n        } else {\n          subscriber.next(result.value);\n        }\n        if (subscriber.closed) {\n          if (typeof iterator.return === 'function') {\n            iterator.return();\n          }\n          break;\n        }\n      } while (true);\n    }\n  }\n}\n\nclass StringIterator {\n  constructor(private str: string,\n              private idx: number = 0,\n              private len: number = str.length) {\n  }\n  [Symbol_iterator]() { return (this); }\n  next() {\n    return this.idx < this.len ? {\n        done: false,\n        value: this.str.charAt(this.idx++)\n    } : {\n        done: true,\n        value: undefined\n    };\n  }\n}\n\nclass ArrayIterator {\n  constructor(private arr: Array<any>,\n              private idx: number = 0,\n              private len: number = toLength(arr)) {\n  }\n  [Symbol_iterator]() { return this; }\n  next() {\n    return this.idx < this.len ? {\n        done: false,\n        value: this.arr[this.idx++]\n    } : {\n        done: true,\n        value: undefined\n    };\n  }\n}\n\nfunction getIterator(obj: any) {\n  const i = obj[Symbol_iterator];\n  if (!i && typeof obj === 'string') {\n    return new StringIterator(obj);\n  }\n  if (!i && obj.length !== undefined) {\n    return new ArrayIterator(obj);\n  }\n  if (!i) {\n    throw new TypeError('object is not iterable');\n  }\n  return obj[Symbol_iterator]();\n}\n\nconst maxSafeInteger = Math.pow(2, 53) - 1;\n\nfunction toLength(o: any) {\n  let len = +o.length;\n  if (isNaN(len)) {\n      return 0;\n  }\n  if (len === 0 || !numberIsFinite(len)) {\n      return len;\n  }\n  len = sign(len) * Math.floor(Math.abs(len));\n  if (len <= 0) {\n      return 0;\n  }\n  if (len > maxSafeInteger) {\n      return maxSafeInteger;\n  }\n  return len;\n}\n\nfunction numberIsFinite(value: any) {\n  return typeof value === 'number' && root.isFinite(value);\n}\n\nfunction sign(value: any) {\n  let valueAsNumber = +value;\n  if (valueAsNumber === 0) {\n    return valueAsNumber;\n  }\n  if (isNaN(valueAsNumber)) {\n    return valueAsNumber;\n  }\n  return valueAsNumber < 0 ? -1 : 1;\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { ScalarObservable } from './ScalarObservable';\nimport { EmptyObservable } from './EmptyObservable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ArrayLikeObservable<T> extends Observable<T> {\n\n  static create<T>(arrayLike: ArrayLike<T>, scheduler?: IScheduler): Observable<T> {\n    const length = arrayLike.length;\n    if (length === 0) {\n      return new EmptyObservable<T>();\n    } else if (length === 1) {\n      return new ScalarObservable<T>(<any>arrayLike[0], scheduler);\n    } else {\n      return new ArrayLikeObservable(arrayLike, scheduler);\n    }\n  }\n\n  static dispatch(state: any) {\n    const { arrayLike, index, length, subscriber } = state;\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    if (index >= length) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(arrayLike[index]);\n\n    state.index = index + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  // value used if Array has one value and _isScalar\n  private value: any;\n\n  constructor(private arrayLike: ArrayLike<T>, private scheduler?: IScheduler) {\n    super();\n    if (!scheduler && arrayLike.length === 1) {\n      this._isScalar = true;\n      this.value = arrayLike[0];\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    let index = 0;\n    const { arrayLike, scheduler } = this;\n    const length = arrayLike.length;\n\n    if (scheduler) {\n      return scheduler.schedule(ArrayLikeObservable.dispatch, 0, {\n        arrayLike, index, length, subscriber\n      });\n    } else {\n      for (let i = 0; i < length && !subscriber.closed; i++) {\n        subscriber.next(arrayLike[i]);\n      }\n      subscriber.complete();\n    }\n  }\n}\n","import { PartialObserver } from './Observer';\nimport { Observable } from './Observable';\n\n/**\n * Represents a push-based event or value that an {@link Observable} can emit.\n * This class is particularly useful for operators that manage notifications,\n * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and\n * others. Besides wrapping the actual delivered value, it also annotates it\n * with metadata of, for instance, what type of push message it is (`next`,\n * `error`, or `complete`).\n *\n * @see {@link materialize}\n * @see {@link dematerialize}\n * @see {@link observeOn}\n *\n * @class Notification<T>\n */\nexport class Notification<T> {\n  hasValue: boolean;\n\n  constructor(public kind: string, public value?: T, public error?: any) {\n    this.hasValue = kind === 'N';\n  }\n\n  /**\n   * Delivers to the given `observer` the value wrapped by this Notification.\n   * @param {Observer} observer\n   * @return\n   */\n  observe(observer: PartialObserver<T>): any {\n    switch (this.kind) {\n      case 'N':\n        return observer.next && observer.next(this.value);\n      case 'E':\n        return observer.error && observer.error(this.error);\n      case 'C':\n        return observer.complete && observer.complete();\n    }\n  }\n\n  /**\n   * Given some {@link Observer} callbacks, deliver the value represented by the\n   * current Notification to the correctly corresponding callback.\n   * @param {function(value: T): void} next An Observer `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  do(next: (value: T) => void, error?: (err: any) => void, complete?: () => void): any {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return next && next(this.value);\n      case 'E':\n        return error && error(this.error);\n      case 'C':\n        return complete && complete();\n    }\n  }\n\n  /**\n   * Takes an Observer or its individual callback functions, and calls `observe`\n   * or `do` methods accordingly.\n   * @param {Observer|function(value: T): void} nextOrObserver An Observer or\n   * the `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  accept(nextOrObserver: PartialObserver<T> | ((value: T) => void), error?: (err: any) => void, complete?: () => void) {\n    if (nextOrObserver && typeof (<PartialObserver<T>>nextOrObserver).next === 'function') {\n      return this.observe(<PartialObserver<T>>nextOrObserver);\n    } else {\n      return this.do(<(value: T) => void>nextOrObserver, error, complete);\n    }\n  }\n\n  /**\n   * Returns a simple Observable that just delivers the notification represented\n   * by this Notification instance.\n   * @return {any}\n   */\n  toObservable(): Observable<T> {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return Observable.of(this.value);\n      case 'E':\n        return Observable.throw(this.error);\n      case 'C':\n        return Observable.empty<T>();\n    }\n    throw new Error('unexpected notification kind value');\n  }\n\n  private static completeNotification: Notification<any> = new Notification('C');\n  private static undefinedValueNotification: Notification<any> = new Notification('N', undefined);\n\n  /**\n   * A shortcut to create a Notification instance of the type `next` from a\n   * given value.\n   * @param {T} value The `next` value.\n   * @return {Notification<T>} The \"next\" Notification representing the\n   * argument.\n   */\n  static createNext<T>(value: T): Notification<T> {\n    if (typeof value !== 'undefined') {\n      return new Notification('N', value);\n    }\n    return Notification.undefinedValueNotification;\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `error` from a\n   * given error.\n   * @param {any} [err] The `error` error.\n   * @return {Notification<T>} The \"error\" Notification representing the\n   * argument.\n   */\n  static createError<T>(err?: any): Notification<T> {\n    return new Notification('E', undefined, err);\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `complete`.\n   * @return {Notification<any>} The valueless \"complete\" Notification.\n   */\n  static createComplete(): Notification<any> {\n    return Notification.completeNotification;\n  }\n}\n","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { TeardownLogic } from '../Subscription';\nimport { Action } from '../scheduler/Action';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n *\n * Re-emits all notifications from source Observable with specified scheduler.\n *\n * <span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span>\n *\n * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\n * notifications emitted by the source Observable. It might be useful, if you do not have control over\n * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\n *\n * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\n * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\n * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\n * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\n * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\n * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\n * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\n * little bit more, to ensure that they are emitted at expected moments.\n *\n * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\n * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\n * will delay all notifications - including error notifications - while `delay` will pass through error\n * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\n * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\n * for notification emissions in general.\n *\n * @example <caption>Ensure values in subscribe are called just before browser repaint.</caption>\n * const intervals = Rx.Observable.interval(10); // Intervals are scheduled\n *                                               // with async scheduler by default...\n *\n * intervals\n * .observeOn(Rx.Scheduler.animationFrame)       // ...but we will observe on animationFrame\n * .subscribe(val => {                           // scheduler to ensure smooth animation.\n *   someDiv.style.height = val + 'px';\n * });\n *\n * @see {@link delay}\n *\n * @param {IScheduler} scheduler Scheduler that will be used to reschedule notifications from source Observable.\n * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.\n * @return {Observable<T>} Observable that emits the same notifications as the source Observable,\n * but with provided scheduler.\n *\n * @method observeOn\n * @owner Observable\n */\nexport function observeOn<T>(scheduler: IScheduler, delay: number = 0): MonoTypeOperatorFunction<T> {\n  return function observeOnOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new ObserveOnOperator(scheduler, delay));\n  };\n}\n\nexport class ObserveOnOperator<T> implements Operator<T, T> {\n  constructor(private scheduler: IScheduler, private delay: number = 0) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ObserveOnSubscriber<T> extends Subscriber<T> {\n  static dispatch(this: Action<ObserveOnMessage>, arg: ObserveOnMessage) {\n    const { notification, destination } = arg;\n    notification.observe(destination);\n    this.unsubscribe();\n  }\n\n  constructor(destination: Subscriber<T>,\n              private scheduler: IScheduler,\n              private delay: number = 0) {\n    super(destination);\n  }\n\n  private scheduleMessage(notification: Notification<any>): void {\n    this.add(this.scheduler.schedule(\n      ObserveOnSubscriber.dispatch,\n      this.delay,\n      new ObserveOnMessage(notification, this.destination)\n    ));\n  }\n\n  protected _next(value: T): void {\n    this.scheduleMessage(Notification.createNext(value));\n  }\n\n  protected _error(err: any): void {\n    this.scheduleMessage(Notification.createError(err));\n  }\n\n  protected _complete(): void {\n    this.scheduleMessage(Notification.createComplete());\n  }\n}\n\nexport class ObserveOnMessage {\n  constructor(public notification: Notification<any>,\n              public destination: PartialObserver<any>) {\n  }\n}\n","import { isArray } from '../util/isArray';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isPromise } from '../util/isPromise';\nimport { PromiseObservable } from './PromiseObservable';\nimport { IteratorObservable } from'./IteratorObservable';\nimport { ArrayObservable } from './ArrayObservable';\nimport { ArrayLikeObservable } from './ArrayLikeObservable';\n\nimport { IScheduler } from '../Scheduler';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { ObserveOnSubscriber } from '../operators/observeOn';\nimport { observable as Symbol_observable } from '../symbol/observable';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class FromObservable<T> extends Observable<T> {\n  constructor(private ish: ObservableInput<T>, private scheduler?: IScheduler) {\n    super(null);\n  }\n\n  static create<T>(ish: ObservableInput<T>, scheduler?: IScheduler): Observable<T>;\n  static create<T, R>(ish: ArrayLike<T>, scheduler?: IScheduler): Observable<R>;\n\n  /**\n   * Creates an Observable from an Array, an array-like object, a Promise, an\n   * iterable object, or an Observable-like object.\n   *\n   * <span class=\"informal\">Converts almost anything to an Observable.</span>\n   *\n   * <img src=\"./img/from.png\" width=\"100%\">\n   *\n   * Convert various other objects and data types into Observables. `from`\n   * converts a Promise or an array-like or an\n   * [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable)\n   * object into an Observable that emits the items in that promise or array or\n   * iterable. A String, in this context, is treated as an array of characters.\n   * Observable-like objects (contains a function named with the ES2015 Symbol\n   * for Observable) can also be converted through this operator.\n   *\n   * @example <caption>Converts an array to an Observable</caption>\n   * var array = [10, 20, 30];\n   * var result = Rx.Observable.from(array);\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following:\n   * // 10 20 30\n   *\n   * @example <caption>Convert an infinite iterable (from a generator) to an Observable</caption>\n   * function* generateDoubles(seed) {\n   *   var i = seed;\n   *   while (true) {\n   *     yield i;\n   *     i = 2 * i; // double it\n   *   }\n   * }\n   *\n   * var iterator = generateDoubles(3);\n   * var result = Rx.Observable.from(iterator).take(10);\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following:\n   * // 3 6 12 24 48 96 192 384 768 1536\n   *\n   * @see {@link create}\n   * @see {@link fromEvent}\n   * @see {@link fromEventPattern}\n   * @see {@link fromPromise}\n   *\n   * @param {ObservableInput<T>} ish A subscribable object, a Promise, an\n   * Observable-like, an Array, an iterable or an array-like object to be\n   * converted.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * emissions of values.\n   * @return {Observable<T>} The Observable whose values are originally from the\n   * input object that was converted.\n   * @static true\n   * @name from\n   * @owner Observable\n   */\n  static create<T>(ish: ObservableInput<T>, scheduler?: IScheduler): Observable<T> {\n    if (ish != null) {\n      if (typeof ish[Symbol_observable] === 'function') {\n        if (ish instanceof Observable && !scheduler) {\n          return ish;\n        }\n        return new FromObservable<T>(ish, scheduler);\n      } else if (isArray(ish)) {\n        return new ArrayObservable<T>(ish, scheduler);\n      } else if (isPromise<T>(ish)) {\n        return new PromiseObservable<T>(ish, scheduler);\n      } else if (typeof ish[Symbol_iterator] === 'function' || typeof ish === 'string') {\n        return new IteratorObservable<T>(ish, scheduler);\n      } else if (isArrayLike(ish)) {\n        return new ArrayLikeObservable(ish, scheduler);\n      }\n    }\n\n    throw new TypeError((ish !== null && typeof ish || ish) + ' is not observable');\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const ish = this.ish;\n    const scheduler = this.scheduler;\n    if (scheduler == null) {\n      return ish[Symbol_observable]().subscribe(subscriber);\n    } else {\n      return ish[Symbol_observable]().subscribe(new ObserveOnSubscriber(subscriber, scheduler, 0));\n    }\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function mergeMap<T, R>(project: (value: T, index: number) => ObservableInput<R>, concurrent?: number): OperatorFunction<T, R>;\nexport function mergeMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\n * var letters = Rx.Observable.of('a', 'b', 'c');\n * var result = letters.mergeMap(x =>\n *   Rx.Observable.interval(1000).map(i => x+i)\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a,b,c with respective ascending integers\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and merging the results of the Observables obtained\n * from this transformation.\n * @method mergeMap\n * @owner Observable\n */\nexport function mergeMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>,\n                                  resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n                                  concurrent: number = Number.POSITIVE_INFINITY): OperatorFunction<T, I|R> {\n  return function mergeMapOperatorFunction(source: Observable<T>) {\n    if (typeof resultSelector === 'number') {\n      concurrent = <number>resultSelector;\n      resultSelector = null;\n    }\n    return source.lift(new MergeMapOperator(project, <any>resultSelector, concurrent));\n  };\n}\n\nexport class MergeMapOperator<T, I, R> implements Operator<T, I> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n  }\n\n  call(observer: Subscriber<I>, source: any): any {\n    return source.subscribe(new MergeMapSubscriber(\n      observer, this.project, this.resultSelector, this.concurrent\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasCompleted: boolean = false;\n  private buffer: T[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<I>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.active < this.concurrent) {\n      this._tryNext(value);\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  protected _tryNext(value: T) {\n    let result: ObservableInput<I>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.active++;\n    this._innerSub(result, value, index);\n  }\n\n  private _innerSub(ish: ObservableInput<I>, value: T, index: number): void {\n    this.add(subscribeToResult<T, I>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    if (this.resultSelector) {\n      this._notifyResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      this.destination.next(innerValue);\n    }\n  }\n\n  private _notifyResultSelector(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) {\n    let result: R;\n    try {\n      result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Counts the number of emissions on the source and emits that number when the\n * source completes.\n *\n * <span class=\"informal\">Tells how many values were emitted, when the source\n * completes.</span>\n *\n * <img src=\"./img/count.png\" width=\"100%\">\n *\n * `count` transforms an Observable that emits values into an Observable that\n * emits a single value that represents the number of values emitted by the\n * source Observable. If the source Observable terminates with an error, `count`\n * will pass this error notification along without emitting a value first. If\n * the source Observable does not terminate at all, `count` will neither emit\n * a value nor terminate. This operator takes an optional `predicate` function\n * as argument, in which case the output emission will represent the number of\n * source values that matched `true` with the `predicate`.\n *\n * @example <caption>Counts how many seconds have passed before the first click happened</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var secondsBeforeClick = seconds.takeUntil(clicks);\n * var result = secondsBeforeClick.count();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Counts how many odd numbers are there between 1 and 7</caption>\n * var numbers = Rx.Observable.range(1, 7);\n * var result = numbers.count(i => i % 2 === 1);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 4\n *\n * @see {@link max}\n * @see {@link min}\n * @see {@link reduce}\n *\n * @param {function(value: T, i: number, source: Observable<T>): boolean} [predicate] A\n * boolean function to select what values are to be counted. It is provided with\n * arguments of:\n * - `value`: the value from the source Observable.\n * - `index`: the (zero-based) \"index\" of the value from the source Observable.\n * - `source`: the source Observable instance itself.\n * @return {Observable} An Observable of one number that represents the count as\n * described above.\n * @method count\n * @owner Observable\n */\nexport function count<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): OperatorFunction<T, number> {\n  return (source: Observable<T>) => source.lift(new CountOperator(predicate, source));\n}\n\nclass CountOperator<T> implements Operator<T, number> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<number>, source: any): any {\n    return source.subscribe(new CountSubscriber(subscriber, this.predicate, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass CountSubscriber<T> extends Subscriber<T> {\n  private count: number = 0;\n  private index: number = 0;\n\n  constructor(destination: Observer<number>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.predicate) {\n      this._tryPredicate(value);\n    } else {\n      this.count++;\n    }\n  }\n\n  private _tryPredicate(value: T) {\n    let result: any;\n\n    try {\n      result = this.predicate(value, this.index++, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    if (result) {\n      this.count++;\n    }\n  }\n\n  protected _complete(): void {\n    this.destination.next(this.count);\n    this.destination.complete();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * determined by another Observable has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link debounceTime}, but the time span of\n * emission silence is determined by a second Observable.</span>\n *\n * <img src=\"./img/debounce.png\" width=\"100%\">\n *\n * `debounce` delays values emitted by the source Observable, but drops previous\n * pending delayed emissions if a new value arrives on the source Observable.\n * This operator keeps track of the most recent value from the source\n * Observable, and spawns a duration Observable by calling the\n * `durationSelector` function. The value is emitted only when the duration\n * Observable emits a value or completes, and if no other value was emitted on\n * the source Observable since the duration Observable was spawned. If a new\n * value appears before the duration Observable emits, the previous value will\n * be dropped and will not be emitted on the output Observable.\n *\n * Like {@link debounceTime}, this is a rate-limiting operator, and also a\n * delay-like operator since output emissions do not necessarily occur at the\n * same time as they did on the source Observable.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounce(() => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the timeout\n * duration for each source value, returned as an Observable or a Promise.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified duration Observable returned by\n * `durationSelector`, and may drop some values if they occur too frequently.\n * @method debounce\n * @owner Observable\n */\nexport function debounce<T>(durationSelector: (value: T) => SubscribableOrPromise<number>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DebounceOperator(durationSelector));\n}\n\nclass DebounceOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DebounceSubscriber(subscriber, this.durationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DebounceSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private value: T;\n  private hasValue: boolean = false;\n  private durationSubscription: Subscription = null;\n\n  constructor(destination: Subscriber<R>,\n              private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    try {\n      const result = this.durationSelector.call(this, value);\n\n      if (result) {\n        this._tryNext(value, result);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.emitValue();\n    this.destination.complete();\n  }\n\n  private _tryNext(value: T, duration: SubscribableOrPromise<number>): void {\n    let subscription = this.durationSubscription;\n    this.value = value;\n    this.hasValue = true;\n    if (subscription) {\n      subscription.unsubscribe();\n      this.remove(subscription);\n    }\n\n    subscription = subscribeToResult(this, duration);\n    if (!subscription.closed) {\n      this.add(this.durationSubscription = subscription);\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.emitValue();\n  }\n\n  notifyComplete(): void {\n    this.emitValue();\n  }\n\n  emitValue(): void {\n    if (this.hasValue) {\n      const value = this.value;\n      const subscription = this.durationSubscription;\n      if (subscription) {\n        this.durationSubscription = null;\n        subscription.unsubscribe();\n        this.remove(subscription);\n      }\n      this.value = null;\n      this.hasValue = false;\n      super._next(value);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { async } from '../scheduler/async';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link delay}, but passes only the most\n * recent value from each burst of emissions.</span>\n *\n * <img src=\"./img/debounceTime.png\" width=\"100%\">\n *\n * `debounceTime` delays values emitted by the source Observable, but drops\n * previous pending delayed emissions if a new value arrives on the source\n * Observable. This operator keeps track of the most recent value from the\n * source Observable, and emits that only when `dueTime` enough time has passed\n * without any other value appearing on the source Observable. If a new value\n * appears before `dueTime` silence occurs, the previous value will be dropped\n * and will not be emitted on the output Observable.\n *\n * This is a rate-limiting operator, because it is impossible for more than one\n * value to be emitted in any time window of duration `dueTime`, but it is also\n * a delay-like operator since output emissions do not occur at the same time as\n * they did on the source Observable. Optionally takes a {@link IScheduler} for\n * managing timers.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounceTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} dueTime The timeout duration in milliseconds (or the time\n * unit determined internally by the optional `scheduler`) for the window of\n * time required to wait for emission silence before emitting the most recent\n * source value.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the timeout for each value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified `dueTime`, and may drop some values if they occur\n * too frequently.\n * @method debounceTime\n * @owner Observable\n */\nexport function debounceTime<T>(dueTime: number, scheduler: IScheduler = async): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DebounceTimeOperator(dueTime, scheduler));\n}\n\nclass DebounceTimeOperator<T> implements Operator<T, T> {\n  constructor(private dueTime: number, private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DebounceTimeSubscriber<T> extends Subscriber<T> {\n  private debouncedSubscription: Subscription = null;\n  private lastValue: T = null;\n  private hasValue: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              private dueTime: number,\n              private scheduler: IScheduler) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    this.clearDebounce();\n    this.lastValue = value;\n    this.hasValue = true;\n    this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext, this.dueTime, this));\n  }\n\n  protected _complete() {\n    this.debouncedNext();\n    this.destination.complete();\n  }\n\n  debouncedNext(): void {\n    this.clearDebounce();\n\n    if (this.hasValue) {\n      this.destination.next(this.lastValue);\n      this.lastValue = null;\n      this.hasValue = false;\n    }\n  }\n\n  private clearDebounce(): void {\n    const debouncedSubscription = this.debouncedSubscription;\n\n    if (debouncedSubscription !== null) {\n      this.remove(debouncedSubscription);\n      debouncedSubscription.unsubscribe();\n      this.debouncedSubscription = null;\n    }\n  }\n}\n\nfunction dispatchNext(subscriber: DebounceTimeSubscriber<any>) {\n  subscriber.debouncedNext();\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function defaultIfEmpty<T>(defaultValue?: T): MonoTypeOperatorFunction<T>;\nexport function defaultIfEmpty<T, R>(defaultValue?: R): OperatorFunction<T, T | R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Emits a given value if the source Observable completes without emitting any\n * `next` value, otherwise mirrors the source Observable.\n *\n * <span class=\"informal\">If the source Observable turns out to be empty, then\n * this operator will emit a default value.</span>\n *\n * <img src=\"./img/defaultIfEmpty.png\" width=\"100%\">\n *\n * `defaultIfEmpty` emits the values emitted by the source Observable or a\n * specified default value if the source Observable is empty (completes without\n * having emitted any `next` value).\n *\n * @example <caption>If no clicks happen in 5 seconds, then emit \"no clicks\"</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksBeforeFive = clicks.takeUntil(Rx.Observable.interval(5000));\n * var result = clicksBeforeFive.defaultIfEmpty('no clicks');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link empty}\n * @see {@link last}\n *\n * @param {any} [defaultValue=null] The default value used if the source\n * Observable is empty.\n * @return {Observable} An Observable that emits either the specified\n * `defaultValue` if the source Observable emits no items, or the values emitted\n * by the source Observable.\n * @method defaultIfEmpty\n * @owner Observable\n */\nexport function defaultIfEmpty<T, R>(defaultValue: R = null): OperatorFunction<T, T | R> {\n  return (source: Observable<T>) => source.lift(new DefaultIfEmptyOperator(defaultValue)) as Observable<T | R>;\n}\n\nclass DefaultIfEmptyOperator<T, R> implements Operator<T, T | R> {\n\n  constructor(private defaultValue: R) {\n  }\n\n  call(subscriber: Subscriber<T | R>, source: any): any {\n    return source.subscribe(new DefaultIfEmptySubscriber(subscriber, this.defaultValue));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DefaultIfEmptySubscriber<T, R> extends Subscriber<T> {\n  private isEmpty: boolean = true;\n\n  constructor(destination: Subscriber<T | R>, private defaultValue: R) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.isEmpty = false;\n    this.destination.next(value);\n  }\n\n  protected _complete(): void {\n    if (this.isEmpty) {\n      this.destination.next(this.defaultValue);\n    }\n    this.destination.complete();\n  }\n}","import { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { Operator } from '../Operator';\nimport { IScheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Action } from '../scheduler/Action';\nimport { Notification } from '../Notification';\nimport { Observable } from '../Observable';\nimport { PartialObserver } from '../Observer';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Delays the emission of items from the source Observable by a given timeout or\n * until a given Date.\n *\n * <span class=\"informal\">Time shifts each item by some specified amount of\n * milliseconds.</span>\n *\n * <img src=\"./img/delay.png\" width=\"100%\">\n *\n * If the delay argument is a Number, this operator time shifts the source\n * Observable by that amount of time expressed in milliseconds. The relative\n * time intervals between the values are preserved.\n *\n * If the delay argument is a Date, this operator time shifts the start of the\n * Observable execution until the given date occurs.\n *\n * @example <caption>Delay each click by one second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delay(1000); // each click emitted after 1 second\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @example <caption>Delay all clicks until a future date happens</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var date = new Date('March 15, 2050 12:00:00'); // in the future\n * var delayedClicks = clicks.delay(date); // click emitted only after that date\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n *\n * @param {number|Date} delay The delay duration in milliseconds (a `number`) or\n * a `Date` until which the emission of the source items is delayed.\n * @param {Scheduler} [scheduler=async] The IScheduler to use for\n * managing the timers that handle the time-shift for each item.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified timeout or Date.\n * @method delay\n * @owner Observable\n */\nexport function delay<T>(delay: number|Date,\n                         scheduler: IScheduler = async): MonoTypeOperatorFunction<T> {\n  const absoluteDelay = isDate(delay);\n  const delayFor = absoluteDelay ? (+delay - scheduler.now()) : Math.abs(<number>delay);\n  return (source: Observable<T>) => source.lift(new DelayOperator(delayFor, scheduler));\n}\n\nclass DelayOperator<T> implements Operator<T, T> {\n  constructor(private delay: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DelaySubscriber(subscriber, this.delay, this.scheduler));\n  }\n}\n\ninterface DelayState<T> {\n  source: DelaySubscriber<T>;\n  destination: PartialObserver<T>;\n  scheduler: IScheduler;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DelaySubscriber<T> extends Subscriber<T> {\n  private queue: Array<DelayMessage<T>> = [];\n  private active: boolean = false;\n  private errored: boolean = false;\n\n  private static dispatch<T>(this: Action<DelayState<T>>, state: DelayState<T>): void {\n    const source = state.source;\n    const queue = source.queue;\n    const scheduler = state.scheduler;\n    const destination = state.destination;\n\n    while (queue.length > 0 && (queue[0].time - scheduler.now()) <= 0) {\n      queue.shift().notification.observe(destination);\n    }\n\n    if (queue.length > 0) {\n      const delay = Math.max(0, queue[0].time - scheduler.now());\n      this.schedule(state, delay);\n    } else {\n      source.active = false;\n    }\n  }\n\n  constructor(destination: Subscriber<T>,\n              private delay: number,\n              private scheduler: IScheduler) {\n    super(destination);\n  }\n\n  private _schedule(scheduler: IScheduler): void {\n    this.active = true;\n    this.add(scheduler.schedule<DelayState<T>>(DelaySubscriber.dispatch, this.delay, {\n      source: this, destination: this.destination, scheduler: scheduler\n    }));\n  }\n\n  private scheduleNotification(notification: Notification<T>): void {\n    if (this.errored === true) {\n      return;\n    }\n\n    const scheduler = this.scheduler;\n    const message = new DelayMessage(scheduler.now() + this.delay, notification);\n    this.queue.push(message);\n\n    if (this.active === false) {\n      this._schedule(scheduler);\n    }\n  }\n\n  protected _next(value: T) {\n    this.scheduleNotification(Notification.createNext(value));\n  }\n\n  protected _error(err: any) {\n    this.errored = true;\n    this.queue = [];\n    this.destination.error(err);\n  }\n\n  protected _complete() {\n    this.scheduleNotification(Notification.createComplete());\n  }\n}\n\nclass DelayMessage<T> {\n  constructor(public readonly time: number,\n              public readonly notification: Notification<T>) {\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Delays the emission of items from the source Observable by a given time span\n * determined by the emissions of another Observable.\n *\n * <span class=\"informal\">It's like {@link delay}, but the time span of the\n * delay duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/delayWhen.png\" width=\"100%\">\n *\n * `delayWhen` time shifts each emitted value from the source Observable by a\n * time span determined by another Observable. When the source emits a value,\n * the `delayDurationSelector` function is called with the source value as\n * argument, and should return an Observable, called the \"duration\" Observable.\n * The source value is emitted on the output Observable only when the duration\n * Observable emits a value or completes.\n *\n * Optionally, `delayWhen` takes a second argument, `subscriptionDelay`, which\n * is an Observable. When `subscriptionDelay` emits its first value or\n * completes, the source Observable is subscribed to and starts behaving like\n * described in the previous paragraph. If `subscriptionDelay` is not provided,\n * `delayWhen` will subscribe to the source Observable as soon as the output\n * Observable is subscribed.\n *\n * @example <caption>Delay each click by a random amount of time, between 0 and 5 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delayWhen(event =>\n *   Rx.Observable.interval(Math.random() * 5000)\n * );\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounce}\n * @see {@link delay}\n *\n * @param {function(value: T): Observable} delayDurationSelector A function that\n * returns an Observable for each value emitted by the source Observable, which\n * is then used to delay the emission of that item on the output Observable\n * until the Observable returned from this function emits a value.\n * @param {Observable} subscriptionDelay An Observable that triggers the\n * subscription to the source Observable once it emits any value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by an amount of time specified by the Observable returned by\n * `delayDurationSelector`.\n * @method delayWhen\n * @owner Observable\n */\nexport function delayWhen<T>(delayDurationSelector: (value: T) => Observable<any>,\n                             subscriptionDelay?: Observable<any>): MonoTypeOperatorFunction<T> {\n  if (subscriptionDelay) {\n    return (source: Observable<T>) =>\n      new SubscriptionDelayObservable(source, subscriptionDelay)\n        .lift(new DelayWhenOperator(delayDurationSelector));\n  }\n  return (source: Observable<T>) => source.lift(new DelayWhenOperator(delayDurationSelector));\n}\n\nclass DelayWhenOperator<T> implements Operator<T, T> {\n  constructor(private delayDurationSelector: (value: T) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DelayWhenSubscriber(subscriber, this.delayDurationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DelayWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private completed: boolean = false;\n  private delayNotifierSubscriptions: Array<Subscription> = [];\n  private values: Array<T> = [];\n\n  constructor(destination: Subscriber<T>,\n              private delayDurationSelector: (value: T) => Observable<any>) {\n    super(destination);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(outerValue);\n    this.removeSubscription(innerSub);\n    this.tryComplete();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, R>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    const value = this.removeSubscription(innerSub);\n    if (value) {\n      this.destination.next(value);\n    }\n    this.tryComplete();\n  }\n\n  protected _next(value: T): void {\n    try {\n      const delayNotifier = this.delayDurationSelector(value);\n      if (delayNotifier) {\n        this.tryDelay(delayNotifier, value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.completed = true;\n    this.tryComplete();\n  }\n\n  private removeSubscription(subscription: InnerSubscriber<T, R>): T {\n    subscription.unsubscribe();\n\n    const subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);\n    let value: T = null;\n\n    if (subscriptionIdx !== -1) {\n      value = this.values[subscriptionIdx];\n      this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);\n      this.values.splice(subscriptionIdx, 1);\n    }\n\n    return value;\n  }\n\n  private tryDelay(delayNotifier: Observable<any>, value: T): void {\n    const notifierSubscription = subscribeToResult(this, delayNotifier, value);\n\n    if (notifierSubscription && !notifierSubscription.closed) {\n      this.add(notifierSubscription);\n      this.delayNotifierSubscriptions.push(notifierSubscription);\n    }\n\n    this.values.push(value);\n  }\n\n  private tryComplete(): void {\n    if (this.completed && this.delayNotifierSubscriptions.length === 0) {\n      this.destination.complete();\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SubscriptionDelayObservable<T> extends Observable<T> {\n  constructor(protected source: Observable<T>, private subscriptionDelay: Observable<any>) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SubscriptionDelaySubscriber<T> extends Subscriber<T> {\n  private sourceSubscribed: boolean = false;\n\n  constructor(private parent: Subscriber<T>, private source: Observable<T>) {\n    super();\n  }\n\n  protected _next(unused: any) {\n    this.subscribeToSource();\n  }\n\n  protected _error(err: any) {\n    this.unsubscribe();\n    this.parent.error(err);\n  }\n\n  protected _complete() {\n    this.subscribeToSource();\n  }\n\n  private subscribeToSource(): void {\n    if (!this.sourceSubscribed) {\n      this.sourceSubscribed = true;\n      this.unsubscribe();\n      this.source.subscribe(this.parent);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Converts an Observable of {@link Notification} objects into the emissions\n * that they represent.\n *\n * <span class=\"informal\">Unwraps {@link Notification} objects as actual `next`,\n * `error` and `complete` emissions. The opposite of {@link materialize}.</span>\n *\n * <img src=\"./img/dematerialize.png\" width=\"100%\">\n *\n * `dematerialize` is assumed to operate an Observable that only emits\n * {@link Notification} objects as `next` emissions, and does not emit any\n * `error`. Such Observable is the output of a `materialize` operation. Those\n * notifications are then unwrapped using the metadata they contain, and emitted\n * as `next`, `error`, and `complete` on the output Observable.\n *\n * Use this operator in conjunction with {@link materialize}.\n *\n * @example <caption>Convert an Observable of Notifications to an actual Observable</caption>\n * var notifA = new Rx.Notification('N', 'A');\n * var notifB = new Rx.Notification('N', 'B');\n * var notifE = new Rx.Notification('E', void 0,\n *   new TypeError('x.toUpperCase is not a function')\n * );\n * var materialized = Rx.Observable.of(notifA, notifB, notifE);\n * var upperCase = materialized.dematerialize();\n * upperCase.subscribe(x => console.log(x), e => console.error(e));\n *\n * // Results in:\n * // A\n * // B\n * // TypeError: x.toUpperCase is not a function\n *\n * @see {@link Notification}\n * @see {@link materialize}\n *\n * @return {Observable} An Observable that emits items and notifications\n * embedded in Notification objects emitted by the source Observable.\n * @method dematerialize\n * @owner Observable\n */\nexport function dematerialize<T>(): OperatorFunction<Notification<T>, T> {\n  return function dematerializeOperatorFunction(source: Observable<Notification<T>>) {\n    return source.lift(new DeMaterializeOperator());\n  };\n}\n\nclass DeMaterializeOperator<T extends Notification<any>, R> implements Operator<T, R> {\n  call(subscriber: Subscriber<any>, source: any): any {\n    return source.subscribe(new DeMaterializeSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DeMaterializeSubscriber<T extends Notification<any>> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    value.observe(this.destination);\n  }\n}\n","import { root } from './root';\n\nexport interface ISetCtor {\n  new<T>(): ISet<T>;\n}\n\nexport interface ISet<T> {\n  add(value: T): void;\n  has(value: T): boolean;\n  size: number;\n  clear(): void;\n}\n\nexport function minimalSetImpl<T>(): ISetCtor {\n  // THIS IS NOT a full impl of Set, this is just the minimum\n  // bits of functionality we need for this library.\n  return class MinimalSet<T> implements ISet<T> {\n    private _values: T[] = [];\n\n    add(value: T): void {\n      if (!this.has(value)) {\n        this._values.push(value);\n      }\n    }\n\n    has(value: T): boolean {\n      return this._values.indexOf(value) !== -1;\n    }\n\n    get size(): number {\n      return this._values.length;\n    }\n\n    clear(): void {\n      this._values.length = 0;\n    }\n  };\n}\n\nexport const Set: ISetCtor = root.Set || minimalSetImpl();","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { ISet, Set } from '../util/Set';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.\n *\n * If a keySelector function is provided, then it will project each value from the source observable into a new value that it will\n * check for equality with previously projected values. If a keySelector function is not provided, it will use each value from the\n * source observable directly with an equality check against previous values.\n *\n * In JavaScript runtimes that support `Set`, this operator will use a `Set` to improve performance of the distinct value checking.\n *\n * In other runtimes, this operator will use a minimal implementation of `Set` that relies on an `Array` and `indexOf` under the\n * hood, so performance will degrade as more values are checked for distinction. Even in newer browsers, a long-running `distinct`\n * use might result in memory leaks. To help alleviate this in some scenarios, an optional `flushes` parameter is also provided so\n * that the internal `Set` can be \"flushed\", basically clearing it of values.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 2, 3, 4, 3, 2, 1)\n *   .distinct()\n *   .subscribe(x => console.log(x)); // 1, 2, 3, 4\n *\n * @example <caption>An example using a keySelector function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     .distinct((p: Person) => p.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n *\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [keySelector] Optional function to select which value you want to check as distinct.\n * @param {Observable} [flushes] Optional Observable for flushing the internal HashSet of the operator.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinct\n * @owner Observable\n */\nexport function distinct<T, K>(keySelector?: (value: T) => K,\n                               flushes?: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DistinctOperator(keySelector, flushes));\n}\n\nclass DistinctOperator<T, K> implements Operator<T, T> {\n  constructor(private keySelector: (value: T) => K, private flushes: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DistinctSubscriber(subscriber, this.keySelector, this.flushes));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class DistinctSubscriber<T, K> extends OuterSubscriber<T, T> {\n  private values: ISet<K> = new Set<K>();\n\n  constructor(destination: Subscriber<T>, private keySelector: (value: T) => K, flushes: Observable<any>) {\n    super(destination);\n\n    if (flushes) {\n      this.add(subscribeToResult(this, flushes));\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    this.values.clear();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, T>): void {\n    this._error(error);\n  }\n\n  protected _next(value: T): void {\n    if (this.keySelector) {\n      this._useKeySelector(value);\n    } else {\n      this._finalizeNext(value, value);\n    }\n  }\n\n  private _useKeySelector(value: T): void {\n    let key: K;\n    const { destination } = this;\n    try {\n      key = this.keySelector(value);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n    this._finalizeNext(key, value);\n  }\n\n  private _finalizeNext(key: K|T, value: T) {\n    const { values } = this;\n    if (!values.has(<K>key)) {\n      values.add(<K>key);\n      this.destination.next(value);\n    }\n  }\n\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function distinctUntilChanged<T>(compare?: (x: T, y: T) => boolean): MonoTypeOperatorFunction<T>;\nexport function distinctUntilChanged<T, K>(compare: (x: K, y: K) => boolean, keySelector: (x: T) => K): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 1, 2, 3, 3, 4)\n *   .distinctUntilChanged()\n *   .subscribe(x => console.log(x)); // 1, 2, 1, 2, 3, 4\n *\n * @example <caption>An example using a compare function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilChanged((p: Person, q: Person) => p.name === q.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinctUntilChanged\n * @owner Observable\n */\nexport function distinctUntilChanged<T, K>(compare?: (x: K, y: K) => boolean, keySelector?: (x: T) => K): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DistinctUntilChangedOperator<T, K>(compare, keySelector));\n}\n\nclass DistinctUntilChangedOperator<T, K> implements Operator<T, T> {\n  constructor(private compare: (x: K, y: K) => boolean,\n              private keySelector: (x: T) => K) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DistinctUntilChangedSubscriber<T, K> extends Subscriber<T> {\n  private key: K;\n  private hasKey: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              compare: (x: K, y: K) => boolean,\n              private keySelector: (x: T) => K) {\n    super(destination);\n    if (typeof compare === 'function') {\n      this.compare = compare;\n    }\n  }\n\n  private compare(x: any, y: any): boolean {\n    return x === y;\n  }\n\n  protected _next(value: T): void {\n\n    const keySelector = this.keySelector;\n    let key: any = value;\n\n    if (keySelector) {\n      key = tryCatch(this.keySelector)(value);\n      if (key === errorObject) {\n        return this.destination.error(errorObject.e);\n      }\n    }\n\n    let result: any = false;\n\n    if (this.hasKey) {\n      result = tryCatch(this.compare)(this.key, key);\n      if (result === errorObject) {\n        return this.destination.error(errorObject.e);\n      }\n    } else {\n      this.hasKey = true;\n    }\n\n    if (Boolean(result) === false) {\n      this.key = key;\n      this.destination.next(value);\n    }\n  }\n}\n","/**\n * An error thrown when an element was queried at a certain index of an\n * Observable, but no such index or position exists in that sequence.\n *\n * @see {@link elementAt}\n * @see {@link take}\n * @see {@link takeLast}\n *\n * @class ArgumentOutOfRangeError\n */\nexport class ArgumentOutOfRangeError extends Error {\n  constructor() {\n    const err: any = super('argument out of range');\n    (<any> this).name = err.name = 'ArgumentOutOfRangeError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits the single value at the specified `index` in a sequence of emissions\n * from the source Observable.\n *\n * <span class=\"informal\">Emits only the i-th value, then completes.</span>\n *\n * <img src=\"./img/elementAt.png\" width=\"100%\">\n *\n * `elementAt` returns an Observable that emits the item at the specified\n * `index` in the source Observable, or a default value if that `index` is out\n * of range and the `default` argument is provided. If the `default` argument is\n * not given and the `index` is out of range, the output Observable will emit an\n * `ArgumentOutOfRangeError` error.\n *\n * @example <caption>Emit only the third click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.elementAt(2);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // click 1 = nothing\n * // click 2 = nothing\n * // click 3 = MouseEvent object logged to console\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link skip}\n * @see {@link single}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `elementAt(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0` or the\n * Observable has completed before emitting the i-th `next` notification.\n *\n * @param {number} index Is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {T} [defaultValue] The default value returned for missing indices.\n * @return {Observable} An Observable that emits a single item, if it is found.\n * Otherwise, will emit the default value if given. If not, then emits an error.\n * @method elementAt\n * @owner Observable\n */\nexport function elementAt<T>(index: number, defaultValue?: T): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new ElementAtOperator(index, defaultValue));\n}\n\nclass ElementAtOperator<T> implements Operator<T, T> {\n\n  constructor(private index: number, private defaultValue?: T) {\n    if (index < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new ElementAtSubscriber(subscriber, this.index, this.defaultValue));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ElementAtSubscriber<T> extends Subscriber<T> {\n\n  constructor(destination: Subscriber<T>, private index: number, private defaultValue?: T) {\n    super(destination);\n  }\n\n  protected _next(x: T) {\n    if (this.index-- === 0) {\n      this.destination.next(x);\n      this.destination.complete();\n    }\n  }\n\n  protected _complete() {\n    const destination = this.destination;\n    if (this.index >= 0) {\n      if (typeof this.defaultValue !== 'undefined') {\n        destination.next(this.defaultValue);\n      } else {\n        destination.error(new ArgumentOutOfRangeError);\n      }\n    }\n    destination.complete();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.\n *\n * @example <caption>A simple example emitting true if all elements are less than 5, false otherwise</caption>\n *  Observable.of(1, 2, 3, 4, 5, 6)\n *     .every(x => x < 5)\n *     .subscribe(x => console.log(x)); // -> false\n *\n * @param {function} predicate A function for determining if an item meets a specified condition.\n * @param {any} [thisArg] Optional object to use for `this` in the callback.\n * @return {Observable} An Observable of booleans that determines if all items of the source Observable meet the condition specified.\n * @method every\n * @owner Observable\n */\nexport function every<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                         thisArg?: any): OperatorFunction<T, boolean> {\n  return (source: Observable<T>) => source.lift(new EveryOperator(predicate, thisArg, source));\n}\n\nclass EveryOperator<T> implements Operator<T, boolean> {\n  constructor(private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private thisArg?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<boolean>, source: any): any {\n    return source.subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass EverySubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Observer<boolean>,\n              private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private thisArg: any,\n              private source?: Observable<T>) {\n    super(destination);\n    this.thisArg = thisArg || this;\n  }\n\n  private notifyComplete(everyValueMatch: boolean): void {\n    this.destination.next(everyValueMatch);\n    this.destination.complete();\n  }\n\n  protected _next(value: T): void {\n    let result = false;\n    try {\n      result = this.predicate.call(this.thisArg, value, this.index++, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    if (!result) {\n      this.notifyComplete(false);\n    }\n  }\n\n  protected _complete(): void {\n    this.notifyComplete(true);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by dropping\n * inner Observables while the previous inner Observable has not yet completed.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * next inner Observables while the current inner is still executing.</span>\n *\n * <img src=\"./img/exhaust.png\" width=\"100%\">\n *\n * `exhaust` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable begins emitting the items emitted by that\n * inner Observable. So far, it behaves like {@link mergeAll}. However,\n * `exhaust` ignores every new inner Observable if the previous Observable has\n * not yet completed. Once that one completes, it will accept and flatten the\n * next inner Observable and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(5));\n * var result = higherOrder.exhaust();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link switch}\n * @see {@link mergeAll}\n * @see {@link exhaustMap}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable that takes a source of Observables and propagates the first observable\n * exclusively until it completes before subscribing to the next.\n * @method exhaust\n * @owner Observable\n */\nexport function exhaust<T>(): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SwitchFirstOperator<T>());\n}\n\nclass SwitchFirstOperator<T> implements Operator<T, T> {\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SwitchFirstSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchFirstSubscriber<T> extends OuterSubscriber<T, T> {\n  private hasCompleted: boolean = false;\n  private hasSubscription: boolean = false;\n\n  constructor(destination: Subscriber<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSubscription) {\n      this.hasSubscription = true;\n      this.add(subscribeToResult(this, value));\n    }\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (!this.hasSubscription) {\n      this.destination.complete();\n    }\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n    this.hasSubscription = false;\n    if (this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function exhaustMap<T, R>(project: (value: T, index: number) => ObservableInput<R>): OperatorFunction<T, R>;\nexport function exhaustMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable only if the previous projected Observable has completed.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link exhaust}.</span>\n *\n * <img src=\"./img/exhaustMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. When it projects a source value to\n * an Observable, the output Observable begins emitting the items emitted by\n * that projected Observable. However, `exhaustMap` ignores every new projected\n * Observable if the previous projected Observable has not yet completed. Once\n * that one completes, it will accept and flatten the next projected Observable\n * and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.exhaustMap((ev) => Rx.Observable.interval(1000).take(5));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaust}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable containing projected Observables\n * of each item of the source, ignoring projected Observables that start before\n * their preceding Observable has completed.\n * @method exhaustMap\n * @owner Observable\n */\nexport function exhaustMap<T, I, R>(\n  project: (value: T, index: number) => ObservableInput<I>,\n  resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R\n  ): OperatorFunction<T, R> {\n    return (source: Observable<T>) => source.lift(new SwitchFirstMapOperator(project, resultSelector));\n  }\n\nclass SwitchFirstMapOperator<T, I, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new SwitchFirstMapSubscriber(subscriber, this.project, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchFirstMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasSubscription: boolean = false;\n  private hasCompleted: boolean = false;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSubscription) {\n      this.tryNext(value);\n    }\n  }\n\n  private tryNext(value: T): void {\n    const index = this.index++;\n    const destination = this.destination;\n    try {\n      const result = this.project(value, index);\n      this.hasSubscription = true;\n      this.add(subscribeToResult(this, result, value, index));\n    } catch (err) {\n      destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (!this.hasSubscription) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private trySelectResult(outerValue: T, innerValue: I,\n                          outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    try {\n      const result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n      destination.next(result);\n    } catch (err) {\n      destination.error(err);\n    }\n  }\n\n  notifyError(err: any): void {\n    this.destination.error(err);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n\n    this.hasSubscription = false;\n    if (this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction, OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function expand<T>(project: (value: T, index: number) => Observable<T>, concurrent?: number, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function expand<T, R>(project: (value: T, index: number) => Observable<R>, concurrent?: number, scheduler?: IScheduler): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Recursively projects each source value to an Observable which is merged in\n * the output Observable.\n *\n * <span class=\"informal\">It's similar to {@link mergeMap}, but applies the\n * projection function to every source value as well as every output value.\n * It's recursive.</span>\n *\n * <img src=\"./img/expand.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger. *Expand* will re-emit on the output\n * Observable every source value. Then, each output value is given to the\n * `project` function which returns an inner Observable to be merged on the\n * output Observable. Those output values resulting from the projection are also\n * given to the `project` function to produce new output values. This is how\n * *expand* behaves recursively.\n *\n * @example <caption>Start emitting the powers of two on every click, at most 10 of them</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var powersOfTwo = clicks\n *   .mapTo(1)\n *   .expand(x => Rx.Observable.of(2 * x).delay(1000))\n *   .take(10);\n * powersOfTwo.subscribe(x => console.log(x));\n *\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n *\n * @param {function(value: T, index: number) => Observable} project A function\n * that, when applied to an item emitted by the source or the output Observable,\n * returns an Observable.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\n * each projected inner Observable.\n * @return {Observable} An Observable that emits the source values and also\n * result of applying the projection function to each value emitted on the\n * output Observable and and merging the results of the Observables obtained\n * from this transformation.\n * @method expand\n * @owner Observable\n */\nexport function expand<T, R>(project: (value: T, index: number) => Observable<R>,\n                             concurrent: number = Number.POSITIVE_INFINITY,\n                             scheduler: IScheduler = undefined): OperatorFunction<T, R> {\n  concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;\n\n  return (source: Observable<T>) => source.lift(new ExpandOperator(project, concurrent, scheduler));\n}\n\nexport class ExpandOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => Observable<R>,\n              private concurrent: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));\n  }\n}\n\ninterface DispatchArg<T, R> {\n  subscriber: ExpandSubscriber<T, R>;\n  result: Observable<R>;\n  value: any;\n  index: number;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ExpandSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private index: number = 0;\n  private active: number = 0;\n  private hasCompleted: boolean = false;\n  private buffer: any[];\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => Observable<R>,\n              private concurrent: number,\n              private scheduler: IScheduler) {\n    super(destination);\n    if (concurrent < Number.POSITIVE_INFINITY) {\n      this.buffer = [];\n    }\n  }\n\n  private static dispatch<T, R>(arg: DispatchArg<T, R>): void {\n    const {subscriber, result, value, index} = arg;\n    subscriber.subscribeToProjection(result, value, index);\n  }\n\n  protected _next(value: any): void {\n    const destination = this.destination;\n\n    if (destination.closed) {\n      this._complete();\n      return;\n    }\n\n    const index = this.index++;\n    if (this.active < this.concurrent) {\n      destination.next(value);\n      let result = tryCatch(this.project)(value, index);\n      if (result === errorObject) {\n        destination.error(errorObject.e);\n      } else if (!this.scheduler) {\n        this.subscribeToProjection(result, value, index);\n      } else {\n        const state: DispatchArg<T, R> = { subscriber: this, result, value, index };\n        this.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));\n      }\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private subscribeToProjection(result: any, value: T, index: number): void {\n    this.active++;\n    this.add(subscribeToResult<T, R>(this, result, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this._next(innerValue);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer && buffer.length > 0) {\n      this._next(buffer.shift());\n    }\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function filter<T, S extends T>(predicate: (value: T, index: number) => value is S,\n                                       thisArg?: any): OperatorFunction<T, S>;\nexport function filter<T>(predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Filter items emitted by the source Observable by only emitting those that\n * satisfy a specified predicate.\n *\n * <span class=\"informal\">Like\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n * it only emits a value from the source if it passes a criterion function.</span>\n *\n * <img src=\"./img/filter.png\" width=\"100%\">\n *\n * Similar to the well-known `Array.prototype.filter` method, this operator\n * takes values from the source Observable, passes them through a `predicate`\n * function and only emits those values that yielded `true`.\n *\n * @example <caption>Emit only click events whose target was a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');\n * clicksOnDivs.subscribe(x => console.log(x));\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * @see {@link ignoreElements}\n * @see {@link partition}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted, if `false` the value is not passed to the output\n * Observable. The `index` parameter is the number `i` for the i-th source\n * emission that has happened since the subscription, starting from the number\n * `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of values from the source that were\n * allowed by the `predicate` function.\n * @method filter\n * @owner Observable\n */\nexport function filter<T>(predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): MonoTypeOperatorFunction<T> {\n  return function filterOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new FilterOperator(predicate, thisArg));\n  };\n}\n\nclass FilterOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean,\n              private thisArg?: any) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FilterSubscriber<T> extends Subscriber<T> {\n\n  count: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean,\n              private thisArg: any) {\n    super(destination);\n  }\n\n  // the try catch block below is left specifically for\n  // optimization and perf reasons. a tryCatcher is not necessary here.\n  protected _next(value: T) {\n    let result: any;\n    try {\n      result = this.predicate.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      this.destination.next(value);\n    }\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that mirrors the source Observable, but will call a specified function when\n * the source terminates on complete or error.\n * @param {function} callback Function to be called when source terminates.\n * @return {Observable} An Observable that mirrors the source, but will call the specified function on termination.\n * @method finally\n * @owner Observable\n */\nexport function finalize<T>(callback: () => void): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new FinallyOperator(callback));\n}\n\nclass FinallyOperator<T> implements Operator<T, T> {\n  constructor(private callback: () => void) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new FinallySubscriber(subscriber, this.callback));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FinallySubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<T>, callback: () => void) {\n    super(destination);\n    this.add(new Subscription(callback));\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\nexport function find<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                     thisArg?: any): OperatorFunction<T, S>;\nexport function find<T, S extends T>(predicate: (value: T, index: number) => value is S,\n                                     thisArg?: any): OperatorFunction<T, S>;\nexport function find<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        thisArg?: any): MonoTypeOperatorFunction<T>;\nexport function find<T>(predicate: (value: T, index: number) => boolean,\n                        thisArg?: any): MonoTypeOperatorFunction<T>;\n/**\n * Emits only the first value emitted by the source Observable that meets some\n * condition.\n *\n * <span class=\"informal\">Finds the first value that passes some test and emits\n * that.</span>\n *\n * <img src=\"./img/find.png\" width=\"100%\">\n *\n * `find` searches for the first item in the source Observable that matches the\n * specified condition embodied by the `predicate`, and returns the first\n * occurrence in the source. Unlike {@link first}, the `predicate` is required\n * in `find`, and does not emit an error if a valid value is not found.\n *\n * @example <caption>Find and emit the first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.find(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link first}\n * @see {@link findIndex}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable<T>} An Observable of the first item that matches the\n * condition.\n * @method find\n * @owner Observable\n */\nexport function find<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        thisArg?: any): MonoTypeOperatorFunction<T> {\n  if (typeof predicate !== 'function') {\n    throw new TypeError('predicate is not a function');\n  }\n  return (source: Observable<T>) => source.lift(new FindValueOperator(predicate, source, false, thisArg));\n}\n\nexport class FindValueOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private source: Observable<T>,\n              private yieldIndex: boolean,\n              private thisArg?: any) {\n  }\n\n  call(observer: Subscriber<T>, source: any): any {\n    return source.subscribe(new FindValueSubscriber(observer, this.predicate, this.source, this.yieldIndex, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class FindValueSubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private source: Observable<T>,\n              private yieldIndex: boolean,\n              private thisArg?: any) {\n    super(destination);\n  }\n\n  private notifyComplete(value: any): void {\n    const destination = this.destination;\n\n    destination.next(value);\n    destination.complete();\n  }\n\n  protected _next(value: T): void {\n    const { predicate, thisArg } = this;\n    const index = this.index++;\n    try {\n      const result = predicate.call(thisArg || this, value, index, this.source);\n      if (result) {\n        this.notifyComplete(this.yieldIndex ? index : value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.notifyComplete(this.yieldIndex ? -1 : undefined);\n  }\n}\n","/**\n * An error thrown when an Observable or a sequence was queried but has no\n * elements.\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link single}\n *\n * @class EmptyError\n */\nexport class EmptyError extends Error {\n  constructor() {\n    const err: any = super('no elements in sequence');\n    (<any> this).name = err.name = 'EmptyError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { EmptyError } from '../util/EmptyError';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n/* tslint:disable:max-line-length */\nexport function first<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S): OperatorFunction<T, S>;\nexport function first<T, S extends T, R>(predicate: (value: T | S, index: number, source: Observable<T>) => value is S,\n                                         resultSelector: (value: S, index: number) => R, defaultValue?: R): OperatorFunction<T, R>;\nexport function first<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                      resultSelector: void,\n                                      defaultValue?: S): OperatorFunction<T, S>;\nexport function first<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): MonoTypeOperatorFunction<T>;\nexport function first<T, R>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                            resultSelector?: (value: T, index: number) => R,\n                            defaultValue?: R): OperatorFunction<T, R>;\nexport function first<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                         resultSelector: void,\n                         defaultValue?: T): MonoTypeOperatorFunction<T>;\n\n/**\n * Emits only the first value (or the first value that meets some condition)\n * emitted by the source Observable.\n *\n * <span class=\"informal\">Emits only the first value. Or emits only the first\n * value that passes some test.</span>\n *\n * <img src=\"./img/first.png\" width=\"100%\">\n *\n * If called with no arguments, `first` emits the first value of the source\n * Observable, then completes. If called with a `predicate` function, `first`\n * emits the first value of the source that matches the specified condition. It\n * may also take a `resultSelector` function to produce the output value from\n * the input value, and a `defaultValue` to emit in case the source completes\n * before it is able to emit a valid value. Throws an error if `defaultValue`\n * was not provided and a matching element is not found.\n *\n * @example <caption>Emit only the first click that happens on the DOM</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Emits the first click that happens on a DIV</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link take}\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]\n * An optional function called with each item to test for condition matching.\n * @param {function(value: T, index: number): R} [resultSelector] A function to\n * produce the value on the output Observable based on the values\n * and the indices of the source Observable. The arguments passed to this\n * function are:\n * - `value`: the value that was emitted on the source.\n * - `index`: the \"index\" of the value from the source.\n * @param {R} [defaultValue] The default value emitted in case no valid value\n * was found on the source.\n * @return {Observable<T|R>} An Observable of the first item that matches the\n * condition.\n * @method first\n * @owner Observable\n */\nexport function first<T, R>(predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n                            resultSelector?: ((value: T, index: number) => R) | void,\n                            defaultValue?: R): OperatorFunction<T, T | R> {\n  return (source: Observable<T>) => source.lift(new FirstOperator(predicate, resultSelector, defaultValue, source));\n}\n\nclass FirstOperator<T, R> implements Operator<T, R> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source.subscribe(new FirstSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FirstSubscriber<T, R> extends Subscriber<T> {\n  private index: number = 0;\n  private hasCompleted: boolean = false;\n  private _emitted: boolean = false;\n\n  constructor(destination: Subscriber<R>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n    if (this.predicate) {\n      this._tryPredicate(value, index);\n    } else {\n      this._emit(value, index);\n    }\n  }\n\n  private _tryPredicate(value: T, index: number) {\n    let result: any;\n    try {\n      result = this.predicate(value, index, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      this._emit(value, index);\n    }\n  }\n\n  private _emit(value: any, index: number) {\n    if (this.resultSelector) {\n      this._tryResultSelector(value, index);\n      return;\n    }\n    this._emitFinal(value);\n  }\n\n  private _tryResultSelector(value: T, index: number) {\n    let result: any;\n    try {\n      result = (<any>this).resultSelector(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this._emitFinal(result);\n  }\n\n  private _emitFinal(value: any) {\n    const destination = this.destination;\n    if (!this._emitted) {\n      this._emitted = true;\n      destination.next(value);\n      destination.complete();\n      this.hasCompleted = true;\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    if (!this.hasCompleted && typeof this.defaultValue !== 'undefined') {\n      destination.next(this.defaultValue);\n      destination.complete();\n    } else if (!this.hasCompleted) {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","/**\n * An error thrown when an action is invalid because the object has been\n * unsubscribed.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n *\n * @class ObjectUnsubscribedError\n */\nexport class ObjectUnsubscribedError extends Error {\n  constructor() {\n    const err: any = super('object unsubscribed');\n    (<any> this).name = err.name = 'ObjectUnsubscribedError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { Subject } from './Subject';\nimport { Observer } from './Observer';\nimport { Subscription } from './Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SubjectSubscription<T> extends Subscription {\n  closed: boolean = false;\n\n  constructor(public subject: Subject<T>, public subscriber: Observer<T>) {\n    super();\n  }\n\n  unsubscribe() {\n    if (this.closed) {\n      return;\n    }\n\n    this.closed = true;\n\n    const subject = this.subject;\n    const observers = subject.observers;\n\n    this.subject = null;\n\n    if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {\n      return;\n    }\n\n    const subscriberIndex = observers.indexOf(this.subscriber);\n\n    if (subscriberIndex !== -1) {\n      observers.splice(subscriberIndex, 1);\n    }\n  }\n}\n","import { Operator } from './Operator';\nimport { Observer } from './Observer';\nimport { Observable } from './Observable';\nimport { Subscriber } from './Subscriber';\nimport { ISubscription, Subscription, TeardownLogic } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\nimport { rxSubscriber as rxSubscriberSymbol } from './symbol/rxSubscriber';\n\n/**\n * @class SubjectSubscriber<T>\n */\nexport class SubjectSubscriber<T> extends Subscriber<T> {\n  constructor(protected destination: Subject<T>) {\n    super(destination);\n  }\n}\n\n/**\n * @class Subject<T>\n */\nexport class Subject<T> extends Observable<T> implements ISubscription {\n\n  [rxSubscriberSymbol]() {\n    return new SubjectSubscriber(this);\n  }\n\n  observers: Observer<T>[] = [];\n\n  closed = false;\n\n  isStopped = false;\n\n  hasError = false;\n\n  thrownError: any = null;\n\n  constructor() {\n    super();\n  }\n\n  static create: Function = <T>(destination: Observer<T>, source: Observable<T>): AnonymousSubject<T> => {\n    return new AnonymousSubject<T>(destination, source);\n  }\n\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const subject = new AnonymousSubject(this, this);\n    subject.operator = <any>operator;\n    return <any>subject;\n  }\n\n  next(value?: T) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    if (!this.isStopped) {\n      const { observers } = this;\n      const len = observers.length;\n      const copy = observers.slice();\n      for (let i = 0; i < len; i++) {\n        copy[i].next(value);\n      }\n    }\n  }\n\n  error(err: any) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.hasError = true;\n    this.thrownError = err;\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].error(err);\n    }\n    this.observers.length = 0;\n  }\n\n  complete() {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].complete();\n    }\n    this.observers.length = 0;\n  }\n\n  unsubscribe() {\n    this.isStopped = true;\n    this.closed = true;\n    this.observers = null;\n  }\n\n  protected _trySubscribe(subscriber: Subscriber<T>): TeardownLogic {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return super._trySubscribe(subscriber);\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.isStopped) {\n      subscriber.complete();\n      return Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      return new SubjectSubscription(this, subscriber);\n    }\n  }\n\n  asObservable(): Observable<T> {\n    const observable = new Observable<T>();\n    (<any>observable).source = this;\n    return observable;\n  }\n}\n\n/**\n * @class AnonymousSubject<T>\n */\nexport class AnonymousSubject<T> extends Subject<T> {\n  constructor(protected destination?: Observer<T>, source?: Observable<T>) {\n    super();\n    this.source = source;\n  }\n\n  next(value: T) {\n    const { destination } = this;\n    if (destination && destination.next) {\n      destination.next(value);\n    }\n  }\n\n  error(err: any) {\n    const { destination } = this;\n    if (destination && destination.error) {\n      this.destination.error(err);\n    }\n  }\n\n  complete() {\n    const { destination } = this;\n    if (destination && destination.complete) {\n      this.destination.complete();\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const { source } = this;\n    if (source) {\n      return this.source.subscribe(subscriber);\n    } else {\n      return Subscription.EMPTY;\n    }\n  }\n}\n","export class MapPolyfill {\n  public size = 0;\n  private _values: any[] = [];\n  private _keys: any[] = [];\n\n  get(key: any) {\n    const i = this._keys.indexOf(key);\n    return i === -1 ? undefined : this._values[i];\n  }\n\n  set(key: any, value: any) {\n    const i = this._keys.indexOf(key);\n    if (i === -1) {\n      this._keys.push(key);\n      this._values.push(value);\n      this.size++;\n    } else {\n      this._values[i] = value;\n    }\n    return this;\n  }\n\n  delete(key: any): boolean {\n    const i = this._keys.indexOf(key);\n    if (i === -1) { return false; }\n    this._values.splice(i, 1);\n    this._keys.splice(i, 1);\n    this.size--;\n    return true;\n  }\n\n  clear(): void {\n    this._keys.length = 0;\n    this._values.length = 0;\n    this.size = 0;\n  }\n\n  forEach(cb: Function, thisArg: any): void {\n    for (let i = 0; i < this.size; i++) {\n      cb.call(thisArg, this._values[i], this._keys[i]);\n    }\n  }\n}","import { root } from './root';\nimport { MapPolyfill } from './MapPolyfill';\n\nexport const Map = root.Map || (() => MapPolyfill)();","export class FastMap {\n  private values: Object = {};\n\n  delete(key: string): boolean {\n    this.values[key] = null;\n    return true;\n  }\n\n  set(key: string, value: any): FastMap {\n    this.values[key] = value;\n    return this;\n  }\n\n  get(key: string): any {\n    return this.values[key];\n  }\n\n  forEach(cb: (value: any, key: any) => void, thisArg?: any): void {\n    const values = this.values;\n    for (let key in values) {\n      if (values.hasOwnProperty(key) && values[key] !== null) {\n        cb.call(thisArg, values[key], key);\n      }\n    }\n  }\n\n  clear(): void {\n    this.values = {};\n  }\n}","import { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subject } from '../Subject';\nimport { Map } from '../util/Map';\nimport { FastMap } from '../util/FastMap';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function groupBy<T, K>(keySelector: (value: T) => K): OperatorFunction<T, GroupedObservable<K, T>>;\nexport function groupBy<T, K>(keySelector: (value: T) => K, elementSelector: void, durationSelector: (grouped: GroupedObservable<K, T>) => Observable<any>): OperatorFunction<T, GroupedObservable<K, T>>;\nexport function groupBy<T, K, R>(keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>): OperatorFunction<T, GroupedObservable<K, R>>;\nexport function groupBy<T, K, R>(keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>, subjectSelector?: () => Subject<R>): OperatorFunction<T, GroupedObservable<K, R>>;\n/* tslint:enable:max-line-length */\n\n/**\n * Groups the items emitted by an Observable according to a specified criterion,\n * and emits these grouped items as `GroupedObservables`, one\n * {@link GroupedObservable} per group.\n *\n * <img src=\"./img/groupBy.png\" width=\"100%\">\n *\n * @example <caption>Group objects by id and return as array</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs3'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *     )\n *     .groupBy(p => p.id)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], []))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // [ { id: 1, name: 'aze1' },\n * //   { id: 1, name: 'erg1' },\n * //   { id: 1, name: 'df1' } ]\n * //\n * // [ { id: 2, name: 'sf2' },\n * //   { id: 2, name: 'dg2' },\n * //   { id: 2, name: 'sfqfb2' },\n * //   { id: 2, name: 'qsgqsfg2' } ]\n * //\n * // [ { id: 3, name: 'qfs3' } ]\n *\n * @example <caption>Pivot data on the id field</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs1'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *                   )\n *     .groupBy(p => p.id, p => p.name)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], [\"\" + group$.key]))\n *     .map(arr => ({'id': parseInt(arr[0]), 'values': arr.slice(1)}))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // { id: 1, values: [ 'aze1', 'erg1', 'df1' ] }\n * // { id: 2, values: [ 'sf2', 'dg2', 'sfqfb2', 'qsgqsfg2' ] }\n * // { id: 3, values: [ 'qfs1' ] }\n *\n * @param {function(value: T): K} keySelector A function that extracts the key\n * for each item.\n * @param {function(value: T): R} [elementSelector] A function that extracts the\n * return element for each item.\n * @param {function(grouped: GroupedObservable<K,R>): Observable<any>} [durationSelector]\n * A function that returns an Observable to determine how long each group should\n * exist.\n * @return {Observable<GroupedObservable<K,R>>} An Observable that emits\n * GroupedObservables, each of which corresponds to a unique key value and each\n * of which emits those items from the source Observable that share that key\n * value.\n * @method groupBy\n * @owner Observable\n */\nexport function groupBy<T, K, R>(keySelector: (value: T) => K,\n                                 elementSelector?: ((value: T) => R) | void,\n                                 durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n                                 subjectSelector?: () => Subject<R>): OperatorFunction<T, GroupedObservable<K, R>> {\n  return (source: Observable<T>) =>\n    source.lift(new GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector));\n}\n\nexport interface RefCountSubscription {\n  count: number;\n  unsubscribe: () => void;\n  closed: boolean;\n  attemptedToUnsubscribe: boolean;\n}\n\nclass GroupByOperator<T, K, R> implements Operator<T, GroupedObservable<K, R>> {\n  constructor(private keySelector: (value: T) => K,\n              private elementSelector?: ((value: T) => R) | void,\n              private durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n              private subjectSelector?: () => Subject<R>) {\n  }\n\n  call(subscriber: Subscriber<GroupedObservable<K, R>>, source: any): any {\n    return source.subscribe(new GroupBySubscriber(\n      subscriber, this.keySelector, this.elementSelector, this.durationSelector, this.subjectSelector\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass GroupBySubscriber<T, K, R> extends Subscriber<T> implements RefCountSubscription {\n  private groups: Map<K, Subject<T|R>> = null;\n  public attemptedToUnsubscribe: boolean = false;\n  public count: number = 0;\n\n  constructor(destination: Subscriber<GroupedObservable<K, R>>,\n              private keySelector: (value: T) => K,\n              private elementSelector?: ((value: T) => R) | void,\n              private durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n              private subjectSelector?: () => Subject<R>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    let key: K;\n    try {\n      key = this.keySelector(value);\n    } catch (err) {\n      this.error(err);\n      return;\n    }\n\n    this._group(value, key);\n  }\n\n  private _group(value: T, key: K) {\n    let groups = this.groups;\n\n    if (!groups) {\n      groups = this.groups = typeof key === 'string' ? new FastMap() : new Map();\n    }\n\n    let group = groups.get(key);\n\n    let element: R;\n    if (this.elementSelector) {\n      try {\n        element = this.elementSelector(value);\n      } catch (err) {\n        this.error(err);\n      }\n    } else {\n      element = <any>value;\n    }\n\n    if (!group) {\n      group = this.subjectSelector ? this.subjectSelector() : new Subject<R>();\n      groups.set(key, group);\n      const groupedObservable = new GroupedObservable(key, group, this);\n      this.destination.next(groupedObservable);\n      if (this.durationSelector) {\n        let duration: any;\n        try {\n          duration = this.durationSelector(new GroupedObservable<K, R>(key, <Subject<R>>group));\n        } catch (err) {\n          this.error(err);\n          return;\n        }\n        this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));\n      }\n    }\n\n    if (!group.closed) {\n      group.next(element);\n    }\n  }\n\n  protected _error(err: any): void {\n    const groups = this.groups;\n    if (groups) {\n      groups.forEach((group, key) => {\n        group.error(err);\n      });\n\n      groups.clear();\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    const groups = this.groups;\n    if (groups) {\n      groups.forEach((group, key) => {\n        group.complete();\n      });\n\n      groups.clear();\n    }\n    this.destination.complete();\n  }\n\n  removeGroup(key: K): void {\n    this.groups.delete(key);\n  }\n\n  unsubscribe() {\n    if (!this.closed) {\n      this.attemptedToUnsubscribe = true;\n      if (this.count === 0) {\n        super.unsubscribe();\n      }\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass GroupDurationSubscriber<K, T> extends Subscriber<T> {\n  constructor(private key: K,\n              private group: Subject<T>,\n              private parent: GroupBySubscriber<any, K, T>) {\n    super(group);\n  }\n\n  protected _next(value: T): void {\n    this.complete();\n  }\n\n  protected _unsubscribe() {\n    const { parent, key } = this;\n    this.key = this.parent = null;\n    if (parent) {\n      parent.removeGroup(key);\n    }\n  }\n}\n\n/**\n * An Observable representing values belonging to the same group represented by\n * a common key. The values emitted by a GroupedObservable come from the source\n * Observable. The common key is available as the field `key` on a\n * GroupedObservable instance.\n *\n * @class GroupedObservable<K, T>\n */\nexport class GroupedObservable<K, T> extends Observable<T> {\n  constructor(public key: K,\n              private groupSubject: Subject<T>,\n              private refCountSubscription?: RefCountSubscription) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const subscription = new Subscription();\n    const {refCountSubscription, groupSubject} = this;\n    if (refCountSubscription && !refCountSubscription.closed) {\n      subscription.add(new InnerRefCountSubscription(refCountSubscription));\n    }\n    subscription.add(groupSubject.subscribe(subscriber));\n    return subscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass InnerRefCountSubscription extends Subscription {\n  constructor(private parent: RefCountSubscription) {\n    super();\n    parent.count++;\n  }\n\n  unsubscribe() {\n    const parent = this.parent;\n    if (!parent.closed && !this.closed) {\n      super.unsubscribe();\n      parent.count -= 1;\n      if (parent.count === 0 && parent.attemptedToUnsubscribe) {\n        parent.unsubscribe();\n      }\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { noop } from '../util/noop';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.\n *\n * <img src=\"./img/ignoreElements.png\" width=\"100%\">\n *\n * @return {Observable} An empty Observable that only calls `complete`\n * or `error`, based on which one is called by the source Observable.\n * @method ignoreElements\n * @owner Observable\n */\nexport function ignoreElements<T>(): MonoTypeOperatorFunction<T> {\n  return function ignoreElementsOperatorFunction(source: Observable<T>) {\n    return source.lift(new IgnoreElementsOperator());\n  };\n}\n\nclass IgnoreElementsOperator<T, R> implements Operator<T, R> {\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new IgnoreElementsSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass IgnoreElementsSubscriber<T> extends Subscriber<T> {\n  protected _next(unused: T): void {\n    noop();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\nexport function isEmpty<T>(): OperatorFunction<T, boolean> {\n  return (source: Observable<T>) => source.lift(new IsEmptyOperator());\n}\n\nclass IsEmptyOperator implements Operator<any, boolean> {\n  call (observer: Subscriber<boolean>, source: any): any {\n    return source.subscribe(new IsEmptySubscriber(observer));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass IsEmptySubscriber extends Subscriber<any> {\n  constructor(destination: Subscriber<boolean>) {\n    super(destination);\n  }\n\n  private notifyComplete(isEmpty: boolean): void {\n    const destination = this.destination;\n\n    destination.next(isEmpty);\n    destination.complete();\n  }\n\n  protected _next(value: boolean) {\n    this.notifyComplete(false);\n  }\n\n  protected _complete() {\n    this.notifyComplete(true);\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { EmptyError } from '../util/EmptyError';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function last<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S): OperatorFunction<T, S>;\nexport function last<T, S extends T, R>(predicate: (value: T | S, index: number, source: Observable<T>) => value is S,\n                                        resultSelector: (value: S, index: number) => R, defaultValue?: R): OperatorFunction<T, R>;\nexport function last<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                     resultSelector: void,\n                                     defaultValue?: S): OperatorFunction<T, S>;\nexport function last<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): MonoTypeOperatorFunction<T>;\nexport function last<T, R>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                           resultSelector?: (value: T, index: number) => R,\n                           defaultValue?: R): OperatorFunction<T, R>;\nexport function last<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        resultSelector: void,\n                        defaultValue?: T): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits only the last item emitted by the source Observable.\n * It optionally takes a predicate function as a parameter, in which case, rather than emitting\n * the last item from the source Observable, the resulting Observable will emit the last item\n * from the source Observable that satisfies the predicate.\n *\n * <img src=\"./img/last.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {function} predicate - The condition any source emitted item has to satisfy.\n * @return {Observable} An Observable that emits only the last item satisfying the given condition\n * from the source, or an NoSuchElementException if no such items are emitted.\n * @throws - Throws if no items that match the predicate are emitted by the source Observable.\n * @method last\n * @owner Observable\n */\nexport function last<T, R>(predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n                           resultSelector?: ((value: T, index: number) => R) | void,\n                           defaultValue?: R): OperatorFunction<T, T | R> {\n  return (source: Observable<T>) => source.lift(new LastOperator(predicate, resultSelector, defaultValue, source));\n}\n\nclass LastOperator<T, R> implements Operator<T, R> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source.subscribe(new LastSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass LastSubscriber<T, R> extends Subscriber<T> {\n  private lastValue: T | R;\n  private hasValue: boolean = false;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n    super(destination);\n    if (typeof defaultValue !== 'undefined') {\n      this.lastValue = defaultValue;\n      this.hasValue = true;\n    }\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n    if (this.predicate) {\n      this._tryPredicate(value, index);\n    } else {\n      if (this.resultSelector) {\n        this._tryResultSelector(value, index);\n        return;\n      }\n      this.lastValue = value;\n      this.hasValue = true;\n    }\n  }\n\n  private _tryPredicate(value: T, index: number) {\n    let result: any;\n    try {\n      result = this.predicate(value, index, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      if (this.resultSelector) {\n        this._tryResultSelector(value, index);\n        return;\n      }\n      this.lastValue = value;\n      this.hasValue = true;\n    }\n  }\n\n  private _tryResultSelector(value: T, index: number) {\n    let result: any;\n    try {\n      result = (<any>this).resultSelector(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.lastValue = result;\n    this.hasValue = true;\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    if (this.hasValue) {\n      destination.next(this.lastValue);\n      destination.complete();\n    } else {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * <img src=\"./img/map.png\" width=\"100%\">\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * @example <caption>Map every click to the clientX position of that click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks.map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nexport function map<T, R>(project: (value: T, index: number) => R, thisArg?: any): OperatorFunction<T, R> {\n  return function mapOperation(source: Observable<T>): Observable<R> {\n    if (typeof project !== 'function') {\n      throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');\n    }\n    return source.lift(new MapOperator(project, thisArg));\n  };\n}\n\nexport class MapOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => R, private thisArg: any) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MapSubscriber<T, R> extends Subscriber<T> {\n  count: number = 0;\n  private thisArg: any;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => R,\n              thisArg: any) {\n    super(destination);\n    this.thisArg = thisArg || this;\n  }\n\n  // NOTE: This looks unoptimized, but it's actually purposefully NOT\n  // using try/catch optimizations.\n  protected _next(value: T) {\n    let result: any;\n    try {\n      result = this.project.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Emits the given constant value on the output Observable every time the source\n * Observable emits a value.\n *\n * <span class=\"informal\">Like {@link map}, but it maps every source value to\n * the same output value every time.</span>\n *\n * <img src=\"./img/mapTo.png\" width=\"100%\">\n *\n * Takes a constant `value` as argument, and emits that whenever the source\n * Observable emits a value. In other words, ignores the actual source value,\n * and simply uses the emission moment to know when to emit the given `value`.\n *\n * @example <caption>Map every click to the string 'Hi'</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var greetings = clicks.mapTo('Hi');\n * greetings.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {any} value The value to map each source value to.\n * @return {Observable} An Observable that emits the given `value` every time\n * the source Observable emits something.\n * @method mapTo\n * @owner Observable\n */\nexport function mapTo<T, R>(value: R): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift(new MapToOperator(value));\n}\n\nclass MapToOperator<T, R> implements Operator<T, R> {\n\n  value: R;\n\n  constructor(value: R) {\n    this.value = value;\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MapToSubscriber(subscriber, this.value));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MapToSubscriber<T, R> extends Subscriber<T> {\n\n  value: R;\n\n  constructor(destination: Subscriber<R>, value: R) {\n    super(destination);\n    this.value = value;\n  }\n\n  protected _next(x: T) {\n    this.destination.next(this.value);\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Represents all of the notifications from the source Observable as `next`\n * emissions marked with their original types within {@link Notification}\n * objects.\n *\n * <span class=\"informal\">Wraps `next`, `error` and `complete` emissions in\n * {@link Notification} objects, emitted as `next` on the output Observable.\n * </span>\n *\n * <img src=\"./img/materialize.png\" width=\"100%\">\n *\n * `materialize` returns an Observable that emits a `next` notification for each\n * `next`, `error`, or `complete` emission of the source Observable. When the\n * source Observable emits `complete`, the output Observable will emit `next` as\n * a Notification of type \"complete\", and then it will emit `complete` as well.\n * When the source Observable emits `error`, the output will emit `next` as a\n * Notification of type \"error\", and then `complete`.\n *\n * This operator is useful for producing metadata of the source Observable, to\n * be consumed as `next` emissions. Use it in conjunction with\n * {@link dematerialize}.\n *\n * @example <caption>Convert a faulty Observable to an Observable of Notifications</caption>\n * var letters = Rx.Observable.of('a', 'b', 13, 'd');\n * var upperCase = letters.map(x => x.toUpperCase());\n * var materialized = upperCase.materialize();\n * materialized.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - Notification {kind: \"N\", value: \"A\", error: undefined, hasValue: true}\n * // - Notification {kind: \"N\", value: \"B\", error: undefined, hasValue: true}\n * // - Notification {kind: \"E\", value: undefined, error: TypeError:\n * //   x.toUpperCase is not a function at MapSubscriber.letters.map.x\n * //   [as project] (http://1…, hasValue: false}\n *\n * @see {@link Notification}\n * @see {@link dematerialize}\n *\n * @return {Observable<Notification<T>>} An Observable that emits\n * {@link Notification} objects that wrap the original emissions from the source\n * Observable with metadata.\n * @method materialize\n * @owner Observable\n */\nexport function materialize<T>(): OperatorFunction<T, Notification<T>> {\n  return function materializeOperatorFunction(source: Observable<T>) {\n    return source.lift(new MaterializeOperator());\n  };\n}\n\nclass MaterializeOperator<T> implements Operator<T, Notification<T>> {\n  call(subscriber: Subscriber<Notification<T>>, source: any): any {\n    return source.subscribe(new MaterializeSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MaterializeSubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<Notification<T>>) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    this.destination.next(Notification.createNext(value));\n  }\n\n  protected _error(err: any) {\n    const destination = this.destination;\n    destination.next(Notification.createError(err));\n    destination.complete();\n  }\n\n  protected _complete() {\n    const destination = this.destination;\n    destination.next(Notification.createComplete());\n    destination.complete();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function scan<T>(accumulator: (acc: T, value: T, index: number) => T, seed?: T): MonoTypeOperatorFunction<T>;\nexport function scan<T>(accumulator: (acc: T[], value: T, index: number) => T[], seed?: T[]): OperatorFunction<T, T[]>;\nexport function scan<T, R>(accumulator: (acc: R, value: T, index: number) => R, seed?: R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Applies an accumulator function over the source Observable, and returns each\n * intermediate result, with an optional seed value.\n *\n * <span class=\"informal\">It's like {@link reduce}, but emits the current\n * accumulation whenever the source emits a value.</span>\n *\n * <img src=\"./img/scan.png\" width=\"100%\">\n *\n * Combines together all values emitted on the source, using an accumulator\n * function that knows how to join a new source value into the accumulation from\n * the past. Is similar to {@link reduce}, but emits the intermediate\n * accumulations.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var ones = clicks.mapTo(1);\n * var seed = 0;\n * var count = ones.scan((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link reduce}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator\n * The accumulator function called on each source value.\n * @param {T|R} [seed] The initial accumulation value.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method scan\n * @owner Observable\n */\nexport function scan<T, R>(accumulator: (acc: R, value: T, index: number) => R, seed?: T | R): OperatorFunction<T, R> {\n  let hasSeed = false;\n  // providing a seed of `undefined` *should* be valid and trigger\n  // hasSeed! so don't use `seed !== undefined` checks!\n  // For this reason, we have to check it here at the original call site\n  // otherwise inside Operator/Subscriber we won't know if `undefined`\n  // means they didn't provide anything or if they literally provided `undefined`\n  if (arguments.length >= 2) {\n    hasSeed = true;\n  }\n\n  return function scanOperatorFunction(source: Observable<T>): Observable<R> {\n    return source.lift(new ScanOperator(accumulator, seed, hasSeed));\n  };\n}\n\nclass ScanOperator<T, R> implements Operator<T, R> {\n  constructor(private accumulator: (acc: R, value: T, index: number) => R, private seed?: T | R, private hasSeed: boolean = false) {}\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ScanSubscriber<T, R> extends Subscriber<T> {\n  private index: number = 0;\n\n  get seed(): T | R {\n    return this._seed;\n  }\n\n  set seed(value: T | R) {\n    this.hasSeed = true;\n    this._seed = value;\n  }\n\n  constructor(destination: Subscriber<R>, private accumulator: (acc: R, value: T, index: number) => R, private _seed: T | R,\n              private hasSeed: boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSeed) {\n      this.seed = value;\n      this.destination.next(value);\n    } else {\n      return this._tryNext(value);\n    }\n  }\n\n  private _tryNext(value: T): void {\n    const index = this.index++;\n    let result: any;\n    try {\n      result = this.accumulator(<R>this.seed, value, index);\n    } catch (err) {\n      this.destination.error(err);\n    }\n    this.seed = result;\n    this.destination.next(result);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits only the last `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Remembers the latest `count` values, then emits those\n * only when the source completes.</span>\n *\n * <img src=\"./img/takeLast.png\" width=\"100%\">\n *\n * `takeLast` returns an Observable that emits at most the last `count` values\n * emitted by the source Observable. If the source emits fewer than `count`\n * values then all of its values are emitted. This operator must wait until the\n * `complete` notification emission from the source in order to emit the `next`\n * values on the output Observable, because otherwise it is impossible to know\n * whether or not more values will be emitted on the source. For this reason,\n * all values are emitted synchronously, followed by the complete notification.\n *\n * @example <caption>Take the last 3 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 100);\n * var lastThree = many.takeLast(3);\n * lastThree.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of values to emit from the end of\n * the sequence of values emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits at most the last count\n * values emitted by the source Observable.\n * @method takeLast\n * @owner Observable\n */\nexport function takeLast<T>(count: number): MonoTypeOperatorFunction<T> {\n  return function takeLastOperatorFunction(source: Observable<T>): Observable<T> {\n    if (count === 0) {\n      return new EmptyObservable<T>();\n    } else {\n      return source.lift(new TakeLastOperator(count));\n    }\n  };\n}\n\nclass TakeLastOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeLastSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeLastSubscriber<T> extends Subscriber<T> {\n  private ring: Array<T> = new Array();\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const ring = this.ring;\n    const total = this.total;\n    const count = this.count++;\n\n    if (ring.length < total) {\n      ring.push(value);\n    } else {\n      const index = count % total;\n      ring[index] = value;\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    let count = this.count;\n\n    if (count > 0) {\n      const total = this.count >= this.total ? this.total : this.count;\n      const ring  = this.ring;\n\n      for (let i = 0; i < total; i++) {\n        const idx = (count++) % total;\n        destination.next(ring[idx]);\n      }\n    }\n\n    destination.complete();\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function mergeMapTo<T, R>(observable: ObservableInput<R>, concurrent?: number): OperatorFunction<T, R>;\nexport function mergeMapTo<T, I, R>(observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in the output Observable.\n *\n * <span class=\"informal\">It's like {@link mergeMap}, but maps each value always\n * to the same inner Observable.</span>\n *\n * <img src=\"./img/mergeMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then merges those resulting Observables into one\n * single Observable, which is the output Observable.\n *\n * @example <caption>For each click event, start an interval Observable ticking every 1 second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.mergeMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable.\n * @method mergeMapTo\n * @owner Observable\n */\nexport function mergeMapTo<T, I, R>(innerObservable: Observable<I>,\n                                    resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n                                    concurrent: number = Number.POSITIVE_INFINITY): OperatorFunction<T, R> {\n  if (typeof resultSelector === 'number') {\n    concurrent = <number>resultSelector;\n    resultSelector = null;\n  }\n  return (source: Observable<T>) => source.lift(new MergeMapToOperator(innerObservable, <any>resultSelector, concurrent));\n}\n\n// TODO: Figure out correct signature here: an Operator<Observable<T>, R>\n//       needs to implement call(observer: Subscriber<R>): Subscriber<Observable<T>>\nexport class MergeMapToOperator<T, I, R> implements Operator<Observable<T>, R> {\n  constructor(private ish: ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source.subscribe(new MergeMapToSubscriber(observer, this.ish, this.resultSelector, this.concurrent));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeMapToSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasCompleted: boolean = false;\n  private buffer: T[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private ish: ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.active < this.concurrent) {\n      const resultSelector = this.resultSelector;\n      const index = this.index++;\n      const ish = this.ish;\n      const destination = this.destination;\n\n      this.active++;\n      this._innerSub(ish, destination, resultSelector, value, index);\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private _innerSub(ish: ObservableInput<I>,\n                    destination: PartialObserver<I>,\n                    resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n                    value: T,\n                    index: number): void {\n    this.add(subscribeToResult<T, I>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private trySelectResult(outerValue: T, innerValue: I,\n                          outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    let result: R;\n    try {\n      result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n\n    destination.next(result);\n  }\n\n  notifyError(err: any): void {\n    this.destination.error(err);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Applies an accumulator function over the source Observable where the\n * accumulator function itself returns an Observable, then each intermediate\n * Observable returned is merged into the output Observable.\n *\n * <span class=\"informal\">It's like {@link scan}, but the Observables returned\n * by the accumulator are merged into the outer Observable.</span>\n *\n * @example <caption>Count the number of click events</caption>\n * const click$ = Rx.Observable.fromEvent(document, 'click');\n * const one$ = click$.mapTo(1);\n * const seed = 0;\n * const count$ = one$.mergeScan((acc, one) => Rx.Observable.of(acc + one), seed);\n * count$.subscribe(x => console.log(x));\n *\n * // Results:\n * 1\n * 2\n * 3\n * 4\n * // ...and so on for each click\n *\n * @param {function(acc: R, value: T): Observable<R>} accumulator\n * The accumulator function called on each source value.\n * @param seed The initial accumulation value.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of\n * input Observables being subscribed to concurrently.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method mergeScan\n * @owner Observable\n */\nexport function mergeScan<T, R>(accumulator: (acc: R, value: T) => Observable<R>,\n                                seed: R,\n                                concurrent: number = Number.POSITIVE_INFINITY): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift(new MergeScanOperator(accumulator, seed, concurrent));\n}\n\nexport class MergeScanOperator<T, R> implements Operator<T, R> {\n  constructor(private accumulator: (acc: R, value: T) => Observable<R>,\n              private seed: R,\n              private concurrent: number) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MergeScanSubscriber(\n      subscriber, this.accumulator, this.seed, this.concurrent\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeScanSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private hasValue: boolean = false;\n  private hasCompleted: boolean = false;\n  private buffer: Observable<any>[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private accumulator: (acc: R, value: T) => Observable<R>,\n              private acc: R,\n              private concurrent: number) {\n    super(destination);\n  }\n\n  protected _next(value: any): void {\n    if (this.active < this.concurrent) {\n      const index = this.index++;\n      const ish = tryCatch(this.accumulator)(this.acc, value);\n      const destination = this.destination;\n      if (ish === errorObject) {\n        destination.error(errorObject.e);\n      } else {\n        this.active++;\n        this._innerSub(ish, value, index);\n      }\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private _innerSub(ish: any, value: T, index: number): void {\n    this.add(subscribeToResult<T, R>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      if (this.hasValue === false) {\n        this.destination.next(this.acc);\n      }\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const { destination } = this;\n    this.acc = innerValue;\n    this.hasValue = true;\n    destination.next(innerValue);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      if (this.hasValue === false) {\n        this.destination.next(this.acc);\n      }\n      this.destination.complete();\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { Observable } from '../Observable';\n\nexport function refCount<T>(): MonoTypeOperatorFunction<T> {\n  return function refCountOperatorFunction(source: ConnectableObservable<T>): Observable<T> {\n    return source.lift(new RefCountOperator(source));\n  };\n}\n\nclass RefCountOperator<T> implements Operator<T, T> {\n  constructor(private connectable: ConnectableObservable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n\n    const { connectable } = this;\n    (<any> connectable)._refCount++;\n\n    const refCounter = new RefCountSubscriber(subscriber, connectable);\n    const subscription = source.subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      (<any> refCounter).connection = connectable.connect();\n    }\n\n    return subscription;\n  }\n}\n\nclass RefCountSubscriber<T> extends Subscriber<T> {\n\n  private connection: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n\n  protected _unsubscribe() {\n\n    const { connectable } = this;\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n\n    this.connectable = null;\n    const refCount = (<any> connectable)._refCount;\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n\n    (<any> connectable)._refCount = refCount - 1;\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n\n    ///\n    // Compare the local RefCountSubscriber's connection Subscription to the\n    // connection Subscription on the shared ConnectableObservable. In cases\n    // where the ConnectableObservable source synchronously emits values, and\n    // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n    // execution continues to here before the RefCountOperator has a chance to\n    // supply the RefCountSubscriber with the shared connection Subscription.\n    // For example:\n    // ```\n    // Observable.range(0, 10)\n    //   .publish()\n    //   .refCount()\n    //   .take(5)\n    //   .subscribe();\n    // ```\n    // In order to account for this case, RefCountSubscriber should only dispose\n    // the ConnectableObservable's shared connection Subscription if the\n    // connection Subscription exists, *and* either:\n    //   a. RefCountSubscriber doesn't have a reference to the shared connection\n    //      Subscription yet, or,\n    //   b. RefCountSubscriber's connection Subscription reference is identical\n    //      to the shared connection Subscription\n    ///\n    const { connection } = this;\n    const sharedConnection = (<any> connectable)._connection;\n    this.connection = null;\n\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  }\n}\n","import { Subject, SubjectSubscriber } from '../Subject';\nimport { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { refCount as higherOrderRefCount } from '../operators/refCount';\n\n/**\n * @class ConnectableObservable<T>\n */\nexport class ConnectableObservable<T> extends Observable<T> {\n\n  protected _subject: Subject<T>;\n  protected _refCount: number = 0;\n  protected _connection: Subscription;\n  _isComplete = false;\n\n  constructor(protected source: Observable<T>,\n              protected subjectFactory: () => Subject<T>) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    return this.getSubject().subscribe(subscriber);\n  }\n\n  protected getSubject(): Subject<T> {\n    const subject = this._subject;\n    if (!subject || subject.isStopped) {\n      this._subject = this.subjectFactory();\n    }\n    return this._subject;\n  }\n\n  connect(): Subscription {\n    let connection = this._connection;\n    if (!connection) {\n      this._isComplete = false;\n      connection = this._connection = new Subscription();\n      connection.add(this.source\n        .subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n      if (connection.closed) {\n        this._connection = null;\n        connection = Subscription.EMPTY;\n      } else {\n        this._connection = connection;\n      }\n    }\n    return connection;\n  }\n\n  refCount(): Observable<T> {\n    return higherOrderRefCount()(this) as Observable<T>;\n  }\n}\n\nconst connectableProto = <any>ConnectableObservable.prototype;\n\nexport const connectableObservableDescriptor: PropertyDescriptorMap = {\n  operator: { value: null },\n  _refCount: { value: 0, writable: true },\n  _subject: { value: null, writable: true },\n  _connection: { value: null, writable: true },\n  _subscribe: { value: connectableProto._subscribe },\n  _isComplete: { value: connectableProto._isComplete, writable: true },\n  getSubject: { value: connectableProto.getSubject },\n  connect: { value: connectableProto.connect },\n  refCount: { value: connectableProto.refCount }\n};\n\nclass ConnectableSubscriber<T> extends SubjectSubscriber<T> {\n  constructor(destination: Subject<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n  protected _error(err: any): void {\n    this._unsubscribe();\n    super._error(err);\n  }\n  protected _complete(): void {\n    this.connectable._isComplete = true;\n    this._unsubscribe();\n    super._complete();\n  }\n  protected _unsubscribe() {\n    const connectable = <any>this.connectable;\n    if (connectable) {\n      this.connectable = null;\n      const connection = connectable._connection;\n      connectable._refCount = 0;\n      connectable._subject = null;\n      connectable._connection = null;\n      if (connection) {\n        connection.unsubscribe();\n      }\n    }\n  }\n}\n\nclass RefCountOperator<T> implements Operator<T, T> {\n  constructor(private connectable: ConnectableObservable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n\n    const { connectable } = this;\n    (<any> connectable)._refCount++;\n\n    const refCounter = new RefCountSubscriber(subscriber, connectable);\n    const subscription = source.subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      (<any> refCounter).connection = connectable.connect();\n    }\n\n    return subscription;\n  }\n}\n\nclass RefCountSubscriber<T> extends Subscriber<T> {\n\n  private connection: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n\n  protected _unsubscribe() {\n\n    const { connectable } = this;\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n\n    this.connectable = null;\n    const refCount = (<any> connectable)._refCount;\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n\n    (<any> connectable)._refCount = refCount - 1;\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n\n    ///\n    // Compare the local RefCountSubscriber's connection Subscription to the\n    // connection Subscription on the shared ConnectableObservable. In cases\n    // where the ConnectableObservable source synchronously emits values, and\n    // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n    // execution continues to here before the RefCountOperator has a chance to\n    // supply the RefCountSubscriber with the shared connection Subscription.\n    // For example:\n    // ```\n    // Observable.range(0, 10)\n    //   .publish()\n    //   .refCount()\n    //   .take(5)\n    //   .subscribe();\n    // ```\n    // In order to account for this case, RefCountSubscriber should only dispose\n    // the ConnectableObservable's shared connection Subscription if the\n    // connection Subscription exists, *and* either:\n    //   a. RefCountSubscriber doesn't have a reference to the shared connection\n    //      Subscription yet, or,\n    //   b. RefCountSubscriber's connection Subscription reference is identical\n    //      to the shared connection Subscription\n    ///\n    const { connection } = this;\n    const sharedConnection = (<any> connectable)._connection;\n    this.connection = null;\n\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { FromObservable } from '../observable/FromObservable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { isArray } from '../util/isArray';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function onErrorResumeNext<T, R>(v: ObservableInput<R>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, R> ;\nexport function onErrorResumeNext<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, R>(array: ObservableInput<any>[]): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * When any of the provided Observable emits an complete or error notification, it immediately subscribes to the next one\n * that was passed.\n *\n * <span class=\"informal\">Execute series of Observables no matter what, even if it means swallowing errors.</span>\n *\n * <img src=\"./img/onErrorResumeNext.png\" width=\"100%\">\n *\n * `onErrorResumeNext` is an operator that accepts a series of Observables, provided either directly as\n * arguments or as an array. If no single Observable is provided, returned Observable will simply behave the same\n * as the source.\n *\n * `onErrorResumeNext` returns an Observable that starts by subscribing and re-emitting values from the source Observable.\n * When its stream of values ends - no matter if Observable completed or emitted an error - `onErrorResumeNext`\n * will subscribe to the first Observable that was passed as an argument to the method. It will start re-emitting\n * its values as well and - again - when that stream ends, `onErrorResumeNext` will proceed to subscribing yet another\n * Observable in provided series, no matter if previous Observable completed or ended with an error. This will\n * be happening until there is no more Observables left in the series, at which point returned Observable will\n * complete - even if the last subscribed stream ended with an error.\n *\n * `onErrorResumeNext` can be therefore thought of as version of {@link concat} operator, which is more permissive\n * when it comes to the errors emitted by its input Observables. While `concat` subscribes to the next Observable\n * in series only if previous one successfully completed, `onErrorResumeNext` subscribes even if it ended with\n * an error.\n *\n * Note that you do not get any access to errors emitted by the Observables. In particular do not\n * expect these errors to appear in error callback passed to {@link subscribe}. If you want to take\n * specific actions based on what error was emitted by an Observable, you should try out {@link catch} instead.\n *\n *\n * @example <caption>Subscribe to the next Observable after map fails</caption>\n * Rx.Observable.of(1, 2, 3, 0)\n *   .map(x => {\n *       if (x === 0) { throw Error(); }\n         return 10 / x;\n *   })\n *   .onErrorResumeNext(Rx.Observable.of(1, 2, 3))\n *   .subscribe(\n *     val => console.log(val),\n *     err => console.log(err),          // Will never be called.\n *     () => console.log('that\\'s it!')\n *   );\n *\n * // Logs:\n * // 10\n * // 5\n * // 3.3333333333333335\n * // 1\n * // 2\n * // 3\n * // \"that's it!\"\n *\n * @see {@link concat}\n * @see {@link catch}\n *\n * @param {...ObservableInput} observables Observables passed either directly or as an array.\n * @return {Observable} An Observable that emits values from source Observable, but - if it errors - subscribes\n * to the next passed Observable and so on, until it completes or runs out of Observables.\n * @method onErrorResumeNext\n * @owner Observable\n */\n\nexport function onErrorResumeNext<T, R>(...nextSources: Array<ObservableInput<any> |\n                                                       Array<ObservableInput<any>> |\n                                                       ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\n  if (nextSources.length === 1 && isArray(nextSources[0])) {\n    nextSources = <Array<Observable<any>>>nextSources[0];\n  }\n\n  return (source: Observable<T>) => source.lift(new OnErrorResumeNextOperator<T, R>(nextSources));\n}\n\n/* tslint:disable:max-line-length */\nexport function onErrorResumeNextStatic<R>(v: ObservableInput<R>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<R>;\n\nexport function onErrorResumeNextStatic<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\nexport function onErrorResumeNextStatic<R>(array: ObservableInput<any>[]): Observable<R>;\n/* tslint:enable:max-line-length */\n\nexport function onErrorResumeNextStatic<T, R>(...nextSources: Array<ObservableInput<any> |\n                                                              Array<ObservableInput<any>> |\n                                                              ((...values: Array<any>) => R)>): Observable<R> {\n  let source: ObservableInput<any> = null;\n\n  if (nextSources.length === 1 && isArray(nextSources[0])) {\n    nextSources = <Array<ObservableInput<any>>>nextSources[0];\n  }\n  source = nextSources.shift();\n\n  return new FromObservable(source, null).lift(new OnErrorResumeNextOperator<T, R>(nextSources));\n}\n\nclass OnErrorResumeNextOperator<T, R> implements Operator<T, R> {\n  constructor(private nextSources: Array<ObservableInput<any>>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new OnErrorResumeNextSubscriber(subscriber, this.nextSources));\n  }\n}\n\nclass OnErrorResumeNextSubscriber<T, R> extends OuterSubscriber<T, R> {\n  constructor(protected destination: Subscriber<T>,\n              private nextSources: Array<ObservableInput<any>>) {\n    super(destination);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this.subscribeToNextSource();\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this.subscribeToNextSource();\n  }\n\n  protected _error(err: any): void {\n    this.subscribeToNextSource();\n  }\n\n  protected _complete(): void {\n    this.subscribeToNextSource();\n  }\n\n  private subscribeToNextSource(): void {\n    const next = this.nextSources.shift();\n    if (next) {\n      this.add(subscribeToResult(this, next));\n    } else {\n      this.destination.complete();\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Groups pairs of consecutive emissions together and emits them as an array of\n * two values.\n *\n * <span class=\"informal\">Puts the current value and previous value together as\n * an array, and emits that.</span>\n *\n * <img src=\"./img/pairwise.png\" width=\"100%\">\n *\n * The Nth emission from the source Observable will cause the output Observable\n * to emit an array [(N-1)th, Nth] of the previous and the current value, as a\n * pair. For this reason, `pairwise` emits on the second and subsequent\n * emissions from the source Observable, but not on the first emission, because\n * there is no previous value in that case.\n *\n * @example <caption>On every click (starting from the second), emit the relative distance to the previous click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var pairs = clicks.pairwise();\n * var distance = pairs.map(pair => {\n *   var x0 = pair[0].clientX;\n *   var y0 = pair[0].clientY;\n *   var x1 = pair[1].clientX;\n *   var y1 = pair[1].clientY;\n *   return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));\n * });\n * distance.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n *\n * @return {Observable<Array<T>>} An Observable of pairs (as arrays) of\n * consecutive values from the source Observable.\n * @method pairwise\n * @owner Observable\n */\nexport function pairwise<T>(): OperatorFunction<T, [T, T]> {\n  return (source: Observable<T>) => source.lift(new PairwiseOperator());\n}\n\nclass PairwiseOperator<T> implements Operator<T, [T, T]> {\n  call(subscriber: Subscriber<[T, T]>, source: any): any {\n    return source.subscribe(new PairwiseSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass PairwiseSubscriber<T> extends Subscriber<T> {\n  private prev: T;\n  private hasPrev: boolean = false;\n\n  constructor(destination: Subscriber<[T, T]>) {\n    super(destination);\n  }\n\n  _next(value: T): void {\n    if (this.hasPrev) {\n      this.destination.next([this.prev, value]);\n    } else {\n      this.hasPrev = true;\n    }\n\n    this.prev = value;\n  }\n}\n","import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription, ISubscription } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\n\n/**\n * @class BehaviorSubject<T>\n */\nexport class BehaviorSubject<T> extends Subject<T> {\n\n  constructor(private _value: T) {\n    super();\n  }\n\n  get value(): T {\n    return this.getValue();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const subscription = super._subscribe(subscriber);\n    if (subscription && !(<ISubscription>subscription).closed) {\n      subscriber.next(this._value);\n    }\n    return subscription;\n  }\n\n  getValue(): T {\n    if (this.hasError) {\n      throw this.thrownError;\n    } else if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return this._value;\n    }\n  }\n\n  next(value: T): void {\n    super.next(this._value = value);\n  }\n}\n","import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\n\n/**\n * @class AsyncSubject<T>\n */\nexport class AsyncSubject<T> extends Subject<T> {\n  private value: T = null;\n  private hasNext: boolean = false;\n  private hasCompleted: boolean = false;\n\n  protected _subscribe(subscriber: Subscriber<any>): Subscription {\n    if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.hasCompleted && this.hasNext) {\n      subscriber.next(this.value);\n      subscriber.complete();\n      return Subscription.EMPTY;\n    }\n    return super._subscribe(subscriber);\n  }\n\n  next(value: T): void {\n    if (!this.hasCompleted) {\n      this.value = value;\n      this.hasNext = true;\n    }\n  }\n\n  error(error: any): void {\n    if (!this.hasCompleted) {\n      super.error(error);\n    }\n  }\n\n  complete(): void {\n    this.hasCompleted = true;\n    if (this.hasNext) {\n      super.next(this.value);\n    }\n    super.complete();\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { Subscription } from '../Subscription';\nimport { QueueScheduler } from './QueueScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class QueueAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: QueueScheduler,\n              protected work: (this: QueueAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n    if (delay > 0) {\n      return super.schedule(state, delay);\n    }\n    this.delay = delay;\n    this.state = state;\n    this.scheduler.flush(this);\n    return this;\n  }\n\n  public execute(state: T, delay: number): any {\n    return (delay > 0 || this.closed) ?\n      super.execute(state, delay) :\n      this._execute(state, delay) ;\n  }\n\n  protected requestAsyncId(scheduler: QueueScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Otherwise flush the scheduler starting with this action.\n    return scheduler.flush(this);\n  }\n}\n","import { QueueAction } from './QueueAction';\nimport { QueueScheduler } from './QueueScheduler';\n\n/**\n *\n * Queue Scheduler\n *\n * <span class=\"informal\">Put every next task on a queue, instead of executing it immediately</span>\n *\n * `queue` scheduler, when used with delay, behaves the same as {@link async} scheduler.\n *\n * When used without delay, it schedules given task synchronously - executes it right when\n * it is scheduled. However when called recursively, that is when inside the scheduled task,\n * another task is scheduled with queue scheduler, instead of executing immediately as well,\n * that task will be put on a queue and wait for current one to finish.\n *\n * This means that when you execute task with `queue` scheduler, you are sure it will end\n * before any other task scheduled with that scheduler will start.\n *\n * @examples <caption>Schedule recursively first, then do something</caption>\n *\n * Rx.Scheduler.queue.schedule(() => {\n *   Rx.Scheduler.queue.schedule(() => console.log('second')); // will not happen now, but will be put on a queue\n *\n *   console.log('first');\n * });\n *\n * // Logs:\n * // \"first\"\n * // \"second\"\n *\n *\n * @example <caption>Reschedule itself recursively</caption>\n *\n * Rx.Scheduler.queue.schedule(function(state) {\n *   if (state !== 0) {\n *     console.log('before', state);\n *     this.schedule(state - 1); // `this` references currently executing Action,\n *                               // which we reschedule with new state\n *     console.log('after', state);\n *   }\n * }, 0, 3);\n *\n * // In scheduler that runs recursively, you would expect:\n * // \"before\", 3\n * // \"before\", 2\n * // \"before\", 1\n * // \"after\", 1\n * // \"after\", 2\n * // \"after\", 3\n *\n * // But with queue it logs:\n * // \"before\", 3\n * // \"after\", 3\n * // \"before\", 2\n * // \"after\", 2\n * // \"before\", 1\n * // \"after\", 1\n *\n *\n * @static true\n * @name queue\n * @owner Scheduler\n */\n\nexport const queue = new QueueScheduler(QueueAction);\n","import { AsyncScheduler } from './AsyncScheduler';\n\nexport class QueueScheduler extends AsyncScheduler {\n}\n","import { Subject } from './Subject';\nimport { IScheduler } from './Scheduler';\nimport { queue } from './scheduler/queue';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { ObserveOnSubscriber } from './operators/observeOn';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\n/**\n * @class ReplaySubject<T>\n */\nexport class ReplaySubject<T> extends Subject<T> {\n  private _events: ReplayEvent<T>[] = [];\n  private _bufferSize: number;\n  private _windowTime: number;\n\n  constructor(bufferSize: number = Number.POSITIVE_INFINITY,\n              windowTime: number = Number.POSITIVE_INFINITY,\n              private scheduler?: IScheduler) {\n    super();\n    this._bufferSize = bufferSize < 1 ? 1 : bufferSize;\n    this._windowTime = windowTime < 1 ? 1 : windowTime;\n  }\n\n  next(value: T): void {\n    const now = this._getNow();\n    this._events.push(new ReplayEvent(now, value));\n    this._trimBufferThenGetEvents();\n    super.next(value);\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const _events = this._trimBufferThenGetEvents();\n    const scheduler = this.scheduler;\n    let subscription: Subscription;\n\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.hasError) {\n      subscription = Subscription.EMPTY;\n    } else if (this.isStopped) {\n      subscription = Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      subscription = new SubjectSubscription(this, subscriber);\n    }\n\n    if (scheduler) {\n      subscriber.add(subscriber = new ObserveOnSubscriber<T>(subscriber, scheduler));\n    }\n\n    const len = _events.length;\n    for (let i = 0; i < len && !subscriber.closed; i++) {\n      subscriber.next(_events[i].value);\n    }\n\n    if (this.hasError) {\n      subscriber.error(this.thrownError);\n    } else if (this.isStopped) {\n      subscriber.complete();\n    }\n\n    return subscription;\n  }\n\n  _getNow(): number {\n    return (this.scheduler || queue).now();\n  }\n\n  private _trimBufferThenGetEvents(): ReplayEvent<T>[] {\n    const now = this._getNow();\n    const _bufferSize = this._bufferSize;\n    const _windowTime = this._windowTime;\n    const _events = this._events;\n\n    let eventsCount = _events.length;\n    let spliceCount = 0;\n\n    // Trim events that fall out of the time window.\n    // Start at the front of the list. Break early once\n    // we encounter an event that falls within the window.\n    while (spliceCount < eventsCount) {\n      if ((now - _events[spliceCount].time) < _windowTime) {\n        break;\n      }\n      spliceCount++;\n    }\n\n    if (eventsCount > _bufferSize) {\n      spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);\n    }\n\n    if (spliceCount > 0) {\n      _events.splice(0, spliceCount);\n    }\n\n    return _events;\n  }\n}\n\nclass ReplayEvent<T> {\n  constructor(public time: number, public value: T) {\n  }\n}\n","import { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item.\n * @param {...Observables} ...observables sources used to race for which Observable emits first.\n * @return {Observable} an Observable that mirrors the output of the first Observable to emit an item.\n * @static true\n * @name race\n * @owner Observable\n */\nexport function race<T>(observables: Array<Observable<T>>): Observable<T>;\nexport function race<T>(observables: Array<Observable<any>>): Observable<T>;\nexport function race<T>(...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T>;\nexport function race<T>(...observables: Array<Observable<any> | Array<Observable<any>>>): Observable<T> {\n  // if the only argument is an array, it was most likely called with\n  // `race([obs1, obs2, ...])`\n  if (observables.length === 1) {\n    if (isArray(observables[0])) {\n      observables = <Array<Observable<any>>>observables[0];\n    } else {\n      return <Observable<any>>observables[0];\n    }\n  }\n\n  return new ArrayObservable<T>(<any>observables).lift(new RaceOperator<T>());\n}\n\nexport class RaceOperator<T> implements Operator<T, T> {\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RaceSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class RaceSubscriber<T> extends OuterSubscriber<T, T> {\n  private hasFirst: boolean = false;\n  private observables: Observable<any>[] = [];\n  private subscriptions: Subscription[] = [];\n\n  constructor(destination: Subscriber<T>) {\n    super(destination);\n  }\n\n  protected _next(observable: any): void {\n    this.observables.push(observable);\n  }\n\n  protected _complete() {\n    const observables = this.observables;\n    const len = observables.length;\n\n    if (len === 0) {\n      this.destination.complete();\n    } else {\n      for (let i = 0; i < len && !this.hasFirst; i++) {\n        let observable = observables[i];\n        let subscription = subscribeToResult(this, observable, observable, i);\n\n        if (this.subscriptions) {\n          this.subscriptions.push(subscription);\n        }\n        this.add(subscription);\n      }\n      this.observables = null;\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    if (!this.hasFirst) {\n      this.hasFirst = true;\n\n      for (let i = 0; i < this.subscriptions.length; i++) {\n        if (i !== outerIndex) {\n          let subscription = this.subscriptions[i];\n\n          subscription.unsubscribe();\n          this.remove(subscription);\n        }\n      }\n\n      this.subscriptions = null;\n    }\n\n    this.destination.next(innerValue);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that repeats the stream of items emitted by the source Observable at most count times.\n *\n * <img src=\"./img/repeat.png\" width=\"100%\">\n *\n * @param {number} [count] The number of times the source Observable items are repeated, a count of 0 will yield\n * an empty Observable.\n * @return {Observable} An Observable that repeats the stream of items emitted by the source Observable at most\n * count times.\n * @method repeat\n * @owner Observable\n */\nexport function repeat<T>(count: number = -1): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => {\n    if (count === 0) {\n      return new EmptyObservable<T>();\n    } else if (count < 0) {\n      return source.lift(new RepeatOperator(-1, source));\n    } else {\n      return source.lift(new RepeatOperator(count - 1, source));\n    }\n  };\n}\n\nclass RepeatOperator<T> implements Operator<T, T> {\n  constructor(private count: number,\n              private source: Observable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RepeatSubscriber(subscriber, this.count, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RepeatSubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>,\n              private count: number,\n              private source: Observable<T>) {\n    super(destination);\n  }\n  complete() {\n    if (!this.isStopped) {\n      const { source, count } = this;\n      if (count === 0) {\n        return super.complete();\n      } else if (count > -1) {\n        this.count = count - 1;\n      }\n      source.subscribe(this._unsubscribeAndRecycle());\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of a `complete`. If the source\n * Observable calls `complete`, this method will emit to the Observable returned from `notifier`. If that Observable\n * calls `complete` or `error`, then this method will call `complete` or `error` on the child subscription. Otherwise\n * this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/repeatWhen.png\" width=\"100%\">\n *\n * @param {function(notifications: Observable): Observable} notifier - Receives an Observable of notifications with\n * which a user can `complete` or `error`, aborting the repetition.\n * @return {Observable} The source Observable modified with repeat logic.\n * @method repeatWhen\n * @owner Observable\n */\nexport function repeatWhen<T>(notifier: (notifications: Observable<any>) => Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new RepeatWhenOperator(notifier));\n}\n\nclass RepeatWhenOperator<T> implements Operator<T, T> {\n  constructor(protected notifier: (notifications: Observable<any>) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RepeatWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private notifications: Subject<any>;\n  private retries: Observable<any>;\n  private retriesSubscription: Subscription;\n  private sourceIsBeingSubscribedTo: boolean = true;\n\n  constructor(destination: Subscriber<R>,\n              private notifier: (notifications: Observable<any>) => Observable<any>,\n              private source: Observable<T>) {\n    super(destination);\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.sourceIsBeingSubscribedTo = true;\n    this.source.subscribe(this);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    if (this.sourceIsBeingSubscribedTo === false) {\n      return super.complete();\n    }\n  }\n\n  complete() {\n    this.sourceIsBeingSubscribedTo = false;\n\n    if (!this.isStopped) {\n      if (!this.retries) {\n        this.subscribeToRetries();\n      } else if (this.retriesSubscription.closed) {\n        return super.complete();\n      }\n\n      this._unsubscribeAndRecycle();\n      this.notifications.next();\n    }\n  }\n\n  protected _unsubscribe() {\n    const { notifications, retriesSubscription } = this;\n    if (notifications) {\n      notifications.unsubscribe();\n      this.notifications = null;\n    }\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = null;\n    }\n    this.retries = null;\n  }\n\n  protected _unsubscribeAndRecycle(): Subscriber<T> {\n    const { notifications, retries, retriesSubscription } = this;\n    this.notifications = null;\n    this.retries = null;\n    this.retriesSubscription = null;\n    super._unsubscribeAndRecycle();\n    this.notifications = notifications;\n    this.retries = retries;\n    this.retriesSubscription = retriesSubscription;\n    return this;\n  }\n\n  private subscribeToRetries() {\n    this.notifications = new Subject();\n    const retries = tryCatch(this.notifier)(this.notifications);\n    if (retries === errorObject) {\n      return super.complete();\n    }\n    this.retries = retries;\n    this.retriesSubscription = subscribeToResult(this, retries);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will resubscribe to the source Observable for a maximum of `count` resubscriptions (given\n * as a number parameter) rather than propagating the `error` call.\n *\n * <img src=\"./img/retry.png\" width=\"100%\">\n *\n * Any and all items emitted by the source Observable will be emitted by the resulting Observable, even those emitted\n * during failed subscriptions. For example, if an Observable fails at first but emits [1, 2] then succeeds the second\n * time and emits: [1, 2, 3, 4, 5] then the complete stream of emissions and notifications\n * would be: [1, 2, 1, 2, 3, 4, 5, `complete`].\n * @param {number} count - Number of retry attempts before failing.\n * @return {Observable} The source Observable modified with the retry logic.\n * @method retry\n * @owner Observable\n */\nexport function retry<T>(count: number = -1): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new RetryOperator(count, source));\n}\n\nclass RetryOperator<T> implements Operator<T, T> {\n  constructor(private count: number,\n              private source: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RetrySubscriber(subscriber, this.count, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RetrySubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>,\n              private count: number,\n              private source: Observable<T>) {\n    super(destination);\n  }\n  error(err: any) {\n    if (!this.isStopped) {\n      const { source, count } = this;\n      if (count === 0) {\n        return super.error(err);\n      } else if (count > -1) {\n        this.count = count - 1;\n      }\n      source.subscribe(this._unsubscribeAndRecycle());\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will emit the Throwable that caused the error to the Observable returned from `notifier`.\n * If that Observable calls `complete` or `error` then this method will call `complete` or `error` on the child\n * subscription. Otherwise this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/retryWhen.png\" width=\"100%\">\n *\n * @param {function(errors: Observable): Observable} notifier - Receives an Observable of notifications with which a\n * user can `complete` or `error`, aborting the retry.\n * @return {Observable} The source Observable modified with retry logic.\n * @method retryWhen\n * @owner Observable\n */\nexport function retryWhen<T>(notifier: (errors: Observable<any>) => Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new RetryWhenOperator(notifier, source));\n}\n\nclass RetryWhenOperator<T> implements Operator<T, T> {\n  constructor(protected notifier: (errors: Observable<any>) => Observable<any>,\n              protected source: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RetryWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private errors: Subject<any>;\n  private retries: Observable<any>;\n  private retriesSubscription: Subscription;\n\n  constructor(destination: Subscriber<R>,\n              private notifier: (errors: Observable<any>) => Observable<any>,\n              private source: Observable<T>) {\n    super(destination);\n  }\n\n  error(err: any) {\n    if (!this.isStopped) {\n\n      let errors = this.errors;\n      let retries: any = this.retries;\n      let retriesSubscription = this.retriesSubscription;\n\n      if (!retries) {\n        errors = new Subject();\n        retries = tryCatch(this.notifier)(errors);\n        if (retries === errorObject) {\n          return super.error(errorObject.e);\n        }\n        retriesSubscription = subscribeToResult(this, retries);\n      } else {\n        this.errors = null;\n        this.retriesSubscription = null;\n      }\n\n      this._unsubscribeAndRecycle();\n\n      this.errors = errors;\n      this.retries = retries;\n      this.retriesSubscription = retriesSubscription;\n\n      errors.next(err);\n    }\n  }\n\n  protected _unsubscribe() {\n    const { errors, retriesSubscription } = this;\n    if (errors) {\n      errors.unsubscribe();\n      this.errors = null;\n    }\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = null;\n    }\n    this.retries = null;\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const { errors, retries, retriesSubscription } = this;\n    this.errors = null;\n    this.retries = null;\n    this.retriesSubscription = null;\n\n    this._unsubscribeAndRecycle();\n\n    this.errors = errors;\n    this.retries = retries;\n    this.retriesSubscription = retriesSubscription;\n\n    this.source.subscribe(this);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits the most recently emitted value from the source Observable whenever\n * another Observable, the `notifier`, emits.\n *\n * <span class=\"informal\">It's like {@link sampleTime}, but samples whenever\n * the `notifier` Observable emits something.</span>\n *\n * <img src=\"./img/sample.png\" width=\"100%\">\n *\n * Whenever the `notifier` Observable emits a value or completes, `sample`\n * looks at the source Observable and emits whichever value it has most recently\n * emitted since the previous sampling, unless the source has not emitted\n * anything since the previous sampling. The `notifier` is subscribed to as soon\n * as the output Observable is subscribed.\n *\n * @example <caption>On every click, sample the most recent \"seconds\" timer</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = seconds.sample(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {Observable<any>} notifier The Observable to use for sampling the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable whenever the notifier Observable\n * emits value or completes.\n * @method sample\n * @owner Observable\n */\nexport function sample<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SampleOperator(notifier));\n}\n\nclass SampleOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    const sampleSubscriber = new SampleSubscriber(subscriber);\n    const subscription = source.subscribe(sampleSubscriber);\n    subscription.add(subscribeToResult(sampleSubscriber, this.notifier));\n    return subscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SampleSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private value: T;\n  private hasValue: boolean = false;\n\n  protected _next(value: T) {\n    this.value = value;\n    this.hasValue = true;\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.emitValue();\n  }\n\n  notifyComplete(): void {\n    this.emitValue();\n  }\n\n  emitValue() {\n    if (this.hasValue) {\n      this.hasValue = false;\n      this.destination.next(this.value);\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { async } from '../scheduler/async';\nimport { TeardownLogic } from '../Subscription';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits the most recently emitted value from the source Observable within\n * periodic time intervals.\n *\n * <span class=\"informal\">Samples the source Observable at periodic time\n * intervals, emitting what it samples.</span>\n *\n * <img src=\"./img/sampleTime.png\" width=\"100%\">\n *\n * `sampleTime` periodically looks at the source Observable and emits whichever\n * value it has most recently emitted since the previous sampling, unless the\n * source has not emitted anything since the previous sampling. The sampling\n * happens periodically in time every `period` milliseconds (or the time unit\n * defined by the optional `scheduler` argument). The sampling starts as soon as\n * the output Observable is subscribed.\n *\n * @example <caption>Every second, emit the most recent click at most once</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.sampleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {number} period The sampling period expressed in milliseconds or the\n * time unit determined internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the sampling.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable at the specified time interval.\n * @method sampleTime\n * @owner Observable\n */\nexport function sampleTime<T>(period: number, scheduler: IScheduler = async): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SampleTimeOperator(period, scheduler));\n}\n\nclass SampleTimeOperator<T> implements Operator<T, T> {\n  constructor(private period: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SampleTimeSubscriber(subscriber, this.period, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SampleTimeSubscriber<T> extends Subscriber<T> {\n  lastValue: T;\n  hasValue: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              private period: number,\n              private scheduler: IScheduler) {\n    super(destination);\n    this.add(scheduler.schedule(dispatchNotification, period, { subscriber: this, period }));\n  }\n\n  protected _next(value: T) {\n    this.lastValue = value;\n    this.hasValue = true;\n  }\n\n  notifyNext() {\n    if (this.hasValue) {\n      this.hasValue = false;\n      this.destination.next(this.lastValue);\n    }\n  }\n}\n\nfunction dispatchNotification<T>(this: Action<any>, state: any) {\n  let { subscriber, period } = state;\n  subscriber.notifyNext();\n  this.schedule(state, period);\n}\n","import { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Compares all values of two observables in sequence using an optional comparor function\n * and returns an observable of a single boolean value representing whether or not the two sequences\n * are equal.\n *\n * <span class=\"informal\">Checks to see of all values emitted by both observables are equal, in order.</span>\n *\n * <img src=\"./img/sequenceEqual.png\" width=\"100%\">\n *\n * `sequenceEqual` subscribes to two observables and buffers incoming values from each observable. Whenever either\n * observable emits a value, the value is buffered and the buffers are shifted and compared from the bottom\n * up; If any value pair doesn't match, the returned observable will emit `false` and complete. If one of the\n * observables completes, the operator will wait for the other observable to complete; If the other\n * observable emits before completing, the returned observable will emit `false` and complete. If one observable never\n * completes or emits after the other complets, the returned observable will never complete.\n *\n * @example <caption>figure out if the Konami code matches</caption>\n * var code = Rx.Observable.from([\n *  \"ArrowUp\",\n *  \"ArrowUp\",\n *  \"ArrowDown\",\n *  \"ArrowDown\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"KeyB\",\n *  \"KeyA\",\n *  \"Enter\" // no start key, clearly.\n * ]);\n *\n * var keys = Rx.Observable.fromEvent(document, 'keyup')\n *  .map(e => e.code);\n * var matches = keys.bufferCount(11, 1)\n *  .mergeMap(\n *    last11 =>\n *      Rx.Observable.from(last11)\n *        .sequenceEqual(code)\n *   );\n * matches.subscribe(matched => console.log('Successful cheat at Contra? ', matched));\n *\n * @see {@link combineLatest}\n * @see {@link zip}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} compareTo The observable sequence to compare the source sequence to.\n * @param {function} [comparor] An optional function to compare each value pair\n * @return {Observable} An Observable of a single boolean value representing whether or not\n * the values emitted by both observables were equal in sequence.\n * @method sequenceEqual\n * @owner Observable\n */\nexport function sequenceEqual<T>(compareTo: Observable<T>,\n                                 comparor?: (a: T, b: T) => boolean): OperatorFunction<T, boolean> {\n  return (source: Observable<T>) => source.lift(new SequenceEqualOperator(compareTo, comparor));\n}\n\nexport class SequenceEqualOperator<T> implements Operator<T, boolean> {\n  constructor(private compareTo: Observable<T>,\n              private comparor: (a: T, b: T) => boolean) {\n  }\n\n  call(subscriber: Subscriber<boolean>, source: any): any {\n    return source.subscribe(new SequenceEqualSubscriber(subscriber, this.compareTo, this.comparor));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SequenceEqualSubscriber<T, R> extends Subscriber<T> {\n  private _a: T[] = [];\n  private _b: T[] = [];\n  private _oneComplete = false;\n\n  constructor(destination: Observer<R>,\n              private compareTo: Observable<T>,\n              private comparor: (a: T, b: T) => boolean) {\n    super(destination);\n    this.add(compareTo.subscribe(new SequenceEqualCompareToSubscriber(destination, this)));\n  }\n\n  protected _next(value: T): void {\n    if (this._oneComplete && this._b.length === 0) {\n      this.emit(false);\n    } else {\n      this._a.push(value);\n      this.checkValues();\n    }\n  }\n\n  public _complete(): void {\n    if (this._oneComplete) {\n      this.emit(this._a.length === 0 && this._b.length === 0);\n    } else {\n      this._oneComplete = true;\n    }\n  }\n\n  checkValues() {\n    const { _a, _b, comparor } = this;\n    while (_a.length > 0 && _b.length > 0) {\n      let a = _a.shift();\n      let b = _b.shift();\n      let areEqual = false;\n      if (comparor) {\n        areEqual = tryCatch(comparor)(a, b);\n        if (areEqual === errorObject) {\n          this.destination.error(errorObject.e);\n        }\n      } else {\n        areEqual = a === b;\n      }\n      if (!areEqual) {\n        this.emit(false);\n      }\n    }\n  }\n\n  emit(value: boolean) {\n    const { destination } = this;\n    destination.next(value);\n    destination.complete();\n  }\n\n  nextB(value: T) {\n    if (this._oneComplete && this._a.length === 0) {\n      this.emit(false);\n    } else {\n      this._b.push(value);\n      this.checkValues();\n    }\n  }\n}\n\nclass SequenceEqualCompareToSubscriber<T, R> extends Subscriber<T> {\n  constructor(destination: Observer<R>, private parent: SequenceEqualSubscriber<T, R>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.parent.nextB(value);\n  }\n\n  protected _error(err: any): void {\n    this.parent.error(err);\n  }\n\n  protected _complete(): void {\n    this.parent._complete();\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observer } from '../Observer';\nimport { EmptyError } from '../util/EmptyError';\nimport { TeardownLogic } from '../Subscription';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that emits the single item emitted by the source Observable that matches a specified\n * predicate, if that Observable emits one such item. If the source Observable emits more than one such item or no\n * such items, notify of an IllegalArgumentException or NoSuchElementException respectively.\n *\n * <img src=\"./img/single.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {Function} predicate - A predicate function to evaluate items emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits the single item emitted by the source Observable that matches\n * the predicate.\n .\n * @method single\n * @owner Observable\n */\nexport function single<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SingleOperator(predicate, source));\n}\n\nclass SingleOperator<T> implements Operator<T, T> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SingleSubscriber(subscriber, this.predicate, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SingleSubscriber<T> extends Subscriber<T> {\n  private seenValue: boolean = false;\n  private singleValue: T;\n  private index: number = 0;\n\n  constructor(destination: Observer<T>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  private applySingleValue(value: T): void {\n    if (this.seenValue) {\n      this.destination.error('Sequence contains more than one element');\n    } else {\n      this.seenValue = true;\n      this.singleValue = value;\n    }\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n\n    if (this.predicate) {\n      this.tryNext(value, index);\n    } else {\n      this.applySingleValue(value);\n    }\n  }\n\n  private tryNext(value: T, index: number): void {\n    try {\n      if (this.predicate(value, index, this.source)) {\n        this.applySingleValue(value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n\n    if (this.index > 0) {\n      destination.next(this.seenValue ? this.singleValue : undefined);\n      destination.complete();\n    } else {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that skips the first `count` items emitted by the source Observable.\n *\n * <img src=\"./img/skip.png\" width=\"100%\">\n *\n * @param {Number} count - The number of times, items emitted by source Observable should be skipped.\n * @return {Observable} An Observable that skips values emitted by the source Observable.\n *\n * @method skip\n * @owner Observable\n */\nexport function skip<T>(count: number): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipOperator(count));\n}\n\nclass SkipOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SkipSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipSubscriber<T> extends Subscriber<T> {\n  count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(x: T) {\n    if (++this.count > this.total) {\n      this.destination.next(x);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Skip the last `count` values emitted by the source Observable.\n *\n * <img src=\"./img/skipLast.png\" width=\"100%\">\n *\n * `skipLast` returns an Observable that accumulates a queue with a length\n * enough to store the first `count` values. As more values are received,\n * values are taken from the front of the queue and produced on the result\n * sequence. This causes values to be delayed.\n *\n * @example <caption>Skip the last 2 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 5);\n * var skipLastTwo = many.skipLast(2);\n * skipLastTwo.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 1 2 3\n *\n * @see {@link skip}\n * @see {@link skipUntil}\n * @see {@link skipWhile}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `skipLast(i)`, it throws\n * ArgumentOutOrRangeError if `i < 0`.\n *\n * @param {number} count Number of elements to skip from the end of the source Observable.\n * @returns {Observable<T>} An Observable that skips the last count values\n * emitted by the source Observable.\n * @method skipLast\n * @owner Observable\n */\nexport function skipLast<T>(count: number): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipLastOperator(count));\n}\n\nclass SkipLastOperator<T> implements Operator<T, T> {\n  constructor(private _skipCount: number) {\n    if (this._skipCount < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    if (this._skipCount === 0) {\n      // If we don't want to skip any values then just subscribe\n      // to Subscriber without any further logic.\n      return source.subscribe(new Subscriber(subscriber));\n    } else {\n      return source.subscribe(new SkipLastSubscriber(subscriber, this._skipCount));\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipLastSubscriber<T> extends Subscriber<T> {\n  private _ring: T[];\n  private _count: number = 0;\n\n  constructor(destination: Subscriber<T>, private _skipCount: number) {\n    super(destination);\n    this._ring = new Array<T>(_skipCount);\n  }\n\n  protected _next(value: T): void {\n    const skipCount = this._skipCount;\n    const count = this._count++;\n\n    if (count < skipCount) {\n      this._ring[count] = value;\n    } else {\n      const currentIndex = count % skipCount;\n      const ring = this._ring;\n      const oldValue = ring[currentIndex];\n\n      ring[currentIndex] = value;\n      this.destination.next(oldValue);\n    }\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.\n *\n * <img src=\"./img/skipUntil.png\" width=\"100%\">\n *\n * @param {Observable} notifier - The second Observable that has to emit an item before the source Observable's elements begin to\n * be mirrored by the resulting Observable.\n * @return {Observable<T>} An Observable that skips items from the source Observable until the second Observable emits\n * an item, then emits the remaining items.\n * @method skipUntil\n * @owner Observable\n */\nexport function skipUntil<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipUntilOperator(notifier));\n}\n\nclass SkipUntilOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SkipUntilSubscriber(subscriber, this.notifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipUntilSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private hasValue: boolean = false;\n  private isInnerStopped: boolean = false;\n\n  constructor(destination: Subscriber<any>,\n              notifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, notifier));\n  }\n\n  protected _next(value: T) {\n    if (this.hasValue) {\n      super._next(value);\n    }\n  }\n\n  protected _complete() {\n    if (this.isInnerStopped) {\n      super._complete();\n    } else {\n      this.unsubscribe();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.hasValue = true;\n  }\n\n  notifyComplete(): void {\n    this.isInnerStopped = true;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds\n * true, but emits all further source items as soon as the condition becomes false.\n *\n * <img src=\"./img/skipWhile.png\" width=\"100%\">\n *\n * @param {Function} predicate - A function to test each item emitted from the source Observable.\n * @return {Observable<T>} An Observable that begins emitting items emitted by the source Observable when the\n * specified predicate becomes false.\n * @method skipWhile\n * @owner Observable\n */\nexport function skipWhile<T>(predicate: (value: T, index: number) => boolean): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipWhileOperator(predicate));\n}\n\nclass SkipWhileOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SkipWhileSubscriber(subscriber, this.predicate));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipWhileSubscriber<T> extends Subscriber<T> {\n  private skipping: boolean = true;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const destination = this.destination;\n    if (this.skipping) {\n      this.tryCallPredicate(value);\n    }\n\n    if (!this.skipping) {\n      destination.next(value);\n    }\n  }\n\n  private tryCallPredicate(value: T): void {\n    try {\n      const result = this.predicate(value, this.index++);\n      this.skipping = Boolean(result);\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function switchMap<T, R>(project: (value: T, index: number) => ObservableInput<R>): OperatorFunction<T, R>;\nexport function switchMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, emitting values only from the most recently projected Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link switch}.</span>\n *\n * <img src=\"./img/switchMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\n * inner Observables, the output Observable begins emitting the items emitted by\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\n * stops emitting items from the earlier-emitted inner Observable and begins\n * emitting items from the new one. It continues to behave like this for\n * subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switch}\n * @see {@link switchMapTo}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking only the values from the most recently\n * projected inner Observable.\n * @method switchMap\n * @owner Observable\n */\nexport function switchMap<T, I, R>(\n  project: (value: T, index: number) => ObservableInput<I>,\n  resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R\n): OperatorFunction<T, I | R> {\n  return function switchMapOperatorFunction(source: Observable<T>): Observable<I | R> {\n    return source.lift(new SwitchMapOperator(project, resultSelector));\n  };\n}\n\nclass SwitchMapOperator<T, I, R> implements Operator<T, I> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<I>, source: any): any {\n    return source.subscribe(new SwitchMapSubscriber(subscriber, this.project, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private index: number = 0;\n  private innerSubscription: Subscription;\n\n  constructor(destination: Subscriber<I>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    let result: ObservableInput<I>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (error) {\n      this.destination.error(error);\n      return;\n    }\n    this._innerSub(result, value, index);\n  }\n\n  private _innerSub(result: ObservableInput<I>, value: T, index: number) {\n    const innerSubscription = this.innerSubscription;\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n    }\n    this.add(this.innerSubscription = subscribeToResult(this, result, value, index));\n  }\n\n  protected _complete(): void {\n    const {innerSubscription} = this;\n    if (!innerSubscription || innerSubscription.closed) {\n      super._complete();\n    }\n  }\n\n  protected _unsubscribe() {\n    this.innerSubscription = null;\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n    this.innerSubscription = null;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    if (this.resultSelector) {\n      this._tryNotifyNext(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      this.destination.next(innerValue);\n    }\n  }\n\n  private _tryNotifyNext(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): void {\n    let result: R;\n    try {\n      result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function switchMapTo<T, R>(observable: ObservableInput<R>): OperatorFunction<T, R>;\nexport function switchMapTo<T, I, R>(observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is flattened multiple\n * times with {@link switch} in the output Observable.\n *\n * <span class=\"informal\">It's like {@link switchMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/switchMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. The output Observables\n * emits values only from the most recently emitted instance of\n * `innerObservable`.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link switch}\n * @see {@link switchMap}\n * @see {@link mergeMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable, and taking only the values\n * from the most recently projected inner Observable.\n * @method switchMapTo\n * @owner Observable\n */\nexport function switchMapTo<T, I, R>(innerObservable: Observable<I>,\n                                     resultSelector?: (outerValue: T,\n                                                       innerValue: I,\n                                                       outerIndex: number,\n                                                       innerIndex: number) => R): OperatorFunction<T, I | R> {\n  return (source: Observable<T>) => source.lift(new SwitchMapToOperator(innerObservable, resultSelector));\n}\n\nclass SwitchMapToOperator<T, I, R> implements Operator<T, I> {\n  constructor(private observable: Observable<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<I>, source: any): any {\n    return source.subscribe(new SwitchMapToSubscriber(subscriber, this.observable, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchMapToSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private index: number = 0;\n  private innerSubscription: Subscription;\n\n  constructor(destination: Subscriber<I>,\n              private inner: Observable<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: any) {\n    const innerSubscription = this.innerSubscription;\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n    }\n    this.add(this.innerSubscription = subscribeToResult(this, this.inner, value, this.index++));\n  }\n\n  protected _complete() {\n    const {innerSubscription} = this;\n    if (!innerSubscription || innerSubscription.closed) {\n      super._complete();\n    }\n  }\n\n  protected _unsubscribe() {\n    this.innerSubscription = null;\n  }\n\n  notifyComplete(innerSub: Subscription) {\n    this.remove(innerSub);\n    this.innerSubscription = null;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.tryResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private tryResultSelector(outerValue: T, innerValue: I,\n                            outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    let result: R;\n    try {\n      result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n\n    destination.next(result);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits only the first `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Takes the first `count` values from the source, then\n * completes.</span>\n *\n * <img src=\"./img/take.png\" width=\"100%\">\n *\n * `take` returns an Observable that emits only the first `count` values emitted\n * by the source Observable. If the source emits fewer than `count` values then\n * all of its values are emitted. After that, it completes, regardless if the\n * source completes.\n *\n * @example <caption>Take the first 5 seconds of an infinite 1-second interval Observable</caption>\n * var interval = Rx.Observable.interval(1000);\n * var five = interval.take(5);\n * five.subscribe(x => console.log(x));\n *\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `take(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of `next` values to emit.\n * @return {Observable<T>} An Observable that emits only the first `count`\n * values emitted by the source Observable, or all of the values from the source\n * if the source emits fewer than `count` values.\n * @method take\n * @owner Observable\n */\nexport function take<T>(count: number): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => {\n    if (count === 0) {\n      return new EmptyObservable<T>();\n    } else {\n      return source.lift(new TakeOperator(count));\n    }\n  };\n}\n\nclass TakeOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeSubscriber<T> extends Subscriber<T> {\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const total = this.total;\n    const count = ++this.count;\n    if (count <= total) {\n      this.destination.next(value);\n      if (count === total) {\n        this.destination.complete();\n        this.unsubscribe();\n      }\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits the values emitted by the source Observable until a `notifier`\n * Observable emits a value.\n *\n * <span class=\"informal\">Lets values pass until a second Observable,\n * `notifier`, emits something. Then, it completes.</span>\n *\n * <img src=\"./img/takeUntil.png\" width=\"100%\">\n *\n * `takeUntil` subscribes and begins mirroring the source Observable. It also\n * monitors a second Observable, `notifier` that you provide. If the `notifier`\n * emits a value or a complete notification, the output Observable stops\n * mirroring the source Observable and completes.\n *\n * @example <caption>Tick every second until the first click happens</caption>\n * var interval = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = interval.takeUntil(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param {Observable} notifier The Observable whose first emitted value will\n * cause the output Observable of `takeUntil` to stop emitting values from the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable until such time as `notifier` emits its first value.\n * @method takeUntil\n * @owner Observable\n */\nexport function takeUntil<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new TakeUntilOperator(notifier));\n}\n\nclass TakeUntilOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeUntilSubscriber(subscriber, this.notifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeUntilSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  constructor(destination: Subscriber<any>,\n              private notifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, notifier));\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.complete();\n  }\n\n  notifyComplete(): void {\n    // noop\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits values emitted by the source Observable so long as each value satisfies\n * the given `predicate`, and then completes as soon as this `predicate` is not\n * satisfied.\n *\n * <span class=\"informal\">Takes values from the source only while they pass the\n * condition given. When the first value does not satisfy, it completes.</span>\n *\n * <img src=\"./img/takeWhile.png\" width=\"100%\">\n *\n * `takeWhile` subscribes and begins mirroring the source Observable. Each value\n * emitted on the source is given to the `predicate` function which returns a\n * boolean, representing a condition to be satisfied by the source values. The\n * output Observable emits the source values until such time as the `predicate`\n * returns false, at which point `takeWhile` stops mirroring the source\n * Observable and completes the output Observable.\n *\n * @example <caption>Emit click events only while the clientX property is greater than 200</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.takeWhile(ev => ev.clientX > 200);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates a value emitted by the source Observable and returns a boolean.\n * Also takes the (zero-based) index as the second argument.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable so long as each value satisfies the condition defined by the\n * `predicate`, then completes.\n * @method takeWhile\n * @owner Observable\n */\nexport function takeWhile<T>(predicate: (value: T, index: number) => boolean): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new TakeWhileOperator(predicate));\n}\n\nclass TakeWhileOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeWhileSubscriber(subscriber, this.predicate));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeWhileSubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const destination = this.destination;\n    let result: boolean;\n    try {\n      result = this.predicate(value, this.index++);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n    this.nextOrComplete(value, result);\n  }\n\n  private nextOrComplete(value: T, predicateResult: boolean): void {\n    const destination = this.destination;\n    if (Boolean(predicateResult)) {\n      destination.next(value);\n    } else {\n      destination.complete();\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { PartialObserver } from '../Observer';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function tap<T>(next: (x: T) => void, error?: (e: any) => void, complete?: () => void): MonoTypeOperatorFunction<T>;\nexport function tap<T>(observer: PartialObserver<T>): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Perform a side effect for every emission on the source Observable, but return\n * an Observable that is identical to the source.\n *\n * <span class=\"informal\">Intercepts each emission on the source and runs a\n * function, but returns an output which is identical to the source as long as errors don't occur.</span>\n *\n * <img src=\"./img/do.png\" width=\"100%\">\n *\n * Returns a mirrored Observable of the source Observable, but modified so that\n * the provided Observer is called to perform a side effect for every value,\n * error, and completion emitted by the source. Any errors that are thrown in\n * the aforementioned Observer or handlers are safely sent down the error path\n * of the output Observable.\n *\n * This operator is useful for debugging your Observables for the correct values\n * or performing other side effects.\n *\n * Note: this is different to a `subscribe` on the Observable. If the Observable\n * returned by `do` is not subscribed, the side effects specified by the\n * Observer will never happen. `do` therefore simply spies on existing\n * execution, it does not trigger an execution to happen like `subscribe` does.\n *\n * @example <caption>Map every click to the clientX position of that click, while also logging the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks\n *   .do(ev => console.log(ev))\n *   .map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link map}\n * @see {@link subscribe}\n *\n * @param {Observer|function} [nextOrObserver] A normal Observer object or a\n * callback for `next`.\n * @param {function} [error] Callback for errors in the source.\n * @param {function} [complete] Callback for the completion of the source.\n * @return {Observable} An Observable identical to the source, but runs the\n * specified Observer or callback(s) for each item.\n * @name tap\n */\nexport function tap<T>(nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n                       error?: (e: any) => void,\n                       complete?: () => void): MonoTypeOperatorFunction<T> {\n  return function tapOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new DoOperator(nextOrObserver, error, complete));\n  };\n}\n\nclass DoOperator<T> implements Operator<T, T> {\n  constructor(private nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n              private error?: (e: any) => void,\n              private complete?: () => void) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DoSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DoSubscriber<T> extends Subscriber<T> {\n\n  private safeSubscriber: Subscriber<T>;\n\n  constructor(destination: Subscriber<T>,\n              nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n              error?: (e: any) => void,\n              complete?: () => void) {\n    super(destination);\n\n    const safeSubscriber = new Subscriber<T>(nextOrObserver, error, complete);\n    safeSubscriber.syncErrorThrowable = true;\n    this.add(safeSubscriber);\n    this.safeSubscriber = safeSubscriber;\n  }\n\n  protected _next(value: T): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.next(value);\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.next(value);\n    }\n  }\n\n  protected _error(err: any): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.error(err);\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.complete();\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.complete();\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\nexport interface ThrottleConfig {\n  leading?: boolean;\n  trailing?: boolean;\n}\n\nexport const defaultThrottleConfig: ThrottleConfig = {\n  leading: true,\n  trailing: false\n};\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for a duration determined by another Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link throttleTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/throttle.png\" width=\"100%\">\n *\n * `throttle` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled by calling the `durationSelector` function with the source value,\n * which returns the \"duration\" Observable. When the duration Observable emits a\n * value or completes, the timer is disabled, and this process repeats for the\n * next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttle(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration for each source value, returned as an Observable or a Promise.\n * @param {Object} config a configuration object to define `leading` and `trailing` behavior. Defaults\n * to `{ leading: true, trailing: false }`.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttle\n * @owner Observable\n */\nexport function throttle<T>(durationSelector: (value: T) => SubscribableOrPromise<number>,\n                            config: ThrottleConfig = defaultThrottleConfig): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new ThrottleOperator(durationSelector, config.leading, config.trailing));\n}\n\nclass ThrottleOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<number>,\n              private leading: boolean,\n              private trailing: boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(\n      new ThrottleSubscriber(subscriber, this.durationSelector, this.leading, this.trailing)\n    );\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc\n * @ignore\n * @extends {Ignored}\n */\nclass ThrottleSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private throttled: Subscription;\n  private _trailingValue: T;\n  private _hasTrailingValue = false;\n\n  constructor(protected destination: Subscriber<T>,\n              private durationSelector: (value: T) => SubscribableOrPromise<number>,\n              private _leading: boolean,\n              private _trailing: boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.throttled) {\n      if (this._trailing) {\n        this._hasTrailingValue = true;\n        this._trailingValue = value;\n      }\n    } else {\n      const duration = this.tryDurationSelector(value);\n      if (duration) {\n        this.add(this.throttled = subscribeToResult(this, duration));\n      }\n      if (this._leading) {\n        this.destination.next(value);\n        if (this._trailing) {\n          this._hasTrailingValue = true;\n          this._trailingValue = value;\n        }\n      }\n    }\n  }\n\n  private tryDurationSelector(value: T): SubscribableOrPromise<any> {\n    try {\n      return this.durationSelector(value);\n    } catch (err) {\n      this.destination.error(err);\n      return null;\n    }\n  }\n\n  protected _unsubscribe() {\n    const { throttled, _trailingValue, _hasTrailingValue, _trailing } = this;\n\n    this._trailingValue = null;\n    this._hasTrailingValue = false;\n\n    if (throttled) {\n      this.remove(throttled);\n      this.throttled = null;\n      throttled.unsubscribe();\n    }\n  }\n\n  private _sendTrailing() {\n    const { destination, throttled, _trailing, _trailingValue, _hasTrailingValue } = this;\n    if (throttled && _trailing && _hasTrailingValue) {\n      destination.next(_trailingValue);\n      this._trailingValue = null;\n      this._hasTrailingValue = false;\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this._sendTrailing();\n    this._unsubscribe();\n  }\n\n  notifyComplete(): void {\n    this._sendTrailing();\n    this._unsubscribe();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\nimport { ThrottleConfig, defaultThrottleConfig } from './throttle';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for `duration` milliseconds, then repeats this process.\n *\n * <span class=\"informal\">Lets a value pass, then ignores source values for the\n * next `duration` milliseconds.</span>\n *\n * <img src=\"./img/throttleTime.png\" width=\"100%\">\n *\n * `throttleTime` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled. After `duration` milliseconds (or the time unit determined\n * internally by the optional `scheduler`) has passed, the timer is disabled,\n * and this process repeats for the next source value. Optionally takes a\n * {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {number} duration Time to wait before emitting another value after\n * emitting the last value, measured in milliseconds or the time unit determined\n * internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the throttling.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttleTime\n * @owner Observable\n */\nexport function throttleTime<T>(duration: number,\n                                scheduler: IScheduler = async,\n                                config: ThrottleConfig = defaultThrottleConfig): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new ThrottleTimeOperator(duration, scheduler, config.leading, config.trailing));\n}\n\nclass ThrottleTimeOperator<T> implements Operator<T, T> {\n  constructor(private duration: number,\n              private scheduler: IScheduler,\n              private leading: boolean,\n              private trailing: boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(\n      new ThrottleTimeSubscriber(subscriber, this.duration, this.scheduler, this.leading, this.trailing)\n    );\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ThrottleTimeSubscriber<T> extends Subscriber<T> {\n  private throttled: Subscription;\n  private _hasTrailingValue: boolean = false;\n  private _trailingValue: T = null;\n\n  constructor(destination: Subscriber<T>,\n              private duration: number,\n              private scheduler: IScheduler,\n              private leading: boolean,\n              private trailing: boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    if (this.throttled) {\n      if (this.trailing) {\n        this._trailingValue = value;\n        this._hasTrailingValue = true;\n      }\n    } else {\n      this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, { subscriber: this }));\n      if (this.leading) {\n        this.destination.next(value);\n      }\n    }\n  }\n\n  clearThrottle() {\n    const throttled = this.throttled;\n    if (throttled) {\n      if (this.trailing && this._hasTrailingValue) {\n        this.destination.next(this._trailingValue);\n        this._trailingValue = null;\n        this._hasTrailingValue = false;\n      }\n      throttled.unsubscribe();\n      this.remove(throttled);\n      this.throttled = null;\n    }\n  }\n}\n\ninterface DispatchArg<T> {\n  subscriber: ThrottleTimeSubscriber<T>;\n}\n\nfunction dispatchNext<T>(arg: DispatchArg<T>) {\n  const { subscriber } = arg;\n  subscriber.clearThrottle();\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { OperatorFunction } from '../interfaces';\n\nexport function timeInterval<T>(scheduler: IScheduler = async): OperatorFunction<T, TimeInterval<T>> {\n  return (source: Observable<T>) => source.lift(new TimeIntervalOperator(scheduler));\n}\n\nexport class TimeInterval<T> {\n  constructor(public value: T, public interval: number) {\n\n  }\n};\n\nclass TimeIntervalOperator<T> implements Operator<T, TimeInterval<T>> {\n  constructor(private scheduler: IScheduler) {\n\n  }\n\n  call(observer: Subscriber<TimeInterval<T>>, source: any): any {\n    return source.subscribe(new TimeIntervalSubscriber(observer, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeIntervalSubscriber<T> extends Subscriber<T> {\n  private lastTime: number = 0;\n\n  constructor(destination: Subscriber<TimeInterval<T>>, private scheduler: IScheduler) {\n    super(destination);\n\n    this.lastTime = scheduler.now();\n  }\n\n  protected _next(value: T) {\n    let now = this.scheduler.now();\n    let span = now - this.lastTime;\n    this.lastTime = now;\n\n    this.destination.next(new TimeInterval(value, span));\n  }\n}\n","/**\r\n * An error thrown when duetime elapses.\r\n *\r\n * @see {@link timeout}\r\n *\r\n * @class TimeoutError\r\n */\r\nexport class TimeoutError extends Error {\r\n  constructor() {\r\n    const err: any = super('Timeout has occurred');\r\n    (<any> this).name = err.name = 'TimeoutError';\r\n    (<any> this).stack = err.stack;\r\n    (<any> this).message = err.message;\r\n  }\r\n}\r\n","import { Action } from '../scheduler/Action';\nimport { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { TimeoutError } from '../util/TimeoutError';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n *\n * Errors if Observable does not emit a value in given time span.\n *\n * <span class=\"informal\">Timeouts on Observable that doesn't emit values fast enough.</span>\n *\n * <img src=\"./img/timeout.png\" width=\"100%\">\n *\n * `timeout` operator accepts as an argument either a number or a Date.\n *\n * If number was provided, it returns an Observable that behaves like a source\n * Observable, unless there is a period of time where there is no value emitted.\n * So if you provide `100` as argument and first value comes after 50ms from\n * the moment of subscription, this value will be simply re-emitted by the resulting\n * Observable. If however after that 100ms passes without a second value being emitted,\n * stream will end with an error and source Observable will be unsubscribed.\n * These checks are performed throughout whole lifecycle of Observable - from the moment\n * it was subscribed to, until it completes or errors itself. Thus every value must be\n * emitted within specified period since previous value.\n *\n * If provided argument was Date, returned Observable behaves differently. It throws\n * if Observable did not complete before provided Date. This means that periods between\n * emission of particular values do not matter in this case. If Observable did not complete\n * before provided Date, source Observable will be unsubscribed. Other than that, resulting\n * stream behaves just as source Observable.\n *\n * `timeout` accepts also a Scheduler as a second parameter. It is used to schedule moment (or moments)\n * when returned Observable will check if source stream emitted value or completed.\n *\n * @example <caption>Check if ticks are emitted within certain timespan</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds.timeout(1100) // Let's use bigger timespan to be safe,\n *                       // since `interval` might fire a bit later then scheduled.\n * .subscribe(\n *     value => console.log(value), // Will emit numbers just as regular `interval` would.\n *     err => console.log(err) // Will never be called.\n * );\n *\n * seconds.timeout(900).subscribe(\n *     value => console.log(value), // Will never be called.\n *     err => console.log(err) // Will emit error before even first value is emitted,\n *                             // since it did not arrive within 900ms period.\n * );\n *\n * @example <caption>Use Date to check if Observable completed</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds.timeout(new Date(\"December 17, 2020 03:24:00\"))\n * .subscribe(\n *     value => console.log(value), // Will emit values as regular `interval` would\n *                                  // until December 17, 2020 at 03:24:00.\n *     err => console.log(err) // On December 17, 2020 at 03:24:00 it will emit an error,\n *                             // since Observable did not complete by then.\n * );\n *\n * @see {@link timeoutWith}\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source, unless timeout checks fail.\n * @method timeout\n * @owner Observable\n */\nexport function timeout<T>(due: number | Date,\n                           scheduler: IScheduler = async): MonoTypeOperatorFunction<T> {\n  const absoluteTimeout = isDate(due);\n  const waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(<number>due);\n  return (source: Observable<T>) => source.lift(new TimeoutOperator(waitFor, absoluteTimeout, scheduler, new TimeoutError()));\n}\n\nclass TimeoutOperator<T> implements Operator<T, T> {\n  constructor(private waitFor: number,\n              private absoluteTimeout: boolean,\n              private scheduler: IScheduler,\n              private errorInstance: TimeoutError) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TimeoutSubscriber<T>(\n      subscriber, this.absoluteTimeout, this.waitFor, this.scheduler, this.errorInstance\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeoutSubscriber<T> extends Subscriber<T> {\n\n  private action: Action<TimeoutSubscriber<T>> = null;\n\n  constructor(destination: Subscriber<T>,\n              private absoluteTimeout: boolean,\n              private waitFor: number,\n              private scheduler: IScheduler,\n              private errorInstance: TimeoutError) {\n    super(destination);\n    this.scheduleTimeout();\n  }\n\n  private static dispatchTimeout<T>(subscriber: TimeoutSubscriber<T>): void {\n    subscriber.error(subscriber.errorInstance);\n  }\n\n  private scheduleTimeout(): void {\n    const { action } = this;\n    if (action) {\n      // Recycle the action if we've already scheduled one. All the production\n      // Scheduler Actions mutate their state/delay time and return themeselves.\n      // VirtualActions are immutable, so they create and return a clone. In this\n      // case, we need to set the action reference to the most recent VirtualAction,\n      // to ensure that's the one we clone from next time.\n      this.action = (<Action<TimeoutSubscriber<T>>> action.schedule(this, this.waitFor));\n    } else {\n      this.add(this.action = (<Action<TimeoutSubscriber<T>>> this.scheduler.schedule(\n        TimeoutSubscriber.dispatchTimeout, this.waitFor, this\n      )));\n    }\n  }\n\n  protected _next(value: T): void {\n    if (!this.absoluteTimeout) {\n      this.scheduleTimeout();\n    }\n    super._next(value);\n  }\n\n  protected _unsubscribe() {\n    this.action = null;\n    this.scheduler = null;\n    this.errorInstance = null;\n  }\n}\n","import { Action } from '../scheduler/Action';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { TeardownLogic } from '../Subscription';\nimport { Observable, ObservableInput } from '../Observable';\nimport { isDate } from '../util/isDate';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function timeoutWith<T>(due: number | Date, withObservable: ObservableInput<T>, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function timeoutWith<T, R>(due: number | Date, withObservable: ObservableInput<R>, scheduler?: IScheduler): OperatorFunction<T, T | R>;\n/* tslint:enable:max-line-length */\n\n/**\n *\n * Errors if Observable does not emit a value in given time span, in case of which\n * subscribes to the second Observable.\n *\n * <span class=\"informal\">It's a version of `timeout` operator that let's you specify fallback Observable.</span>\n *\n * <img src=\"./img/timeoutWith.png\" width=\"100%\">\n *\n * `timeoutWith` is a variation of `timeout` operator. It behaves exactly the same,\n * still accepting as a first argument either a number or a Date, which control - respectively -\n * when values of source Observable should be emitted or when it should complete.\n *\n * The only difference is that it accepts a second, required parameter. This parameter\n * should be an Observable which will be subscribed when source Observable fails any timeout check.\n * So whenever regular `timeout` would emit an error, `timeoutWith` will instead start re-emitting\n * values from second Observable. Note that this fallback Observable is not checked for timeouts\n * itself, so it can emit values and complete at arbitrary points in time. From the moment of a second\n * subscription, Observable returned from `timeoutWith` simply mirrors fallback stream. When that\n * stream completes, it completes as well.\n *\n * Scheduler, which in case of `timeout` is provided as as second argument, can be still provided\n * here - as a third, optional parameter. It still is used to schedule timeout checks and -\n * as a consequence - when second Observable will be subscribed, since subscription happens\n * immediately after failing check.\n *\n * @example <caption>Add fallback observable</caption>\n * const seconds = Rx.Observable.interval(1000);\n * const minutes = Rx.Observable.interval(60 * 1000);\n *\n * seconds.timeoutWith(900, minutes)\n *     .subscribe(\n *         value => console.log(value), // After 900ms, will start emitting `minutes`,\n *                                      // since first value of `seconds` will not arrive fast enough.\n *         err => console.log(err) // Would be called after 900ms in case of `timeout`,\n *                                 // but here will never be called.\n *     );\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Observable<T>} withObservable Observable which will be subscribed if source fails timeout check.\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source or, when timeout check fails, of an Observable\n *                          passed as a second parameter.\n * @method timeoutWith\n * @owner Observable\n */\nexport function timeoutWith<T, R>(due: number | Date,\n                                  withObservable: ObservableInput<R>,\n                                  scheduler: IScheduler = async): OperatorFunction<T, T | R> {\n  return (source: Observable<T>) => {\n    let absoluteTimeout = isDate(due);\n    let waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(<number>due);\n    return source.lift(new TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler));\n  };\n}\n\nclass TimeoutWithOperator<T> implements Operator<T, T> {\n  constructor(private waitFor: number,\n              private absoluteTimeout: boolean,\n              private withObservable: ObservableInput<any>,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TimeoutWithSubscriber(\n      subscriber, this.absoluteTimeout, this.waitFor, this.withObservable, this.scheduler\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeoutWithSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private action: Action<TimeoutWithSubscriber<T, R>> = null;\n\n  constructor(destination: Subscriber<T>,\n              private absoluteTimeout: boolean,\n              private waitFor: number,\n              private withObservable: ObservableInput<any>,\n              private scheduler: IScheduler) {\n    super(destination);\n    this.scheduleTimeout();\n  }\n\n  private static dispatchTimeout<T, R>(subscriber: TimeoutWithSubscriber<T, R>): void {\n    const { withObservable } = subscriber;\n    (<any> subscriber)._unsubscribeAndRecycle();\n    subscriber.add(subscribeToResult(subscriber, withObservable));\n  }\n\n  private scheduleTimeout(): void {\n    const { action } = this;\n    if (action) {\n      // Recycle the action if we've already scheduled one. All the production\n      // Scheduler Actions mutate their state/delay time and return themeselves.\n      // VirtualActions are immutable, so they create and return a clone. In this\n      // case, we need to set the action reference to the most recent VirtualAction,\n      // to ensure that's the one we clone from next time.\n      this.action = (<Action<TimeoutWithSubscriber<T, R>>> action.schedule(this, this.waitFor));\n    } else {\n      this.add(this.action = (<Action<TimeoutWithSubscriber<T, R>>> this.scheduler.schedule(\n        TimeoutWithSubscriber.dispatchTimeout, this.waitFor, this\n      )));\n    }\n  }\n\n  protected _next(value: T): void {\n    if (!this.absoluteTimeout) {\n      this.scheduleTimeout();\n    }\n    super._next(value);\n  }\n\n  protected _unsubscribe() {\n    this.action = null;\n    this.scheduler = null;\n    this.withObservable = null;\n  }\n}\n","import { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\nimport { Subject } from '../Subject';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { Operator } from '../Operator';\n\n/**\n * Branch out the source Observable values as a nested Observable whenever\n * `windowBoundaries` emits.\n *\n * <span class=\"informal\">It's like {@link buffer}, but emits a nested Observable\n * instead of an array.</span>\n *\n * <img src=\"./img/window.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping\n * windows. It emits the current window and opens a new one whenever the\n * Observable `windowBoundaries` emits an item. Because each window is an\n * Observable, the output is a higher-order Observable.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var result = clicks.window(interval)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link buffer}\n *\n * @param {Observable<any>} windowBoundaries An Observable that completes the\n * previous window and starts a new window.\n * @return {Observable<Observable<T>>} An Observable of windows, which are\n * Observables emitting values of the source Observable.\n * @method window\n * @owner Observable\n */\nexport function window<T>(windowBoundaries: Observable<any>): OperatorFunction<T, Observable<T>> {\n  return function windowOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowOperator(windowBoundaries));\n  };\n}\n\nclass WindowOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowBoundaries: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    const windowSubscriber = new WindowSubscriber(subscriber);\n    const sourceSubscription = source.subscribe(windowSubscriber);\n    if (!sourceSubscription.closed) {\n      windowSubscriber.add(subscribeToResult(windowSubscriber, this.windowBoundaries));\n    }\n    return sourceSubscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowSubscriber<T> extends OuterSubscriber<T, any> {\n\n  private window: Subject<T> = new Subject<T>();\n\n  constructor(destination: Subscriber<Observable<T>>) {\n    super(destination);\n    destination.next(this.window);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this._complete();\n  }\n\n  protected _next(value: T): void {\n    this.window.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.window.error(err);\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    this.window.complete();\n    this.destination.complete();\n  }\n\n  protected _unsubscribe() {\n    this.window = null;\n  }\n\n  private openWindow(): void  {\n    const prevWindow = this.window;\n    if (prevWindow) {\n      prevWindow.complete();\n    }\n    const destination = this.destination;\n    const newWindow = this.window = new Subject<T>();\n    destination.next(newWindow);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Branch out the source Observable values as a nested Observable with each\n * nested Observable emitting at most `windowSize` values.\n *\n * <span class=\"informal\">It's like {@link bufferCount}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowCount.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows every `startWindowEvery`\n * items, each containing no more than `windowSize` items. When the source\n * Observable completes or encounters an error, the output Observable emits\n * the current window and propagates the notification from the source\n * Observable. If `startWindowEvery` is not provided, then new windows are\n * started immediately at the start of the source and when each window completes\n * with size `windowSize`.\n *\n * @example <caption>Ignore every 3rd click event, starting from the first one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(3)\n *   .map(win => win.skip(1)) // skip first of every 3 clicks\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Ignore every 3rd click event, starting from the third one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(2, 3)\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferCount}\n *\n * @param {number} windowSize The maximum number of values emitted by each\n * window.\n * @param {number} [startWindowEvery] Interval at which to start a new window.\n * For example if `startWindowEvery` is `2`, then a new window will be started\n * on every other value from the source. A new window is started at the\n * beginning of the source by default.\n * @return {Observable<Observable<T>>} An Observable of windows, which in turn\n * are Observable of values.\n * @method windowCount\n * @owner Observable\n */\nexport function windowCount<T>(windowSize: number,\n                               startWindowEvery: number = 0): OperatorFunction<T, Observable<T>> {\n  return function windowCountOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowCountOperator<T>(windowSize, startWindowEvery));\n  };\n}\n\nclass WindowCountOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowSize: number,\n              private startWindowEvery: number) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowCountSubscriber(subscriber, this.windowSize, this.startWindowEvery));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowCountSubscriber<T> extends Subscriber<T> {\n  private windows: Subject<T>[] = [ new Subject<T>() ];\n  private count: number = 0;\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private windowSize: number,\n              private startWindowEvery: number) {\n    super(destination);\n    destination.next(this.windows[0]);\n  }\n\n  protected _next(value: T) {\n    const startWindowEvery = (this.startWindowEvery > 0) ? this.startWindowEvery : this.windowSize;\n    const destination = this.destination;\n    const windowSize = this.windowSize;\n    const windows = this.windows;\n    const len = windows.length;\n\n    for (let i = 0; i < len && !this.closed; i++) {\n      windows[i].next(value);\n    }\n    const c = this.count - windowSize + 1;\n    if (c >= 0 && c % startWindowEvery === 0 && !this.closed) {\n      windows.shift().complete();\n    }\n    if (++this.count % startWindowEvery === 0 && !this.closed) {\n      const window = new Subject<T>();\n      windows.push(window);\n      destination.next(window);\n    }\n  }\n\n  protected _error(err: any) {\n    const windows = this.windows;\n    if (windows) {\n      while (windows.length > 0 && !this.closed) {\n        windows.shift().error(err);\n      }\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete() {\n    const windows = this.windows;\n    if (windows) {\n      while (windows.length > 0 && !this.closed) {\n        windows.shift().complete();\n      }\n    }\n    this.destination.complete();\n  }\n\n  protected _unsubscribe() {\n    this.count = 0;\n    this.windows = null;\n  }\n}\n","import { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { Subject } from '../Subject';\nimport { Operator } from '../Operator';\nimport { async } from '../scheduler/async';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { isNumeric } from '../util/isNumeric';\nimport { isScheduler } from '../util/isScheduler';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Branch out the source Observable values as a nested Observable periodically\n * in time.\n *\n * <span class=\"informal\">It's like {@link bufferTime}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowTime.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable starts a new window periodically, as\n * determined by the `windowCreationInterval` argument. It emits each window\n * after a fixed timespan, specified by the `windowTimeSpan` argument. When the\n * source Observable completes or encounters an error, the output Observable\n * emits the current window and propagates the notification from the source\n * Observable. If `windowCreationInterval` is not provided, the output\n * Observable starts a new window when the previous window of duration\n * `windowTimeSpan` completes. If `maxWindowCount` is provided, each window\n * will emit at most fixed number of values. Window will complete immediately\n * after emitting last value and next one still will open as specified by\n * `windowTimeSpan` and `windowCreationInterval` arguments.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds start a window 1 second long, and emit at most 2 click events per window</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000, 5000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Same as example above but with maxWindowCount instead of take</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000, 5000, 2) // each window has still at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferTime}\n *\n * @param {number} windowTimeSpan The amount of time to fill each window.\n * @param {number} [windowCreationInterval] The interval at which to start new\n * windows.\n * @param {number} [maxWindowSize=Number.POSITIVE_INFINITY] Max number of\n * values each window can emit before completion.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine window boundaries.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowTime\n * @owner Observable\n */\nexport function windowTime<T>(windowTimeSpan: number,\n                              scheduler?: IScheduler): OperatorFunction<T, Observable<T>>;\nexport function windowTime<T>(windowTimeSpan: number,\n                              windowCreationInterval: number,\n                              scheduler?: IScheduler): OperatorFunction<T, Observable<T>>;\nexport function windowTime<T>(windowTimeSpan: number,\n                              windowCreationInterval: number,\n                              maxWindowSize: number,\n                              scheduler?: IScheduler): OperatorFunction<T, Observable<T>>;\n\nexport function windowTime<T>(windowTimeSpan: number): OperatorFunction<T, Observable<T>> {\n  let scheduler: IScheduler = async;\n  let windowCreationInterval: number = null;\n  let maxWindowSize: number = Number.POSITIVE_INFINITY;\n\n  if (isScheduler(arguments[3])) {\n    scheduler = arguments[3];\n  }\n\n  if (isScheduler(arguments[2])) {\n    scheduler = arguments[2];\n  } else if (isNumeric(arguments[2])) {\n    maxWindowSize = arguments[2];\n  }\n\n  if (isScheduler(arguments[1])) {\n    scheduler = arguments[1];\n  } else if (isNumeric(arguments[1])) {\n    windowCreationInterval = arguments[1];\n  }\n\n  return function windowTimeOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowTimeOperator<T>(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler));\n  };\n}\n\nclass WindowTimeOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowTimeSpan: number,\n              private windowCreationInterval: number | null,\n              private maxWindowSize: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowTimeSubscriber(\n      subscriber, this.windowTimeSpan, this.windowCreationInterval, this.maxWindowSize, this.scheduler\n    ));\n  }\n}\n\ninterface CreationState<T> {\n  windowTimeSpan: number;\n  windowCreationInterval: number;\n  subscriber: WindowTimeSubscriber<T>;\n  scheduler: IScheduler;\n}\n\ninterface TimeSpanOnlyState<T> {\n    window: CountedSubject<T>;\n    windowTimeSpan: number;\n    subscriber: WindowTimeSubscriber<T>;\n  }\n\ninterface CloseWindowContext<T> {\n  action: Action<CreationState<T>>;\n  subscription: Subscription;\n}\n\ninterface CloseState<T> {\n  subscriber: WindowTimeSubscriber<T>;\n  window: CountedSubject<T>;\n  context: CloseWindowContext<T>;\n}\n\nclass CountedSubject<T> extends Subject<T> {\n  private _numberOfNextedValues: number = 0;\n\n  next(value?: T): void {\n    this._numberOfNextedValues++;\n    super.next(value);\n  }\n\n  get numberOfNextedValues(): number {\n    return this._numberOfNextedValues;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowTimeSubscriber<T> extends Subscriber<T> {\n  private windows: CountedSubject<T>[] = [];\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private windowTimeSpan: number,\n              private windowCreationInterval: number | null,\n              private maxWindowSize: number,\n              private scheduler: IScheduler) {\n    super(destination);\n\n    const window = this.openWindow();\n    if (windowCreationInterval !== null && windowCreationInterval >= 0) {\n      const closeState: CloseState<T> = { subscriber: this, window, context: <any>null };\n      const creationState: CreationState<T> = { windowTimeSpan, windowCreationInterval, subscriber: this, scheduler };\n      this.add(scheduler.schedule(dispatchWindowClose, windowTimeSpan, closeState));\n      this.add(scheduler.schedule(dispatchWindowCreation, windowCreationInterval, creationState));\n    } else {\n      const timeSpanOnlyState: TimeSpanOnlyState<T> = { subscriber: this, window, windowTimeSpan };\n      this.add(scheduler.schedule(dispatchWindowTimeSpanOnly, windowTimeSpan, timeSpanOnlyState));\n    }\n  }\n\n  protected _next(value: T): void {\n    const windows = this.windows;\n    const len = windows.length;\n    for (let i = 0; i < len; i++) {\n      const window = windows[i];\n      if (!window.closed) {\n        window.next(value);\n        if (window.numberOfNextedValues >= this.maxWindowSize) {\n          this.closeWindow(window);\n        }\n      }\n    }\n  }\n\n  protected _error(err: any): void {\n    const windows = this.windows;\n    while (windows.length > 0) {\n      windows.shift().error(err);\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    const windows = this.windows;\n    while (windows.length > 0) {\n      const window = windows.shift();\n      if (!window.closed) {\n        window.complete();\n      }\n    }\n    this.destination.complete();\n  }\n\n  public openWindow(): CountedSubject<T> {\n    const window = new CountedSubject<T>();\n    this.windows.push(window);\n    const destination = this.destination;\n    destination.next(window);\n    return window;\n  }\n\n  public closeWindow(window: CountedSubject<T>): void {\n    window.complete();\n    const windows = this.windows;\n    windows.splice(windows.indexOf(window), 1);\n  }\n}\n\nfunction dispatchWindowTimeSpanOnly<T>(this: Action<TimeSpanOnlyState<T>>, state: TimeSpanOnlyState<T>): void {\n  const { subscriber, windowTimeSpan, window } = state;\n  if (window) {\n    subscriber.closeWindow(window);\n  }\n  state.window = subscriber.openWindow();\n  this.schedule(state, windowTimeSpan);\n}\n\nfunction dispatchWindowCreation<T>(this: Action<CreationState<T>>, state: CreationState<T>): void {\n  const { windowTimeSpan, subscriber, scheduler, windowCreationInterval } = state;\n  const window = subscriber.openWindow();\n  const action = this;\n  let context: CloseWindowContext<T> = { action, subscription: <any>null };\n  const timeSpanState: CloseState<T> = { subscriber, window, context };\n  context.subscription = scheduler.schedule(dispatchWindowClose, windowTimeSpan, timeSpanState);\n  action.add(context.subscription);\n  action.schedule(state, windowCreationInterval);\n}\n\nfunction dispatchWindowClose<T>(state: CloseState<T>): void {\n  const { subscriber, window, context } = state;\n  if (context && context.action && context.subscription) {\n    context.action.remove(context.subscription);\n  }\n  subscriber.closeWindow(window);\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Branch out the source Observable values as a nested Observable starting from\n * an emission from `openings` and ending when the output of `closingSelector`\n * emits.\n *\n * <span class=\"informal\">It's like {@link bufferToggle}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowToggle.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows that contain those items\n * emitted by the source Observable between the time when the `openings`\n * Observable emits an item and when the Observable returned by\n * `closingSelector` emits an item.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var result = clicks.windowToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * ).mergeAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowWhen}\n * @see {@link bufferToggle}\n *\n * @param {Observable<O>} openings An observable of notifications to start new\n * windows.\n * @param {function(value: O): Observable} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns an Observable,\n * which, when it emits (either `next` or `complete`), signals that the\n * associated window should complete.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowToggle\n * @owner Observable\n */\nexport function windowToggle<T, O>(openings: Observable<O>,\n                                   closingSelector: (openValue: O) => Observable<any>): OperatorFunction<T, Observable<T>> {\n  return (source: Observable<T>) => source.lift(new WindowToggleOperator<T, O>(openings, closingSelector));\n}\n\nclass WindowToggleOperator<T, O> implements Operator<T, Observable<T>> {\n\n  constructor(private openings: Observable<O>,\n              private closingSelector: (openValue: O) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowToggleSubscriber(\n      subscriber, this.openings, this.closingSelector\n    ));\n  }\n}\n\ninterface WindowContext<T> {\n  window: Subject<T>;\n  subscription: Subscription;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowToggleSubscriber<T, O> extends OuterSubscriber<T, any> {\n  private contexts: WindowContext<T>[] = [];\n  private openSubscription: Subscription;\n\n  constructor(destination: Subscriber<Observable<T>>,\n              private openings: Observable<O>,\n              private closingSelector: (openValue: O) => Observable<any>) {\n    super(destination);\n    this.add(this.openSubscription = subscribeToResult(this, openings, openings));\n  }\n\n  protected _next(value: T) {\n    const { contexts } = this;\n    if (contexts) {\n      const len = contexts.length;\n      for (let i = 0; i < len; i++) {\n        contexts[i].window.next(value);\n      }\n    }\n  }\n\n  protected _error(err: any) {\n\n    const { contexts } = this;\n    this.contexts = null;\n\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.error(err);\n        context.subscription.unsubscribe();\n      }\n    }\n\n    super._error(err);\n  }\n\n  protected _complete() {\n    const { contexts } = this;\n    this.contexts = null;\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.complete();\n        context.subscription.unsubscribe();\n      }\n    }\n    super._complete();\n  }\n\n  protected _unsubscribe() {\n    const { contexts } = this;\n    this.contexts = null;\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.unsubscribe();\n        context.subscription.unsubscribe();\n      }\n    }\n  }\n\n  notifyNext(outerValue: any, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n\n    if (outerValue === this.openings) {\n\n      const { closingSelector } = this;\n      const closingNotifier = tryCatch(closingSelector)(innerValue);\n\n      if (closingNotifier === errorObject) {\n        return this.error(errorObject.e);\n      } else {\n        const window = new Subject<T>();\n        const subscription = new Subscription();\n        const context = { window, subscription };\n        this.contexts.push(context);\n        const innerSubscription = subscribeToResult(this, closingNotifier, context);\n\n        if (innerSubscription.closed) {\n          this.closeWindow(this.contexts.length - 1);\n        } else {\n          (<any> innerSubscription).context = context;\n          subscription.add(innerSubscription);\n        }\n\n        this.destination.next(window);\n\n      }\n    } else {\n      this.closeWindow(this.contexts.indexOf(outerValue));\n    }\n  }\n\n  notifyError(err: any): void {\n    this.error(err);\n  }\n\n  notifyComplete(inner: Subscription): void {\n    if (inner !== this.openSubscription) {\n      this.closeWindow(this.contexts.indexOf((<any> inner).context));\n    }\n  }\n\n  private closeWindow(index: number): void {\n    if (index === -1) {\n      return;\n    }\n\n    const { contexts } = this;\n    const context = contexts[index];\n    const { window, subscription } = context;\n    contexts.splice(index, 1);\n    window.complete();\n    subscription.unsubscribe();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Branch out the source Observable values as a nested Observable using a\n * factory function of closing Observables to determine when to start a new\n * window.\n *\n * <span class=\"informal\">It's like {@link bufferWhen}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowWhen.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping windows.\n * It emits the current window and opens a new one whenever the Observable\n * produced by the specified `closingSelector` function emits an item. The first\n * window is opened immediately when subscribing to the output Observable.\n *\n * @example <caption>Emit only the first two clicks events in every window of [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks\n *   .windowWhen(() => Rx.Observable.interval(1000 + Math.random() * 4000))\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link bufferWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals (on either `next` or\n * `complete`) when to close the previous window and start a new one.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowWhen\n * @owner Observable\n */\nexport function windowWhen<T>(closingSelector: () => Observable<any>): OperatorFunction<T, Observable<T>> {\n  return function windowWhenOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowOperator<T>(closingSelector));\n  };\n}\n\nclass WindowOperator<T> implements Operator<T, Observable<T>> {\n  constructor(private closingSelector: () => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowSubscriber(subscriber, this.closingSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowSubscriber<T> extends OuterSubscriber<T, any> {\n  private window: Subject<T>;\n  private closingNotification: Subscription;\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private closingSelector: () => Observable<any>) {\n    super(destination);\n    this.openWindow();\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow(innerSub);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow(innerSub);\n  }\n\n  protected _next(value: T): void {\n    this.window.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.window.error(err);\n    this.destination.error(err);\n    this.unsubscribeClosingNotification();\n  }\n\n  protected _complete(): void {\n    this.window.complete();\n    this.destination.complete();\n    this.unsubscribeClosingNotification();\n  }\n\n  private unsubscribeClosingNotification(): void {\n    if (this.closingNotification) {\n      this.closingNotification.unsubscribe();\n    }\n  }\n\n  private openWindow(innerSub: InnerSubscriber<T, any> = null): void {\n    if (innerSub) {\n      this.remove(innerSub);\n      innerSub.unsubscribe();\n    }\n\n    const prevWindow = this.window;\n    if (prevWindow) {\n      prevWindow.complete();\n    }\n\n    const window = this.window = new Subject<T>();\n    this.destination.next(window);\n\n    const closingNotifier = tryCatch(this.closingSelector)();\n    if (closingNotifier === errorObject) {\n      const err = errorObject.e;\n      this.destination.error(err);\n      this.window.error(err);\n    } else {\n      this.add(this.closingNotification = subscribeToResult(this, closingNotifier));\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function withLatestFrom<T, R>(project: (v1: T) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): OperatorFunction<T, R> ;\nexport function withLatestFrom<T, T2>(v2: ObservableInput<T2>): OperatorFunction<T, [T, T2]>;\nexport function withLatestFrom<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, [T, T2, T3]>;\nexport function withLatestFrom<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, [T, T2, T3, T4]>;\nexport function withLatestFrom<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, [T, T2, T3, T4, T5]>;\nexport function withLatestFrom<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, [T, T2, T3, T4, T5, T6]> ;\nexport function withLatestFrom<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R>;\nexport function withLatestFrom<T, R>(array: ObservableInput<any>[]): OperatorFunction<T, R>;\nexport function withLatestFrom<T, R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines the source Observable with other Observables to create an Observable\n * whose values are calculated from the latest values of each, only when the\n * source emits.\n *\n * <span class=\"informal\">Whenever the source Observable emits a value, it\n * computes a formula using that value plus the latest values from other input\n * Observables, then emits the output of that formula.</span>\n *\n * <img src=\"./img/withLatestFrom.png\" width=\"100%\">\n *\n * `withLatestFrom` combines each value from the source Observable (the\n * instance) with the latest values from the other input Observables only when\n * the source emits a value, optionally using a `project` function to determine\n * the value to be emitted on the output Observable. All input Observables must\n * emit at least one value before the output Observable will emit a value.\n *\n * @example <caption>On every click event, emit an array with the latest timer event plus the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var result = clicks.withLatestFrom(timer);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Function} [project] Projection function for combining values\n * together. Receives all values in order of the Observables passed, where the\n * first parameter is a value from the source Observable. (e.g.\n * `a.withLatestFrom(b, c, (a1, b1, c1) => a1 + b1 + c1)`). If this is not\n * passed, arrays will be emitted on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method withLatestFrom\n * @owner Observable\n */\nexport function withLatestFrom<T, R>(...args: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\n  return (source: Observable<T>) => {\n    let project: any;\n    if (typeof args[args.length - 1] === 'function') {\n      project = args.pop();\n    }\n    const observables = <Observable<any>[]>args;\n    return source.lift(new WithLatestFromOperator(observables, project));\n  };\n}\n\nclass WithLatestFromOperator<T, R> implements Operator<T, R> {\n  constructor(private observables: Observable<any>[],\n              private project?: (...values: any[]) => Observable<R>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new WithLatestFromSubscriber(subscriber, this.observables, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WithLatestFromSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private values: any[];\n  private toRespond: number[] = [];\n\n  constructor(destination: Subscriber<R>,\n              private observables: Observable<any>[],\n              private project?: (...values: any[]) => Observable<R>) {\n    super(destination);\n    const len = observables.length;\n    this.values = new Array(len);\n\n    for (let i = 0; i < len; i++) {\n      this.toRespond.push(i);\n    }\n\n    for (let i = 0; i < len; i++) {\n      let observable = observables[i];\n      this.add(subscribeToResult<T, R>(this, observable, <any>observable, i));\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.values[outerIndex] = innerValue;\n    const toRespond = this.toRespond;\n    if (toRespond.length > 0) {\n      const found = toRespond.indexOf(outerIndex);\n      if (found !== -1) {\n        toRespond.splice(found, 1);\n      }\n    }\n  }\n\n  notifyComplete() {\n    // noop\n  }\n\n  protected _next(value: T) {\n    if (this.toRespond.length === 0) {\n      const args = [value, ...this.values];\n      if (this.project) {\n        this._tryProject(args);\n      } else {\n        this.destination.next(args);\n      }\n    }\n  }\n\n  private _tryProject(args: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, args);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { isArray } from '../util/isArray';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function zip<T, R>(project: (v1: T) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): OperatorFunction<T, R> ;\nexport function zip<T, T2>(v2: ObservableInput<T2>): OperatorFunction<T, [T, T2]>;\nexport function zip<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, [T, T2, T3]>;\nexport function zip<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, [T, T2, T3, T4]>;\nexport function zip<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, [T, T2, T3, T4, T5]>;\nexport function zip<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, [T, T2, T3, T4, T5, T6]> ;\nexport function zip<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): OperatorFunction<T, R>;\nexport function zip<T, R>(array: Array<ObservableInput<T>>): OperatorFunction<T, R>;\nexport function zip<T, TOther, R>(array: Array<ObservableInput<TOther>>, project: (v1: T, ...values: Array<TOther>) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * @param observables\n * @return {Observable<R>}\n * @method zip\n * @owner Observable\n */\nexport function zip<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\n  return function zipOperatorFunction(source: Observable<T>) {\n    return source.lift.call(zipStatic<R>(source, ...observables));\n  };\n}\n\n/* tslint:disable:max-line-length */\nexport function zipStatic<T, R>(v1: ObservableInput<T>, project: (v1: T) => R): Observable<R>;\nexport function zipStatic<T, T2, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, T5, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, T5, T6, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R>;\n\nexport function zipStatic<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function zipStatic<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function zipStatic<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function zipStatic<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function zipStatic<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n\nexport function zipStatic<T>(array: ObservableInput<T>[]): Observable<T[]>;\nexport function zipStatic<R>(array: ObservableInput<any>[]): Observable<R>;\nexport function zipStatic<T, R>(array: ObservableInput<T>[], project: (...values: Array<T>) => R): Observable<R>;\nexport function zipStatic<R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R): Observable<R>;\n\nexport function zipStatic<T>(...observables: Array<ObservableInput<T>>): Observable<T[]>;\nexport function zipStatic<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): Observable<R>;\nexport function zipStatic<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are calculated from the values, in order, of each\n * of its input Observables.\n *\n * If the latest parameter is a function, this function is used to compute the created value from the input values.\n * Otherwise, an array of the input values is returned.\n *\n * @example <caption>Combine age and name from different sources</caption>\n *\n * let age$ = Observable.of<number>(27, 25, 29);\n * let name$ = Observable.of<string>('Foo', 'Bar', 'Beer');\n * let isDev$ = Observable.of<boolean>(true, true, false);\n *\n * Observable\n *     .zip(age$,\n *          name$,\n *          isDev$,\n *          (age: number, name: string, isDev: boolean) => ({ age, name, isDev }))\n *     .subscribe(x => console.log(x));\n *\n * // outputs\n * // { age: 27, name: 'Foo', isDev: true }\n * // { age: 25, name: 'Bar', isDev: true }\n * // { age: 29, name: 'Beer', isDev: false }\n *\n * @param observables\n * @return {Observable<R>}\n * @static true\n * @name zip\n * @owner Observable\n */\nexport function zipStatic<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R> {\n  const project = <((...ys: Array<any>) => R)> observables[observables.length - 1];\n  if (typeof project === 'function') {\n    observables.pop();\n  }\n  return new ArrayObservable(observables).lift(new ZipOperator(project));\n}\n\nexport class ZipOperator<T, R> implements Operator<T, R> {\n\n  project: (...values: Array<any>) => R;\n\n  constructor(project?: (...values: Array<any>) => R) {\n    this.project = project;\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ZipSubscriber(subscriber, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ZipSubscriber<T, R> extends Subscriber<T> {\n  private values: any;\n  private project: (...values: Array<any>) => R;\n  private iterators: LookAheadIterator<any>[] = [];\n  private active = 0;\n\n  constructor(destination: Subscriber<R>,\n              project?: (...values: Array<any>) => R,\n              values: any = Object.create(null)) {\n    super(destination);\n    this.project = (typeof project === 'function') ? project : null;\n    this.values = values;\n  }\n\n  protected _next(value: any) {\n    const iterators = this.iterators;\n    if (isArray(value)) {\n      iterators.push(new StaticArrayIterator(value));\n    } else if (typeof value[Symbol_iterator] === 'function') {\n      iterators.push(new StaticIterator(value[Symbol_iterator]()));\n    } else {\n      iterators.push(new ZipBufferIterator(this.destination, this, value));\n    }\n  }\n\n  protected _complete() {\n    const iterators = this.iterators;\n    const len = iterators.length;\n\n    if (len === 0) {\n      this.destination.complete();\n      return;\n    }\n\n    this.active = len;\n    for (let i = 0; i < len; i++) {\n      let iterator: ZipBufferIterator<any, any> = <any>iterators[i];\n      if (iterator.stillUnsubscribed) {\n        this.add(iterator.subscribe(iterator, i));\n      } else {\n        this.active--; // not an observable\n      }\n    }\n  }\n\n  notifyInactive() {\n    this.active--;\n    if (this.active === 0) {\n      this.destination.complete();\n    }\n  }\n\n  checkIterators() {\n    const iterators = this.iterators;\n    const len = iterators.length;\n    const destination = this.destination;\n\n    // abort if not all of them have values\n    for (let i = 0; i < len; i++) {\n      let iterator = iterators[i];\n      if (typeof iterator.hasValue === 'function' && !iterator.hasValue()) {\n        return;\n      }\n    }\n\n    let shouldComplete = false;\n    const args: any[] = [];\n    for (let i = 0; i < len; i++) {\n      let iterator = iterators[i];\n      let result = iterator.next();\n\n      // check to see if it's completed now that you've gotten\n      // the next value.\n      if (iterator.hasCompleted()) {\n        shouldComplete = true;\n      }\n\n      if (result.done) {\n        destination.complete();\n        return;\n      }\n\n      args.push(result.value);\n    }\n\n    if (this.project) {\n      this._tryProject(args);\n    } else {\n      destination.next(args);\n    }\n\n    if (shouldComplete) {\n      destination.complete();\n    }\n  }\n\n  protected _tryProject(args: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, args);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n\ninterface LookAheadIterator<T> extends Iterator<T> {\n  hasValue(): boolean;\n  hasCompleted(): boolean;\n}\n\nclass StaticIterator<T> implements LookAheadIterator<T> {\n  private nextResult: IteratorResult<T>;\n\n  constructor(private iterator: Iterator<T>) {\n    this.nextResult = iterator.next();\n  }\n\n  hasValue() {\n    return true;\n  }\n\n  next(): IteratorResult<T> {\n    const result = this.nextResult;\n    this.nextResult = this.iterator.next();\n    return result;\n  }\n\n  hasCompleted() {\n    const nextResult = this.nextResult;\n    return nextResult && nextResult.done;\n  }\n}\n\nclass StaticArrayIterator<T> implements LookAheadIterator<T> {\n  private index = 0;\n  private length = 0;\n\n  constructor(private array: T[]) {\n    this.length = array.length;\n  }\n\n  [Symbol_iterator]() {\n    return this;\n  }\n\n  next(value?: any): IteratorResult<T> {\n    const i = this.index++;\n    const array = this.array;\n    return i < this.length ? { value: array[i], done: false } : { value: null, done: true };\n  }\n\n  hasValue() {\n    return this.array.length > this.index;\n  }\n\n  hasCompleted() {\n    return this.array.length === this.index;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ZipBufferIterator<T, R> extends OuterSubscriber<T, R> implements LookAheadIterator<T> {\n  stillUnsubscribed = true;\n  buffer: T[] = [];\n  isComplete = false;\n\n  constructor(destination: PartialObserver<T>,\n              private parent: ZipSubscriber<T, R>,\n              private observable: Observable<T>) {\n    super(destination);\n  }\n\n  [Symbol_iterator]() {\n    return this;\n  }\n\n  // NOTE: there is actually a name collision here with Subscriber.next and Iterator.next\n  //    this is legit because `next()` will never be called by a subscription in this case.\n  next(): IteratorResult<T> {\n    const buffer = this.buffer;\n    if (buffer.length === 0 && this.isComplete) {\n      return { value: null, done: true };\n    } else {\n      return { value: buffer.shift(), done: false };\n    }\n  }\n\n  hasValue() {\n    return this.buffer.length > 0;\n  }\n\n  hasCompleted() {\n    return this.buffer.length === 0 && this.isComplete;\n  }\n\n  notifyComplete() {\n    if (this.buffer.length > 0) {\n      this.isComplete = true;\n      this.parent.notifyInactive();\n    } else {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.buffer.push(innerValue);\n    this.parent.checkIterators();\n  }\n\n  subscribe(value: any, index: number) {\n    return subscribeToResult<any, any>(this, this.observable, this, index);\n  }\n}\n","export { audit } from './audit';\nexport { auditTime } from './auditTime';\nexport { buffer } from './buffer';\nexport { bufferCount } from './bufferCount';\nexport { bufferTime } from './bufferTime';\nexport { bufferToggle } from './bufferToggle';\nexport { bufferWhen } from './bufferWhen';\nexport { catchError } from './catchError';\nexport { combineAll } from './combineAll';\nexport { combineLatest } from './combineLatest';\nexport { concat } from './concat';\nexport { concatAll } from './concatAll';\nexport { concatMap } from './concatMap';\nexport { concatMapTo } from './concatMapTo';\nexport { count } from './count';\nexport { debounce } from './debounce';\nexport { debounceTime } from './debounceTime';\nexport { defaultIfEmpty } from './defaultIfEmpty';\nexport { delay } from './delay';\nexport { delayWhen } from './delayWhen';\nexport { dematerialize } from './dematerialize';\nexport { distinct } from './distinct';\nexport { distinctUntilChanged } from './distinctUntilChanged';\nexport { distinctUntilKeyChanged } from './distinctUntilKeyChanged';\nexport { elementAt } from './elementAt';\nexport { every } from './every';\nexport { exhaust } from './exhaust';\nexport { exhaustMap } from './exhaustMap';\nexport { expand } from './expand';\nexport { filter } from './filter';\nexport { finalize } from './finalize';\nexport { find } from './find';\nexport { findIndex } from './findIndex';\nexport { first } from './first';\nexport { groupBy } from './groupBy';\nexport { ignoreElements } from './ignoreElements';\nexport { isEmpty } from './isEmpty';\nexport { last } from './last';\nexport { map } from './map';\nexport { mapTo } from './mapTo';\nexport { materialize } from './materialize';\nexport { max } from './max';\nexport { merge } from './merge';\nexport { mergeAll } from './mergeAll';\nexport { mergeMap } from './mergeMap';\nexport { mergeMap as flatMap } from './mergeMap';\nexport { mergeMapTo } from './mergeMapTo';\nexport { mergeScan } from './mergeScan';\nexport { min } from './min';\nexport { multicast } from './multicast';\nexport { observeOn } from './observeOn';\nexport { onErrorResumeNext } from './onErrorResumeNext';\nexport { pairwise } from './pairwise';\nexport { partition } from './partition';\nexport { pluck } from './pluck';\nexport { publish } from './publish';\nexport { publishBehavior } from './publishBehavior';\nexport { publishLast } from './publishLast';\nexport { publishReplay } from './publishReplay';\nexport { race } from './race';\nexport { reduce } from './reduce';\nexport { repeat } from './repeat';\nexport { repeatWhen } from './repeatWhen';\nexport { retry } from './retry';\nexport { retryWhen } from './retryWhen';\nexport { refCount } from './refCount';\nexport { sample } from './sample';\nexport { sampleTime } from './sampleTime';\nexport { scan } from './scan';\nexport { sequenceEqual } from './sequenceEqual';\nexport { share } from './share';\nexport { shareReplay } from './shareReplay';\nexport { single } from './single';\nexport { skip } from './skip';\nexport { skipLast } from './skipLast';\nexport { skipUntil } from './skipUntil';\nexport { skipWhile } from './skipWhile';\nexport { startWith } from './startWith';\n/**\n * TODO(https://github.com/ReactiveX/rxjs/issues/2900): Add back subscribeOn once it can be\n * treeshaken. Currently if this export is added back, it\n * forces apps to bring in asap scheduler along with\n * Immediate, root, and other supporting code.\n */\n// export { subscribeOn } from './subscribeOn';\nexport { switchAll } from './switchAll';\nexport { switchMap } from './switchMap';\nexport { switchMapTo } from './switchMapTo';\nexport { take } from './take';\nexport { takeLast } from './takeLast';\nexport { takeUntil } from './takeUntil';\nexport { takeWhile } from './takeWhile';\nexport { tap } from './tap';\nexport { throttle } from './throttle';\nexport { throttleTime } from './throttleTime';\nexport { timeInterval } from './timeInterval';\nexport { timeout } from './timeout';\nexport { timeoutWith } from './timeoutWith';\nexport { timestamp } from './timestamp';\nexport { toArray } from './toArray';\nexport { window } from './window';\nexport { windowCount } from './windowCount';\nexport { windowTime } from './windowTime';\nexport { windowToggle } from './windowToggle';\nexport { windowWhen } from './windowWhen';\nexport { withLatestFrom } from './withLatestFrom';\nexport { zip } from './zip';\nexport { zipAll } from './zipAll';\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport {\n    Component,\n    EventEmitter,\n    Inject,\n    Input,\n    OnInit,\n    Optional,\n    Output,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport {\n    AlfrescoApiService,\n    ContentService,\n    HighlightDirective,\n    SiteModel,\n    UserPreferencesService\n} from '@alfresco/adf-core';\nimport { FormControl } from '@angular/forms';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material';\nimport { MinimalNodeEntryEntity, NodePaging, Pagination, Site } from 'alfresco-js-api';\nimport { DocumentListComponent, PaginationStrategy } from '../document-list/components/document-list.component';\nimport { RowFilter } from '../document-list/data/row-filter.model';\nimport { ImageResolver } from '../document-list/data/image-resolver.model';\n\nimport { ContentNodeSelectorComponentData } from './content-node-selector.component-data.interface';\nimport { ContentNodeSelectorService } from './content-node-selector.service';\nimport { debounceTime } from 'rxjs/operators';\nexport class ContentNodeSelectorComponent implements OnInit {\n\n    nodes: NodePaging | null = null;\n    siteId: null | string;\n    searchTerm: string = '';\n    showingSearchResults: boolean = false;\n    loadingSearchResults: boolean = false;\n    inDialog: boolean = false;\n    chosenNode: MinimalNodeEntryEntity | Site | null = null;\n    folderIdToShow: string | null = null;\n    paginationStrategy: PaginationStrategy;\n    pagination: Pagination;\n    skipCount: number = 0;\n    infiniteScroll: boolean = false;\n    buttonActionName: string;\n\n    \n    title: string;\n\n    \n    actionName: string;\n\n    \n    currentFolderId: string | null = null;\n\n    \n    dropdownHideMyFiles: boolean = false;\n\n    \n    dropdownSiteList: any[] = null;\n\n    \n    rowFilter: RowFilter = null;\n\n    \n    imageResolver: ImageResolver = null;\n\n    \n    pageSize: number;\n\n    \n    select: EventEmitter<MinimalNodeEntryEntity[]> = new EventEmitter<MinimalNodeEntryEntity[]>();\n\n    \n    documentList: DocumentListComponent;\n\n    \n    highlighter: HighlightDirective;\n\n    debounceSearch: number= 200;\n\n    searchInput: FormControl = new FormControl();\n/**\n * @param {?} contentNodeSelectorService\n * @param {?} contentService\n * @param {?} apiService\n * @param {?} preferences\n * @param {?=} data\n * @param {?=} containingDialog\n */\nconstructor(private contentNodeSelectorService: ContentNodeSelectorService,\nprivate contentService: ContentService,\nprivate apiService: AlfrescoApiService,\nprivate preferences: UserPreferencesService,\n                  data?: ContentNodeSelectorComponentData,\nprivate containingDialog?: MatDialogRef<ContentNodeSelectorComponent>) {\n        if (data) {\n            this.title = data.title;\n            this.actionName = data.actionName;\n            this.select = data.select;\n            this.currentFolderId = data.currentFolderId;\n            this.dropdownHideMyFiles = data.dropdownHideMyFiles;\n            this.dropdownSiteList = data.dropdownSiteList;\n            this.rowFilter = data.rowFilter;\n            this.imageResolver = data.imageResolver;\n        }\n        this.buttonActionName = this.actionName ? `NODE_SELECTOR.${this.actionName.toUpperCase()}` : 'NODE_SELECTOR.CHOOSE';\n\n        if (this.containingDialog) {\n            this.inDialog = true;\n        }\n\n        this.searchInput.valueChanges\n            .pipe(\n                debounceTime(this.debounceSearch)\n            )\n            .subscribe((searchValue) => {\n                this.search(searchValue);\n            });\n\n        this.pageSize = this.preferences.paginationSize;\n    }\n/**\n * @return {?}\n */\nngOnInit() {\n        this.folderIdToShow = this.currentFolderId;\n        this.paginationStrategy = PaginationStrategy.Infinite;\n    }\n/**\n * Updates the site attribute and starts a new search\n * \n * @param {?} chosenSite Sitemodel to search within\n * @return {?}\n */\nsiteChanged(chosenSite: SiteModel): void {\n        this.siteId = chosenSite.guid;\n        this.updateResults();\n    }\n/**\n * Updates the searchTerm attribute and starts a new search\n * \n * @param {?} searchTerm string value to search against\n * @return {?}\n */\nsearch(searchTerm: string): void {\n        this.searchTerm = searchTerm;\n        this.updateResults();\n    }\n/**\n * Returns whether breadcrumb has to be shown or not\n * @return {?}\n */\nneedBreadcrumbs() {\n        const /** @type {?} */ whenInFolderNavigation = !this.showingSearchResults, /** @type {?} */\n            whenInSelectingSearchResult = this.showingSearchResults && this.chosenNode;\n\n        return whenInFolderNavigation || whenInSelectingSearchResult;\n    }\n/**\n * Returns the actually selected|entered folder node or null in case of searching for the breadcrumb\n * @return {?}\n */\nget breadcrumbFolderNode(): MinimalNodeEntryEntity | null {\n        if (this.showingSearchResults && this.chosenNode) {\n            return this.chosenNode;\n        } else {\n            return this.documentList.folderNode;\n        }\n    }\n/**\n * Clear the search input\n * @return {?}\n */\nclear(): void {\n        this.searchTerm = '';\n        this.nodes = null;\n        this.skipCount = 0;\n        this.chosenNode = null;\n        this.showingSearchResults = false;\n        this.folderIdToShow = this.currentFolderId;\n    }\n/**\n * Update the result list depending on the criterias\n * @return {?}\n */\nprivate updateResults(): void {\n        if (this.searchTerm.length === 0) {\n            this.folderIdToShow = this.siteId || this.currentFolderId;\n        } else {\n            this.startNewSearch();\n        }\n    }\n/**\n * Load the first page of a new search result\n * @return {?}\n */\nprivate startNewSearch(): void {\n        this.nodes = null;\n        this.skipCount = 0;\n        this.chosenNode = null;\n        this.folderIdToShow = null;\n        this.querySearch();\n    }\n/**\n * Loads the next batch of search results\n * \n * @param {?} event Pagination object\n * @return {?}\n */\ngetNextPageOfSearch(event: Pagination): void {\n        this.infiniteScroll = true;\n        this.skipCount = event.skipCount;\n        this.querySearch();\n    }\n/**\n * Perform the call to searchService with the proper parameters\n * @return {?}\n */\nprivate querySearch(): void {\n        this.loadingSearchResults = true;\n\n        this.contentNodeSelectorService.search(this.searchTerm, this.siteId, this.skipCount, this.pageSize)\n            .subscribe(this.showSearchResults.bind(this));\n    }\n/**\n * Show the results of the search\n * \n * @param {?} results Search results\n * @return {?}\n */\nprivate showSearchResults(results: NodePaging): void {\n        this.showingSearchResults = true;\n        this.loadingSearchResults = false;\n\n        // Documentlist hack, since data displaying for preloaded nodes is a little bit messy there\n        if (!this.nodes) {\n            this.nodes = results;\n        } else {\n            this.documentList.data.loadPage(results, true);\n        }\n\n        this.pagination = results.list.pagination;\n        this.highlight();\n    }\n/**\n * Hightlight the actual searchterm in the next frame\n * @return {?}\n */\nhighlight(): void {\n        setTimeout(() => {\n            this.highlighter.highlight(this.searchTerm);\n        }, 0);\n    }\n/**\n * Invoked when user selects a node\n * \n * @param {?} event CustomEvent for node-select\n * @return {?}\n */\nonNodeSelect(event: any): void {\n        this.attemptNodeSelection(event.detail.node.entry);\n    }\n/**\n * Sets showingSearchResults state to be able to differentiate between search results or folder results\n * @return {?}\n */\nonFolderChange(): void {\n        this.skipCount = 0;\n        this.infiniteScroll = false;\n        this.showingSearchResults = false;\n    }\n/**\n * Attempts to set the currently loaded node\n * @param {?} nodePage\n * @return {?}\n */\nonFolderLoaded(nodePage: NodePaging): void {\n        this.attemptNodeSelection(this.documentList.folderNode);\n        this.pagination = nodePage.list.pagination;\n    }\n/**\n * Selects node as chosen if it has the right permission, clears the selection otherwise\n * \n * @param {?} entry\n * @return {?}\n */\nprivate attemptNodeSelection(entry: MinimalNodeEntryEntity): void {\n        if (this.contentService.hasPermission(entry, 'create')) {\n            this.chosenNode = entry;\n        } else {\n            this.resetChosenNode();\n        }\n    }\n/**\n * Clears the chosen node\n * @return {?}\n */\nresetChosenNode(): void {\n        this.chosenNode = null;\n    }\n/**\n * Emit event with the chosen node\n * @return {?}\n */\nchoose(): void {\n        const /** @type {?} */ entry: any = this.chosenNode;\n\n        if (entry && entry.guid) {\n            const /** @type {?} */ options = {\n                include: ['path', 'properties', 'allowableOperations']\n            };\n            this.apiService.nodesApi.getNode(entry.guid, options)\n                .then(chosenSiteNode => {\n                    this.select.next([chosenSiteNode.entry]);\n                });\n\n        } else {\n            this.select.next([this.chosenNode]);\n\n        }\n    }\n/**\n * Close the dialog\n * @return {?}\n */\nclose(): void {\n        this.containingDialog.close();\n    }\n/**\n * @param {?} e\n * @return {?}\n */\nonNodeDoubleClick(e: CustomEvent) {\n        const /** @type {?} */ node: any = e.detail.node.entry;\n\n        if (node && node.guid) {\n            const /** @type {?} */ options = {\n                maxItems: this.pageSize,\n                skipCount: this.skipCount,\n                include: ['path', 'properties', 'allowableOperations']\n            };\n\n            this.apiService.nodesApi.getNode(node.guid, options)\n                .then(documentLibrary => {\n                    this.documentList.performCustomSourceNavigation(documentLibrary);\n                });\n        }\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'adf-content-node-selector',\n    styles: [`\n\n    `],\n    template: `\n      <header matDialogTitle\n              class=\"adf-content-node-selector-title\"\n              data-automation-id=\"content-node-selector-title\">{{title}}\n      </header>\n\n      <section matDialogContent\n               class=\"adf-content-node-selector-content\"\n               (node-select)=\"onNodeSelect($event)\">\n\n          <mat-form-field floatPlaceholder=\"never\" class=\"adf-content-node-selector-content-input\">\n              <input matInput\n                     id=\"searchInput\"\n                     [formControl]=\"searchInput\"\n                     type=\"text\"\n                     placeholder=\"Search\"\n                     [value]=\"searchTerm\"\n                     data-automation-id=\"content-node-selector-search-input\">\n\n              <mat-icon *ngIf=\"searchTerm.length > 0\"\n                        matSuffix (click)=\"clear()\"\n                        class=\"adf-content-node-selector-content-input-icon\"\n                        data-automation-id=\"content-node-selector-search-clear\">clear\n              </mat-icon>\n\n              <mat-icon *ngIf=\"searchTerm.length === 0\"\n                        matSuffix\n                        class=\"adf-content-node-selector-content-input-icon\"\n                        data-automation-id=\"content-node-selector-search-icon\">search\n              </mat-icon>\n\n          </mat-form-field>\n\n          <adf-sites-dropdown\n              (change)=\"siteChanged($event)\"\n              [placeholder]=\"'NODE_SELECTOR.SELECT_LOCATION'\"\n              [hideMyFiles]=\"dropdownHideMyFiles\"\n              [siteList]=\"dropdownSiteList\"\n              data-automation-id=\"content-node-selector-sites-combo\"></adf-sites-dropdown>\n\n          <adf-toolbar>\n              <adf-toolbar-title>\n                  <adf-dropdown-breadcrumb *ngIf=\"needBreadcrumbs()\"\n                                           class=\"adf-content-node-selector-content-breadcrumb\"\n                                           (navigate)=\"clear()\"\n                                           [target]=\"documentList\"\n                                           [folderNode]=\"breadcrumbFolderNode\"\n                                           data-automation-id=\"content-node-selector-content-breadcrumb\">\n                  </adf-dropdown-breadcrumb>\n              </adf-toolbar-title>\n          </adf-toolbar>\n\n          <div class=\"adf-content-node-selector-content-list\" data-automation-id=\"content-node-selector-content-list\">\n              <adf-document-list\n                  #documentList\n                  adf-highlight\n                  adf-highlight-selector=\".cell-value adf-datatable-cell .adf-datatable-cell-value\"\n                  [node]=\"nodes\"\n                  [maxItems]=\"pageSize\"\n                  [skipCount]=\"skipCount\"\n                  [enableInfiniteScrolling]=\"infiniteScroll\"\n                  [rowFilter]=\"rowFilter\"\n                  [imageResolver]=\"imageResolver\"\n                  [currentFolderId]=\"folderIdToShow\"\n                  selectionMode=\"single\"\n                  [contextMenuActions]=\"false\"\n                  [contentActions]=\"false\"\n                  [allowDropFiles]=\"false\"\n                  (folderChange)=\"onFolderChange()\"\n                  (ready)=\"onFolderLoaded($event)\"\n                  (node-dblclick)=\"onNodeDoubleClick($event)\"\n                  data-automation-id=\"content-node-selector-document-list\">\n                  <empty-folder-content>\n                      <ng-template>\n                          <div>{{ 'NODE_SELECTOR.NO_RESULTS' | translate }}</div>\n                      </ng-template>\n                  </empty-folder-content>\n              </adf-document-list>\n\n              <adf-infinite-pagination\n                  [pagination]=\"pagination\"\n                  [pageSize]=\"pageSize\"\n                  [loading]=\"loadingSearchResults\"\n                  (loadMore)=\"getNextPageOfSearch($event)\"\n                  data-automation-id=\"content-node-selector-search-pagination\">\n                  {{ 'ADF-DOCUMENT-LIST.LAYOUT.LOAD_MORE' | translate }}\n              </adf-infinite-pagination>\n          </div>\n\n      </section>\n\n      <footer matDialogActions class=\"adf-content-node-selector-actions\">\n\n          <button *ngIf=\"inDialog\"\n                  mat-button\n                  class=\"adf-content-node-selector-actions-cancel\"\n                  (click)=\"close()\"\n                  data-automation-id=\"content-node-selector-actions-cancel\">{{ 'NODE_SELECTOR.CANCEL' | translate }}\n          </button>\n\n          <button mat-button\n                  [disabled]=\"!chosenNode\"\n                  class=\"adf-content-node-selector-actions-choose\"\n                  (click)=\"choose()\"\n                  data-automation-id=\"content-node-selector-actions-choose\">{{ buttonActionName | translate }}\n          </button>\n\n      </footer>\n    `,\n    encapsulation: ViewEncapsulation.None\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ContentNodeSelectorService, },\n{type: ContentService, },\n{type: AlfrescoApiService, },\n{type: UserPreferencesService, },\n{type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DIALOG_DATA, ] }, ]},\n{type: MatDialogRef, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'title': [{ type: Input },],\n'actionName': [{ type: Input },],\n'currentFolderId': [{ type: Input },],\n'dropdownHideMyFiles': [{ type: Input },],\n'dropdownSiteList': [{ type: Input },],\n'rowFilter': [{ type: Input },],\n'imageResolver': [{ type: Input },],\n'pageSize': [{ type: Input },],\n'select': [{ type: Output },],\n'documentList': [{ type: ViewChild, args: [DocumentListComponent, ] },],\n'highlighter': [{ type: ViewChild, args: [HighlightDirective, ] },],\n};\n}\n\nfunction ContentNodeSelectorComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nContentNodeSelectorComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nContentNodeSelectorComponent.ctorParameters;\n/** @type {?} */\nContentNodeSelectorComponent.propDecorators;\n/** @type {?} */\nContentNodeSelectorComponent.prototype.nodes;\n/** @type {?} */\nContentNodeSelectorComponent.prototype.siteId;\n/** @type {?} */\nContentNodeSelectorComponent.prototype.searchTerm;\n/** @type {?} */\nContentNodeSelectorComponent.prototype.showingSearchResults;\n/** @type {?} */\nContentNodeSelectorComponent.prototype.loadingSearchResults;\n/** @type {?} */\nContentNodeSelectorComponent.prototype.inDialog;\n/** @type {?} */\nContentNodeSelectorComponent.prototype.chosenNode;\n/** @type {?} */\nContentNodeSelectorComponent.prototype.folderIdToShow;\n/** @type {?} */\nContentNodeSelectorComponent.prototype.paginationStrategy;\n/** @type {?} */\nContentNodeSelectorComponent.prototype.pagination;\n/** @type {?} */\nContentNodeSelectorComponent.prototype.skipCount;\n/** @type {?} */\nContentNodeSelectorComponent.prototype.infiniteScroll;\n/** @type {?} */\nContentNodeSelectorComponent.prototype.buttonActionName;\n/** @type {?} */\nContentNodeSelectorComponent.prototype.title;\n/** @type {?} */\nContentNodeSelectorComponent.prototype.actionName;\n/** @type {?} */\nContentNodeSelectorComponent.prototype.currentFolderId;\n/** @type {?} */\nContentNodeSelectorComponent.prototype.dropdownHideMyFiles;\n/** @type {?} */\nContentNodeSelectorComponent.prototype.dropdownSiteList;\n/** @type {?} */\nContentNodeSelectorComponent.prototype.rowFilter;\n/** @type {?} */\nContentNodeSelectorComponent.prototype.imageResolver;\n/** @type {?} */\nContentNodeSelectorComponent.prototype.pageSize;\n/** @type {?} */\nContentNodeSelectorComponent.prototype.select;\n/** @type {?} */\nContentNodeSelectorComponent.prototype.documentList;\n/** @type {?} */\nContentNodeSelectorComponent.prototype.highlighter;\n/** @type {?} */\nContentNodeSelectorComponent.prototype.debounceSearch;\n/** @type {?} */\nContentNodeSelectorComponent.prototype.searchInput;\n/** @type {?} */\nContentNodeSelectorComponent.prototype.contentNodeSelectorService;\n/** @type {?} */\nContentNodeSelectorComponent.prototype.contentService;\n/** @type {?} */\nContentNodeSelectorComponent.prototype.apiService;\n/** @type {?} */\nContentNodeSelectorComponent.prototype.preferences;\n/** @type {?} */\nContentNodeSelectorComponent.prototype.containingDialog;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n /* tslint:disable:component-selector  */\n\n\nimport { Component } from '@angular/core';\n\nimport { ContentActionModel } from './../../models/content-action.model';\nimport { DocumentListComponent } from './../document-list.component';\nexport class ContentActionListComponent {\n/**\n * @param {?} documentList\n */\nconstructor(private documentList: DocumentListComponent) {\n    }\n/**\n * Registers action handler within the parent document list component.\n * @param {?} action Action model to register.\n * @return {?}\n */\nregisterAction(action: ContentActionModel): boolean {\n        if (this.documentList && action) {\n            this.documentList.actions.push(action);\n            return true;\n        }\n        return false;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'content-actions',\n    template: ''\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: DocumentListComponent, },\n];\n}\n\nfunction ContentActionListComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nContentActionListComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nContentActionListComponent.ctorParameters;\n/** @type {?} */\nContentActionListComponent.prototype.documentList;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { BaseEvent } from '@alfresco/adf-core';\nimport { MinimalNodeEntity, MinimalNodeEntryEntity } from 'alfresco-js-api';\nexport class NodeEntityEvent extends BaseEvent<MinimalNodeEntity> {\n\n    value: MinimalNodeEntity;\n\n    defaultPrevented: boolean;\n/**\n * @param {?} entity\n */\nconstructor(entity: MinimalNodeEntity) {\n        super();\n        this.value = entity;\n    }\n}\n\nfunction NodeEntityEvent_tsickle_Closure_declarations() {\n/** @type {?} */\nNodeEntityEvent.prototype.value;\n/** @type {?} */\nNodeEntityEvent.prototype.defaultPrevented;\n}\n\nexport class NodeEntryEvent extends BaseEvent<MinimalNodeEntryEntity> {\n\n    value: MinimalNodeEntryEntity;\n\n    defaultPrevented: boolean;\n/**\n * @param {?} entity\n */\nconstructor(entity: MinimalNodeEntryEntity) {\n        super();\n        this.value = entity;\n    }\n}\n\nfunction NodeEntryEvent_tsickle_Closure_declarations() {\n/** @type {?} */\nNodeEntryEvent.prototype.value;\n/** @type {?} */\nNodeEntryEvent.prototype.defaultPrevented;\n}\n\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport {\n    DataCellEvent,\n    DataColumn,\n    DataRowActionEvent,\n    DataSorting,\n    DataTableComponent,\n    ObjectDataColumn,\n    PaginatedComponent,\n    PaginationQueryParams\n} from '@alfresco/adf-core';\nimport { AlfrescoApiService, AppConfigService, DataColumnListComponent, UserPreferencesService } from '@alfresco/adf-core';\nimport {\n    AfterContentInit, Component, ContentChild, ElementRef, EventEmitter, HostListener, Input, NgZone,\n    OnChanges, OnDestroy, OnInit, Output, SimpleChanges, TemplateRef, ViewChild, ViewEncapsulation\n} from '@angular/core';\nimport {\n    DeletedNodesPaging,\n    MinimalNodeEntity,\n    MinimalNodeEntryEntity,\n    NodePaging,\n    PersonEntry,\n    SitePaging,\n    Pagination\n} from 'alfresco-js-api';\nimport { Observable } from 'rxjs/Observable';\nimport { Subject } from 'rxjs/Subject';\nimport { presetsDefaultModel } from '../models/preset.model';\nimport { ShareDataRow } from './../data/share-data-row.model';\nimport { ShareDataTableAdapter } from './../data/share-datatable-adapter';\n\nimport { ContentActionModel } from './../models/content-action.model';\nimport { PermissionStyleModel } from './../models/permissions-style.model';\nimport { DocumentListService } from './../services/document-list.service';\nimport { NodeEntityEvent, NodeEntryEvent } from './node.event';\nimport { Subscription } from 'rxjs/Subscription';\nexport type PaginationStrategy = number;\nexport let PaginationStrategy: any = {};\nPaginationStrategy.Finite = 0;\nPaginationStrategy.Infinite = 1;\nPaginationStrategy[PaginationStrategy.Finite] = \"Finite\";\nPaginationStrategy[PaginationStrategy.Infinite] = \"Infinite\";\n\nexport class DocumentListComponent implements OnInit, OnChanges, OnDestroy, AfterContentInit, PaginatedComponent {\n\n    static SINGLE_CLICK_NAVIGATION: string = 'click';\n    static DOUBLE_CLICK_NAVIGATION: string = 'dblclick';\n    static DEFAULT_PAGE_SIZE: number = 20;\n\n     columnList: DataColumnListComponent;\n\n    \n    permissionsStyle: PermissionStyleModel[] = [];\n\n    \n    locationFormat: string = '/';\n\n    \n    navigate: boolean = true;\n\n    \n    navigationMode: string = DocumentListComponent.DOUBLE_CLICK_NAVIGATION; // click|dblclick\n\n    \n    thumbnails: boolean = false;\n\n    \n    selectionMode: string = 'single'; // null|single|multiple\n\n    \n    multiselect: boolean = false;\n\n    \n    contentActions: boolean = false;\n\n    \n    contentActionsPosition: string = 'right'; // left|right\n\n    \n    contextMenuActions: boolean = false;\n\n    \n    emptyFolderImageUrl: string = './assets/images/empty_doc_lib.svg';\n\n    \n    allowDropFiles: boolean = false;\n\n    \n    sorting: string[];\n\n    \n    rowStyle: string;\n\n    \n    rowStyleClass: string;\n\n    \n    loading: boolean = false;\n\n    \n    rowFilter: any | null = null;\n\n    \n    imageResolver: any | null = null;\n\n    // The identifier of a node. You can also use one of these well-known aliases: -my- | -shared- | -root-\n    \n    currentFolderId: string = null;\n\n    \n    folderNode: MinimalNodeEntryEntity = null;\n\n    \n    node: NodePaging = null;\n\n    \n    maxItems: number;\n\n    \n    skipCount: number = 0;\n\n    \n    enableInfiniteScrolling: boolean = false;\n\n    \n    nodeClick: EventEmitter<NodeEntityEvent> = new EventEmitter<NodeEntityEvent>();\n\n    \n    nodeDblClick: EventEmitter<NodeEntityEvent> = new EventEmitter<NodeEntityEvent>();\n\n    \n    folderChange: EventEmitter<NodeEntryEvent> = new EventEmitter<NodeEntryEvent>();\n\n    \n    preview: EventEmitter<NodeEntityEvent> = new EventEmitter<NodeEntityEvent>();\n\n    \n    ready: EventEmitter<NodePaging> = new EventEmitter();\n\n    \n    error: EventEmitter<any> = new EventEmitter();\n\n    \n    dataTable: DataTableComponent;\n\n    errorMessage;\n    actions: ContentActionModel[] = [];\n    emptyFolderTemplate: TemplateRef<any>;\n    noPermissionTemplate: TemplateRef<any>;\n    contextActionHandler: Subject<any> = new Subject();\n    data: ShareDataTableAdapter;\n    infiniteLoading: boolean = false;\n    noPermission: boolean = false;\n    selection = new Array<MinimalNodeEntity>();\n\n    pagination = new Subject<Pagination>();\nprivate layoutPresets = {};\nprivate currentNodeAllowableOperations: string[] = [];\nprivate CREATE_PERMISSION = 'create';\nprivate contextActionHandlerSubscription: Subscription;\n/**\n * @param {?} documentListService\n * @param {?} ngZone\n * @param {?} elementRef\n * @param {?} apiService\n * @param {?} appConfig\n * @param {?} preferences\n */\nconstructor(private documentListService: DocumentListService,\nprivate ngZone: NgZone,\nprivate elementRef: ElementRef,\nprivate apiService: AlfrescoApiService,\nprivate appConfig: AppConfigService,\nprivate preferences: UserPreferencesService) {\n        this.maxItems = this.preferences.paginationSize;\n\n        this.pagination.next(<Pagination> {\n            maxItems: this.preferences.paginationSize,\n            skipCount: 0,\n            totalItems: 0,\n            hasMoreItems: false\n        });\n    }\n/**\n * @param {?} node\n * @return {?}\n */\ngetContextActions(node: MinimalNodeEntity) {\n        if (node && node.entry) {\n            let /** @type {?} */ actions = this.getNodeActions(node);\n            if (actions && actions.length > 0) {\n                return actions.map((currentAction: ContentActionModel) => {\n                    return {\n                        model: currentAction,\n                        node: node,\n                        subject: this.contextActionHandler\n                    };\n                });\n            }\n        }\n        return null;\n    }\n/**\n * @param {?} action\n * @return {?}\n */\ncontextActionCallback(action) {\n        if (action) {\n            this.executeContentAction(action.node, action.model);\n        }\n    }\n/**\n * @return {?}\n */\nget hasCustomLayout(): boolean {\n        return this.columnList && this.columnList.columns && this.columnList.columns.length > 0;\n    }\n/**\n * @return {?}\n */\nngOnInit() {\n        this.loadLayoutPresets();\n        this.data = new ShareDataTableAdapter(this.documentListService, null, this.getDefaultSorting());\n        this.data.thumbnails = this.thumbnails;\n        this.data.permissionsStyle = this.permissionsStyle;\n\n        if (this.rowFilter) {\n            this.data.setFilter(this.rowFilter);\n        }\n\n        if (this.imageResolver) {\n            this.data.setImageResolver(this.imageResolver);\n        }\n\n        this.contextActionHandlerSubscription = this.contextActionHandler.subscribe(val => this.contextActionCallback(val));\n\n        this.enforceSingleClickNavigationForMobile();\n    }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n        let /** @type {?} */ schema: DataColumn[] = [];\n\n        if (this.hasCustomLayout) {\n            schema = this.columnList.columns.map(c => /** @type {?} */(( <DataColumn> c)));\n        }\n\n        if (!this.data) {\n            this.data = new ShareDataTableAdapter(this.documentListService, schema, this.getDefaultSorting());\n        } else if (schema && schema.length > 0) {\n            this.data.setColumns(schema);\n        }\n\n        let /** @type {?} */ columns = this.data.getColumns();\n        if (!columns || columns.length === 0) {\n            this.setupDefaultColumns(this.currentFolderId);\n        }\n    }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n        if (this.isSkipCountChanged(changes) ||\n            this.isMaxItemsChanged(changes)) {\n            this.reload(this.enableInfiniteScrolling);\n        }\n        if (changes.folderNode && changes.folderNode.currentValue) {\n            this.loadFolder();\n        } else if (changes.currentFolderId && changes.currentFolderId.currentValue) {\n            if (changes.currentFolderId.previousValue !== changes.currentFolderId.currentValue) {\n                this.folderNode = null;\n            }\n            if (!this.hasCustomLayout) {\n                this.setupDefaultColumns(changes.currentFolderId.currentValue);\n            }\n            this.loadFolderByNodeId(changes.currentFolderId.currentValue);\n        } else if (this.data) {\n            if (changes.node && changes.node.currentValue) {\n                this.resetSelection();\n                this.data.loadPage(changes.node.currentValue);\n                this.pagination.next(changes.node.currentValue.list.pagination);\n            } else if (changes.rowFilter) {\n                this.data.setFilter(changes.rowFilter.currentValue);\n                if (this.currentFolderId) {\n                    this.loadFolderNodesByFolderNodeId(this.currentFolderId, this.maxItems, this.skipCount);\n                }\n            } else if (changes.imageResolver) {\n                this.data.setImageResolver(changes.imageResolver.currentValue);\n            }\n        }\n    }\n/**\n * @param {?=} merge\n * @return {?}\n */\nreload(merge: boolean = false) {\n        this.ngZone.run(() => {\n            this.resetSelection();\n\n            if (this.folderNode) {\n                this.loadFolder(merge);\n            } else if (this.currentFolderId) {\n                this.loadFolderByNodeId(this.currentFolderId, merge);\n            } else if (this.node) {\n                this.data.loadPage(this.node);\n                this.onDataReady(this.node);\n            }\n        });\n    }\n/**\n * @return {?}\n */\nisEmptyTemplateDefined(): boolean {\n        if (this.dataTable) {\n            if (this.emptyFolderTemplate) {\n                return true;\n            }\n        }\n        return false;\n    }\n/**\n * @return {?}\n */\nisNoPermissionTemplateDefined(): boolean {\n        if (this.dataTable) {\n            if (this.noPermissionTemplate) {\n                return true;\n            }\n        }\n        return false;\n    }\n/**\n * @return {?}\n */\nisMobile(): boolean {\n        return !!/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\n    }\n/**\n * @return {?}\n */\nisEmpty() {\n        return !this.data || this.data.getRows().length === 0;\n    }\n/**\n * @param {?} node\n * @return {?}\n */\ngetNodeActions(node: MinimalNodeEntity | any): ContentActionModel[] {\n        let /** @type {?} */ target = null;\n\n        if (node && node.entry) {\n            if (node.entry.isFile) {\n                target = 'document';\n            }\n\n            if (node.entry.isFolder) {\n                target = 'folder';\n            }\n\n            if (target) {\n                let /** @type {?} */ ltarget = target.toLowerCase();\n                let /** @type {?} */ actionsByTarget = this.actions.filter(entry => {\n                    return entry.target.toLowerCase() === ltarget;\n                }).map(action => new ContentActionModel(action));\n\n                actionsByTarget.forEach((action) => {\n                    this.checkPermission(node, action);\n                });\n\n                return actionsByTarget;\n            }\n        }\n\n        return [];\n    }\n/**\n * @param {?} node\n * @param {?} action\n * @return {?}\n */\ncheckPermission(node: any, action: ContentActionModel): ContentActionModel {\n        if (action.permission) {\n            if (this.hasPermissions(node)) {\n                let /** @type {?} */ permissions = node.entry.allowableOperations;\n                let /** @type {?} */ findPermission = permissions.find(permission => permission === action.permission);\n                if (!findPermission && action.disableWithNoPermission === true) {\n                    action.disabled = true;\n                }\n            }\n        }\n        return action;\n    }\n/**\n * @param {?} node\n * @return {?}\n */\nprivate hasPermissions(node: any): boolean {\n        return node.entry.allowableOperations ? true : false;\n    }\n/**\n * @param {?=} e\n * @return {?}\n */\nonShowContextMenu(e?: Event) {\n        if (e && this.contextMenuActions) {\n            e.preventDefault();\n        }\n    }\n/**\n * @param {?} node\n * @return {?}\n */\nperformNavigation(node: MinimalNodeEntity): boolean {\n        if (this.canNavigateFolder(node)) {\n            this.updateFolderData(node);\n            return true;\n        }\n        return false;\n    }\n/**\n * @param {?} node\n * @return {?}\n */\nperformCustomSourceNavigation(node: MinimalNodeEntity): boolean {\n        if (this.isCustomSource(this.currentFolderId)) {\n            this.updateFolderData(node);\n            return true;\n        }\n        return false;\n    }\n/**\n * @param {?} node\n * @return {?}\n */\nupdateFolderData(node: MinimalNodeEntity): void {\n        this.currentFolderId = node.entry.id;\n        this.folderNode = node.entry;\n        this.skipCount = 0;\n        this.currentNodeAllowableOperations = node.entry['allowableOperations'] ? node.entry['allowableOperations'] : [];\n        this.loadFolder();\n        this.folderChange.emit(new NodeEntryEvent(node.entry));\n    }\n/**\n * Invoked when executing content action for a document or folder.\n * @param {?} node Node to be the context of the execution.\n * @param {?} action Action to be executed against the context.\n * @return {?}\n */\nexecuteContentAction(node: MinimalNodeEntity, action: ContentActionModel) {\n        if (node && node.entry && action) {\n            let /** @type {?} */ handlerSub;\n\n            if (typeof action.handler === 'function') {\n                handlerSub = action.handler(node, this, action.permission);\n            } else {\n                handlerSub = Observable.of(true);\n            }\n\n            if (typeof action.execute === 'function') {\n                handlerSub.subscribe(() => {\n                    action.execute(node);\n                });\n            }\n        }\n    }\n/**\n * @param {?=} merge\n * @return {?}\n */\nloadFolder(merge: boolean = false) {\n        if (merge) {\n            this.infiniteLoading = true;\n        } else {\n            this.loading = true;\n        }\n\n        let /** @type {?} */ nodeId = this.folderNode ? this.folderNode.id : this.currentFolderId;\n\n        if (!this.hasCustomLayout) {\n            this.setupDefaultColumns(nodeId);\n        }\n        if (nodeId) {\n            this.loadFolderNodesByFolderNodeId(nodeId, this.maxItems, this.skipCount, merge).catch(err => this.error.emit(err));\n        }\n    }\n/**\n * @param {?} nodeId\n * @param {?=} merge\n * @return {?}\n */\nloadFolderByNodeId(nodeId: string, merge: boolean = false) {\n        this.loading = true;\n        this.resetSelection();\n\n        if (nodeId === '-trashcan-') {\n            this.loadTrashcan(merge);\n        } else if (nodeId === '-sharedlinks-') {\n            this.loadSharedLinks(merge);\n        } else if (nodeId === '-sites-') {\n            this.loadSites(merge);\n        } else if (nodeId === '-mysites-') {\n            this.loadMemberSites(merge);\n        } else if (nodeId === '-favorites-') {\n            this.loadFavorites(merge);\n        } else if (nodeId === '-recent-') {\n            this.loadRecent(merge);\n        } else {\n            this.documentListService\n                .getFolderNode(nodeId)\n                .then(node => {\n                    this.folderNode = node;\n                    this.currentFolderId = node.id;\n                    this.skipCount = 0;\n                    this.currentNodeAllowableOperations = node['allowableOperations'] ? node['allowableOperations'] : [];\n                    return this.loadFolderNodesByFolderNodeId(node.id, this.maxItems, this.skipCount, merge);\n                })\n                .catch(err => {\n                    if (JSON.parse(err.message).error.statusCode === 403) {\n                        this.loading = false;\n                        this.noPermission = true;\n                    }\n                    this.error.emit(err);\n                });\n        }\n    }\n/**\n * @param {?} id\n * @param {?} maxItems\n * @param {?} skipCount\n * @param {?=} merge\n * @return {?}\n */\nloadFolderNodesByFolderNodeId(id: string, maxItems: number, skipCount: number, merge: boolean = false): Promise<any> {\n        return new Promise((resolve, reject) => {\n            this.resetSelection();\n            this.documentListService\n                .getFolder(null, {\n                    maxItems: maxItems,\n                    skipCount: skipCount,\n                    rootFolderId: id\n                })\n                .subscribe(\n                val => {\n                    this.data.loadPage( /** @type {?} */((<NodePaging> val)), merge);\n                    this.loading = false;\n                    this.infiniteLoading = false;\n                    this.onDataReady(val);\n                    resolve(true);\n                },\n                error => {\n                    reject(error);\n                });\n        });\n\n    }\n/**\n * @return {?}\n */\nresetSelection() {\n        this.dataTable.resetSelection();\n        this.selection = [];\n    }\n/**\n * @param {?} changePage\n * @return {?}\n */\nprivate isSkipCountChanged(changePage: SimpleChanges) {\n        return changePage.skipCount &&\n            changePage.skipCount.currentValue !== null &&\n            changePage.skipCount.currentValue !== undefined &&\n            changePage.skipCount.currentValue !== changePage.skipCount.previousValue;\n    }\n/**\n * @param {?} changePage\n * @return {?}\n */\nprivate isMaxItemsChanged(changePage: SimpleChanges) {\n        return changePage.maxItems &&\n            changePage.maxItems.currentValue &&\n            changePage.maxItems.currentValue !== changePage.maxItems.previousValue;\n    }\n/**\n * @param {?=} merge\n * @return {?}\n */\nprivate loadTrashcan(merge: boolean = false): void {\n        const /** @type {?} */ options = {\n            include: ['path', 'properties'],\n            maxItems: this.maxItems,\n            skipCount: this.skipCount\n        };\n        this.apiService.nodesApi.getDeletedNodes(options)\n            .then((page: DeletedNodesPaging) => this.onPageLoaded(page, merge))\n            .catch(error => this.error.emit(error));\n    }\n/**\n * @param {?=} merge\n * @return {?}\n */\nprivate loadSharedLinks(merge: boolean = false): void {\n        const /** @type {?} */ options = {\n            include: ['properties', 'allowableOperations', 'path'],\n            maxItems: this.maxItems,\n            skipCount: this.skipCount\n        };\n        this.apiService.sharedLinksApi.findSharedLinks(options)\n            .then((page: NodePaging) => this.onPageLoaded(page, merge))\n            .catch(error => this.error.emit(error));\n    }\n/**\n * @param {?=} merge\n * @return {?}\n */\nprivate loadSites(merge: boolean = false): void {\n        const /** @type {?} */ options = {\n            include: ['properties'],\n            maxItems: this.maxItems,\n            skipCount: this.skipCount\n        };\n\n        this.apiService.sitesApi.getSites(options)\n            .then((page: NodePaging) => this.onPageLoaded(page, merge))\n            .catch(error => this.error.emit(error));\n    }\n/**\n * @param {?=} merge\n * @return {?}\n */\nprivate loadMemberSites(merge: boolean = false): void {\n        const /** @type {?} */ options = {\n            include: ['properties'],\n            maxItems: this.maxItems,\n            skipCount: this.skipCount\n        };\n\n        this.apiService.peopleApi.getSiteMembership('-me-', options)\n            .then((result: SitePaging) => {\n                let /** @type {?} */ page: NodePaging = {\n                    list: {\n                        entries: result.list.entries\n                            .map(({entry: {site}}: any) => {\n                                site.allowableOperations = site.allowableOperations ? site.allowableOperations : [this.CREATE_PERMISSION];\n                                return {\n                                    entry: site\n                                };\n                            }),\n                        pagination: result.list.pagination\n                    }\n                };\n\n                this.onPageLoaded(page, merge);\n            })\n            .catch(error => this.error.emit(error));\n    }\n/**\n * @param {?=} merge\n * @return {?}\n */\nprivate loadFavorites(merge: boolean = false): void {\n        const /** @type {?} */ options = {\n            maxItems: this.maxItems,\n            skipCount: this.skipCount,\n            where: '(EXISTS(target/file) OR EXISTS(target/folder))',\n            include: ['properties', 'allowableOperations', 'path']\n        };\n\n        this.apiService.favoritesApi.getFavorites('-me-', options)\n            .then((result: NodePaging) => {\n                let /** @type {?} */ page: NodePaging = {\n                    list: {\n                        entries: result.list.entries\n                            .map(({ entry: { target } }: any) => ({\n                                entry: target.file || target.folder\n                            }))\n                            .map(({ entry }: any) => {\n                                entry.properties = {\n                                    'cm:title': entry.title,\n                                    'cm:description': entry.description\n                                };\n                                return { entry };\n                            }),\n                        pagination: result.list.pagination\n                    }\n                };\n                this.onPageLoaded(page, merge);\n            })\n            .catch(error => this.error.emit(error));\n    }\n/**\n * @param {?=} merge\n * @return {?}\n */\nprivate loadRecent(merge: boolean = false): void {\n        this.apiService.peopleApi.getPerson('-me-')\n            .then((person: PersonEntry) => {\n                const /** @type {?} */ username = person.entry.id;\n                const /** @type {?} */ query = {\n                    query: {\n                        query: '*',\n                        language: 'afts'\n                    },\n                    filterQueries: [\n                        { query: `cm:modified:[NOW/DAY-30DAYS TO NOW/DAY+1DAY]` },\n                        { query: `cm:modifier:${username} OR cm:creator:${username}` },\n                        { query: `TYPE:\"content\" AND -TYPE:\"app:filelink\" AND -TYPE:\"fm:post\"` }\n                    ],\n                    include: ['path', 'properties', 'allowableOperations'],\n                    sort: [{\n                        type: 'FIELD',\n                        field: 'cm:modified',\n                        ascending: false\n                    }],\n                    paging: {\n                        maxItems: this.maxItems,\n                        skipCount: this.skipCount\n                    }\n                };\n\n                return this.apiService.searchApi.search(query);\n            })\n            .then((page: NodePaging) => this.onPageLoaded(page, merge))\n            .catch(error => this.error.emit(error));\n    }\n/**\n * @param {?} page\n * @param {?=} merge\n * @return {?}\n */\nprivate onPageLoaded(page: NodePaging, merge: boolean = false) {\n        if (page) {\n            this.data.loadPage(page, merge);\n            this.loading = false;\n            this.onDataReady(page);\n        }\n    }\n/**\n * Creates a set of predefined columns.\n * @param {?=} preset\n * @return {?}\n */\nsetupDefaultColumns(preset: string = 'default'): void {\n        if (this.data) {\n            const /** @type {?} */ columns = this.getLayoutPreset(preset);\n            this.data.setColumns(columns);\n        }\n    }\n/**\n * @param {?} node\n * @return {?}\n */\nonPreviewFile(node: MinimalNodeEntity) {\n        if (node) {\n            this.preview.emit(new NodeEntityEvent(node));\n        }\n    }\n/**\n * @param {?} node\n * @return {?}\n */\nonNodeClick(node: MinimalNodeEntity) {\n        const /** @type {?} */ domEvent = new CustomEvent('node-click', {\n            detail: {\n                sender: this,\n                node: node\n            },\n            bubbles: true\n        });\n        this.elementRef.nativeElement.dispatchEvent(domEvent);\n\n        const /** @type {?} */ event = new NodeEntityEvent(node);\n        this.nodeClick.emit(event);\n\n        if (!event.defaultPrevented) {\n            if (this.navigate && this.navigationMode === DocumentListComponent.SINGLE_CLICK_NAVIGATION) {\n                if (node && node.entry) {\n                    if (node.entry.isFile) {\n                        this.onPreviewFile(node);\n                    }\n\n                    if (node.entry.isFolder) {\n                        this.performNavigation(node);\n                    }\n                }\n            }\n        }\n    }\n/**\n * @param {?} node\n * @return {?}\n */\nonNodeDblClick(node: MinimalNodeEntity) {\n        const /** @type {?} */ domEvent = new CustomEvent('node-dblclick', {\n            detail: {\n                sender: this,\n                node: node\n            },\n            bubbles: true\n        });\n        this.elementRef.nativeElement.dispatchEvent(domEvent);\n\n        const /** @type {?} */ event = new NodeEntityEvent(node);\n        this.nodeDblClick.emit(event);\n\n        if (!event.defaultPrevented) {\n            if (this.navigate && this.navigationMode === DocumentListComponent.DOUBLE_CLICK_NAVIGATION) {\n                if (node && node.entry) {\n                    if (node.entry.isFile) {\n                        this.onPreviewFile(node);\n                    }\n\n                    if (node.entry.isFolder) {\n                        this.performNavigation(node);\n                    }\n                }\n            }\n        }\n    }\n/**\n * @param {?} event\n * @return {?}\n */\nonNodeSelect(event: { row: ShareDataRow, selection: Array<ShareDataRow> }) {\n        this.selection = event.selection.map(entry => entry.node);\n        const /** @type {?} */ domEvent = new CustomEvent('node-select', {\n            detail: {\n                node: event.row.node,\n                selection: this.selection\n            },\n            bubbles: true\n        });\n        this.elementRef.nativeElement.dispatchEvent(domEvent);\n    }\n/**\n * @param {?} event\n * @return {?}\n */\nonNodeUnselect(event: { row: ShareDataRow, selection: Array<ShareDataRow> }) {\n        this.selection = event.selection.map(entry => entry.node);\n        const /** @type {?} */ domEvent = new CustomEvent('node-unselect', {\n            detail: {\n                node: event.row.node,\n                selection: this.selection\n            },\n            bubbles: true\n        });\n        this.elementRef.nativeElement.dispatchEvent(domEvent);\n    }\n/**\n * @param {?} event\n * @return {?}\n */\nonShowRowContextMenu(event: DataCellEvent) {\n        if (this.contextMenuActions) {\n            let /** @type {?} */ args = event.value;\n            let /** @type {?} */ node = ( /** @type {?} */((<ShareDataRow> args.row))).node;\n            if (node) {\n                args.actions = this.getContextActions(node) || [];\n            }\n        }\n    }\n/**\n * @param {?} event\n * @return {?}\n */\nonShowRowActionsMenu(event: DataCellEvent) {\n        if (this.contentActions) {\n            let /** @type {?} */ args = event.value;\n            let /** @type {?} */ node = ( /** @type {?} */((<ShareDataRow> args.row))).node;\n            if (node) {\n                args.actions = this.getNodeActions(node) || [];\n            }\n        }\n    }\n/**\n * @param {?} event\n * @return {?}\n */\nonExecuteRowAction(event: DataRowActionEvent) {\n        if (this.contentActions) {\n            let /** @type {?} */ args = event.value;\n            let /** @type {?} */ node = ( /** @type {?} */((<ShareDataRow> args.row))).node;\n            let /** @type {?} */ action = ( /** @type {?} */((<ContentActionModel> args.action)));\n            this.executeContentAction(node, action);\n        }\n    }\n/**\n * @return {?}\n */\nprivate enforceSingleClickNavigationForMobile(): void {\n        if (this.isMobile()) {\n            this.navigationMode = DocumentListComponent.SINGLE_CLICK_NAVIGATION;\n        }\n    }\n/**\n * @return {?}\n */\nprivate getDefaultSorting(): DataSorting {\n        let /** @type {?} */ defaultSorting: DataSorting;\n        if (this.sorting) {\n            const [key, direction] = this.sorting;\n            defaultSorting = new DataSorting(key, direction);\n        }\n        return defaultSorting;\n    }\n/**\n * @param {?} node\n * @return {?}\n */\ncanNavigateFolder(node: MinimalNodeEntity): boolean {\n        if (this.isCustomSource(this.currentFolderId)) {\n            return false;\n        }\n\n        if (node && node.entry && node.entry.isFolder) {\n            return true;\n        }\n\n        return false;\n    }\n/**\n * @param {?} folderId\n * @return {?}\n */\nisCustomSource(folderId: string): boolean {\n        const /** @type {?} */ sources = ['-trashcan-', '-sharedlinks-', '-sites-', '-mysites-', '-favorites-', '-recent-'];\n\n        if (sources.indexOf(folderId) > -1) {\n            return true;\n        }\n\n        return false;\n    }\n/**\n * @param {?} permission\n * @return {?}\n */\nhasCurrentNodePermission(permission: string): boolean {\n        let /** @type {?} */ hasPermission: boolean = false;\n        if (this.currentNodeAllowableOperations.length > 0) {\n            let /** @type {?} */ permFound = this.currentNodeAllowableOperations.find(element => element === permission);\n            hasPermission = permFound ? true : false;\n        }\n        return hasPermission;\n    }\n/**\n * @return {?}\n */\nhasCreatePermission() {\n        return this.hasCurrentNodePermission(this.CREATE_PERMISSION);\n    }\n/**\n * @return {?}\n */\nprivate loadLayoutPresets(): void {\n        const /** @type {?} */ externalSettings = this.appConfig.get('document-list.presets', null);\n\n        if (externalSettings) {\n            this.layoutPresets = Object.assign({}, presetsDefaultModel, externalSettings);\n        } else {\n            this.layoutPresets = presetsDefaultModel;\n        }\n    }\n/**\n * @param {?=} name\n * @return {?}\n */\nprivate getLayoutPreset(name: string = 'default'): DataColumn[] {\n        return (this.layoutPresets[name] || this.layoutPresets['default']).map(col => new ObjectDataColumn(col));\n    }\n/**\n * @param {?} page\n * @return {?}\n */\nprivate onDataReady(page: NodePaging) {\n        this.ready.emit(page);\n\n        if (page && page.list && page.list.pagination) {\n            this.pagination.next(page.list.pagination);\n        } else {\n            this.pagination.next(null);\n        }\n    }\n/**\n * @param {?} params\n * @return {?}\n */\nupdatePagination(params: PaginationQueryParams) {\n        const /** @type {?} */ needsReload = this.maxItems !== params.maxItems || this.skipCount !== params.skipCount;\n\n        this.maxItems = params.maxItems;\n        this.skipCount = params.skipCount;\n\n        if (needsReload) {\n            this.reload(this.enableInfiniteScrolling);\n        }\n    }\n/**\n * @return {?}\n */\nget supportedPageSizes(): number[] {\n        return this.appConfig.get('document-list.supportedPageSizes', [5, 10, 15, 25]);\n    }\n/**\n * @return {?}\n */\nngOnDestroy() {\n        if (this.contextActionHandlerSubscription) {\n            this.contextActionHandlerSubscription.unsubscribe();\n            this.contextActionHandlerSubscription = null;\n        }\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'adf-document-list',\n    styles: [`\n\n    `],\n    template: `\n      <adf-datatable\n          [selectionMode]=\"selectionMode\"\n          [data]=\"data\"\n          [actions]=\"contentActions\"\n          [actionsPosition]=\"contentActionsPosition\"\n          [multiselect]=\"multiselect\"\n          [allowDropFiles]=\"allowDropFiles\"\n          [contextMenu]=\"contextMenuActions\"\n          [rowStyle]=\"rowStyle\"\n          [rowStyleClass]=\"rowStyleClass\"\n          [loading]=\"loading\"\n          [noPermission]=\"noPermission\"\n          [showHeader]=\"!isEmpty()\"\n          (showRowContextMenu)=\"onShowRowContextMenu($event)\"\n          (showRowActionsMenu)=\"onShowRowActionsMenu($event)\"\n          (executeRowAction)=\"onExecuteRowAction($event)\"\n          (rowClick)=\"onNodeClick($event.value?.node)\"\n          (rowDblClick)=\"onNodeDblClick($event.value?.node)\"\n          (row-select)=\"onNodeSelect($event.detail)\"\n          (row-unselect)=\"onNodeUnselect($event.detail)\">\n\n          <div *ngIf=\"!isEmptyTemplateDefined()\">\n              <no-content-template>\n                  <ng-template>\n                      <adf-empty-list>\n                          <div class=\"adf-empty-list_template adf-empty-folder\">\n                              <div class=\"adf-empty-folder-this-space-is-empty\">{{'ADF-DOCUMENT-LIST.EMPTY.HEADER' | translate}}</div>\n                              <div fxHide.lt-md=\"true\" class=\"adf-empty-folder-drag-drop\">{{ 'ADF-DATATABLE.EMPTY.DRAG-AND-DROP.TITLE' | translate }}</div>\n                              <div fxHide.lt-md=\"true\" class=\"adf-empty-folder-any-files-here-to-add\">{{ 'ADF-DATATABLE.EMPTY.DRAG-AND-DROP.SUBTITLE' | translate }}</div>\n                              <img class=\"adf-empty-folder-image\" [src]=\"emptyFolderImageUrl\">\n                          </div>\n                          <!-- <div adf-empty-list-header class=\"adf-empty-list-header\"> {{'ADF-DOCUMENT-LIST.EMPTY.HEADER' | translate}} </div> -->\n                      </adf-empty-list>\n                  </ng-template>\n              </no-content-template>\n          </div>\n\n          <div *ngIf=\"!isNoPermissionTemplateDefined()\">\n              <no-permission-template>\n                  <ng-template>\n                      <div class=\"adf-no-permission__template\">\n                          <mat-icon>ic_error</mat-icon>\n                          <p class=\"adf-no-permission__template--text\">{{ 'ADF-DOCUMENT-LIST.NO_PERMISSION' | translate }}</p>\n                      </div>\n                  </ng-template>\n              </no-permission-template>\n          </div>\n\n          <div>\n              <loading-content-template>\n                  <ng-template>\n                      <div class=\"adf-document-list-loading-container\">\n                          <mat-progress-spinner\n                              id=\"adf-document-list-loading\"\n                              class=\"adf-document-list-loading-margin\"\n                              [color]=\"'primary'\"\n                              [mode]=\"'indeterminate'\">\n                          </mat-progress-spinner>\n                      </div>\n                  </ng-template>\n              </loading-content-template>\n          </div>\n      </adf-datatable>\n    `,\n    encapsulation: ViewEncapsulation.None\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: DocumentListService, },\n{type: NgZone, },\n{type: ElementRef, },\n{type: AlfrescoApiService, },\n{type: AppConfigService, },\n{type: UserPreferencesService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'columnList': [{ type: ContentChild, args: [DataColumnListComponent, ] },],\n'permissionsStyle': [{ type: Input },],\n'locationFormat': [{ type: Input },],\n'navigate': [{ type: Input },],\n'navigationMode': [{ type: Input },],\n'thumbnails': [{ type: Input },],\n'selectionMode': [{ type: Input },],\n'multiselect': [{ type: Input },],\n'contentActions': [{ type: Input },],\n'contentActionsPosition': [{ type: Input },],\n'contextMenuActions': [{ type: Input },],\n'emptyFolderImageUrl': [{ type: Input },],\n'allowDropFiles': [{ type: Input },],\n'sorting': [{ type: Input },],\n'rowStyle': [{ type: Input },],\n'rowStyleClass': [{ type: Input },],\n'loading': [{ type: Input },],\n'rowFilter': [{ type: Input },],\n'imageResolver': [{ type: Input },],\n'currentFolderId': [{ type: Input },],\n'folderNode': [{ type: Input },],\n'node': [{ type: Input },],\n'maxItems': [{ type: Input },],\n'skipCount': [{ type: Input },],\n'enableInfiniteScrolling': [{ type: Input },],\n'nodeClick': [{ type: Output },],\n'nodeDblClick': [{ type: Output },],\n'folderChange': [{ type: Output },],\n'preview': [{ type: Output },],\n'ready': [{ type: Output },],\n'error': [{ type: Output },],\n'dataTable': [{ type: ViewChild, args: [DataTableComponent, ] },],\n'onShowContextMenu': [{ type: HostListener, args: ['contextmenu', ['$event'], ] },],\n};\n}\n\nfunction DocumentListComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nDocumentListComponent.SINGLE_CLICK_NAVIGATION;\n/** @type {?} */\nDocumentListComponent.DOUBLE_CLICK_NAVIGATION;\n/** @type {?} */\nDocumentListComponent.DEFAULT_PAGE_SIZE;\n/** @type {?} */\nDocumentListComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDocumentListComponent.ctorParameters;\n/** @type {?} */\nDocumentListComponent.propDecorators;\n/** @type {?} */\nDocumentListComponent.prototype.columnList;\n/** @type {?} */\nDocumentListComponent.prototype.permissionsStyle;\n/** @type {?} */\nDocumentListComponent.prototype.locationFormat;\n/** @type {?} */\nDocumentListComponent.prototype.navigate;\n/** @type {?} */\nDocumentListComponent.prototype.navigationMode;\n/** @type {?} */\nDocumentListComponent.prototype.thumbnails;\n/** @type {?} */\nDocumentListComponent.prototype.selectionMode;\n/** @type {?} */\nDocumentListComponent.prototype.multiselect;\n/** @type {?} */\nDocumentListComponent.prototype.contentActions;\n/** @type {?} */\nDocumentListComponent.prototype.contentActionsPosition;\n/** @type {?} */\nDocumentListComponent.prototype.contextMenuActions;\n/** @type {?} */\nDocumentListComponent.prototype.emptyFolderImageUrl;\n/** @type {?} */\nDocumentListComponent.prototype.allowDropFiles;\n/** @type {?} */\nDocumentListComponent.prototype.sorting;\n/** @type {?} */\nDocumentListComponent.prototype.rowStyle;\n/** @type {?} */\nDocumentListComponent.prototype.rowStyleClass;\n/** @type {?} */\nDocumentListComponent.prototype.loading;\n/** @type {?} */\nDocumentListComponent.prototype.rowFilter;\n/** @type {?} */\nDocumentListComponent.prototype.imageResolver;\n/** @type {?} */\nDocumentListComponent.prototype.currentFolderId;\n/** @type {?} */\nDocumentListComponent.prototype.folderNode;\n/** @type {?} */\nDocumentListComponent.prototype.node;\n/** @type {?} */\nDocumentListComponent.prototype.maxItems;\n/** @type {?} */\nDocumentListComponent.prototype.skipCount;\n/** @type {?} */\nDocumentListComponent.prototype.enableInfiniteScrolling;\n/** @type {?} */\nDocumentListComponent.prototype.nodeClick;\n/** @type {?} */\nDocumentListComponent.prototype.nodeDblClick;\n/** @type {?} */\nDocumentListComponent.prototype.folderChange;\n/** @type {?} */\nDocumentListComponent.prototype.preview;\n/** @type {?} */\nDocumentListComponent.prototype.ready;\n/** @type {?} */\nDocumentListComponent.prototype.error;\n/** @type {?} */\nDocumentListComponent.prototype.dataTable;\n/** @type {?} */\nDocumentListComponent.prototype.errorMessage;\n/** @type {?} */\nDocumentListComponent.prototype.actions;\n/** @type {?} */\nDocumentListComponent.prototype.emptyFolderTemplate;\n/** @type {?} */\nDocumentListComponent.prototype.noPermissionTemplate;\n/** @type {?} */\nDocumentListComponent.prototype.contextActionHandler;\n/** @type {?} */\nDocumentListComponent.prototype.data;\n/** @type {?} */\nDocumentListComponent.prototype.infiniteLoading;\n/** @type {?} */\nDocumentListComponent.prototype.noPermission;\n/** @type {?} */\nDocumentListComponent.prototype.selection;\n/** @type {?} */\nDocumentListComponent.prototype.pagination;\n/** @type {?} */\nDocumentListComponent.prototype.layoutPresets;\n/** @type {?} */\nDocumentListComponent.prototype.currentNodeAllowableOperations;\n/** @type {?} */\nDocumentListComponent.prototype.CREATE_PERMISSION;\n/** @type {?} */\nDocumentListComponent.prototype.contextActionHandlerSubscription;\n/** @type {?} */\nDocumentListComponent.prototype.documentListService;\n/** @type {?} */\nDocumentListComponent.prototype.ngZone;\n/** @type {?} */\nDocumentListComponent.prototype.elementRef;\n/** @type {?} */\nDocumentListComponent.prototype.apiService;\n/** @type {?} */\nDocumentListComponent.prototype.appConfig;\n/** @type {?} */\nDocumentListComponent.prototype.preferences;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { DataColumn, DataRow, DataSorting, DataTableAdapter } from '@alfresco/adf-core';\nimport { TimeAgoPipe } from '@alfresco/adf-core';\nimport { DatePipe } from '@angular/common';\nimport { NodePaging } from 'alfresco-js-api';\nimport { PermissionStyleModel } from './../models/permissions-style.model';\nimport { DocumentListService } from './../services/document-list.service';\nimport { ShareDataRow } from './share-data-row.model';\nexport class ShareDataTableAdapter implements DataTableAdapter {\n\n    ERR_ROW_NOT_FOUND: string = 'Row not found';\n    ERR_COL_NOT_FOUND: string = 'Column not found';\nprivate sorting: DataSorting;\nprivate rows: DataRow[];\nprivate columns: DataColumn[];\nprivate filter: any;\nprivate imageResolver: any;\n\n    thumbnails: boolean = false;\n    permissionsStyle: PermissionStyleModel[];\n    selectedRow: DataRow;\n/**\n * @param {?} documentListService\n * @param {?=} schema\n * @param {?=} sorting\n */\nconstructor(private documentListService: DocumentListService,\n                schema: DataColumn[] = [],\n                sorting?: DataSorting) {\n        this.rows = [];\n        this.columns = schema || [];\n        this.sorting = sorting;\n    }\n/**\n * @return {?}\n */\ngetRows(): Array<DataRow> {\n        return this.rows;\n    }\n/**\n * @param {?} rows\n * @return {?}\n */\nsetRows(rows: Array<DataRow>) {\n        this.rows = rows || [];\n        this.sort();\n    }\n/**\n * @return {?}\n */\ngetColumns(): Array<DataColumn> {\n        return this.columns;\n    }\n/**\n * @param {?} columns\n * @return {?}\n */\nsetColumns(columns: Array<DataColumn>) {\n        this.columns = columns || [];\n    }\n/**\n * @param {?} row\n * @param {?} col\n * @return {?}\n */\ngetValue(row: DataRow, col: DataColumn): any {\n        if (!row) {\n            throw new Error(this.ERR_ROW_NOT_FOUND);\n        }\n        if (!col) {\n            throw new Error(this.ERR_COL_NOT_FOUND);\n        }\n        let /** @type {?} */ dataRow: ShareDataRow = /** @type {?} */(( <ShareDataRow> row));\n        let /** @type {?} */ value: any = row.getValue(col.key);\n        if (dataRow.cache[col.key] !== undefined) {\n            return dataRow.cache[col.key];\n        }\n\n        if (col.type === 'date') {\n            try {\n                const /** @type {?} */ result = this.formatDate(col, value);\n                return dataRow.cacheValue(col.key, result);\n            } catch ( /** @type {?} */err) {\n                console.error(`Error parsing date ${value} to format ${col.format}`);\n                return 'Error';\n            }\n        }\n\n        if (col.key === '$thumbnail') {\n\n            if (this.imageResolver) {\n                let /** @type {?} */ resolved = this.imageResolver(row, col);\n                if (resolved) {\n                    return resolved;\n                }\n            }\n\n            const /** @type {?} */ node = ( /** @type {?} */((<ShareDataRow> row))).node;\n\n            if (node.entry.isFolder) {\n                return this.documentListService.getMimeTypeIcon('folder');\n            }\n\n            if (node.entry.isFile) {\n                if (this.thumbnails) {\n                    return this.documentListService.getDocumentThumbnailUrl(node);\n                }\n            }\n\n            if (node.entry.content) {\n                const /** @type {?} */ mimeType = node.entry.content.mimeType;\n                if (mimeType) {\n                    return this.documentListService.getMimeTypeIcon(mimeType);\n                }\n            }\n\n            return this.documentListService.getDefaultMimeTypeIcon();\n        }\n\n        if (col.type === 'image') {\n\n            if (this.imageResolver) {\n                let /** @type {?} */ resolved = this.imageResolver(row, col);\n                if (resolved) {\n                    return resolved;\n                }\n            }\n        }\n\n        return dataRow.cacheValue(col.key, value);\n    }\n/**\n * @param {?} col\n * @param {?} value\n * @return {?}\n */\nformatDate(col: DataColumn, value: any): string {\n        if (col.type === 'date') {\n            const /** @type {?} */ format = col.format || 'medium';\n            if (format === 'timeAgo') {\n                const /** @type {?} */ timeAgoPipe = new TimeAgoPipe();\n                return timeAgoPipe.transform(value);\n            } else {\n                const /** @type {?} */ datePipe = new DatePipe('en-US');\n                return datePipe.transform(value, format);\n            }\n        }\n\n        return value;\n    }\n/**\n * @return {?}\n */\ngetSorting(): DataSorting {\n        return this.sorting;\n    }\n/**\n * @param {?} sorting\n * @return {?}\n */\nsetSorting(sorting: DataSorting): void {\n        this.sorting = sorting;\n\n        this.sortRows(this.rows, this.sorting);\n    }\n/**\n * @param {?=} key\n * @param {?=} direction\n * @return {?}\n */\nsort(key?: string, direction?: string): void {\n        let /** @type {?} */ sorting = this.sorting || new DataSorting();\n        if (key) {\n            sorting.key = key;\n            sorting.direction = direction || 'asc';\n        }\n        this.setSorting(sorting);\n    }\n/**\n * @param {?} filter\n * @return {?}\n */\nsetFilter(filter: any) {\n        this.filter = filter;\n    }\n/**\n * @param {?} resolver\n * @return {?}\n */\nsetImageResolver(resolver: any) {\n        this.imageResolver = resolver;\n    }\n/**\n * @param {?} rows\n * @param {?} sorting\n * @return {?}\n */\nprivate sortRows(rows: DataRow[], sorting: DataSorting) {\n        const /** @type {?} */ options: Intl.CollatorOptions = {};\n\n        if (sorting && sorting.key && rows && rows.length > 0) {\n\n            if (sorting.key.includes('sizeInBytes') || sorting.key === 'name') {\n                options.numeric = true;\n            }\n\n            rows.sort((a: ShareDataRow, b: ShareDataRow) => {\n                if (a.node.entry.isFolder !== b.node.entry.isFolder) {\n                    return a.node.entry.isFolder ? -1 : 1;\n                }\n\n                let /** @type {?} */ left = a.getValue(sorting.key);\n                if (left) {\n                    left = (left instanceof Date) ? left.valueOf().toString() : left.toString();\n                } else {\n                    left = '';\n                }\n\n                let /** @type {?} */ right = b.getValue(sorting.key);\n                if (right) {\n                    right = (right instanceof Date) ? right.valueOf().toString() : right.toString();\n                } else {\n                    right = '';\n                }\n\n                return sorting.direction === 'asc'\n                    ? left.localeCompare(right, undefined, options)\n                    : right.localeCompare(left, undefined, options);\n            });\n        }\n    }\n/**\n * @param {?} page\n * @param {?=} merge\n * @return {?}\n */\npublic loadPage(page: NodePaging, merge: boolean = false) {\n        let /** @type {?} */ rows = [];\n\n        if (page && page.list) {\n            let /** @type {?} */ data = page.list.entries;\n            if (data && data.length > 0) {\n                rows = data.map(item => new ShareDataRow(item, this.documentListService, this.permissionsStyle));\n\n                if (this.filter) {\n                    rows = rows.filter(this.filter);\n                }\n\n                // Sort by first sortable or just first column\n                if (this.columns && this.columns.length > 0) {\n                    let /** @type {?} */ sorting = this.getSorting();\n                    if (sorting) {\n                        this.sortRows(rows, sorting);\n                    } else {\n                        let /** @type {?} */ sortable = this.columns.filter(c => c.sortable);\n                        if (sortable.length > 0) {\n                            this.sort(sortable[0].key, 'asc');\n                        } else {\n                            this.sort(this.columns[0].key, 'asc');\n                        }\n                    }\n                }\n            }\n        }\n\n        if (merge) {\n            this.rows = this.rows.concat(rows);\n        } else {\n            this.rows = rows;\n        }\n    }\n}\n\nfunction ShareDataTableAdapter_tsickle_Closure_declarations() {\n/** @type {?} */\nShareDataTableAdapter.prototype.ERR_ROW_NOT_FOUND;\n/** @type {?} */\nShareDataTableAdapter.prototype.ERR_COL_NOT_FOUND;\n/** @type {?} */\nShareDataTableAdapter.prototype.sorting;\n/** @type {?} */\nShareDataTableAdapter.prototype.rows;\n/** @type {?} */\nShareDataTableAdapter.prototype.columns;\n/** @type {?} */\nShareDataTableAdapter.prototype.filter;\n/** @type {?} */\nShareDataTableAdapter.prototype.imageResolver;\n/** @type {?} */\nShareDataTableAdapter.prototype.thumbnails;\n/** @type {?} */\nShareDataTableAdapter.prototype.permissionsStyle;\n/** @type {?} */\nShareDataTableAdapter.prototype.selectedRow;\n/** @type {?} */\nShareDataTableAdapter.prototype.documentListService;\n}\n\n","\nexport class ContentActionModel {\n    icon: string;\n    title: string;\n    handler: ContentActionHandler;\n    execute: Function;\n    target: string;\n    permission: string;\n    disableWithNoPermission: boolean = false;\n    disabled: boolean = false;\n/**\n * @param {?=} obj\n */\nconstructor(obj?: any) {\n        if (obj) {\n            this.icon = obj.icon;\n            this.title = obj.title;\n            this.handler = obj.handler;\n            this.execute = obj.execute;\n            this.target = obj.target;\n            this.permission = obj.permission;\n            this.disableWithNoPermission = obj.disableWithNoPermission;\n            this.disabled = obj.disabled;\n        }\n    }\n}\n\nfunction ContentActionModel_tsickle_Closure_declarations() {\n/** @type {?} */\nContentActionModel.prototype.icon;\n/** @type {?} */\nContentActionModel.prototype.title;\n/** @type {?} */\nContentActionModel.prototype.handler;\n/** @type {?} */\nContentActionModel.prototype.execute;\n/** @type {?} */\nContentActionModel.prototype.target;\n/** @type {?} */\nContentActionModel.prototype.permission;\n/** @type {?} */\nContentActionModel.prototype.disableWithNoPermission;\n/** @type {?} */\nContentActionModel.prototype.disabled;\n}\n\n\nexport type ContentActionHandler = (obj: any, target?: any, permission?: string) => any;\nexport class DocumentActionModel extends ContentActionModel {\n/**\n * @param {?=} json\n */\nconstructor(json?: any)  {\n        super(json);\n        this.target = 'document';\n    }\n}\nexport class FolderActionModel extends  ContentActionModel {\n/**\n * @param {?=} json\n */\nconstructor(json?: any)  {\n        super(json);\n        this.target = 'folder';\n    }\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { AlfrescoApiService, AuthenticationService, ContentService, LogService, PermissionsEnum, ThumbnailService } from '@alfresco/adf-core';\nimport { Injectable } from '@angular/core';\nimport { Response } from '@angular/http';\nimport { MinimalNodeEntity, MinimalNodeEntryEntity, NodePaging } from 'alfresco-js-api';\nimport { Observable } from 'rxjs/Observable';\nimport'rxjs/add/observable/throw';\nexport class DocumentListService {\n\n    static ROOT_ID = '-root-';\n/**\n * @param {?} authService\n * @param {?} contentService\n * @param {?} apiService\n * @param {?} logService\n * @param {?} thumbnailService\n */\nconstructor(authService: AuthenticationService,\nprivate contentService: ContentService,\nprivate apiService: AlfrescoApiService,\nprivate logService: LogService,\nprivate thumbnailService: ThumbnailService) {\n    }\n/**\n * @param {?} folder\n * @param {?=} opts\n * @return {?}\n */\nprivate getNodesPromise(folder: string, opts?: any): Promise<NodePaging> {\n\n        let /** @type {?} */ rootNodeId = DocumentListService.ROOT_ID;\n        if (opts && opts.rootFolderId) {\n            rootNodeId = opts.rootFolderId;\n        }\n\n        let /** @type {?} */ params: any = {\n            includeSource: true,\n            include: ['path', 'properties', 'allowableOperations']\n        };\n\n        if (folder) {\n            params.relativePath = folder;\n        }\n\n        if (opts) {\n            if (opts.maxItems) {\n                params.maxItems = opts.maxItems;\n            }\n            if (opts.skipCount) {\n                params.skipCount = opts.skipCount;\n            }\n        }\n\n        return this.apiService.getInstance().nodes.getNodeChildren(rootNodeId, params);\n    }\n/**\n * @param {?} nodeId\n * @return {?}\n */\ndeleteNode(nodeId: string): Observable<any> {\n        return Observable.fromPromise(this.apiService.getInstance().nodes.deleteNode(nodeId));\n    }\n/**\n * Copy a node to destination node\n * \n * @param {?} nodeId The id of the node to be copied\n * @param {?} targetParentId The id of the folder-node where the node have to be copied to\n * @return {?}\n */\ncopyNode(nodeId: string, targetParentId: string) {\n        return Observable.fromPromise(this.apiService.getInstance().nodes.copyNode(nodeId, { targetParentId }))\n            .catch(err => this.handleError(err));\n    }\n/**\n * Move a node to destination node\n * \n * @param {?} nodeId The id of the node to be moved\n * @param {?} targetParentId The id of the folder-node where the node have to be moved to\n * @return {?}\n */\nmoveNode(nodeId: string, targetParentId: string) {\n        return Observable.fromPromise(this.apiService.getInstance().nodes.moveNode(nodeId, { targetParentId }))\n            .catch(err => this.handleError(err));\n    }\n/**\n * Create a new folder in the path.\n * @param {?} name Folder name\n * @param {?} parentId Parent folder ID\n * @return {?}\n */\ncreateFolder(name: string, parentId: string): Observable<MinimalNodeEntity> {\n        return Observable.fromPromise(this.apiService.getInstance().nodes.createFolder(name, '/', parentId))\n            .catch(err => this.handleError(err));\n    }\n/**\n * Gets the folder node with the specified relative name path below the root node.\n * @param {?} folder Path to folder.\n * @param {?=} opts Options.\n * @return {?}\n */\ngetFolder(folder: string, opts?: any) {\n        return Observable.fromPromise(this.getNodesPromise(folder, opts))\n            .map(res => /** @type {?} */(( <NodePaging> res)))\n            .catch(err => this.handleError(err));\n    }\n/**\n * @param {?} nodeId\n * @return {?}\n */\ngetFolderNode(nodeId: string): Promise<MinimalNodeEntryEntity> {\n        let /** @type {?} */ opts: any = {\n            includeSource: true,\n            include: ['path', 'properties', 'allowableOperations']\n        };\n\n        let /** @type {?} */ nodes: any = this.apiService.getInstance().nodes;\n        return nodes.getNodeInfo(nodeId, opts);\n    }\n/**\n * Get thumbnail URL for the given document node.\n * @param {?} node Node to get URL for.\n * @return {?}\n */\ngetDocumentThumbnailUrl(node: MinimalNodeEntity) {\n        return this.thumbnailService.getDocumentThumbnailUrl(node);\n    }\n/**\n * @param {?} mimeType\n * @return {?}\n */\ngetMimeTypeIcon(mimeType: string): string {\n        return this.thumbnailService.getMimeTypeIcon(mimeType);\n    }\n/**\n * @return {?}\n */\ngetDefaultMimeTypeIcon(): string {\n        return this.thumbnailService.getDefaultMimeTypeIcon();\n    }\n/**\n * @param {?} node\n * @param {?} permission\n * @return {?}\n */\nhasPermission(node: any, permission: PermissionsEnum|string): boolean {\n        return this.contentService.hasPermission(node, permission);\n    }\n/**\n * @param {?} error\n * @return {?}\n */\nprivate handleError(error: Response) {\n        // in a real world app, we may send the error to some remote logging infrastructure\n        // instead of just logging it to the console\n        this.logService.error(error);\n        return Observable.throw(error || 'Server error');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: AuthenticationService, },\n{type: ContentService, },\n{type: AlfrescoApiService, },\n{type: LogService, },\n{type: ThumbnailService, },\n];\n}\n\nfunction DocumentListService_tsickle_Closure_declarations() {\n/** @type {?} */\nDocumentListService.ROOT_ID;\n/** @type {?} */\nDocumentListService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDocumentListService.ctorParameters;\n/** @type {?} */\nDocumentListService.prototype.contentService;\n/** @type {?} */\nDocumentListService.prototype.apiService;\n/** @type {?} */\nDocumentListService.prototype.logService;\n/** @type {?} */\nDocumentListService.prototype.thumbnailService;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport let /** @type {?} */ presetsDefaultModel = {\n    '-trashcan-': [\n        {\n            key: '$thumbnail',\n            type: 'image',\n            srTitle: 'ADF-DOCUMENT-LIST.LAYOUT.THUMBNAIL',\n            sortable: false\n        },\n        {\n            key: 'name',\n            type: 'text',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.NAME',\n            cssClass: 'full-width ellipsis-cell',\n            sortable: true\n        },\n        {\n            key: 'path',\n            type: 'location',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.LOCATION',\n            sortable: true\n        },\n        {\n            key: 'content.sizeInBytes',\n            type: 'fileSize',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.SIZE',\n            sortable: true\n        },\n        {\n            key: 'archivedAt',\n            type: 'date',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.DELETED_ON',\n            format: 'timeAgo',\n            sortable: true\n        },\n        {\n            key: 'archivedByUser.displayName',\n            type: 'text',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.DELETED_BY',\n            sortable: true\n        }\n    ],\n    '-sites-': [\n        {\n            key: '$thumbnail',\n            type: 'image',\n            srTitle: 'ADF-DOCUMENT-LIST.LAYOUT.THUMBNAIL',\n            sortable: false\n        },\n        {\n            key: 'title',\n            type: 'text',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.NAME',\n            cssClass: 'full-width ellipsis-cell',\n            sortable: true\n        },\n        {\n            key: 'visibility',\n            type: 'text',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.STATUS',\n            sortable: true\n        }\n    ],\n    '-mysites-': [\n        {\n            key: '$thumbnail',\n            type: 'image',\n            srTitle: 'ADF-DOCUMENT-LIST.LAYOUT.THUMBNAIL',\n            sortable: false\n        },\n        {\n            key: 'title',\n            type: 'text',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.NAME',\n            cssClass: 'full-width ellipsis-cell',\n            sortable: true\n        },\n        {\n            key: 'visibility',\n            type: 'text',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.STATUS',\n            sortable: true\n        }\n    ],\n    '-favorites-': [\n        {\n            key: '$thumbnail',\n            type: 'image',\n            srTitle: 'ADF-DOCUMENT-LIST.LAYOUT.THUMBNAIL',\n            sortable: false\n        },\n        {\n            key: 'name',\n            type: 'text',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.NAME',\n            cssClass: 'full-width ellipsis-cell',\n            sortable: true\n        },\n        {\n            key: 'path',\n            type: 'location',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.LOCATION',\n            sortable: true\n        },\n        {\n            key: 'content.sizeInBytes',\n            type: 'fileSize',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.SIZE',\n            sortable: true\n        },\n        {\n            key: 'modifiedAt',\n            type: 'date',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.MODIFIED_ON',\n            format: 'timeAgo',\n            sortable: true\n        },\n        {\n            key: 'modifiedByUser.displayName',\n            type: 'text',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.MODIFIED_BY',\n            sortable: true\n        }\n    ],\n    '-recent-': [\n        {\n            key: '$thumbnail',\n            type: 'image',\n            srTitle: 'ADF-DOCUMENT-LIST.LAYOUT.THUMBNAIL',\n            sortable: false\n        },\n        {\n            key: 'name',\n            type: 'text',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.NAME',\n            cssClass: 'full-width ellipsis-cell',\n            sortable: true\n        },\n        {\n            key: 'path',\n            type: 'location',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.LOCATION',\n            cssClass: 'ellipsis-cell',\n            sortable: true\n        },\n        {\n            key: 'content.sizeInBytes',\n            type: 'fileSize',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.SIZE',\n            sortable: true\n        },\n        {\n            key: 'modifiedAt',\n            type: 'date',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.MODIFIED_ON',\n            format: 'timeAgo',\n            sortable: true\n        }\n    ],\n    '-sharedlinks-': [\n        {\n            key: '$thumbnail',\n            type: 'image',\n            srTitle: 'ADF-DOCUMENT-LIST.LAYOUT.THUMBNAIL',\n            sortable: false\n        },\n        {\n            key: 'name',\n            type: 'text',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.NAME',\n            cssClass: 'full-width ellipsis-cell',\n            sortable: true\n        },\n        {\n            key: 'path',\n            type: 'location',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.LOCATION',\n            cssClass: 'ellipsis-cell',\n            sortable: true\n        },\n        {\n            key: 'content.sizeInBytes',\n            type: 'fileSize',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.SIZE',\n            sortable: true\n        },\n        {\n            key: 'modifiedAt',\n            type: 'date',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.MODIFIED_ON',\n            format: 'timeAgo',\n            sortable: true\n        },\n        {\n            key: 'modifiedByUser.displayName',\n            type: 'text',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.MODIFIED_BY',\n            sortable: true\n        },\n        {\n            key: 'sharedByUser.displayName',\n            type: 'text',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.SHARED_BY',\n            sortable: true\n        }\n    ],\n    'default': [\n        {\n            key: '$thumbnail',\n            type: 'image',\n            srTitle: 'ADF-DOCUMENT-LIST.LAYOUT.THUMBNAIL',\n            sortable: false\n        },\n        {\n            key: 'name',\n            type: 'text',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.NAME',\n            cssClass: 'full-width ellipsis-cell',\n            sortable: true\n        },\n        {\n            key: 'content.sizeInBytes',\n            type: 'fileSize',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.SIZE',\n            sortable: true\n        },\n        {\n            key: 'modifiedAt',\n            type: 'date',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.MODIFIED_ON',\n            format: 'timeAgo',\n            sortable: true\n        },\n        {\n            key: 'modifiedByUser.displayName',\n            type: 'text',\n            title: 'ADF-DOCUMENT-LIST.LAYOUT.MODIFIED_BY',\n            sortable: true\n        }\n    ]\n};\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { DataRow } from '@alfresco/adf-core';\nimport { ObjectUtils } from '@alfresco/adf-core';\nimport { MinimalNode, MinimalNodeEntity } from 'alfresco-js-api';\nimport { PermissionStyleModel } from './../models/permissions-style.model';\nimport { DocumentListService } from './../services/document-list.service';\nexport class ShareDataRow implements DataRow {\n\n    static ERR_OBJECT_NOT_FOUND: string = 'Object source not found';\n\n    cache: { [key: string]: any } = {};\n    isSelected: boolean = false;\n    isDropTarget: boolean;\n    cssClass: string = '';\n/**\n * @return {?}\n */\nget node(): MinimalNodeEntity {\n        return this.obj;\n    }\n/**\n * @param {?} obj\n * @param {?} documentListService\n * @param {?} permissionsStyle\n */\nconstructor(private obj: MinimalNodeEntity,\nprivate documentListService: DocumentListService,\nprivate permissionsStyle: PermissionStyleModel[]) {\n        if (!obj) {\n            throw new Error(ShareDataRow.ERR_OBJECT_NOT_FOUND);\n        }\n\n        this.isDropTarget = this.isFolderAndHasPermissionToUpload(obj);\n\n        if (permissionsStyle) {\n            this.cssClass = this.getPermissionClass(obj);\n        }\n    }\n/**\n * @param {?} nodeEntity\n * @return {?}\n */\ngetPermissionClass(nodeEntity: MinimalNodeEntity): string {\n        let /** @type {?} */ permissionsClasses = '';\n\n        this.permissionsStyle.forEach((currentPermissionsStyle: PermissionStyleModel) => {\n\n            if (this.applyPermissionStyleToFolder(nodeEntity.entry, currentPermissionsStyle) || this.applyPermissionStyleToFile(nodeEntity.entry, currentPermissionsStyle)) {\n\n                if (this.documentListService.hasPermission(nodeEntity.entry, currentPermissionsStyle.permission)) {\n                    permissionsClasses += ` ${currentPermissionsStyle.css}`;\n                }\n            }\n\n        });\n\n        return permissionsClasses;\n    }\n/**\n * @param {?} node\n * @param {?} currentPermissionsStyle\n * @return {?}\n */\nprivate applyPermissionStyleToFile(node: MinimalNode, currentPermissionsStyle: PermissionStyleModel): boolean {\n        return (currentPermissionsStyle.isFile && node.isFile);\n    }\n/**\n * @param {?} node\n * @param {?} currentPermissionsStyle\n * @return {?}\n */\nprivate applyPermissionStyleToFolder(node: MinimalNode, currentPermissionsStyle: PermissionStyleModel): boolean {\n        return (currentPermissionsStyle.isFolder && node.isFolder);\n    }\n/**\n * @param {?} obj\n * @return {?}\n */\nisFolderAndHasPermissionToUpload(obj: MinimalNodeEntity): boolean {\n        return this.isFolder(obj) && this.documentListService.hasPermission(obj.entry, 'create');\n    }\n/**\n * @param {?} obj\n * @return {?}\n */\nisFolder(obj: MinimalNodeEntity): boolean {\n        return obj.entry && obj.entry.isFolder;\n    }\n/**\n * @param {?} key\n * @param {?} value\n * @return {?}\n */\ncacheValue(key: string, value: any): any {\n        this.cache[key] = value;\n        return value;\n    }\n/**\n * @param {?} key\n * @return {?}\n */\ngetValue(key: string): any {\n        if (this.cache[key] !== undefined) {\n            return this.cache[key];\n        }\n        return ObjectUtils.getValue(this.obj.entry, key);\n    }\n/**\n * @param {?} key\n * @return {?}\n */\nhasValue(key: string): boolean {\n        return this.getValue(key) !== undefined;\n    }\n}\n\nfunction ShareDataRow_tsickle_Closure_declarations() {\n/** @type {?} */\nShareDataRow.ERR_OBJECT_NOT_FOUND;\n/** @type {?} */\nShareDataRow.prototype.cache;\n/** @type {?} */\nShareDataRow.prototype.isSelected;\n/** @type {?} */\nShareDataRow.prototype.isDropTarget;\n/** @type {?} */\nShareDataRow.prototype.cssClass;\n/** @type {?} */\nShareDataRow.prototype.obj;\n/** @type {?} */\nShareDataRow.prototype.documentListService;\n/** @type {?} */\nShareDataRow.prototype.permissionsStyle;\n}\n\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { TranslateModule } from '@ngx-translate/core';\n\nimport { MaterialModule } from '../material.module';\nimport { FileUploadingDialogComponent } from './components/file-uploading-dialog.component';\nimport { FileUploadingListRowComponent } from './components/file-uploading-list-row.component';\nimport { FileUploadingListComponent } from './components/file-uploading-list.component';\nimport { UploadButtonComponent } from './components/upload-button.component';\nimport { UploadDragAreaComponent } from './components/upload-drag-area.component';\n\nimport { PipeModule } from '@alfresco/adf-core';\nimport { FileDraggableDirective } from './directives/file-draggable.directive';\nexport class UploadModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [\n        CommonModule,\n        MaterialModule,\n        TranslateModule,\n        PipeModule\n    ],\n    declarations: [\n        FileDraggableDirective,\n        UploadDragAreaComponent,\n        UploadButtonComponent,\n        FileUploadingDialogComponent,\n        FileUploadingListComponent,\n        FileUploadingListRowComponent\n    ],\n    exports: [\n        FileDraggableDirective,\n        UploadDragAreaComponent,\n        UploadButtonComponent,\n        FileUploadingDialogComponent,\n        FileUploadingListComponent,\n        FileUploadingListRowComponent\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction UploadModule_tsickle_Closure_declarations() {\n/** @type {?} */\nUploadModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nUploadModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { FileUtils } from '@alfresco/adf-core';\nimport { Directive, ElementRef, EventEmitter, Input, NgZone, OnDestroy, OnInit, Output } from '@angular/core';\nexport class FileDraggableDirective implements OnInit, OnDestroy {\n\n    files: File [];\n\n    \n    enabled: boolean = true;\n\n    \n    filesDropped: EventEmitter<File[]> = new EventEmitter<File[]>();\n\n    \n    filesEntityDropped: EventEmitter<any> = new EventEmitter();\n\n    \n    folderEntityDropped: EventEmitter<any> = new EventEmitter();\nprivate cssClassName: string = 'file-draggable__input-focus';\nprivate element: HTMLElement;\n/**\n * @param {?} el\n * @param {?} ngZone\n */\nconstructor(el: ElementRef,\nprivate ngZone: NgZone) {\n        this.element = el.nativeElement;\n    }\n/**\n * @return {?}\n */\nngOnInit() {\n        this.ngZone.runOutsideAngular(() => {\n            this.element.addEventListener('dragenter', this.onDragEnter.bind(this));\n            this.element.addEventListener('dragover', this.onDragOver.bind(this));\n            this.element.addEventListener('dragleave', this.onDragLeave.bind(this));\n            this.element.addEventListener('drop', this.onDropFiles.bind(this));\n        });\n    }\n/**\n * @return {?}\n */\nngOnDestroy() {\n        this.element.removeEventListener('dragenter', this.onDragEnter);\n        this.element.removeEventListener('dragover', this.onDragOver);\n        this.element.removeEventListener('dragleave', this.onDragLeave);\n        this.element.removeEventListener('drop', this.onDropFiles);\n    }\n/**\n * Method called when files is dropped in the drag and drop area.\n * @param {?} event DOM event.\n * @return {?}\n */\nonDropFiles(event: any): void {\n        if (this.enabled && !event.defaultPrevented) {\n            this.preventDefault(event);\n\n            let /** @type {?} */ items = event.dataTransfer.items;\n            if (items) {\n                for (let /** @type {?} */ i = 0; i < items.length; i++) {\n                    if (typeof items[i].webkitGetAsEntry !== 'undefined') {\n                        let /** @type {?} */ item = items[i].webkitGetAsEntry();\n                        if (item) {\n                            if (item.isFile) {\n                                this.filesEntityDropped.emit(item);\n                            } else if (item.isDirectory) {\n                                this.folderEntityDropped.emit(item);\n                            }\n                        }\n                    } else {\n                        let /** @type {?} */ files = FileUtils.toFileArray(event.dataTransfer.files);\n                        this.filesDropped.emit(files);\n                    }\n                }\n            } else {\n                // safari or FF\n                let /** @type {?} */ files = FileUtils.toFileArray(event.dataTransfer.files);\n                this.filesDropped.emit(files);\n            }\n\n            this.element.classList.remove(this.cssClassName);\n        }\n    }\n/**\n * Change the style of the drag area when a file drag in.\n * \n * @param {?} event\n * @return {?}\n */\nonDragEnter(event: Event): void {\n        if (this.enabled && !event.defaultPrevented) {\n            this.preventDefault(event);\n            this.element.classList.add(this.cssClassName);\n        }\n    }\n/**\n * Change the style of the drag area when a file drag out.\n * \n * @param {?} event\n * @return {?}\n */\nonDragLeave(event: Event): void {\n        if (this.enabled && !event.defaultPrevented) {\n            this.preventDefault(event);\n            this.element.classList.remove(this.cssClassName);\n        }\n    }\n/**\n * Change the style of the drag area when a file is over the drag area.\n * \n * @param {?} event\n * @return {?}\n */\nonDragOver(event: Event): void {\n        if (this.enabled && !event.defaultPrevented) {\n            this.preventDefault(event);\n            this.element.classList.add(this.cssClassName);\n        }\n    }\n/**\n * Prevent default and stop propagation of the DOM event.\n * \n * @param {?} event\n * @return {?}\n */\npreventDefault(event: Event): void {\n        event.stopPropagation();\n        event.preventDefault();\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: '[file-draggable]'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: NgZone, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'enabled': [{ type: Input, args: ['file-draggable', ] },],\n'filesDropped': [{ type: Output },],\n'filesEntityDropped': [{ type: Output },],\n'folderEntityDropped': [{ type: Output },],\n};\n}\n\nfunction FileDraggableDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nFileDraggableDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFileDraggableDirective.ctorParameters;\n/** @type {?} */\nFileDraggableDirective.propDecorators;\n/** @type {?} */\nFileDraggableDirective.prototype.files;\n/** @type {?} */\nFileDraggableDirective.prototype.enabled;\n/** @type {?} */\nFileDraggableDirective.prototype.filesDropped;\n/** @type {?} */\nFileDraggableDirective.prototype.filesEntityDropped;\n/** @type {?} */\nFileDraggableDirective.prototype.folderEntityDropped;\n/** @type {?} */\nFileDraggableDirective.prototype.cssClassName;\n/** @type {?} */\nFileDraggableDirective.prototype.element;\n/** @type {?} */\nFileDraggableDirective.prototype.ngZone;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport {\n    EXTENDIBLE_COMPONENT,\n    FileInfo,\n    FileModel,\n    FileUtils,\n    NodePermissionSubject,\n    NotificationService,\n    TranslationService,\n    UploadService\n} from '@alfresco/adf-core';\nimport { Component, EventEmitter, forwardRef, Input, Output, ViewEncapsulation } from '@angular/core';\nexport class UploadDragAreaComponent implements NodePermissionSubject {\n\n    \n    disabled: boolean = false;\n\n    \n    versioning: boolean = false;\n\n    \n    parentId: string;\n\n    \n    success = new EventEmitter();\n/**\n * @param {?} uploadService\n * @param {?} translateService\n * @param {?} notificationService\n */\nconstructor(private uploadService: UploadService,\nprivate translateService: TranslationService,\nprivate notificationService: NotificationService) {\n    }\n/**\n * Method called when files are dropped in the drag area.\n * \n * @param {?} files\n * @return {?}\n */\nonFilesDropped(files: File[]): void {\n        if (!this.disabled && files.length) {\n            const /** @type {?} */ fileModels = files.map(file => new FileModel(file, {\n                newVersion: this.versioning,\n                path: '/',\n                parentId: this.parentId\n            }));\n            this.uploadService.addToQueue(...fileModels);\n            this.uploadService.uploadFilesInTheQueue(this.success);\n        }\n    }\n/**\n * Called when the file are dropped in the drag area\n * \n * @param {?} item - FileEntity\n * @return {?}\n */\nonFilesEntityDropped(item: any): void {\n        if (!this.disabled) {\n            item.file((file: File) => {\n                const /** @type {?} */ fileModel = new FileModel(file, {\n                    newVersion: this.versioning,\n                    parentId: this.parentId,\n                    path: item.fullPath.replace(item.name, '')\n                });\n                this.uploadService.addToQueue(fileModel);\n                this.uploadService.uploadFilesInTheQueue(this.success);\n            });\n        }\n    }\n/**\n * Called when a folder are dropped in the drag area\n * \n * @param {?} folder - name of the dropped folder\n * @return {?}\n */\nonFolderEntityDropped(folder: any): void {\n        if (!this.disabled && folder.isDirectory) {\n            FileUtils.flattern(folder).then(entries => {\n                let /** @type {?} */ files = entries.map(entry => {\n                    return new FileModel(entry.file, {\n                        newVersion: this.versioning,\n                        parentId: this.parentId,\n                        path: entry.relativeFolder\n                    });\n                });\n                this.uploadService.addToQueue(...files);\n                this.uploadService.uploadFilesInTheQueue(this.success);\n            });\n        }\n    }\n/**\n * Show undo notification bar.\n * \n * @param {?} latestFilesAdded\n * @return {?}\n */\nshowUndoNotificationBar(latestFilesAdded: FileModel[]) {\n        let /** @type {?} */ messageTranslate: any, /** @type {?} */ actionTranslate: any;\n        messageTranslate = this.translateService.get('FILE_UPLOAD.MESSAGES.PROGRESS');\n        actionTranslate = this.translateService.get('FILE_UPLOAD.ACTION.UNDO');\n\n        this.notificationService.openSnackMessageAction(messageTranslate.value, actionTranslate.value, 3000).onAction().subscribe(() => {\n            this.uploadService.cancelUpload(...latestFilesAdded);\n        });\n    }\n/**\n * Show the error inside Notification bar\n * \n * @param {?} errorMessage\n * @return {?}\n */\nshowErrorNotificationBar(errorMessage: string) {\n        this.notificationService.openSnackMessage(errorMessage, 3000);\n    }\n/**\n * Returns true or false considering the component options and node permissions\n * @return {?}\n */\nisDroppable(): boolean {\n        return !this.disabled;\n    }\n/**\n * Handles 'upload-files' events raised by child components.\n * \n * @param {?} event DOM event\n * @return {?}\n */\nonUploadFiles(event: CustomEvent) {\n        event.stopPropagation();\n        event.preventDefault();\n        let /** @type {?} */ isAllowed: boolean = this.hasCreatePermission(event.detail.data.obj.entry);\n        if (isAllowed) {\n            let /** @type {?} */ files: FileInfo[] = event.detail.files;\n            if (files && files.length > 0) {\n                let /** @type {?} */ parentId = this.parentId;\n                if (event.detail.data && event.detail.data.obj.entry.isFolder) {\n                    parentId = event.detail.data.obj.entry.id || this.parentId;\n                }\n                const /** @type {?} */ fileModels = files.map(fileInfo => new FileModel(fileInfo.file, {\n                    newVersion: this.versioning,\n                    path: fileInfo.relativeFolder,\n                    parentId: parentId\n                }));\n                this.uploadFiles(fileModels);\n            }\n        }\n    }\n/**\n * Does the actual file uploading and show the notification\n * \n * @param {?} files\n * @return {?}\n */\nprivate uploadFiles(files: FileModel[]): void {\n        if (files.length) {\n            this.uploadService.addToQueue(...files);\n            this.uploadService.uploadFilesInTheQueue(this.success);\n        }\n    }\n/**\n * Check if \"create\" permission is present on the given node\n * \n * @param {?} node\n * @return {?}\n */\nprivate hasCreatePermission(node: any): boolean {\n        let /** @type {?} */ isPermitted = false;\n        if (node && node['allowableOperations']) {\n            let /** @type {?} */ permFound = node['allowableOperations'].find(element => element === 'create');\n            isPermitted = permFound ? true : false;\n        }\n        return isPermitted;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'adf-upload-drag-area',\n    template: `\n      <div [file-draggable]=\"isDroppable()\" id=\"UploadBorder\" class=\"upload-border\"\n           (filesDropped)=\"onFilesDropped($event)\"\n           (filesEntityDropped)=\"onFilesEntityDropped($event)\"\n           (folderEntityDropped)=\"onFolderEntityDropped($event)\"\n           (upload-files)=\"onUploadFiles($event)\"\n           dropzone=\"\" webkitdropzone=\"*\" #droparea>\n          <ng-content></ng-content>\n      </div>\n    `,\n    styles: [`\n      .upload-border {\n          vertical-align: middle;\n          text-align: center;\n      }\n\n      .file-draggable__input-focus {\n          color: #2196F3;\n          border: 1px dashed #2196F3;\n      }\n    `],\n    viewProviders: [\n        { provide: EXTENDIBLE_COMPONENT, useExisting: forwardRef(() => UploadDragAreaComponent)}\n    ],\n    encapsulation: ViewEncapsulation.None\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: UploadService, },\n{type: TranslationService, },\n{type: NotificationService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'disabled': [{ type: Input },],\n'versioning': [{ type: Input },],\n'parentId': [{ type: Input },],\n'success': [{ type: Output },],\n};\n}\n\nfunction UploadDragAreaComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nUploadDragAreaComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nUploadDragAreaComponent.ctorParameters;\n/** @type {?} */\nUploadDragAreaComponent.propDecorators;\n/** @type {?} */\nUploadDragAreaComponent.prototype.disabled;\n/** @type {?} */\nUploadDragAreaComponent.prototype.versioning;\n/** @type {?} */\nUploadDragAreaComponent.prototype.parentId;\n/** @type {?} */\nUploadDragAreaComponent.prototype.success;\n/** @type {?} */\nUploadDragAreaComponent.prototype.uploadService;\n/** @type {?} */\nUploadDragAreaComponent.prototype.translateService;\n/** @type {?} */\nUploadDragAreaComponent.prototype.notificationService;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { FileModel, FileUploadStatus } from '@alfresco/adf-core';\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\nexport class FileUploadingListRowComponent {\n    \n    file: FileModel;\n\n    \n    cancel: EventEmitter<FileModel> = new EventEmitter<FileModel>();\n\n    \n    remove: EventEmitter<FileModel> = new EventEmitter<FileModel>();\n\n    FileUploadStatus = FileUploadStatus;\n/**\n * @param {?} file\n * @return {?}\n */\nonCancel(file: FileModel): void {\n        this.cancel.emit(file);\n    }\n/**\n * @param {?} file\n * @return {?}\n */\nonRemove(file: FileModel): void {\n        this.remove.emit(file);\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'adf-file-uploading-list-row',\n    template: `\n      <div class=\"adf-file-uploading-row\">\n          <mat-icon\n              mat-list-icon\n              class=\"adf-file-uploading-row__type\">\n              insert_drive_file\n          </mat-icon>\n\n          <span\n              class=\"adf-file-uploading-row__name\"\n              title=\"{{ file.name }}\">\n              {{ file.name }}\n          </span>\n\n          <div\n              *ngIf=\"file.status === FileUploadStatus.Progress || file.status === FileUploadStatus.Starting\"\n              (click)=\"onCancel(file)\"\n              class=\"adf-file-uploading-row__group adf-file-uploading-row__group--toggle\"\n              title=\"{{ 'ADF_FILE_UPLOAD.BUTTON.CANCEL_FILE' | translate }}\">\n              <span class=\"adf-file-uploading-row__status\">\n                  {{ file.progress.loaded | adfFileSize }} / {{ file.progress.total | adfFileSize }}\n              </span>\n\n              <mat-icon\n                  mat-list-icon\n                  class=\"adf-file-uploading-row__action adf-file-uploading-row__action--cancel\">\n                  clear\n              </mat-icon>\n          </div>\n\n          <div\n              *ngIf=\"file.status === FileUploadStatus.Complete\"\n              (click)=\"onRemove(file)\"\n              class=\"adf-file-uploading-row__group adf-file-uploading-row__group--toggle\"\n              title=\"{{ 'ADF_FILE_UPLOAD.BUTTON.REMOVE_FILE' | translate }}\">\n              <mat-icon\n                  mat-list-icon\n                  class=\"adf-file-uploading-row__status adf-file-uploading-row__status--done\">\n                  check_circle\n              </mat-icon>\n\n              <mat-icon\n                  mat-list-icon\n                  class=\"adf-file-uploading-row__action adf-file-uploading-row__action--remove\">\n                  remove_circle\n              </mat-icon>\n          </div>\n\n          <div\n              *ngIf=\"file.status === FileUploadStatus.Pending\"\n              (click)=\"onCancel(file)\"\n              class=\"adf-file-uploading-row__group adf-file-uploading-row__group--toggle\">\n              <mat-icon\n                  mat-list-icon\n                  class=\"adf-file-uploading-row__status adf-file-uploading-row__status--pending\">\n                  schedule\n              </mat-icon>\n\n              <mat-icon\n                  mat-list-icon\n                  class=\"adf-file-uploading-row__action adf-file-uploading-row__action--remove\">\n                  remove_circle\n              </mat-icon>\n          </div>\n\n          <div\n              *ngIf=\"file.status === FileUploadStatus.Error\"\n              class=\"adf-file-uploading-row__block adf-file-uploading-row__status--error\"\n              title=\"{{ file.response }}\">\n              <mat-icon mat-list-icon>\n                  report_problem\n              </mat-icon>\n          </div>\n\n          <div\n              *ngIf=\"file.status === FileUploadStatus.Cancelled  ||\n                  file.status === FileUploadStatus.Aborted ||\n                  file.status === FileUploadStatus.Deleted\"\n              class=\"adf-file-uploading-row__block adf-file-uploading-row__status--cancelled\">\n              {{ 'ADF_FILE_UPLOAD.STATUS.FILE_CANCELED_STATUS' | translate }}\n          </div>\n      <div>\n    `,\n    styles: [`\n\n    `]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'file': [{ type: Input },],\n'cancel': [{ type: Output },],\n'remove': [{ type: Output },],\n};\n}\n\nfunction FileUploadingListRowComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nFileUploadingListRowComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFileUploadingListRowComponent.ctorParameters;\n/** @type {?} */\nFileUploadingListRowComponent.propDecorators;\n/** @type {?} */\nFileUploadingListRowComponent.prototype.file;\n/** @type {?} */\nFileUploadingListRowComponent.prototype.cancel;\n/** @type {?} */\nFileUploadingListRowComponent.prototype.remove;\n/** @type {?} */\nFileUploadingListRowComponent.prototype.FileUploadStatus;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\nexport class PermissionModel {\n    type: string;\n    action: string;\n    permission: string;\n/**\n * @param {?=} obj\n */\nconstructor(obj?: any) {\n        if (obj) {\n            this.type = obj.type || null;\n            this.action = obj.action || null;\n            this.permission = obj.permission || null;\n        }\n    }\n}\n\nfunction PermissionModel_tsickle_Closure_declarations() {\n/** @type {?} */\nPermissionModel.prototype.type;\n/** @type {?} */\nPermissionModel.prototype.action;\n/** @type {?} */\nPermissionModel.prototype.permission;\n}\n\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport {\n    AlfrescoApiService,\n    EXTENDIBLE_COMPONENT,\n    FileModel,\n    FileUtils,\n    LogService,\n    NodePermissionSubject,\n    TranslationService,\n    UploadService\n} from '@alfresco/adf-core';\nimport {\n    Component,\n    EventEmitter,\n    forwardRef,\n    Input,\n    OnChanges,\n    OnInit,\n    Output,\n    SimpleChanges,\n    ViewEncapsulation\n} from '@angular/core';\nimport { MinimalNodeEntryEntity } from 'alfresco-js-api';\nimport { Observable } from 'rxjs/Observable';\nimport { Subject } from 'rxjs/Subject';\nimport { PermissionModel } from '../../document-list/models/permissions.model';\nimport'rxjs/add/observable/throw';\nexport class UploadButtonComponent implements OnInit, OnChanges, NodePermissionSubject {\n\n    \n    disabled: boolean = false;\n\n    \n    uploadFolders: boolean = false;\n\n    \n    multipleFiles: boolean = false;\n\n    \n    versioning: boolean = false;\n\n    \n    acceptedFilesType: string = '*';\n\n    \n    maxFilesSize: number;\n\n    \n    staticTitle: string;\n\n    \n    tooltip: string = null;\n\n    \n    rootFolderId: string = '-root-';\n\n    \n    success = new EventEmitter();\n\n    \n    error = new EventEmitter();\n\n    \n    createFolder = new EventEmitter();\n\n    \n    permissionEvent: EventEmitter<PermissionModel> = new EventEmitter<PermissionModel>();\nprivate hasPermission: boolean = false;\nprivate permissionValue: Subject<boolean> = new Subject<boolean>();\n/**\n * @param {?} uploadService\n * @param {?} translateService\n * @param {?} logService\n * @param {?} apiService\n */\nconstructor(private uploadService: UploadService,\nprivate translateService: TranslationService,\nprivate logService: LogService,\nprivate apiService: AlfrescoApiService) {\n    }\n/**\n * @return {?}\n */\nngOnInit() {\n        this.permissionValue.subscribe((permission: boolean) => {\n            this.hasPermission = permission;\n        });\n    }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n        let /** @type {?} */ rootFolderId = changes['rootFolderId'];\n        if (rootFolderId && rootFolderId.currentValue) {\n            this.checkPermission();\n        }\n    }\n/**\n * @return {?}\n */\nisButtonDisabled(): boolean {\n        return this.disabled ? true : undefined;\n    }\n/**\n * @param {?} $event\n * @return {?}\n */\nonFilesAdded($event: any): void {\n        let /** @type {?} */ files: File[] = FileUtils.toFileArray($event.currentTarget.files);\n\n        if (this.hasPermission) {\n            this.uploadFiles(files);\n        } else {\n            this.permissionEvent.emit(new PermissionModel({type: 'content', action: 'upload', permission: 'create'}));\n        }\n        // reset the value of the input file\n        $event.target.value = '';\n    }\n/**\n * @param {?} $event\n * @return {?}\n */\nonDirectoryAdded($event: any): void {\n        if (this.hasPermission) {\n            let /** @type {?} */ files: File[] = FileUtils.toFileArray($event.currentTarget.files);\n            this.uploadFiles(files);\n        } else {\n            this.permissionEvent.emit(new PermissionModel({type: 'content', action: 'upload', permission: 'create'}));\n        }\n        // reset the value of the input file\n        $event.target.value = '';\n    }\n/**\n * Upload a list of file in the specified path\n * @param {?} files\n * @return {?}\n */\nuploadFiles(files: File[]): void {\n        const /** @type {?} */ latestFilesAdded: FileModel[] = files\n            .map<FileModel>(this.createFileModel.bind(this))\n            .filter(this.isFileAcceptable.bind(this))\n            .filter(this.isFileSizeAcceptable.bind(this));\n\n        if (latestFilesAdded.length > 0) {\n            this.uploadService.addToQueue(...latestFilesAdded);\n            this.uploadService.uploadFilesInTheQueue(this.success);\n        }\n    }\n/**\n * Creates FileModel from File\n * \n * @param {?} file\n * @return {?}\n */\nprivate createFileModel(file: File): FileModel {\n        return new FileModel(file, {\n            newVersion: this.versioning,\n            parentId: this.rootFolderId,\n            path: (file.webkitRelativePath || '').replace(/\\/[^\\/]*$/, '')\n        });\n    }\n/**\n * Checks if the given file is allowed by the extension filters\n * \n * @param {?} file FileModel\n * @return {?}\n */\nprivate isFileAcceptable(file: FileModel): boolean {\n        if (this.acceptedFilesType === '*') {\n            return true;\n        }\n\n        const /** @type {?} */ allowedExtensions = this.acceptedFilesType\n            .split(',')\n            .map(ext => ext.replace(/^\\./, ''));\n\n        if (allowedExtensions.indexOf(file.extension) !== -1) {\n            return true;\n        }\n\n        return false;\n    }\n/**\n * Checks if the given file is an acceptable size\n * \n * @param {?} file FileModel\n * @return {?}\n */\nprivate isFileSizeAcceptable(file: FileModel): boolean {\n        let /** @type {?} */ acceptableSize = true;\n\n        if ((this.maxFilesSize !== undefined && this.maxFilesSize !== null ) && (this.maxFilesSize <= 0 || file.size > this.maxFilesSize)) {\n            acceptableSize = false;\n\n            this.translateService.get('FILE_UPLOAD.MESSAGES.EXCEED_MAX_FILE_SIZE', {fileName: file.name}).subscribe((message: string) => {\n                this.error.emit(message);\n            });\n        }\n\n        return acceptableSize;\n    }\n/**\n * @return {?}\n */\ncheckPermission() {\n        if (this.rootFolderId) {\n            this.getFolderNode(this.rootFolderId).subscribe(\n                res => this.permissionValue.next(this.hasCreatePermission(res)),\n                error => this.error.emit(error)\n            );\n        }\n    }\n/**\n * @param {?} nodeId\n * @return {?}\n */\ngetFolderNode(nodeId: string): Observable<MinimalNodeEntryEntity> {\n        let /** @type {?} */ opts: any = {\n            includeSource: true,\n            include: ['allowableOperations']\n        };\n\n        return Observable.fromPromise(this.apiService.getInstance().nodes.getNodeInfo(nodeId, opts))\n            .catch(err => this.handleError(err));\n    }\n/**\n * @param {?} error\n * @return {?}\n */\nprivate handleError(error: Response) {\n        // in a real world app, we may send the error to some remote logging infrastructure\n        // instead of just logging it to the console\n        this.logService.error(error);\n        return Observable.throw(error || 'Server error');\n    }\n/**\n * @param {?} node\n * @return {?}\n */\nprivate hasCreatePermission(node: any): boolean {\n        if (node && node.allowableOperations) {\n            return node.allowableOperations.find(permission => permission === 'create') ? true : false;\n        }\n        return false;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'adf-upload-button',\n    template: `\n      <form class=\"adf-upload-button-file-container\">\n          <!--Files Upload-->\n          <a *ngIf=\"!uploadFolders\"\n              [disabled]=\"isButtonDisabled()\"\n              mat-raised-button color=\"primary\">\n              <mat-icon>file_upload</mat-icon>\n\n              <!--Multiple Files Upload-->\n              <span *ngIf=\"multipleFiles\">\n                  <label\n                      id=\"upload-multiple-file-label\"\n                      *ngIf=\"!staticTitle\"\n                      for=\"upload-multiple-files\">{{ 'FILE_UPLOAD.BUTTON.UPLOAD_FILE' | translate }}</label>\n                  <label\n                      id=\"upload-multiple-file-label-static\"\n                      *ngIf=\"staticTitle\"\n                      for=\"upload-multiple-files\">{{ staticTitle }}</label>\n                  <input #uploadFiles\n                      id=\"upload-multiple-files\"\n                      data-automation-id=\"upload-multiple-files\"\n                      type=\"file\"\n                      name=\"uploadFiles\"\n                      multiple=\"multiple\"\n                      accept=\"{{acceptedFilesType}}\"\n                      [attr.disabled]=\"isButtonDisabled()\"\n                      [title]=\"tooltip\"\n                      (change)=\"onFilesAdded($event)\">\n              </span>\n\n              <!--Single Files Upload-->\n              <span *ngIf=\"!multipleFiles\">\n                  <label\n                      id=\"upload-single-file-label\"\n                      *ngIf=\"!staticTitle\"\n                      for=\"upload-single-file\">{{ 'FILE_UPLOAD.BUTTON.UPLOAD_FILE' | translate }}</label>\n                  <label\n                      id=\"upload-single-file-label-static\"\n                      *ngIf=\"staticTitle\"\n                      for=\"upload-single-file\">{{ staticTitle }}</label>\n                  <input #uploadFiles\n                      id=\"upload-single-file\"\n                      data-automation-id=\"upload-single-file\"\n                      type=\"file\"\n                      name=\"uploadFiles\"\n                      accept=\"{{acceptedFilesType}}\"\n                      [attr.disabled]=\"isButtonDisabled()\"\n                      [title]=\"tooltip\"\n                      (change)=\"onFilesAdded($event)\">\n              </span>\n          </a>\n\n          <!--Folders Upload-->\n          <a *ngIf=\"uploadFolders\"\n              [disabled]=\"isButtonDisabled()\" mat-raised-button color=\"primary\">\n              <mat-icon>file_upload</mat-icon>\n              <label\n                  id=\"uploadFolder-label\"\n                  *ngIf=\"!staticTitle\"\n                  for=\"uploadFolder\">{{ 'FILE_UPLOAD.BUTTON.UPLOAD_FOLDER' | translate }}</label>\n              <label\n                  id=\"uploadFolder-label-static\"\n                  *ngIf=\"staticTitle\"\n                  for=\"uploadFolder\">{{ staticTitle }}</label>\n              <input #uploadFolders\n                  id=\"uploadFolder\"\n                  data-automation-id=\"uploadFolder\"\n                  type=\"file\"\n                  name=\"uploadFiles\"\n                  multiple=\"multiple\"\n                  accept=\"{{acceptedFilesType}}\"\n                  webkitdirectory directory\n                  [attr.disabled]=\"isButtonDisabled()\"\n                  [title]=\"tooltip\"\n                  (change)=\"onDirectoryAdded($event)\">\n          </a>\n      </form>\n    `,\n    styles: [`\n      .adf-upload-button-file-container input {\n        cursor: pointer;\n        height: 100%;\n        right: 0;\n        opacity: 0;\n        position: absolute;\n        top: 0;\n        width: 300px;\n        z-index: 4; }\n    `],\n    viewProviders: [\n        { provide: EXTENDIBLE_COMPONENT, useExisting: forwardRef(() => UploadButtonComponent) }\n    ],\n    encapsulation: ViewEncapsulation.None\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: UploadService, },\n{type: TranslationService, },\n{type: LogService, },\n{type: AlfrescoApiService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'disabled': [{ type: Input },],\n'uploadFolders': [{ type: Input },],\n'multipleFiles': [{ type: Input },],\n'versioning': [{ type: Input },],\n'acceptedFilesType': [{ type: Input },],\n'maxFilesSize': [{ type: Input },],\n'staticTitle': [{ type: Input },],\n'tooltip': [{ type: Input },],\n'rootFolderId': [{ type: Input },],\n'success': [{ type: Output },],\n'error': [{ type: Output },],\n'createFolder': [{ type: Output },],\n'permissionEvent': [{ type: Output },],\n};\n}\n\nfunction UploadButtonComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nUploadButtonComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nUploadButtonComponent.ctorParameters;\n/** @type {?} */\nUploadButtonComponent.propDecorators;\n/** @type {?} */\nUploadButtonComponent.prototype.disabled;\n/** @type {?} */\nUploadButtonComponent.prototype.uploadFolders;\n/** @type {?} */\nUploadButtonComponent.prototype.multipleFiles;\n/** @type {?} */\nUploadButtonComponent.prototype.versioning;\n/** @type {?} */\nUploadButtonComponent.prototype.acceptedFilesType;\n/** @type {?} */\nUploadButtonComponent.prototype.maxFilesSize;\n/** @type {?} */\nUploadButtonComponent.prototype.staticTitle;\n/** @type {?} */\nUploadButtonComponent.prototype.tooltip;\n/** @type {?} */\nUploadButtonComponent.prototype.rootFolderId;\n/** @type {?} */\nUploadButtonComponent.prototype.success;\n/** @type {?} */\nUploadButtonComponent.prototype.error;\n/** @type {?} */\nUploadButtonComponent.prototype.createFolder;\n/** @type {?} */\nUploadButtonComponent.prototype.permissionEvent;\n/** @type {?} */\nUploadButtonComponent.prototype.hasPermission;\n/** @type {?} */\nUploadButtonComponent.prototype.permissionValue;\n/** @type {?} */\nUploadButtonComponent.prototype.uploadService;\n/** @type {?} */\nUploadButtonComponent.prototype.translateService;\n/** @type {?} */\nUploadButtonComponent.prototype.logService;\n/** @type {?} */\nUploadButtonComponent.prototype.apiService;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { FileModel, FileUploadCompleteEvent, FileUploadDeleteEvent,\n         FileUploadErrorEvent, FileUploadStatus, UploadService } from '@alfresco/adf-core';\nimport { ChangeDetectorRef, Component, Input, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { Subscription } from 'rxjs/Subscription';\nimport { FileUploadingListComponent } from './file-uploading-list.component';\nimport'rxjs/add/observable/merge';\nexport class FileUploadingDialogComponent implements OnInit, OnDestroy {\n    \n    uploadList: FileUploadingListComponent;\n\n    \n    position: string = 'right';\n\n    filesUploadingList: FileModel[] = [];\n    isDialogActive: boolean = false;\n    totalCompleted: number = 0;\n    totalErrors: number = 0;\n    isDialogMinimized: boolean = false;\n    isConfirmation: boolean = false;\nprivate listSubscription: Subscription;\nprivate counterSubscription: Subscription;\nprivate fileUploadSubscription: Subscription;\nprivate errorSubscription: Subscription;\n/**\n * @param {?} uploadService\n * @param {?} changeDetecor\n */\nconstructor(\nprivate uploadService: UploadService,\nprivate changeDetecor: ChangeDetectorRef) {}\n/**\n * @return {?}\n */\nngOnInit() {\n        this.listSubscription = this.uploadService\n            .queueChanged.subscribe((fileList: FileModel[]) => {\n                this.filesUploadingList = fileList;\n\n                if (this.filesUploadingList.length) {\n                    this.isDialogActive = true;\n                }\n        });\n\n        this.counterSubscription = Observable\n            .merge(\n                this.uploadService.fileUploadComplete,\n                this.uploadService.fileUploadDeleted\n            )\n            .subscribe((event: (FileUploadDeleteEvent|FileUploadCompleteEvent)) => {\n                this.totalCompleted = event.totalComplete;\n                this.changeDetecor.detectChanges();\n            });\n\n        this.errorSubscription = this.uploadService.fileUploadError\n            .subscribe((event: FileUploadErrorEvent) => {\n                this.totalErrors = event.totalError;\n                this.changeDetecor.detectChanges();\n            });\n\n        this.fileUploadSubscription = this.uploadService\n            .fileUpload.subscribe(() => {\n                this.changeDetecor.detectChanges();\n            });\n\n        this.uploadService.fileDeleted.subscribe((objId) => {\n            if (this.filesUploadingList) {\n                let /** @type {?} */ file = this.filesUploadingList.find((item) => {\n                    return item.data.entry.id === objId;\n                });\n                if (file) {\n                    file.status = FileUploadStatus.Cancelled;\n                    this.changeDetecor.detectChanges();\n                }\n            }\n        });\n    }\n/**\n * Toggle confirmation message.\n * @return {?}\n */\ntoggleConfirmation() {\n        this.isConfirmation = !this.isConfirmation;\n\n        if (this.isDialogMinimized) {\n            this.isDialogMinimized = false;\n        }\n    }\n/**\n * Cancel uploads and hide confiramtion\n * @return {?}\n */\ncancelAllUploads() {\n        this.toggleConfirmation();\n\n        this.uploadList.cancelAllFiles();\n    }\n/**\n * Toggle dialog minimized state.\n * @return {?}\n */\ntoggleMinimized(): void {\n        this.isDialogMinimized = !this.isDialogMinimized;\n        this.changeDetecor.detectChanges();\n    }\n/**\n * Dismiss dialog\n * @return {?}\n */\nclose(): void {\n        this.isConfirmation = false;\n        this.totalCompleted = 0;\n        this.totalErrors = 0;\n        this.filesUploadingList = [];\n        this.isDialogActive = false;\n        this.isDialogMinimized = false;\n        this.uploadService.clearQueue();\n        this.changeDetecor.detectChanges();\n    }\n/**\n * @return {?}\n */\nngOnDestroy() {\n        this.uploadService.clearQueue();\n        this.listSubscription.unsubscribe();\n        this.counterSubscription.unsubscribe();\n        this.fileUploadSubscription.unsubscribe();\n        this.errorSubscription.unsubscribe();\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'adf-file-uploading-dialog, file-uploading-dialog',\n    template: `\n      <div *ngIf=\"isDialogActive\"\n           class=\"upload-dialog\"\n           [class.upload-dialog--minimized]=\"isDialogMinimized\"\n           [class.upload-dialog--position-left]=\"position === 'left'\"\n           [class.upload-dialog--position-right]=\"position === 'right'\">\n          <header class=\"upload-dialog__header\">\n              <button\n                  mat-button\n                  color=\"secondary\"\n                  [disabled]=\"isConfirmation\"\n                  (click)=\"toggleMinimized()\">\n                  <mat-icon\n                      mat-list-icon\n                      title=\"{{ (isDialogMinimized ? 'ADF_FILE_UPLOAD.BUTTON.MAXIMIZE': 'ADF_FILE_UPLOAD.BUTTON.MINIMIZE') | translate }}\">\n                          {{ isDialogMinimized ? 'keyboard_arrow_up' : 'keyboard_arrow_down' }}\n                  </mat-icon>\n              </button>\n\n              <span\n                  class=\"upload-dialog__title\"\n                  *ngIf=\"!uploadList.isUploadCompleted() && !uploadList.isUploadCancelled()\">\n                  {{ 'FILE_UPLOAD.MESSAGES.UPLOAD_PROGRESS'\n                      | translate: {\n                          completed: totalCompleted,\n                          total: filesUploadingList.length\n                      }\n                  }}\n              </span>\n\n              <span\n                  class=\"upload-dialog__title\"\n                  *ngIf=\"uploadList.isUploadCompleted()\">\n                  {{ 'FILE_UPLOAD.MESSAGES.UPLOAD_COMPLETED'\n                      | translate: {\n                          completed: totalCompleted,\n                          total: filesUploadingList.length\n                      }\n                  }}\n              </span>\n\n              <span\n                  class=\"upload-dialog__title\"\n                  *ngIf=\"uploadList.isUploadCancelled()\">\n                  {{ 'FILE_UPLOAD.MESSAGES.UPLOAD_CANCELED' | translate }}\n              </span>\n          </header>\n\n          <section\n              class=\"upload-dialog__info\"\n              *ngIf=\"totalErrors\">\n              {{\n                  (totalErrors > 1\n                       ? 'FILE_UPLOAD.MESSAGES.UPLOAD_ERRORS'\n                       : 'FILE_UPLOAD.MESSAGES.UPLOAD_ERROR')\n                       | translate: { total: totalErrors }\n              }}\n          </section>\n\n          <section\n              class=\"upload-dialog__content\"\n              [class.upload-dialog--padding]=\"isConfirmation\">\n              <adf-file-uploading-list\n                  [class.upload-dialog--hide]=\"isConfirmation\"\n                  #uploadList\n                  [files]=\"filesUploadingList\">\n                      <ng-template let-file=\"$implicit\">\n                           <adf-file-uploading-list-row\n                              [file]=\"file\"\n                              (remove)=\"uploadList.removeFile(file)\"\n                              (cancel)=\"uploadList.cancelFile(file)\">\n                          </adf-file-uploading-list-row>\n                      </ng-template>\n              </adf-file-uploading-list>\n\n              <div\n                  class=\"upload-dialog__confirmation\"\n                  [class.upload-dialog--hide]=\"!isConfirmation\">\n                      <p class=\"upload-dialog__confirmation--title\">\n                          {{ 'ADF_FILE_UPLOAD.CONFIRMATION.MESSAGE.TITLE' | translate }}\n                      </p>\n\n                      <p class=\"upload-dialog__confirmation--text\">\n                          {{ 'ADF_FILE_UPLOAD.CONFIRMATION.MESSAGE.TEXT' | translate }}\n                      </p>\n              </div>\n          </section>\n\n          <footer\n              class=\"upload-dialog__actions\"\n              [class.upload-dialog--hide]=\"isConfirmation\">\n              <button\n                  color=\"primary\"\n                  mat-button\n                  *ngIf=\"!uploadList.isUploadCompleted() && !uploadList.isUploadCancelled()\"\n                  (click)=\"toggleConfirmation()\">\n                  {{ 'ADF_FILE_UPLOAD.BUTTON.CANCEL_ALL' | translate }}\n              </button>\n\n              <button\n                  *ngIf=\"uploadList.isUploadCompleted() || uploadList.isUploadCancelled()\"\n                  mat-button\n                  color=\"primary\"\n                  (click)=\"close($event)\">\n                  {{ 'ADF_FILE_UPLOAD.BUTTON.CLOSE' | translate }}\n              </button>\n          </footer>\n\n          <footer\n              class=\"upload-dialog__actions\"\n              [class.upload-dialog--hide]=\"!isConfirmation\">\n              <button\n                  color=\"secondary\"\n                  mat-button\n                  (click)=\"cancelAllUploads()\">\n                  {{ 'ADF_FILE_UPLOAD.CONFIRMATION.BUTTON.CANCEL' | translate }}\n              </button>\n\n              <button\n                  mat-button\n                  color=\"primary\"\n                  (click)=\"toggleConfirmation()\">\n                  {{ 'ADF_FILE_UPLOAD.CONFIRMATION.BUTTON.CONTINUE' | translate }}\n              </button>\n          </footer>\n      </div>\n    `,\n    styles: [`\n\n    `]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: UploadService, },\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'uploadList': [{ type: ViewChild, args: [FileUploadingListComponent, ] },],\n'position': [{ type: Input },],\n};\n}\n\nfunction FileUploadingDialogComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nFileUploadingDialogComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFileUploadingDialogComponent.ctorParameters;\n/** @type {?} */\nFileUploadingDialogComponent.propDecorators;\n/** @type {?} */\nFileUploadingDialogComponent.prototype.uploadList;\n/** @type {?} */\nFileUploadingDialogComponent.prototype.position;\n/** @type {?} */\nFileUploadingDialogComponent.prototype.filesUploadingList;\n/** @type {?} */\nFileUploadingDialogComponent.prototype.isDialogActive;\n/** @type {?} */\nFileUploadingDialogComponent.prototype.totalCompleted;\n/** @type {?} */\nFileUploadingDialogComponent.prototype.totalErrors;\n/** @type {?} */\nFileUploadingDialogComponent.prototype.isDialogMinimized;\n/** @type {?} */\nFileUploadingDialogComponent.prototype.isConfirmation;\n/** @type {?} */\nFileUploadingDialogComponent.prototype.listSubscription;\n/** @type {?} */\nFileUploadingDialogComponent.prototype.counterSubscription;\n/** @type {?} */\nFileUploadingDialogComponent.prototype.fileUploadSubscription;\n/** @type {?} */\nFileUploadingDialogComponent.prototype.errorSubscription;\n/** @type {?} */\nFileUploadingDialogComponent.prototype.uploadService;\n/** @type {?} */\nFileUploadingDialogComponent.prototype.changeDetecor;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { FileModel, FileUploadStatus, NodesApiService, NotificationService, TranslationService, UploadService } from '@alfresco/adf-core';\nimport { Component, ContentChild, Input, TemplateRef } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nexport class FileUploadingListComponent {\n\n    FileUploadStatus = FileUploadStatus;\n\n    \n    template: any;\n\n    \n    files: FileModel[] = [];\n/**\n * @param {?} uploadService\n * @param {?} nodesApi\n * @param {?} notificationService\n * @param {?} translateService\n */\nconstructor(\nprivate uploadService: UploadService,\nprivate nodesApi: NodesApiService,\nprivate notificationService: NotificationService,\nprivate translateService: TranslationService) {\n    }\n/**\n * Cancel file upload\n * \n * \n * \\@memberOf FileUploadingListComponent\n * @param {?} file\n * @return {?}\n */\ncancelFile(file: FileModel): void {\n        this.uploadService.cancelUpload(file);\n    }\n/**\n * @param {?} file\n * @return {?}\n */\nremoveFile(file: FileModel): void {\n        this.deleteNode(file)\n            .subscribe(() => {\n                if ( file.status === FileUploadStatus.Error) {\n                    this.notifyError(file);\n                }\n\n                this.uploadService.cancelUpload(file);\n            });\n    }\n/**\n * Call the appropriate method for each file, depending on state\n * @return {?}\n */\ncancelAllFiles(): void {\n        this.getUploadingFiles()\n            .forEach((file) => this.uploadService.cancelUpload(file));\n\n        const /** @type {?} */ deletedFiles = this.files\n            .filter((file) => file.status === FileUploadStatus.Complete)\n            .map((file) => this.deleteNode(file));\n\n        Observable.forkJoin(...deletedFiles)\n            .subscribe((files: FileModel[]) => {\n                const /** @type {?} */ errors = files\n                    .filter((file) => file.status === FileUploadStatus.Error);\n\n                if (errors.length) {\n                    this.notifyError(...errors);\n                }\n\n                this.uploadService.cancelUpload(...files);\n            });\n    }\n/**\n * Checks if all the files are uploaded\n * @return {?}\n */\nisUploadCompleted(): boolean {\n         return !this.isUploadCancelled() &&\n            Boolean(this.files.length) &&\n            !this.files\n                .some(({status}) =>\n                    status === FileUploadStatus.Starting ||\n                    status === FileUploadStatus.Progress ||\n                    status === FileUploadStatus.Pending\n                );\n    }\n/**\n * Check if all the files are Cancelled | Aborted | Error.\n * @return {?}\n */\nisUploadCancelled(): boolean {\n        return !!this.files.length &&\n            this.files\n                .every(({status}) =>\n                    status === FileUploadStatus.Aborted ||\n                    status === FileUploadStatus.Cancelled ||\n                    status === FileUploadStatus.Deleted\n                );\n    }\n/**\n * @param {?} file\n * @return {?}\n */\nprivate deleteNode(file: FileModel): Observable<FileModel> {\n        const { id } = file.data.entry;\n\n        return this.nodesApi\n            .deleteNode(id, { permanent: true })\n            .map(() => {\n                file.status = FileUploadStatus.Deleted;\n                return file;\n            })\n            .catch((error) => {\n                file.status = FileUploadStatus.Error;\n                return Observable.of(file);\n            });\n    }\n/**\n * @param {...?} files\n * @return {?}\n */\nprivate notifyError(...files: FileModel[]) {\n        let /** @type {?} */ translateSubscription = null;\n\n        if (files.length === 1) {\n            translateSubscription = this.translateService\n                .get(\n                    'FILE_UPLOAD.MESSAGES.REMOVE_FILE_ERROR',\n                    { fileName: files[0].name}\n                );\n        } else {\n            translateSubscription = this.translateService\n                .get(\n                    'FILE_UPLOAD.MESSAGES.REMOVE_FILES_ERROR',\n                    { total: files.length }\n                );\n        }\n\n        translateSubscription\n            .subscribe(message => this.notificationService.openSnackMessage(message, 4000));\n    }\n/**\n * @return {?}\n */\nprivate getUploadingFiles() {\n        return this.files.filter((item) => {\n            if (\n                item.status === FileUploadStatus.Pending ||\n                item.status === FileUploadStatus.Progress ||\n                item.status === FileUploadStatus.Starting\n            ) {\n                return item;\n            }\n        });\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'adf-file-uploading-list',\n    template: `\n      <div class=\"upload-list\">\n          <ng-template\n              ngFor\n              [ngForOf]=\"files\"\n              [ngForTemplate]=\"template\">\n          </ng-template>\n      </div>\n    `,\n    styles: [`\n      :host {\n        display: -webkit-box;\n        display: -ms-flexbox;\n        display: flex;\n        -webkit-box-orient: vertical;\n        -webkit-box-direction: normal;\n            -ms-flex-direction: column;\n                flex-direction: column; }\n    `]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: UploadService, },\n{type: NodesApiService, },\n{type: NotificationService, },\n{type: TranslationService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'template': [{ type: ContentChild, args: [TemplateRef, ] },],\n'files': [{ type: Input },],\n};\n}\n\nfunction FileUploadingListComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nFileUploadingListComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFileUploadingListComponent.ctorParameters;\n/** @type {?} */\nFileUploadingListComponent.propDecorators;\n/** @type {?} */\nFileUploadingListComponent.prototype.FileUploadStatus;\n/** @type {?} */\nFileUploadingListComponent.prototype.template;\n/** @type {?} */\nFileUploadingListComponent.prototype.files;\n/** @type {?} */\nFileUploadingListComponent.prototype.uploadService;\n/** @type {?} */\nFileUploadingListComponent.prototype.nodesApi;\n/** @type {?} */\nFileUploadingListComponent.prototype.notificationService;\n/** @type {?} */\nFileUploadingListComponent.prototype.translateService;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { DataTableModule, PipeModule } from '@alfresco/adf-core';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { TranslateModule } from '@ngx-translate/core';\n\nimport { MaterialModule } from '../material.module';\nimport { WebscriptComponent } from './webscript.component';\nexport class WebScriptModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [\n        CommonModule,\n        PipeModule,\n        MaterialModule,\n        DataTableModule,\n        TranslateModule\n    ],\n    exports: [\n        WebscriptComponent\n    ],\n    declarations: [\n        WebscriptComponent\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction WebScriptModule_tsickle_Closure_declarations() {\n/** @type {?} */\nWebScriptModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nWebScriptModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { ObjectDataTableAdapter } from '@alfresco/adf-core';\nimport { AlfrescoApiService, LogService } from '@alfresco/adf-core';\nimport { Component, EventEmitter, Input, OnChanges, Output } from '@angular/core';\n/**\n * <adf-webscript-get [scriptPath]=\"string\"\n *                         [scriptArgs]=\"Object\"\n *                         [contextRoot]=\"string\"\n *                         [servicePath]=\"string\"\n *                         [contentType]=\"JSON|HTML|DATATABLE\"\n *                         (success)=\"customMethod($event)>\n * </adf-webscript-get>\n * \n * This component, provide a get webscript viewer\n * \n * \\@InputParam {string} scriptPath path to Web Script (as defined by Web Script)\n * \\@InputParam {Object} scriptArgs arguments to pass to Web Script\n * \\@InputParam {string} contextRoot path where application is deployed default value 'alfresco'\n * \\@InputParam {string} servicePath path where Web Script service is mapped default value 'service'\n * \\@InputParam {string} contentType JSON | HTML | DATATABLE | TEXT\n * \n * \\@Output - success - The event is emitted when the data are recived\n * \n */\nexport class WebscriptComponent implements OnChanges {\n\n    \n    scriptPath: string;\n\n    \n    scriptArgs: any;\n\n    \n    showData: boolean = true;\n\n    \n    contextRoot: string = 'alfresco';\n\n    \n    servicePath: string = 'service';\n\n    \n    contentType: string = 'TEXT';\n\n    \n    success = new EventEmitter();\n\n    data: any = undefined;\n    showError: boolean = false;\n/**\n * @param {?} apiService\n * @param {?} logService\n */\nconstructor(private apiService: AlfrescoApiService,\nprivate logService: LogService) {\n    }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes) {\n        if (this.showData) {\n            this.clean();\n        }\n\n        return new Promise((resolve, reject) => {\n            this.apiService.getInstance().webScript.executeWebScript('GET', this.scriptPath, this.scriptArgs, this.contextRoot, this.servicePath).then((webScriptdata) => {\n\n                this.data = webScriptdata;\n\n                if (this.showData) {\n                    if (this.contentType === 'DATATABLE') {\n                        this.data = this.showDataAsDataTable(webScriptdata);\n                    }\n                }\n\n                this.success.emit(this.data);\n\n                resolve();\n            }, (error) => {\n                this.logService.log('Error' + error);\n                reject();\n            });\n        });\n    }\n/**\n * show the data in a ng2-alfresco-datatable\n * \n * \\@retutns the data as datatable\n * @param {?} data \n * \n * @return {?}\n */\nshowDataAsDataTable(data: any) {\n        let /** @type {?} */ datatableData: any = null;\n        try {\n\n            if (!data.schema) {\n                data.schema = ObjectDataTableAdapter.generateSchema(data.data);\n            }\n\n            if (data.schema && data.schema.length > 0) {\n                this.data = new ObjectDataTableAdapter(data.data, data.schema);\n            }\n\n        } catch ( /** @type {?} */e) {\n            this.logService.error('error during the cast as datatable');\n        }\n\n        return datatableData;\n    }\n/**\n * @return {?}\n */\nclean() {\n        this.data = undefined;\n    }\n/**\n * @return {?}\n */\nisDataTableContent() {\n        return this.contentType === 'DATATABLE';\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'adf-webscript-get',\n    template: `\n      <div *ngIf=\"showData\">\n          <div *ngIf=\"contentType === 'JSON'\" id=\"webscript-data-JSON\">{{data | json}}</div>\n          <div *ngIf=\"contentType === 'HTML'\" id=\"webscript-data-HTML\" [innerHTML]=\"data\"></div>\n          <div *ngIf=\"contentType === 'TEXT'\" id=\"webscript-data-TEXT\">{{data}}</div>\n          <div *ngIf=\"isDataTableContent()\">\n              <adf-datatable id=\"webscript-datatable-wrapper\" [data]=\"data\"></adf-datatable>\n              <div>\n                  <div *ngIf=\"showError\" id=\"error\">{{'WEBSCRIPT.ERROR' | translate: {\n                      data: data,\n                      contentType: contentType\n                      }\n                      }}\n                  </div>\n              </div>\n          </div>\n      </div>\n    `\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: AlfrescoApiService, },\n{type: LogService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'scriptPath': [{ type: Input },],\n'scriptArgs': [{ type: Input },],\n'showData': [{ type: Input },],\n'contextRoot': [{ type: Input },],\n'servicePath': [{ type: Input },],\n'contentType': [{ type: Input },],\n'success': [{ type: Output },],\n};\n}\n\nfunction WebscriptComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nWebscriptComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nWebscriptComponent.ctorParameters;\n/** @type {?} */\nWebscriptComponent.propDecorators;\n/** @type {?} */\nWebscriptComponent.prototype.scriptPath;\n/** @type {?} */\nWebscriptComponent.prototype.scriptArgs;\n/** @type {?} */\nWebscriptComponent.prototype.showData;\n/** @type {?} */\nWebscriptComponent.prototype.contextRoot;\n/** @type {?} */\nWebscriptComponent.prototype.servicePath;\n/** @type {?} */\nWebscriptComponent.prototype.contentType;\n/** @type {?} */\nWebscriptComponent.prototype.success;\n/** @type {?} */\nWebscriptComponent.prototype.data;\n/** @type {?} */\nWebscriptComponent.prototype.showError;\n/** @type {?} */\nWebscriptComponent.prototype.apiService;\n/** @type {?} */\nWebscriptComponent.prototype.logService;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { TranslateModule } from '@ngx-translate/core';\n\nimport { MaterialModule } from '../material.module';\nimport { TagActionsComponent } from './tag-actions.component';\nimport { TagListComponent } from './tag-list.component';\nimport { TagNodeListComponent } from './tag-node-list.component';\nimport { TagService } from './services/tag.service';\nexport class TagModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [\n        CommonModule,\n        MaterialModule,\n        TranslateModule,\n        FormsModule,\n        ReactiveFormsModule\n    ],\n    exports: [\n        TagActionsComponent,\n        TagListComponent,\n        TagNodeListComponent\n    ],\n    declarations: [\n        TagActionsComponent,\n        TagListComponent,\n        TagNodeListComponent\n    ],\n    providers: [\n        TagService\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction TagModule_tsickle_Closure_declarations() {\n/** @type {?} */\nTagModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTagModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { Component, EventEmitter, Input, OnChanges, Output, ViewEncapsulation } from '@angular/core';\nimport { TagService } from './services/tag.service';\n/**\n * \n * This component, ShowNodeTag a list of the tag on relative a node\n * \n */\nexport class TagNodeListComponent implements OnChanges {\n\n    \n    nodeId: string;\n\n    tagsEntries: any;\n\n    \n    results = new EventEmitter();\n/**\n * Constructor\n * @param {?} tagService\n */\nconstructor(private tagService: TagService) {\n        this.tagService.refresh.subscribe(() => {\n            this.refreshTag();\n        });\n    }\n/**\n * @return {?}\n */\nngOnChanges() {\n        return this.refreshTag();\n    }\n/**\n * @return {?}\n */\nrefreshTag() {\n        this.tagService.getTagsByNodeId(this.nodeId).subscribe((data) => {\n            this.tagsEntries = data.list.entries;\n            this.results.emit(this.tagsEntries);\n        });\n    }\n/**\n * @param {?} tag\n * @return {?}\n */\nremoveTag(tag: string) {\n        this.tagService.removeTag(this.nodeId, tag).subscribe(() => {\n            this.refreshTag();\n        });\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'adf-tag-node-list',\n    template: `\n      <mat-chip-list>\n          <mat-chip class=\"adf-tag-chips adf-primary-background-color\" *ngFor=\"let currentEntry of tagsEntries; let idx = index\">\n              <span id=\"tag_name_{{idx}}\">{{currentEntry.entry.tag}}</span>\n              <button class=\"adf-tag-chips-delete\" id=\"tag_delete_{{idx}}\" type=\"button\" (click)=\"removeTag(currentEntry.entry.id)\">\n                  <mat-icon class=\"adf-tag-chips-delete-icon adf-primary-contrast-text-color\" matChipRemove>cancel</mat-icon>\n              </button>\n          </mat-chip>\n      </mat-chip-list>\n    `,\n    styles: [`\n      .adf-tag-chips-delete {\n        overflow: visible;\n        cursor: pointer;\n        height: 17px;\n        width: 20px;\n        float: right;\n        border: 0;\n        background: none;\n        padding: 0;\n        margin: -1px 0px 0px 10px; }\n\n      .adf-tag-chips-delete-icon {\n        font-size: 20px;\n        background-repeat: no-repeat;\n        display: inline-block;\n        fill: currentColor;\n        height: 20px;\n        width: 20px; }\n    `],\n    encapsulation: ViewEncapsulation.None\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: TagService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'nodeId': [{ type: Input },],\n'results': [{ type: Output },],\n};\n}\n\nfunction TagNodeListComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nTagNodeListComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTagNodeListComponent.ctorParameters;\n/** @type {?} */\nTagNodeListComponent.propDecorators;\n/** @type {?} */\nTagNodeListComponent.prototype.nodeId;\n/** @type {?} */\nTagNodeListComponent.prototype.tagsEntries;\n/** @type {?} */\nTagNodeListComponent.prototype.results;\n/** @type {?} */\nTagNodeListComponent.prototype.tagService;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { Component, EventEmitter, OnInit, Output, ViewEncapsulation } from '@angular/core';\nimport { TagService } from './services/tag.service';\n/**\n * \n * This component provide a list of all the tag inside the ECM\n * \n */\nexport class TagListComponent implements OnInit {\n\n    tagsEntries: any;\n\n    \n    result = new EventEmitter();\n/**\n * Constructor\n * @param {?} tagService\n */\nconstructor(private tagService: TagService) {\n        this.tagService.refresh.subscribe(() => {\n            this.refreshTag();\n        });\n    }\n/**\n * @return {?}\n */\nngOnInit() {\n        return this.refreshTag();\n    }\n/**\n * @return {?}\n */\nrefreshTag() {\n        this.tagService.getAllTheTags().subscribe((data) => {\n            this.tagsEntries = data.list.entries;\n            this.result.emit(this.tagsEntries);\n        });\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'adf-tag-list',\n    template: `\n      <mat-list>\n          <mat-list-item *ngFor=\"let currentEntry of tagsEntries; let idx = index\">\n              <div class=\"adf-list-tag\" id=\"tag_name_{{idx}}\">{{currentEntry.entry.tag}}</div>\n          </mat-list-item>\n      </mat-list>\n    `,\n    styles: [`\n      .adf-list-tag {\n        padding: 16px;\n        font-size: 16px; }\n    `],\n    encapsulation: ViewEncapsulation.None\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: TagService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'result': [{ type: Output },],\n};\n}\n\nfunction TagListComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nTagListComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTagListComponent.ctorParameters;\n/** @type {?} */\nTagListComponent.propDecorators;\n/** @type {?} */\nTagListComponent.prototype.tagsEntries;\n/** @type {?} */\nTagListComponent.prototype.result;\n/** @type {?} */\nTagListComponent.prototype.tagService;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { TranslationService } from '@alfresco/adf-core';\nimport { Component, EventEmitter, Input, OnChanges, Output, ViewEncapsulation } from '@angular/core';\nimport { TagService } from './services/tag.service';\n/**\n * \n * This component, provide a list of the tags relative a node with actions button to add or remove new tag\n * \n */\nexport class TagActionsComponent implements OnChanges {\n\n    \n    nodeId: string;\n\n    \n    successAdd: EventEmitter<any> = new EventEmitter();\n\n    \n    error: EventEmitter<any> = new EventEmitter();\n\n    \n    result = new EventEmitter();\n\n    newTagName: string;\n\n    tagsEntries: any;\n\n    errorMsg: string;\n\n    disableAddTag: boolean = true;\n/**\n * @param {?} tagService\n * @param {?} translateService\n */\nconstructor(private tagService: TagService,\nprivate translateService: TranslationService) {\n        this.tagService.refresh.subscribe(() => {\n            this.refreshTag();\n        });\n    }\n/**\n * @return {?}\n */\nngOnChanges() {\n        return this.refreshTag();\n    }\n/**\n * @return {?}\n */\nrefreshTag() {\n        this.tagService.getTagsByNodeId(this.nodeId).subscribe((data) => {\n            this.tagsEntries = data.list.entries;\n            this.disableAddTag = false;\n            this.result.emit(this.tagsEntries);\n        }, () => {\n            this.tagsEntries = null;\n            this.disableAddTag = true;\n            this.result.emit(this.tagsEntries);\n        });\n    }\n/**\n * @return {?}\n */\naddTag() {\n        if (this.searchTag(this.newTagName)) {\n            this.translateService.get('TAG.MESSAGES.EXIST').subscribe((error) => {\n                this.errorMsg = error;\n            });\n            this.error.emit(this.errorMsg);\n        } else {\n            this.tagService.addTag(this.nodeId, this.newTagName).subscribe(() => {\n                this.newTagName = '';\n                this.successAdd.emit(this.nodeId);\n            });\n        }\n    }\n/**\n * @param {?} searchTagName\n * @return {?}\n */\nsearchTag(searchTagName: string) {\n        if (this.tagsEntries) {\n            return this.tagsEntries.find((currentTag) => {\n                return (searchTagName === currentTag.entry.tag);\n            });\n        }\n    }\n/**\n * @return {?}\n */\ncleanErrorMsg() {\n        this.errorMsg = '';\n    }\n/**\n * @param {?} tag\n * @return {?}\n */\nremoveTag(tag: string) {\n        this.tagService.removeTag(this.nodeId, tag);\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'adf-tag-node-actions-list',\n    template: `\n      <mat-list>\n          <mat-list-item *ngFor=\"let currentEntry of tagsEntries; let idx = index\">\n              <div class=\"adf-tag-actions-container\" id=\"tag_delete_{{idx}}\" (click)=\"removeTag(currentEntry.entry.id)\">\n                  <div class=\"adf-tag-actions-delete-text\" id=\"tag_name_{{idx}}\">\n                      {{currentEntry.entry.tag}}\n                  </div>\n                  <mat-icon class=\"adf-tag-actions-delete-icon\">delete</mat-icon>\n              </div>\n          </mat-list-item>\n      </mat-list>\n      <table class=\"adf-full-width\" cellspacing=\"0\">\n          <tr>\n              <td>\n                  <mat-form-field class=\"adf-full-width\">\n                      <input matInput placeholder=\"{{'TAG.LABEL.NEWTAG' | translate }}\"\n                             type=\"text\"\n                             (keypress)=\"cleanErrorMsg()\"\n                             [(ngModel)]=\"newTagName\"\n                             id=\"new-tag-text\"/>\n                      <mat-hint *ngIf=\"error\" [ngStyle]=\"{'color': 'red'}\" align=\"start\">{{errorMsg}}</mat-hint>\n                  </mat-form-field>\n              </td>\n              <td>\n                  <button class=\"adf-full-width\" color=\"primary\" id=\"add-tag\" (click)=\"addTag()\" [disabled]=\"disableAddTag\"\n                          mat-raised-button>\n                      {{'TAG.BUTTON.ADD' | translate }}\n                  </button>\n              </td>\n          </tr>\n      </table>\n    `,\n    styles: [`\n      .adf-full-width {\n        width: 100%; }\n\n      .adf-tag-actions-delete-icon {\n        float: right;\n        cursor: pointer; }\n\n      .adf-tag-actions-delete-text {\n        font-size: 16px;\n        float: left; }\n\n      .adf-tag-actions-container {\n        padding: 8px 0 8px 0;\n        height: 20px; }\n    `],\n    encapsulation: ViewEncapsulation.None\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: TagService, },\n{type: TranslationService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'nodeId': [{ type: Input },],\n'successAdd': [{ type: Output },],\n'error': [{ type: Output },],\n'result': [{ type: Output },],\n};\n}\n\nfunction TagActionsComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nTagActionsComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTagActionsComponent.ctorParameters;\n/** @type {?} */\nTagActionsComponent.propDecorators;\n/** @type {?} */\nTagActionsComponent.prototype.nodeId;\n/** @type {?} */\nTagActionsComponent.prototype.successAdd;\n/** @type {?} */\nTagActionsComponent.prototype.error;\n/** @type {?} */\nTagActionsComponent.prototype.result;\n/** @type {?} */\nTagActionsComponent.prototype.newTagName;\n/** @type {?} */\nTagActionsComponent.prototype.tagsEntries;\n/** @type {?} */\nTagActionsComponent.prototype.errorMsg;\n/** @type {?} */\nTagActionsComponent.prototype.disableAddTag;\n/** @type {?} */\nTagActionsComponent.prototype.tagService;\n/** @type {?} */\nTagActionsComponent.prototype.translateService;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { AlfrescoApiService, LogService } from '@alfresco/adf-core';\nimport { EventEmitter, Injectable, Output } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport'rxjs/add/observable/throw';\nexport class TagService {\n\n    \n    refresh = new EventEmitter();\n/**\n * @param {?} apiService\n * @param {?} logService\n */\nconstructor(private apiService: AlfrescoApiService,\nprivate logService: LogService) {\n    }\n/**\n * @param {?} nodeId\n * @return {?}\n */\ngetTagsByNodeId(nodeId: string): any {\n        return Observable.fromPromise(this.apiService.getInstance().core.tagsApi.getNodeTags(nodeId))\n            .catch(err => this.handleError(err));\n    }\n/**\n * @return {?}\n */\ngetAllTheTags() {\n        return Observable.fromPromise(this.apiService.getInstance().core.tagsApi.getTags())\n            .catch(err => this.handleError(err));\n    }\n/**\n * @param {?} nodeId\n * @param {?} tagName\n * @return {?}\n */\naddTag(nodeId: string, tagName: string): any {\n        let /** @type {?} */ alfrescoApi: any = this.apiService.getInstance();\n        let /** @type {?} */ tagBody = new alfrescoApi.core.TagBody();\n        tagBody.tag = tagName;\n\n        let /** @type {?} */ promiseAdd = Observable.fromPromise(this.apiService.getInstance().core.tagsApi.addTag(nodeId, tagBody));\n\n        promiseAdd.subscribe((data) => {\n            this.refresh.emit(data);\n        }, (err) => {\n            this.handleError(err);\n        });\n\n        return promiseAdd;\n    }\n/**\n * @param {?} nodeId\n * @param {?} tag\n * @return {?}\n */\nremoveTag(nodeId: string, tag: string): any {\n        let /** @type {?} */ promiseRemove = Observable.fromPromise(this.apiService.getInstance().core.tagsApi.removeTag(nodeId, tag));\n\n        promiseRemove.subscribe((data) => {\n            this.refresh.emit(data);\n        }, (err) => {\n            this.handleError(err);\n        });\n\n        return promiseRemove;\n    }\n/**\n * @param {?} error\n * @return {?}\n */\nprivate handleError(error: any) {\n        this.logService.error(error);\n        return Observable.throw(error || 'Server error');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: AlfrescoApiService, },\n{type: LogService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'refresh': [{ type: Output },],\n};\n}\n\nfunction TagService_tsickle_Closure_declarations() {\n/** @type {?} */\nTagService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTagService.ctorParameters;\n/** @type {?} */\nTagService.propDecorators;\n/** @type {?} */\nTagService.prototype.refresh;\n/** @type {?} */\nTagService.prototype.apiService;\n/** @type {?} */\nTagService.prototype.logService;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MaterialModule } from '../material.module';\n\nimport { RatingService } from './services/rating.service';\nimport { LikeComponent } from './like.component';\nimport { RatingComponent } from './rating.component';\nexport class SocialModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [\n        CommonModule,\n        MaterialModule\n    ],\n    exports: [\n        RatingComponent,\n        LikeComponent\n    ],\n    declarations: [\n        RatingComponent,\n        LikeComponent\n    ],\n    providers: [\n        RatingService\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction SocialModule_tsickle_Closure_declarations() {\n/** @type {?} */\nSocialModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSocialModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { Component, EventEmitter, Input, OnChanges, Output, ViewEncapsulation } from '@angular/core';\nimport { RatingService } from './services/rating.service';\nexport class RatingComponent implements OnChanges {\n\n    \n    nodeId: string;\n\n    average: number = 0;\n\n    ratingType: string = 'fiveStar';\n\n    \n    changeVote = new EventEmitter();\n\n    stars: Array<any> = [];\n/**\n * @param {?} ratingService\n */\nconstructor(private ratingService: RatingService) {\n    }\n/**\n * @return {?}\n */\nngOnChanges() {\n        let /** @type {?} */ ratingObserver = this.ratingService.getRating(this.nodeId, this.ratingType);\n\n        ratingObserver.subscribe(\n            (data) => {\n                if (data.entry.aggregate) {\n                    this.average = data.entry.aggregate.average;\n                    this.calculateStars();\n                }\n            }\n        );\n\n        return ratingObserver;\n    }\n/**\n * @return {?}\n */\ncalculateStars() {\n        this.stars = [];\n\n        for (let /** @type {?} */ i = 0; i < 5; i++) {\n            if (i < this.average) {\n                this.stars.push({fill: true});\n            } else {\n                this.stars.push({fill: false});\n            }\n        }\n\n        this.changeVote.emit(this.average);\n    }\n/**\n * @param {?} vote\n * @return {?}\n */\nupdateVote(vote: number) {\n        this.ratingService.postRating(this.nodeId, this.ratingType, vote).subscribe(\n            (data) => {\n                if (data.entry.aggregate) {\n                    if (this.average !== data.entry.aggregate.average) {\n                        this.average = data.entry.aggregate.average;\n                        this.calculateStars();\n                    }\n                }\n            }\n        );\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'adf-rating',\n    styles: [`\n      .adf-rating-container {\n        overflow: hidden;\n        width: 100%; }\n        .adf-rating-container .adf-rating-star {\n          float: left;\n          -webkit-transition: all .3s;\n          transition: all .3s;\n          padding: 1px;\n          cursor: pointer; }\n          .adf-rating-container .adf-rating-star .mat-list-item-content {\n            padding: 0 2px !important; }\n        .adf-rating-container .adf-colored-star {\n          color: #ffe944; }\n        .adf-rating-container .adf-grey-star {\n          color: #808080; }\n        .adf-rating-container .adf-stars-container {\n          padding: 0 !important;\n          margin: 0 !important;\n          display: inline-block; }\n        .adf-rating-container .adf-rating-star:hover {\n          -webkit-transform: rotate(13deg) scale(1.2);\n                  transform: rotate(13deg) scale(1.2); }\n    `],\n    template: `\n      <mat-list id=\"adf-rating-container\" class=\"adf-rating-container\">\n          <mat-list-item class=\"adf-rating-star\" *ngFor=\"let currentRate of stars; let idx = index\">\n                  <span id=\"adf-rate-{{idx}}\">\n                      <mat-icon id=\"adf-grey-star-{{idx}}\" *ngIf=\"currentRate.fill\" class=\"adf-colored-star\"\n                               (click)=\"updateVote(idx + 1)\">star_rate\n                      </mat-icon>\n                      <mat-icon id=\"adf-colored-star-{{idx}}\" *ngIf=\"!currentRate.fill\" class=\"adf-grey-star\"\n                               (click)=\"updateVote(idx + 1)\">star_border\n                      </mat-icon>\n                  </span>\n          </mat-list-item>\n      </mat-list>\n    `,\n    providers: [RatingService],\n    encapsulation: ViewEncapsulation.None\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: RatingService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'nodeId': [{ type: Input },],\n'changeVote': [{ type: Output },],\n};\n}\n\nfunction RatingComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nRatingComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRatingComponent.ctorParameters;\n/** @type {?} */\nRatingComponent.propDecorators;\n/** @type {?} */\nRatingComponent.prototype.nodeId;\n/** @type {?} */\nRatingComponent.prototype.average;\n/** @type {?} */\nRatingComponent.prototype.ratingType;\n/** @type {?} */\nRatingComponent.prototype.changeVote;\n/** @type {?} */\nRatingComponent.prototype.stars;\n/** @type {?} */\nRatingComponent.prototype.ratingService;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { Component, EventEmitter, Input, OnChanges, Output, ViewEncapsulation } from '@angular/core';\nimport { RatingService } from './services/rating.service';\nexport class LikeComponent implements OnChanges {\n\n    \n    nodeId: string;\n\n    \n    changeVote = new EventEmitter();\n\n    likesCounter: number = 0;\n    ratingType: string = 'likes';\n    isLike: boolean = false;\n/**\n * @param {?} ratingService\n */\nconstructor(private ratingService: RatingService) {}\n/**\n * @return {?}\n */\nngOnChanges() {\n        this.clean();\n\n        this.ratingService.getRating(this.nodeId, this.ratingType).subscribe(\n            (data) => {\n                if (data.entry.aggregate) {\n                    this.likesCounter = data.entry.aggregate.numberOfRatings;\n                    if (data.entry.ratedAt) {\n                        this.isLike = true;\n                    }\n                }\n            }\n        );\n    }\n/**\n * @return {?}\n */\nlikeClick() {\n        if (this.isLike) {\n            this.ratingService.deleteRating(this.nodeId, this.ratingType).subscribe(\n                () => {\n                    this.likesCounter -= 1;\n                    this.isLike = false;\n                    this.changeVote.emit(this.likesCounter);\n                }\n            );\n        } else {\n            this.ratingService.postRating(this.nodeId, this.ratingType, true).subscribe(\n                (data) => {\n                    this.likesCounter = data.entry.aggregate.numberOfRatings;\n                    this.isLike = true;\n                    this.changeVote.emit(this.likesCounter);\n                }\n            );\n        }\n    }\n/**\n * @return {?}\n */\nclean() {\n        this.isLike = false;\n        this.likesCounter = 0;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'adf-like',\n    styles: [`\n      .adf-like-container {\n        overflow: hidden;\n        width: 100%; }\n        .adf-like-container .adf-like {\n          padding: 5px;\n          cursor: pointer;\n          float: left;\n          margin: 5px 0px 5px 5px; }\n        .adf-like-container .adf-like-select {\n          cursor: pointer;\n          color: #2196f3; }\n        .adf-like-container .adf-like-select:hover {\n          cursor: pointer;\n          color: #808080; }\n        .adf-like-container .adf-like-grey {\n          cursor: pointer;\n          color: #808080; }\n        .adf-like-container .adf-like-grey:hover {\n          cursor: pointer;\n          color: #2196f3; }\n        .adf-like-container .adf-like-counter {\n          float: left;\n          padding: 13px 0 0 0; }\n        .adf-like-container .adf-left {\n          float: left;\n          padding: 13px 0 0 4px; }\n    `],\n    template: `\n      <div id=\"adf-like-container\" class=\"adf-like-container\">\n          <div class=\"adf-like\">\n              <span id=\"adf-like-{{nodeId}}\" [ngClass]=\"{'adf-like-select': isLike ,'adf-like-grey': !isLike  }\"\n                    (click)=\"likeClick()\">\n                  <mat-icon>thumb_up</mat-icon>\n              </span>\n          </div>\n          <div id=\"adf-like-counter\" class=\"adf-like-counter\">{{likesCounter}}</div>\n          <div class=\"adf-left\" *ngIf=\"likesCounter<=1\">Like</div>\n          <div class=\"adf-left\" *ngIf=\"likesCounter>1\">Likes</div>\n      </div>\n    `,\n    providers: [RatingService],\n    encapsulation: ViewEncapsulation.None\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: RatingService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'nodeId': [{ type: Input },],\n'changeVote': [{ type: Output },],\n};\n}\n\nfunction LikeComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nLikeComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nLikeComponent.ctorParameters;\n/** @type {?} */\nLikeComponent.propDecorators;\n/** @type {?} */\nLikeComponent.prototype.nodeId;\n/** @type {?} */\nLikeComponent.prototype.changeVote;\n/** @type {?} */\nLikeComponent.prototype.likesCounter;\n/** @type {?} */\nLikeComponent.prototype.ratingType;\n/** @type {?} */\nLikeComponent.prototype.isLike;\n/** @type {?} */\nLikeComponent.prototype.ratingService;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { AlfrescoApiService } from '@alfresco/adf-core';\nimport { Injectable } from '@angular/core';\nimport { Response } from '@angular/http';\nimport { RatingBody } from 'alfresco-js-api';\nimport { Observable } from 'rxjs/Observable';\nimport'rxjs/add/observable/throw';\nexport class RatingService {\n/**\n * @param {?} apiService\n */\nconstructor(private apiService: AlfrescoApiService) {\n    }\n/**\n * @param {?} nodeId\n * @param {?} ratingType\n * @return {?}\n */\ngetRating(nodeId: string, ratingType: any): any {\n        return Observable.fromPromise(this.apiService.getInstance().core.ratingsApi.getRating(nodeId, ratingType))\n            .map(res => res)\n            .catch(this.handleError);\n    }\n/**\n * @param {?} nodeId\n * @param {?} ratingType\n * @param {?} vote\n * @return {?}\n */\npostRating(nodeId: string, ratingType: any, vote: any): any {\n        let /** @type {?} */ ratingBody: RatingBody = {\n            'id': ratingType,\n            'myRating': vote\n        };\n        return Observable.fromPromise(this.apiService.getInstance().core.ratingsApi.rate(nodeId, ratingBody))\n            .map(res => res)\n            .catch(this.handleError);\n    }\n/**\n * @param {?} nodeId\n * @param {?} ratingType\n * @return {?}\n */\ndeleteRating(nodeId: string, ratingType: any): any {\n        return Observable.fromPromise(this.apiService.getInstance().core.ratingsApi.removeRating(nodeId, ratingType))\n            .map(res => res)\n            .catch(this.handleError);\n    }\n/**\n * @param {?} error\n * @return {?}\n */\nprivate handleError(error: Response): any {\n        console.error(error);\n        return Observable.throw(error || 'Server error');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: AlfrescoApiService, },\n];\n}\n\nfunction RatingService_tsickle_Closure_declarations() {\n/** @type {?} */\nRatingService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRatingService.ctorParameters;\n/** @type {?} */\nRatingService.prototype.apiService;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { NgModule } from '@angular/core';\nimport {\n    MatButtonModule,\n    MatChipsModule,\n    MatDialogModule,\n    MatIconModule,\n    MatCardModule,\n    MatInputModule,\n    MatListModule,\n    MatMenuModule,\n    MatOptionModule,\n    MatProgressBarModule,\n    MatProgressSpinnerModule,\n    MatRippleModule,\n    MatSelectModule\n} from '@angular/material';\n/**\n * @return {?}\n */\nexport function modules() {\n    return [\n        MatButtonModule,\n        MatChipsModule,\n        MatDialogModule,\n        MatIconModule,\n        MatCardModule,\n        MatInputModule,\n        MatListModule,\n        MatProgressSpinnerModule,\n        MatProgressBarModule,\n        MatRippleModule,\n        MatMenuModule,\n        MatOptionModule,\n        MatSelectModule\n    ];\n}\nexport class MaterialModule {\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: modules(),\n    exports: modules()\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MaterialModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMaterialModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMaterialModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["NodePaging","NodePagingList","NodeMinimalEntry","Pagination","NodeMinimal","this","properties","UserInfo","ContentInfo","PathInfoEntity","PathElementEntity","PermissionStyleModel","css","permission","isFile","isFolder","ContentModule","decorators","type","NgModule","args","imports","CoreModule","SocialModule","TagModule","CommonModule","WebScriptModule","FormsModule","ReactiveFormsModule","SearchModule","BrowserAnimationsModule","DocumentListModule","UploadModule","MaterialModule","SitesDropdownModule","BreadcrumbModule","VersionManagerModule","ContentNodeSelectorModule","ContentMetadataModule","DialogModule","FolderDirectiveModule","providers","provide","TRANSLATION_PROVIDER","multi","useValue","name","source","exports","ctorParameters","TranslateModule","FlexLayoutModule","CardViewModule","ContentMetadataComponent","ContentMetadataCardComponent","declarations","editable","expanded","prototype","toggleEdit","toggleExpanded","Object","defineProperty","get","Infinity","Component","selector","template","styles","encapsulation","ViewEncapsulation","None","host","class","propDecorators","node","Input","contentMetadataService","cardViewUpdateService","nodesApi","maxPropertiesToShow","ngOnInit","_this","itemUpdated$","switchMap","saveNode","bind","subscribe","error","handleError","ngOnChanges","recalculateProperties","_d","nodeBody","changed","updateNode","id","console","log","basicProperties","getBasicProperties","slice","changeDetection","ChangeDetectionStrategy","OnPush","CardViewUpdateService","viewProviders","ContentMetadataService","FileSizePipe","NodesApiService","fileSizePipe","CardViewTextItemModel","label","value","key","createdByUser","displayName","CardViewDateItemModel","createdAt","content","sizeInBytes","pipes","pipe","modifiedByUser","modifiedAt","mimeTypeName","multiline","Injectable","FolderCreateDirective","FolderEditDirective","dialogRef","elementRef","onClick","event","preventDefault","folder","openDialog","width","DIALOG_WIDTH","data","dialogConfig","open","FolderDialogComponent","afterClosed","folderEdit","next","Directive","MatDialog","ElementRef","ContentService","HostListener","DEFAULT_FOLDER_PARENT_ID","parentNodeId","folderCreate","DownloadZipDialogComponent","NotificationService","TranslationService","entryComponents","I18N_ERRORS_PATH","formBuilder","dialog","translation","notification","description","validators","Validators","required","forbidSpecialCharacters","forbidEndingDot","forbidOnlySpaces","form","group","trim","cm:title","cm:description","create","createFolder","edit","nodeId","submit","editing","valid","close","i18nMessageString","JSON","parse","message","statusCode","err","openSnackMessage","FormBuilder","MatDialogRef","undefined","Optional","Inject","MAT_DIALOG_DATA","apiService","logService","cancelled","getInstance","core","downloadsApi","nodeIds","length","setTimeout","downloadZip","cancelDownload","promise","createDownload","on","progress","entry","url_1","contentApi","getContentUrl","getNode","then","downloadNode","fileName","waitAndDownload","downloadId","url","getDownload","d","status","download","link","document","createElement","style","display","href","body","appendChild","click","removeChild","AlfrescoApiService","LogService","DirectiveModule","ToolbarModule","PaginationModule","ContentNodeSelectorComponent","ContentNodeSelectorService","VersionUploadComponent","VersionManagerComponent","VersionListComponent","alfrescoApi","versions","isLoading","versionsApi","loadVersionHistory","restore","versionId","revertVersion","majorVersion","comment","listVersionHistory","list","entries","BreadcrumbComponent","DropdownBreadcrumbComponent","_super","__extends","changes","call","recalculateNodes","currentNode","route","previousNodes","reverse","selectbox","hasPreviousNodes","ViewChild","MatSelect","folderNode","root","rootId","navigate","EventEmitter","currentValue","parseRoute","path","elements","push","rootPos","getElementPosition","splice","result","findIndex","el","onRoutePathClick","emit","target","loadFolderByNodeId","Output","DropdownSitesComponent","sitesService","hideMyFiles","siteList","placeholder","change","MY_FILES_VALUE","setDefaultSiteList","selectedSite","siteFound","siteSelected","SiteModel","find","site","guid","getSites","SitesService","ALFRESCO_SEARCH_DIRECTIVES","SearchComponent","SearchControlComponent","SearchTriggerDirective","ALFRESCO_SEARCH_PROVIDERS","SearchService","PipeModule","authService","thumbnailService","expandable","highlight","inputType","autocomplete","liveSearchEnabled","liveSearchMaxResults","searchChange","optionClicked","searchTerm","toggleSearch","Subject","focusSubject","asObservable","debounceTime","subscriptAnimationState","searchAutocomplete","resetResults","activeElement","searchInput","nativeElement","blur","applySearchFocus","animationDoneEvent","toState","focus","setupFocusEventHandlers","ngOnDestroy","unsubscribe","isLoggedIn","isEcmLoggedIn","searchSubmit","toggleSearchBar","inputChange","getAutoComplete","getMimeTypeIcon","mimeType","isSearchBarActive","elementClicked","item","onFocus","$event","onBlur","activateToolbar","selectFirstResult","listResultElement","_getHostElement","onRowArrowDown","nextElement","getNextElementSibling","onRowArrowUp","previousElement","getPreviousElementSibling","FocusEvent","filter","nextElementSibling","previousElementSibling","animations","trigger","state","transform","margin-left","transition","animate","AuthenticationService","ThumbnailService","customQueryBody","ViewChildren","MatListItem","searchService","changeDetectorRef","_elementRef","displayWith","maxResults","skipResults","resultLoaded","showPanel","_isOpen","keyPressedStream","_classList","searchedWord","loadSearchResults","set","classList","split","forEach","className","ngAfterContentInit","setVisibility","queryBody","cleanResults","reload","results","hasValidSearchQuery","searchOpts","query","getQueryBody","search","isOpen","generateDefaultSearchNode","include","paging","maxItems","toString","skipCount","filterQueries","hidePanel","markForCheck","preserveWhitespaces","exportAs","ChangeDetectorRef","panel","ContentChild","TemplateRef","SEARCH_AUTOCOMPLETE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","useExisting","forwardRef","element","ngZone","_panelOpen","escapeEventStream","onChange","onTouched","closingActionsSubscription","searchPanel","openPanel","subscribeToClosingActions","closePanel","detectChanges","merge","outsideClickStream","fromEvent","clickTarget","Observable","of","writeValue","Promise","resolve","setTriggerValue","registerOnChange","fn","registerOnTouched","handleKeydown","keyCode","ESCAPE","panelOpen","stopPropagation","ENTER","handleInput","inputValue","isPanelOptionClicked","isPanelOption","isNoResultOption","contains","firstStable","onStable","optionChanges","panelClosingActions","setValueAndClose","toDisplay","textContent","role","aria-autocomplete","[attr.aria-expanded]","[attr.aria-owns]","(blur)","(input)","(keydown)","NgZone","DOCUMENT","DataTableModule","DocumentListComponent","ContentColumnComponent","ContentColumnListComponent","ContentActionComponent","ContentActionListComponent","EmptyFolderContentDirective","NoPermissionContentDirective","DocumentListService","FolderActionsService","DocumentActionsService","NodeActionsService","documentList","noPermissionTemplate","dataTable","emptyFolderTemplate","noContentTemplate","sortable","title","srTitle","register","registerColumn","format","cssClass","column","getColumns","documentActions","folderActions","disabled","execute","permissionEvent","success","model","ContentActionModel","icon","disableWithNoPermission","handler","getSystemHandler","registerAction","ltarget","toLowerCase","permision","errors","getHandler","nodeActionsService","documentListService","contentService","handlers","setupActionHandlers","lkey","setHandler","canExecuteAction","obj","copyNode","moveNode","deleteNode","actionObservable","copyFolder","prepareHandlers","moveFolder","action","fileOperationMessage","handlerObservable","hasPermission","PermissionModel","throw","Error","setAttribute","copyContent","moveContent","contentEntry","doFileOperation","observable","actionName","currentFolderId","parentId","rowFilter","imageResolver","select","panelClass","selections","selection","toUpperCase","closeAll","stringify","currentNodeId","row","col","rootNodeId","defaultSearchNode","scope","tryCatchTarget","e","tryCatcher","x","Array","isArray","UnsubscriptionError","map","i","join","stack","Subscription","closed","_parent","_parents","_subscriptions","_unsubscribe","hasErrors","index","len","remove","isFunction_1","isFunction","trial","tryCatch_1","tryCatch","errorObject_1","errorObject","UnsubscriptionError_1","flattenUnsubscriptionErrors","isArray_1","sub","isObject_1","isObject","concat","add","teardown","EMPTY","subscription","_addParent","tmp","subscriptions","subscriptionIndex","indexOf","parent","empty","complete","__window","window","__self","self","WorkerGlobalScope","_root","global","root_1","Symbol","rxSubscriber","for","$$rxSubscriber","Subscriber","destinationOrNext","syncErrorValue","syncErrorThrown","syncErrorThrowable","isStopped","arguments","destination","Observer_1","SafeSubscriber","rxSubscriber_1","subscriber","_next","_error","_complete","_unsubscribeAndRecycle","Subscription_1","Subscriber_2","_parentSubscriber","observerOrNext","context","_context","__tryOrSetError","__tryOrUnsub","wrappedComplete","OuterSubscriber","apply","notifyNext","outerValue","innerValue","outerIndex","innerIndex","innerSub","notifyError","notifyComplete","Subscriber_1","nextOrObserver","getSymbolObservable","$$observable","fns","_i","pipeFromArray","Observable$$1","_isScalar","_subscribe","lift","operator","sink","toSubscriber_1","toSubscriber","_trySubscribe","PromiseCtor","Rx","config","reject","observable_1","operations","pipe_1","toPromise","symbolIteratorPonyfill","iterator","Set_1","Set","Map_1","Map","keys","getOwnPropertyNames","$$iterator","InnerSubscriber","outerSubscriber","InnerSubscriber_1","Observable_1","isArrayLike_1","isArrayLike","isPromise_1","isPromise","iterator_1","done","obs","TypeError","msg","AuditSubscriber","durationSelector","hasValue","throttled","duration","innerSubscription","subscribeToResult_1","subscribeToResult","clearThrottle","OuterSubscriber_1","Action","scheduler","work","schedule","delay","AsyncAction","pending","recycleAsyncId","requestAsyncId","setInterval","flush","clearInterval","_execute","errored","errorValue","actions","Action_1","Scheduler","SchedulerAction","now","Date","AsyncScheduler","active","scheduled","shift","Scheduler_1","AsyncScheduler_1","AsyncAction_1","val","parseFloat","isNaN","TimerObservable","dueTime","period","isNumeric_1","isNumeric","Number","isScheduler_1","isScheduler","async_1","async","isDate_1","isDate","initialDelay","dispatch","BufferSubscriber","closingNotifier","buffer","BufferCountSubscriber","bufferSize","BufferSkipCountSubscriber","startBufferEvery","buffers","count","Context","BufferTimeSubscriber","bufferTimeSpan","bufferCreationInterval","maxBufferSize","contexts","openContext","timespanOnly","timeSpanOnlyState","closeAction","dispatchBufferTimeSpanOnly","closeState","creationState","dispatchBufferClose","dispatchBufferCreation","filledBufferContext","onBufferFull","closeContext","BufferToggleSubscriber","openings","closingSelector","closeBuffer","openBuffer","trySubscribe","BufferWhenSubscriber","subscribing","closingSubscription","CatchSubscriber","caught","err2","ScalarObservable","EmptyObservable","arg","ArrayObservable","array","pop","ScalarObservable_1","EmptyObservable_1","none","CombineLatestSubscriber","project","values","observables","toRespond","unused","oldVal","_tryProject","PromiseObservable","dispatchNext","dispatchError","IteratorObservable_2","IteratorObservable","StringIterator","ArrayIterator","getIterator","hasError","return","str","idx","charAt","arr","toLength","maxSafeInteger","Math","pow","ArrayLikeObservable","arrayLike","Notification","kind","observe","observer","do","accept","toObservable","createNext","undefinedValueNotification","createError","createComplete","completeNotification","observeOn_2","ObserveOnOperator","ObserveOnSubscriber","ObserveOnOperator_1","scheduleMessage","ObserveOnMessage","Notification_1","ObserveOnSubscriber_1","FromObservable","ish","ArrayObservable_1","PromiseObservable_1","IteratorObservable_1","ArrayLikeObservable_1","observeOn_1","MergeMapSubscriber","resultSelector","concurrent","POSITIVE_INFINITY","hasCompleted","_tryNext","_innerSub","_notifyResultSelector","CountSubscriber","predicate","_tryPredicate","DebounceSubscriber","durationSubscription","emitValue","debounceTime_2","DebounceTimeOperator","DebounceTimeSubscriber","debouncedSubscription","lastValue","clearDebounce","debouncedNext","DefaultIfEmptySubscriber","defaultValue","isEmpty","DelayMessage","DelaySubscriber","queue","time","delay_1","max","_schedule","scheduleNotification","SubscriptionDelaySubscriber","DelayWhenSubscriber","delayDurationSelector","completed","delayNotifierSubscriptions","removeSubscription","tryComplete","delayNotifier","tryDelay","subscriptionIdx","notifierSubscription","SubscriptionDelayObservable","subscriptionDelay","sourceSubscribed","subscribeToSource","DeMaterializeSubscriber","minimalSetImpl","DistinctSubscriber","keySelector","flushes","clear","_useKeySelector","_finalizeNext","has","DistinctUntilChangedSubscriber","compare","hasKey","y","Boolean","ArgumentOutOfRangeError","ElementAtSubscriber","ArgumentOutOfRangeError_1","EverySubscriber","thisArg","everyValueMatch","SwitchFirstSubscriber","hasSubscription","SwitchFirstMapSubscriber","tryNext","trySelectResult","ExpandSubscriber","subscribeToProjection","FilterSubscriber","FinallySubscriber","callback","FindValueSubscriber","yieldIndex","EmptyError","FirstSubscriber","_emitted","_emit","_tryResultSelector","_emitFinal","EmptyError_1","ObjectUnsubscribedError","SubjectSubscription","subject","observers","subscriberIndex","SubjectSubscriber","SubjectSubscriber_1","Subject$$1","thrownError","AnonymousSubject","ObjectUnsubscribedError_1","copy","SubjectSubscription_1","Subject_2","MapPolyfill","size","_values","_keys","delete","cb","MapPolyfill_1","FastMap","hasOwnProperty","GroupDurationSubscriber","GroupBySubscriber","elementSelector","subjectSelector","groups","attemptedToUnsubscribe","_group","FastMap_1","Subject_1","groupedObservable","GroupedObservable","removeGroup","groupSubject","refCountSubscription","InnerRefCountSubscription","IgnoreElementsSubscriber","noop_1","noop","IsEmptySubscriber","LastSubscriber","MapSubscriber","MapToSubscriber","MaterializeSubscriber","ScanSubscriber","accumulator","_seed","hasSeed","seed","TakeLastSubscriber","total","ring","MergeMapToSubscriber","MergeScanSubscriber","acc","refCount_2","RefCountOperator","connectable","_refCount","refCounter","RefCountSubscriber","connection","connect","refCount","sharedConnection","_connection","ConnectableSubscriber","ConnectableObservable","subjectFactory","_isComplete","getSubject","_subject","refCount_1","OnErrorResumeNextSubscriber","nextSources","subscribeToNextSource","PairwiseSubscriber","hasPrev","prev","BehaviorSubject","_value","getValue","AsyncSubject","hasNext","QueueAction","QueueScheduler","QueueAction_1","ReplayEvent","ReplaySubject","windowTime","_events","_bufferSize","_windowTime","_getNow","_trimBufferThenGetEvents","queue_1","eventsCount","spliceCount","RaceSubscriber","hasFirst","RepeatSubscriber","RepeatWhenSubscriber","notifier","sourceIsBeingSubscribedTo","retries","retriesSubscription","subscribeToRetries","notifications","RetrySubscriber","RetryWhenSubscriber","SampleSubscriber","SampleTimeSubscriber","dispatchNotification","SequenceEqualCompareToSubscriber","SequenceEqualSubscriber","compareTo","comparor","_a","_b","_oneComplete","checkValues","a","b","areEqual","nextB","SingleSubscriber","seenValue","applySingleValue","singleValue","SkipSubscriber","SkipLastSubscriber","_skipCount","_count","_ring","currentIndex","oldValue","SkipUntilSubscriber","isInnerStopped","SkipWhileSubscriber","skipping","tryCallPredicate","SwitchMapSubscriber","_tryNotifyNext","SwitchMapToSubscriber","inner","tryResultSelector","TakeSubscriber","TakeUntilSubscriber","TakeWhileSubscriber","nextOrComplete","predicateResult","DoSubscriber","safeSubscriber","defaultThrottleConfig","leading","trailing","throttle","ThrottleOperator","ThrottleSubscriber","_leading","_trailing","_hasTrailingValue","_trailingValue","tryDurationSelector","_sendTrailing","ThrottleTimeSubscriber","TimeInterval","interval","TimeIntervalSubscriber","lastTime","span","TimeoutError","TimeoutSubscriber","absoluteTimeout","waitFor","errorInstance","scheduleTimeout","dispatchTimeout","TimeoutWithSubscriber","withObservable","WindowSubscriber","openWindow","prevWindow","newWindow","WindowCountSubscriber","windowSize","startWindowEvery","windows","c","window_1","CountedSubject","_numberOfNextedValues","WindowTimeSubscriber","windowTimeSpan","windowCreationInterval","maxWindowSize","dispatchWindowClose","dispatchWindowCreation","dispatchWindowTimeSpanOnly","numberOfNextedValues","closeWindow","window_2","WindowToggleSubscriber","openSubscription","unsubscribeClosingNotification","closingNotification","WithLatestFromSubscriber","found","StaticIterator","ZipSubscriber","iterators","StaticArrayIterator","ZipBufferIterator","stillUnsubscribed","notifyInactive","checkIterators","shouldComplete","nextResult","isComplete","debounceTime_1","throttle_1","contentNodeSelectorService","preferences","containingDialog","nodes","showingSearchResults","loadingSearchResults","inDialog","chosenNode","folderIdToShow","infiniteScroll","dropdownHideMyFiles","dropdownSiteList","debounceSearch","FormControl","buttonActionName","valueChanges","searchValue","pageSize","paginationSize","paginationStrategy","PaginationStrategy","Infinite","siteChanged","chosenSite","siteId","updateResults","needBreadcrumbs","whenInFolderNavigation","whenInSelectingSearchResult","startNewSearch","querySearch","getNextPageOfSearch","showSearchResults","loadPage","pagination","highlighter","onNodeSelect","attemptNodeSelection","detail","onFolderChange","onFolderLoaded","nodePage","resetChosenNode","choose","chosenSiteNode","onNodeDoubleClick","options","documentLibrary","performCustomSourceNavigation","UserPreferencesService","HighlightDirective","NodeEntityEvent","entity","BaseEvent","NodeEntryEvent","Finite","appConfig","permissionsStyle","locationFormat","navigationMode","DOUBLE_CLICK_NAVIGATION","thumbnails","selectionMode","multiselect","contentActions","contentActionsPosition","contextMenuActions","emptyFolderImageUrl","allowDropFiles","loading","enableInfiniteScrolling","nodeClick","nodeDblClick","folderChange","preview","ready","contextActionHandler","infiniteLoading","noPermission","layoutPresets","currentNodeAllowableOperations","CREATE_PERMISSION","totalItems","hasMoreItems","getContextActions","getNodeActions","currentAction","contextActionCallback","executeContentAction","columnList","columns","loadLayoutPresets","ShareDataTableAdapter","getDefaultSorting","setFilter","setImageResolver","contextActionHandlerSubscription","enforceSingleClickNavigationForMobile","schema","hasCustomLayout","setColumns","setupDefaultColumns","isSkipCountChanged","isMaxItemsChanged","loadFolder","previousValue","resetSelection","loadFolderNodesByFolderNodeId","run","onDataReady","isEmptyTemplateDefined","isNoPermissionTemplateDefined","isMobile","test","navigator","userAgent","getRows","ltarget_1","actionsByTarget","checkPermission","hasPermissions","allowableOperations","onShowContextMenu","performNavigation","canNavigateFolder","updateFolderData","isCustomSource","handlerSub","catch","loadTrashcan","loadSharedLinks","loadSites","loadMemberSites","loadFavorites","loadRecent","getFolderNode","getFolder","rootFolderId","changePage","getDeletedNodes","page","onPageLoaded","sharedLinksApi","findSharedLinks","sitesApi","peopleApi","getSiteMembership","where","favoritesApi","getFavorites","file","getPerson","person","username","language","sort","field","ascending","searchApi","preset","getLayoutPreset","onPreviewFile","onNodeClick","domEvent","CustomEvent","sender","bubbles","dispatchEvent","defaultPrevented","SINGLE_CLICK_NAVIGATION","onNodeDblClick","onNodeUnselect","onShowRowContextMenu","onShowRowActionsMenu","onExecuteRowAction","defaultSorting","sorting","direction","DataSorting","folderId","hasCurrentNodePermission","hasCreatePermission","externalSettings","assign","presetsDefaultModel","ObjectDataColumn","updatePagination","params","needsReload","DEFAULT_PAGE_SIZE","AppConfigService","DataColumnListComponent","rowStyle","rowStyleClass","DataTableComponent","ERR_ROW_NOT_FOUND","ERR_COL_NOT_FOUND","rows","setRows","dataRow","cache","formatDate","cacheValue","resolved","getDocumentThumbnailUrl","getDefaultMimeTypeIcon","TimeAgoPipe","DatePipe","getSorting","setSorting","sortRows","resolver","includes","numeric","left","valueOf","right","localeCompare","ShareDataRow","DocumentActionModel","json","FolderActionModel","getNodesPromise","opts","ROOT_ID","includeSource","relativePath","getNodeChildren","fromPromise","targetParentId","res","getNodeInfo","-trashcan-","-sites-","-mysites-","-favorites-","-recent-","-sharedlinks-","default","isSelected","ERR_OBJECT_NOT_FOUND","isDropTarget","isFolderAndHasPermissionToUpload","getPermissionClass","nodeEntity","permissionsClasses","currentPermissionsStyle","applyPermissionStyleToFolder","applyPermissionStyleToFile","ObjectUtils","FileDraggableDirective","UploadDragAreaComponent","UploadButtonComponent","FileUploadingDialogComponent","FileUploadingListComponent","FileUploadingListRowComponent","enabled","filesDropped","filesEntityDropped","folderEntityDropped","cssClassName","runOutsideAngular","addEventListener","onDragEnter","onDragOver","onDragLeave","onDropFiles","removeEventListener","items","dataTransfer","webkitGetAsEntry","isDirectory","files","FileUtils","toFileArray","uploadService","translateService","notificationService","versioning","onFilesDropped","fileModels","FileModel","newVersion","addToQueue","uploadFilesInTheQueue","onFilesEntityDropped","fileModel","fullPath","replace","onFolderEntityDropped","flattern","relativeFolder","showUndoNotificationBar","latestFilesAdded","messageTranslate","actionTranslate","openSnackMessageAction","onAction","cancelUpload","showErrorNotificationBar","errorMessage","isDroppable","onUploadFiles","parentId_1","fileInfo","uploadFiles","isPermitted","EXTENDIBLE_COMPONENT","UploadService","cancel","FileUploadStatus","onCancel","onRemove","uploadFolders","multipleFiles","acceptedFilesType","tooltip","permissionValue","isButtonDisabled","onFilesAdded","currentTarget","onDirectoryAdded","createFileModel","isFileAcceptable","isFileSizeAcceptable","webkitRelativePath","ext","extension","acceptableSize","maxFilesSize","staticTitle","changeDetecor","position","filesUploadingList","isDialogActive","totalCompleted","totalErrors","isDialogMinimized","isConfirmation","listSubscription","queueChanged","fileList","counterSubscription","fileUploadComplete","fileUploadDeleted","totalComplete","errorSubscription","fileUploadError","totalError","fileUploadSubscription","fileUpload","fileDeleted","objId","Cancelled","toggleConfirmation","cancelAllUploads","uploadList","cancelAllFiles","toggleMinimized","clearQueue","cancelFile","removeFile","getUploadingFiles","deletedFiles","Complete","forkJoin","isUploadCompleted","isUploadCancelled","some","Starting","Progress","Pending","every","Aborted","Deleted","permanent","WebscriptComponent","showData","contextRoot","servicePath","contentType","showError","clean","webScript","executeWebScript","scriptPath","scriptArgs","webScriptdata","showDataAsDataTable","ObjectDataTableAdapter","generateSchema","isDataTableContent","TagActionsComponent","TagListComponent","TagNodeListComponent","TagService","tagService","refresh","refreshTag","getTagsByNodeId","tagsEntries","removeTag","tag","getAllTheTags","successAdd","disableAddTag","addTag","searchTag","newTagName","errorMsg","searchTagName","currentTag","cleanErrorMsg","tagsApi","getNodeTags","getTags","tagName","tagBody","TagBody","promiseAdd","promiseRemove","RatingComponent","LikeComponent","RatingService","ratingService","average","ratingType","changeVote","stars","ratingObserver","getRating","aggregate","calculateStars","fill","updateVote","vote","postRating","likesCounter","isLike","numberOfRatings","ratedAt","likeClick","deleteRating","ratingsApi","ratingBody","myRating","rate","removeRating","modules","MatButtonModule","MatChipsModule","MatDialogModule","MatIconModule","MatCardModule","MatInputModule","MatListModule","MatProgressSpinnerModule","MatProgressBarModule","MatRippleModule","MatMenuModule","MatOptionModule","MatSelectModule","reduce","errs","input","prevContext","o","isFinite","numberIsFinite","valueAsNumber","sign","floor","abs","dispatchNext$1","MinimalSet","dispatchNext$2","timeSpanState"],"mappings":"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"}
