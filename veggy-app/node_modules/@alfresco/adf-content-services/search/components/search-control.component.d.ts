/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { AuthenticationService, ThumbnailService } from '@alfresco/adf-core';
import { EventEmitter, OnDestroy, OnInit, ElementRef } from '@angular/core';
import { MinimalNodeEntity, QueryBody } from 'alfresco-js-api';
import { SearchComponent } from './search.component';
export declare class SearchControlComponent implements OnInit, OnDestroy {
    authService: AuthenticationService;
    private thumbnailService;
    expandable: boolean;
    highlight: boolean;
    inputType: string;
    autocomplete: boolean;
    liveSearchEnabled: boolean;
    liveSearchMaxResults: number;
    customQueryBody: QueryBody;
    submit: EventEmitter<any>;
    searchChange: EventEmitter<string>;
    optionClicked: EventEmitter<any>;
    searchAutocomplete: SearchComponent;
    searchInput: ElementRef;
    private listResultElement;
    searchTerm: string;
    subscriptAnimationState: string;
    private toggleSearch;
    private focusSubject;
    constructor(authService: AuthenticationService, thumbnailService: ThumbnailService);
    applySearchFocus(animationDoneEvent: any): void;
    ngOnInit(): void;
    ngOnDestroy(): void;
    isLoggedIn(): boolean;
    searchSubmit(event: any): void;
    inputChange(event: any): void;
    getAutoComplete(): string;
    getMimeTypeIcon(node: MinimalNodeEntity): string;
    isSearchBarActive(): boolean;
    toggleSearchBar(): void;
    elementClicked(item: any): void;
    onFocus($event: any): void;
    onBlur($event: any): void;
    activateToolbar(): void;
    selectFirstResult(): void;
    onRowArrowDown($event: KeyboardEvent): void;
    onRowArrowUp($event: KeyboardEvent): void;
    private setupFocusEventHandlers();
    private getNextElementSibling(node);
    private getPreviousElementSibling(node);
}
