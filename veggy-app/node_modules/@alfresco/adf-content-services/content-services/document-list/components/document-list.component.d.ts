/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { DataCellEvent, DataRowActionEvent, DataTableComponent } from '@alfresco/adf-core';
import { AlfrescoApiService, AppConfigService, DataColumnListComponent, UserPreferencesService } from '@alfresco/adf-core';
import { AfterContentInit, ElementRef, EventEmitter, NgZone, OnChanges, OnInit, SimpleChanges, TemplateRef } from '@angular/core';
import { MinimalNodeEntity, MinimalNodeEntryEntity, NodePaging } from 'alfresco-js-api';
import { Subject } from 'rxjs/Subject';
import { ShareDataRow } from './../data/share-data-row.model';
import { ShareDataTableAdapter } from './../data/share-datatable-adapter';
import { ContentActionModel } from './../models/content-action.model';
import { PermissionStyleModel } from './../models/permissions-style.model';
import { DocumentListService } from './../services/document-list.service';
import { NodeEntityEvent, NodeEntryEvent } from './node.event';
export declare enum PaginationStrategy {
    Finite = 0,
    Infinite = 1,
}
export declare class DocumentListComponent implements OnInit, OnChanges, AfterContentInit {
    private documentListService;
    private ngZone;
    private elementRef;
    private apiService;
    private appConfig;
    private preferences;
    static SINGLE_CLICK_NAVIGATION: string;
    static DOUBLE_CLICK_NAVIGATION: string;
    static DEFAULT_PAGE_SIZE: number;
    columnList: DataColumnListComponent;
    permissionsStyle: PermissionStyleModel[];
    locationFormat: string;
    navigate: boolean;
    navigationMode: string;
    thumbnails: boolean;
    selectionMode: string;
    multiselect: boolean;
    contentActions: boolean;
    contentActionsPosition: string;
    contextMenuActions: boolean;
    emptyFolderImageUrl: string;
    allowDropFiles: boolean;
    sorting: string[];
    rowStyle: string;
    rowStyleClass: string;
    loading: boolean;
    rowFilter: any | null;
    imageResolver: any | null;
    currentFolderId: string;
    folderNode: MinimalNodeEntryEntity;
    node: NodePaging;
    maxItems: number;
    skipCount: number;
    enableInfiniteScrolling: boolean;
    nodeClick: EventEmitter<NodeEntityEvent>;
    nodeDblClick: EventEmitter<NodeEntityEvent>;
    folderChange: EventEmitter<NodeEntryEvent>;
    preview: EventEmitter<NodeEntityEvent>;
    ready: EventEmitter<NodePaging>;
    error: EventEmitter<any>;
    dataTable: DataTableComponent;
    errorMessage: any;
    actions: ContentActionModel[];
    emptyFolderTemplate: TemplateRef<any>;
    noPermissionTemplate: TemplateRef<any>;
    contextActionHandler: Subject<any>;
    data: ShareDataTableAdapter;
    infiniteLoading: boolean;
    noPermission: boolean;
    selection: MinimalNodeEntity[];
    private layoutPresets;
    private currentNodeAllowableOperations;
    private CREATE_PERMISSION;
    constructor(documentListService: DocumentListService, ngZone: NgZone, elementRef: ElementRef, apiService: AlfrescoApiService, appConfig: AppConfigService, preferences: UserPreferencesService);
    getContextActions(node: MinimalNodeEntity): {
        model: ContentActionModel;
        node: MinimalNodeEntity;
        subject: Subject<any>;
    }[];
    contextActionCallback(action: any): void;
    readonly hasCustomLayout: boolean;
    ngOnInit(): void;
    ngAfterContentInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    reload(merge?: boolean): void;
    isEmptyTemplateDefined(): boolean;
    isNoPermissionTemplateDefined(): boolean;
    isMobile(): boolean;
    isEmpty(): boolean;
    getNodeActions(node: MinimalNodeEntity | any): ContentActionModel[];
    checkPermission(node: any, action: ContentActionModel): ContentActionModel;
    private hasPermissions(node);
    onShowContextMenu(e?: Event): void;
    performNavigation(node: MinimalNodeEntity): boolean;
    performCustomSourceNavigation(node: MinimalNodeEntity): boolean;
    updateFolderData(node: MinimalNodeEntity): void;
    executeContentAction(node: MinimalNodeEntity, action: ContentActionModel): void;
    loadFolder(merge?: boolean): void;
    loadFolderByNodeId(nodeId: string, merge?: boolean): void;
    loadFolderNodesByFolderNodeId(id: string, maxItems: number, skipCount: number, merge?: boolean): Promise<any>;
    resetSelection(): void;
    private isSkipCountChanged(changePage);
    private isMaxItemsChanged(changePage);
    private loadTrashcan(merge?);
    private loadSharedLinks(merge?);
    private loadSites(merge?);
    private loadMemberSites(merge?);
    private loadFavorites(merge?);
    private loadRecent(merge?);
    private onPageLoaded(page, merge?);
    setupDefaultColumns(preset?: string): void;
    onPreviewFile(node: MinimalNodeEntity): void;
    onNodeClick(node: MinimalNodeEntity): void;
    onNodeDblClick(node: MinimalNodeEntity): void;
    onNodeSelect(event: {
        row: ShareDataRow;
        selection: Array<ShareDataRow>;
    }): void;
    onNodeUnselect(event: {
        row: ShareDataRow;
        selection: Array<ShareDataRow>;
    }): void;
    onShowRowContextMenu(event: DataCellEvent): void;
    onShowRowActionsMenu(event: DataCellEvent): void;
    onExecuteRowAction(event: DataRowActionEvent): void;
    private enforceSingleClickNavigationForMobile();
    private getDefaultSorting();
    canNavigateFolder(node: MinimalNodeEntity): boolean;
    isCustomSource(folderId: string): boolean;
    hasCurrentNodePermission(permission: string): boolean;
    hasCreatePermission(): boolean;
    private loadLayoutPresets();
    private getLayoutPreset(name?);
}
