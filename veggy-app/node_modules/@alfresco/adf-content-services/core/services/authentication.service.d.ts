/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Observable } from 'rxjs/Observable';
import { Subject } from 'rxjs/Subject';
import { AlfrescoApiService } from './alfresco-api.service';
import { CookieService } from './cookie.service';
import { LogService } from './log.service';
import { StorageService } from './storage.service';
import { UserPreferencesService } from './user-preferences.service';
import 'rxjs/add/observable/fromPromise';
import 'rxjs/add/operator/catch';
import 'rxjs/add/observable/throw';
export declare class AuthenticationService {
    private preferences;
    private alfrescoApi;
    private storage;
    private cookie;
    private logService;
    private redirectUrl;
    onLogin: Subject<any>;
    onLogout: Subject<any>;
    constructor(preferences: UserPreferencesService, alfrescoApi: AlfrescoApiService, storage: StorageService, cookie: CookieService, logService: LogService);
    isLoggedIn(): boolean;
    login(username: string, password: string, rememberMe?: boolean): Observable<{
        type: string;
        ticket: any;
    }>;
    private saveRememberMeCookie(rememberMe);
    private isRememberMeSet();
    private callApiLogin(username, password);
    logout(): Observable<any>;
    private callApiLogout();
    removeTicket(): void;
    getTicketEcm(): string | null;
    getTicketBpm(): string | null;
    getTicketEcmBase64(): string | null;
    saveTickets(): void;
    saveTicketEcm(): void;
    saveTicketBpm(): void;
    isEcmLoggedIn(): boolean;
    isBpmLoggedIn(): boolean;
    getEcmUsername(): string;
    getBpmUsername(): string;
    setRedirectUrl(url: string): void;
    getRedirectUrl(): string;
    handleError(error: any): Observable<any>;
}
