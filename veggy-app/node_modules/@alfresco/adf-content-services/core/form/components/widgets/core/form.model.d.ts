/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { FormService } from './../../../services/form.service';
import { FormFieldTemplates } from './form-field-templates';
import { FormFieldModel } from './form-field.model';
import { FormOutcomeModel } from './form-outcome.model';
import { FormValues } from './form-values';
import { FormWidgetModel } from './form-widget.model';
import { TabModel } from './tab.model';
import { FormFieldValidator } from './form-field-validator';
export declare class FormModel {
    protected formService: FormService;
    static UNSET_TASK_NAME: string;
    static SAVE_OUTCOME: string;
    static COMPLETE_OUTCOME: string;
    static START_PROCESS_OUTCOME: string;
    readonly id: string;
    readonly name: string;
    readonly taskId: string;
    readonly taskName: string;
    processDefinitionId: string;
    private _isValid;
    readonly isValid: boolean;
    className: string;
    readOnly: boolean;
    tabs: TabModel[];
    fields: FormWidgetModel[];
    outcomes: FormOutcomeModel[];
    customFieldTemplates: FormFieldTemplates;
    fieldValidators: FormFieldValidator[];
    readonly selectedOutcome: string;
    values: FormValues;
    processVariables: any;
    readonly json: any;
    hasTabs(): boolean;
    hasFields(): boolean;
    hasOutcomes(): boolean;
    constructor(json?: any, data?: FormValues, readOnly?: boolean, formService?: FormService);
    onFormFieldChanged(field: FormFieldModel): void;
    getFieldById(fieldId: string): FormFieldModel;
    getFormFields(): FormFieldModel[];
    markAsInvalid(): void;
    validateForm(): void;
    validateField(field: FormFieldModel): void;
    private parseRootFields(json);
    private loadData(data);
}
