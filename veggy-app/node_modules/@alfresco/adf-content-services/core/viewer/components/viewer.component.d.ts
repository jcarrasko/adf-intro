/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Location } from '@angular/common';
import { EventEmitter, OnChanges, OnDestroy, TemplateRef } from '@angular/core';
import { MinimalNodeEntryEntity } from 'alfresco-js-api';
import { BaseEvent } from '../../events';
import { AlfrescoApiService } from '../../services/alfresco-api.service';
import { LogService } from '../../services/log.service';
import { RenditionsService } from '../../services/renditions.service';
import { ViewerMoreActionsComponent } from './viewer-more-actions.component';
import { ViewerOpenWithComponent } from './viewer-open-with.component';
import { ViewerSidebarComponent } from './viewer-sidebar.component';
import { ViewerToolbarComponent } from './viewer-toolbar.component';
export declare class ViewerComponent implements OnDestroy, OnChanges {
    private apiService;
    private logService;
    private location;
    private renditionService;
    toolbar: ViewerToolbarComponent;
    sidebar: ViewerSidebarComponent;
    mnuOpenWith: ViewerOpenWithComponent;
    mnuMoreActions: ViewerMoreActionsComponent;
    urlFile: string;
    blobFile: Blob;
    fileNodeId: string;
    overlayMode: boolean;
    showViewer: boolean;
    showToolbar: boolean;
    displayName: string;
    allowGoBack: boolean;
    allowDownload: boolean;
    allowPrint: boolean;
    allowShare: boolean;
    allowSidebar: boolean;
    showSidebar: boolean;
    sidebarPosition: string;
    sidebarTemplate: TemplateRef<any>;
    goBack: EventEmitter<BaseEvent<any>>;
    download: EventEmitter<BaseEvent<any>>;
    print: EventEmitter<BaseEvent<any>>;
    share: EventEmitter<BaseEvent<any>>;
    showViewerChange: EventEmitter<boolean>;
    extensionChange: EventEmitter<string>;
    viewerType: string;
    downloadUrl: string;
    fileName: string;
    isLoading: boolean;
    node: MinimalNodeEntryEntity;
    extensionTemplates: {
        template: TemplateRef<any>;
        isVisible: boolean;
    }[];
    externalExtensions: string[];
    urlFileContent: string;
    otherMenu: any;
    extension: string;
    mimeType: string;
    sidebarTemplateContext: {
        node: MinimalNodeEntryEntity;
    };
    private extensions;
    private mimeTypes;
    constructor(apiService: AlfrescoApiService, logService: LogService, location: Location, renditionService: RenditionsService);
    ngOnChanges(changes: any): Promise<{}>;
    private getDisplayName(name);
    scrollTop(): void;
    getViewerTypeByMimeType(mimeType: string): string;
    getViewerTypeByExtension(extension: string): "media" | "image" | "text" | "custom" | "unknown" | "pdf";
    onBackButtonClick(): void;
    close(): void;
    cleanup(): void;
    ngOnDestroy(): void;
    getFilenameFromUrl(url: string): string;
    getFileExtension(fileName: string): string;
    isCustomViewerExtension(extension: string): boolean;
    handleKeyboardEvent(event: KeyboardEvent): void;
    downloadContent(): void;
    printContent(): void;
    shareContent(): void;
    private displayAsPdf(nodeId);
    private showPdfRendition(nodeId);
}
