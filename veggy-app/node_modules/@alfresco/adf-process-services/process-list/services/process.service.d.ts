/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { AlfrescoApiService } from '@alfresco/adf-core';
import { Observable } from 'rxjs/Observable';
import { TaskDetailsModel } from '../../task-list';
import { ProcessFilterParamRepresentationModel } from '../models/filter-process.model';
import { ProcessDefinitionRepresentation } from '../models/process-definition.model';
import { ProcessInstanceVariable } from '../models/process-instance-variable.model';
import { ProcessInstance } from '../models/process-instance.model';
import 'rxjs/add/observable/throw';
export declare class ProcessService {
    private alfrescoApiService;
    constructor(alfrescoApiService: AlfrescoApiService);
    getProcessInstances(requestNode: ProcessFilterParamRepresentationModel, processDefinitionKey?: string): Observable<ProcessInstance[]>;
    /**
     * fetch the Process Audit information as a pdf
     * @param processId - the process id
     */
    fetchProcessAuditPdfById(processId: string): Observable<Blob>;
    /**
     * fetch the Process Audit information in a json format
     * @param processId - the process id
     */
    fetchProcessAuditJsonById(processId: string): Observable<any>;
    getProcess(processInstanceId: string): Observable<ProcessInstance>;
    getProcessTasks(processInstanceId: string, state?: string): Observable<TaskDetailsModel[]>;
    getProcessDefinitions(appId?: number): Observable<ProcessDefinitionRepresentation[]>;
    startProcess(processDefinitionId: string, name: string, outcome?: string, startFormValues?: any, variables?: ProcessInstanceVariable[]): Observable<ProcessInstance>;
    cancelProcess(processInstanceId: string): Observable<void>;
    getProcessInstanceVariables(processInstanceId: string): Observable<ProcessInstanceVariable[]>;
    createOrUpdateProcessInstanceVariables(processInstanceId: string, variables: ProcessInstanceVariable[]): Observable<ProcessInstanceVariable[]>;
    deleteProcessInstanceVariable(processInstanceId: string, variableName: string): Observable<void>;
    private extractData(res);
    private handleProcessError(error);
}
