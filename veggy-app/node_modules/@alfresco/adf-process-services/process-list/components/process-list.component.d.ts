/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { DataRowEvent, DataTableAdapter } from '@alfresco/adf-core';
import { AppConfigService, DataColumnListComponent } from '@alfresco/adf-core';
import { AfterContentInit, EventEmitter, OnChanges, SimpleChanges } from '@angular/core';
import { ProcessFilterParamRepresentationModel } from '../models/filter-process.model';
import { ProcessInstance } from '../models/process-instance.model';
import { ProcessService } from '../services/process.service';
export declare class ProcessInstanceListComponent implements OnChanges, AfterContentInit {
    private processService;
    private appConfig;
    columnList: DataColumnListComponent;
    appId: number;
    processDefinitionKey: string;
    state: string;
    sort: string;
    name: string;
    presetColumn: string;
    requestNode: ProcessFilterParamRepresentationModel;
    data: DataTableAdapter;
    rowClick: EventEmitter<string>;
    success: EventEmitter<ProcessInstance[]>;
    error: EventEmitter<any>;
    currentInstanceId: string;
    isLoading: boolean;
    layoutPresets: {};
    constructor(processService: ProcessService, appConfig: AppConfigService);
    ngAfterContentInit(): void;
    /**
     * Setup html-based (html definitions) or code behind (data adapter) schema.
     * If component is assigned with an empty data adater the default schema settings applied.
     */
    setupSchema(): void;
    ngOnChanges(changes: SimpleChanges): void;
    private isPropertyChanged(changes);
    reload(): void;
    private load(requestNode);
    /**
     * Create an array of ObjectDataRow
     * @param instances
     * @returns {ObjectDataRow[]}
     */
    private createDataRow(instances);
    /**
     * Render the instances list
     *
     * @param instances
     */
    private renderInstances(instances);
    /**
     * Sort the datatable rows based on current value of 'sort' property
     */
    private setDatatableSorting();
    /**
     * Select the first instance of a list if present
     */
    selectFirst(): void;
    /**
     * Return the current id
     * @returns {string}
     */
    getCurrentId(): string;
    /**
     * Check if the list is empty
     * @returns {ObjectDataTableAdapter|boolean}
     */
    isListEmpty(): boolean;
    /**
     * Emit the event rowClick passing the current task id when the row is clicked
     * @param event
     */
    onRowClick(event: DataRowEvent): void;
    /**
     * Emit the event rowClick passing the current task id when pressed the Enter key on the selected row
     * @param event
     */
    onRowKeyUp(event: CustomEvent): void;
    /**
     * Optimize name field
     * @param instances
     * @returns {any[]}
     */
    private optimizeNames(instances);
    getProcessNameOrDescription(processInstance: any, dateFormat: any): string;
    getFormatDate(value: any, format: string): string;
    private createRequestNode();
    setupDefaultColumns(preset?: string): void;
    private loadLayoutPresets();
    private getLayoutPreset(name?);
}
