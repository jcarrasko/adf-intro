/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { AppsProcessService } from '@alfresco/adf-core';
import { EventEmitter, OnChanges, OnInit, SimpleChanges } from '@angular/core';
import { ProcessInstanceFilterRepresentation } from 'alfresco-js-api';
import { Observable } from 'rxjs/Observable';
import { FilterProcessRepresentationModel } from '../models/filter-process.model';
import { ProcessFilterService } from './../services/process-filter.service';
export declare class ProcessFiltersComponent implements OnInit, OnChanges {
    private processFilterService;
    private appsProcessService;
    filterParam: FilterProcessRepresentationModel;
    filterClick: EventEmitter<ProcessInstanceFilterRepresentation>;
    success: EventEmitter<ProcessInstanceFilterRepresentation[]>;
    error: EventEmitter<any>;
    appId: number;
    appName: string;
    showIcon: boolean;
    private filterObserver;
    filter$: Observable<ProcessInstanceFilterRepresentation>;
    currentFilter: ProcessInstanceFilterRepresentation;
    filters: ProcessInstanceFilterRepresentation[];
    constructor(processFilterService: ProcessFilterService, appsProcessService: AppsProcessService);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    /**
     * Return the filter list filtered by appId
     * @param appId - optional
     */
    getFiltersByAppId(appId?: number): void;
    /**
     * Return the filter list filtered by appName
     * @param appName
     */
    getFiltersByAppName(appName: string): void;
    /**
     * Pass the selected filter as next
     * @param filter
     */
    selectFilter(filter: ProcessInstanceFilterRepresentation): void;
    /**
     * Select the first filter of a list if present
     */
    selectProcessFilter(filterParam: FilterProcessRepresentationModel): void;
    /**
     * Select the Running filter
     */
    selectRunningFilter(): void;
    /**
     * Select as default task filter the first in the list
     */
    selectDefaultTaskFilter(): void;
    /**
     * Return the current task
     * @returns {ProcessInstanceFilterRepresentation}
     */
    getCurrentFilter(): ProcessInstanceFilterRepresentation;
    /**
     * Check if the filter list is empty
     * @returns {boolean}
     */
    isFilterListEmpty(): boolean;
    /**
     * Reset the filters properties
     */
    private resetFilter();
    private isCurrentFilterEmpty();
}
