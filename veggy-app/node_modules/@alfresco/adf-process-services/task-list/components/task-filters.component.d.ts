/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { AppsProcessService } from '@alfresco/adf-core';
import { EventEmitter, OnChanges, OnInit, SimpleChanges } from '@angular/core';
import { Observable } from 'rxjs/Observable';
import { FilterParamsModel, FilterRepresentationModel } from '../models/filter.model';
import { TaskFilterService } from './../services/task-filter.service';
import { TaskListService } from './../services/tasklist.service';
export declare class TaskFiltersComponent implements OnInit, OnChanges {
    private taskFilterService;
    private taskListService;
    private appsProcessService;
    filterParam: FilterParamsModel;
    filterClick: EventEmitter<FilterRepresentationModel>;
    success: EventEmitter<any>;
    error: EventEmitter<any>;
    appId: number;
    appName: string;
    hasIcon: boolean;
    private filterObserver;
    filter$: Observable<FilterRepresentationModel>;
    currentFilter: FilterRepresentationModel;
    filters: FilterRepresentationModel[];
    constructor(taskFilterService: TaskFilterService, taskListService: TaskListService, appsProcessService: AppsProcessService);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    /**
     * Return the task list filtered by appId or by appName
     * @param appId
     * @param appName
     */
    getFilters(appId?: number, appName?: string): void;
    /**
     * Return the filter list filtered by appId
     * @param appId - optional
     */
    getFiltersByAppId(appId?: number): void;
    /**
     * Return the filter list filtered by appName
     * @param appName
     */
    getFiltersByAppName(appName: string): void;
    /**
     * Pass the selected filter as next
     * @param filter
     */
    selectFilter(filter: FilterRepresentationModel): void;
    selectFilterWithTask(taskId: string): void;
    /**
     * Select the first filter of a list if present
     */
    selectTaskFilter(filterParam: FilterParamsModel, filteredFilterList: FilterRepresentationModel[]): void;
    /**
     * Select as default task filter the first in the list
     */
    selectDefaultTaskFilter(filteredFilterList: FilterRepresentationModel[]): void;
    /**
     * Return the current task
     * @returns {FilterRepresentationModel}
     */
    getCurrentFilter(): FilterRepresentationModel;
    /**
     * Check if the filter list is empty
     * @returns {boolean}
     */
    isFilterListEmpty(): boolean;
    /**
     * Reset the filters properties
     */
    private resetFilter();
}
