/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { DataRowEvent, DataTableAdapter, ObjectDataRow } from '@alfresco/adf-core';
import { AppConfigService, DataColumnListComponent } from '@alfresco/adf-core';
import { AfterContentInit, EventEmitter, OnChanges, OnInit, SimpleChanges } from '@angular/core';
import { TaskQueryRequestRepresentationModel } from '../models/filter.model';
import { TaskListService } from './../services/tasklist.service';
export declare class TaskListComponent implements OnChanges, OnInit, AfterContentInit {
    private taskListService;
    private appConfig;
    requestNode: TaskQueryRequestRepresentationModel;
    columnList: DataColumnListComponent;
    appId: number;
    processInstanceId: string;
    processDefinitionKey: string;
    state: string;
    assignment: string;
    sort: string;
    name: string;
    landingTaskId: string;
    data: DataTableAdapter;
    selectionMode: string;
    presetColumn: string;
    multiselect: boolean;
    rowClick: EventEmitter<string>;
    rowsSelected: EventEmitter<any[]>;
    success: EventEmitter<any>;
    error: EventEmitter<any>;
    currentInstanceId: string;
    selectedInstances: any[];
    layoutPresets: {};
    page: number;
    size: number;
    isLoading: boolean;
    /**
     * Toggles custom data source mode.
     * When enabled the component reloads data from it's current source instead of the server side.
     * This allows generating and displaying custom data sets (i.e. filtered out content).
     *
     * @type {boolean}
     * @memberOf TaskListComponent
     */
    hasCustomDataSource: boolean;
    isStreamLoaded: boolean;
    constructor(taskListService: TaskListService, appConfig: AppConfigService);
    initStream(): void;
    ngOnInit(): void;
    ngAfterContentInit(): void;
    /**
     * Setup html-based (html definitions) or code behind (data adapter) schema.
     * If component is assigned with an empty data adater the default schema settings applied.
     */
    setupSchema(): void;
    ngOnChanges(changes: SimpleChanges): void;
    setCustomDataSource(rows: ObjectDataRow[]): void;
    private isPropertyChanged(changes);
    reload(): void;
    private load(requestNode);
    private loadTasksByState();
    /**
     * Create an array of ObjectDataRow
     * @param instances
     * @returns {ObjectDataRow[]}
     */
    private createDataRow(instances);
    /**
     * Render the instances list
     *
     * @param instances
     */
    private renderInstances(instances);
    /**
     * Select the task given in input if present
     */
    selectTask(taskIdSelected: string): void;
    /**
     * Return the current id
     * @returns {string}
     */
    getCurrentId(): string;
    /**
     * Check if the taskId is the same of the selected task
     * @param taskId
     * @returns {boolean}
     */
    isEqualToCurrentId(taskId: string): boolean;
    /**
     * Check if the list is empty
     * @returns {ObjectDataTableAdapter|boolean}
     */
    isListEmpty(): boolean;
    onRowClick(item: DataRowEvent): void;
    onRowSelect(event: CustomEvent): void;
    onRowUnselect(event: CustomEvent): void;
    onRowKeyUp(event: CustomEvent): void;
    /**
     * Optimize name field
     * @param istances
     * @returns {any[]}
     */
    private optimizeNames(istances);
    private createRequestNode();
    setupDefaultColumns(preset?: string): void;
    private loadLayoutPresets();
    private getLayoutPreset(name?);
}
