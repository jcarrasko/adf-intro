/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { PeopleProcessService, UserProcessModel } from '@alfresco/adf-core';
import { AuthenticationService, CardViewUpdateService, LogService } from '@alfresco/adf-core';
import { EventEmitter, OnChanges, OnInit, SimpleChanges, TemplateRef } from '@angular/core';
import { MatDialog, MatDialogRef } from '@angular/material';
import { Observable } from 'rxjs/Observable';
import { ContentLinkModel, FormFieldValidator, FormModel, FormOutcomeEvent } from '@alfresco/adf-core';
import { TaskDetailsModel } from '../models/task-details.model';
import { TaskListService } from './../services/tasklist.service';
import { CommentsComponent } from '../../comments';
export declare class TaskDetailsComponent implements OnInit, OnChanges {
    private taskListService;
    private authService;
    private peopleProcessService;
    private logService;
    private cardViewUpdateService;
    private dialog;
    activiticomments: CommentsComponent;
    activitichecklist: any;
    errorDialog: TemplateRef<any>;
    debugMode: boolean;
    taskId: string;
    showNextTask: boolean;
    showHeader: boolean;
    showHeaderContent: boolean;
    showInvolvePeople: boolean;
    showComments: boolean;
    showChecklist: boolean;
    showFormTitle: boolean;
    showFormCompleteButton: boolean;
    showFormSaveButton: boolean;
    readOnlyForm: boolean;
    showFormRefreshButton: boolean;
    fieldValidators: FormFieldValidator[];
    formSaved: EventEmitter<FormModel>;
    formCompleted: EventEmitter<FormModel>;
    formContentClicked: EventEmitter<ContentLinkModel>;
    formLoaded: EventEmitter<FormModel>;
    taskCreated: EventEmitter<TaskDetailsModel>;
    taskDeleted: EventEmitter<string>;
    error: EventEmitter<any>;
    executeOutcome: EventEmitter<FormOutcomeEvent>;
    assignTask: EventEmitter<void>;
    taskDetails: TaskDetailsModel;
    taskFormName: string;
    taskPeople: UserProcessModel[];
    noTaskDetailsTemplateComponent: TemplateRef<any>;
    showAssignee: boolean;
    private peopleSearchObserver;
    errorDialogRef: MatDialogRef<TemplateRef<any>>;
    peopleSearch$: Observable<UserProcessModel[]>;
    constructor(taskListService: TaskListService, authService: AuthenticationService, peopleProcessService: PeopleProcessService, logService: LogService, cardViewUpdateService: CardViewUpdateService, dialog: MatDialog);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    /**
     * Reset the task details
     */
    private reset();
    /**
     * Check if the task has a form
     * @returns {TaskDetailsModel|string|boolean}
     */
    hasFormKey(): boolean;
    isTaskActive(): boolean;
    /**
     * Save a task detail and update it after a successful response
     *
     * @param updateNotification
     */
    private updateTaskDetails(updateNotification);
    private clickTaskDetails(clickNotification);
    /**
     * Load the activiti task details
     * @param taskId
     */
    private loadDetails(taskId);
    isAssigned(): boolean;
    isAssignedToMe(): boolean;
    /**
     * Retrieve the next open task
     * @param processInstanceId
     * @param processDefinitionId
     */
    private loadNextTask(processInstanceId, processDefinitionId);
    /**
     * Complete button clicked
     */
    onComplete(): void;
    onFormContentClick(content: ContentLinkModel): void;
    onFormSaved(form: FormModel): void;
    onFormCompleted(form: FormModel): void;
    onFormLoaded(form: FormModel): void;
    onChecklistTaskCreated(task: TaskDetailsModel): void;
    onChecklistTaskDeleted(taskId: string): void;
    onFormError(error: any): void;
    onFormExecuteOutcome(event: FormOutcomeEvent): void;
    closeErrorDialog(): void;
    onClaimAction(taskId: string): void;
    toggleHeaderContent(): void;
    isCompletedTask(): boolean;
    searchUser(searchedWord: string): void;
    onCloseSearch(): void;
    assignTaskToUser(selectedUser: UserProcessModel): void;
    getTaskHeaderViewClass(): string;
    isReadOnlyComment(): boolean;
}
