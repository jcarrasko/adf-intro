/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { AlfrescoApiService, LogService } from '@alfresco/adf-core';
import { Observable } from 'rxjs/Observable';
import { FilterRepresentationModel, TaskQueryRequestRepresentationModel } from '../models/filter.model';
import { Form } from '../models/form.model';
import { TaskDetailsModel } from '../models/task-details.model';
import { TaskListModel } from '../models/task-list.model';
import 'rxjs/add/observable/throw';
import 'rxjs/add/observable/forkJoin';
import 'rxjs/add/observable/fromPromise';
import 'rxjs/operator/switchMap';
export declare class TaskListService {
    private apiService;
    private logService;
    private tasksListSubject;
    tasksList$: Observable<TaskListModel>;
    constructor(apiService: AlfrescoApiService, logService: LogService);
    /**
     * Return all the filters in the list where the task id belong
     * @param taskId - string
     * @param filter - FilterRepresentationModel []
     * @returns {FilterRepresentationModel}
     */
    getFilterForTaskById(taskId: string, filterList: FilterRepresentationModel[]): Observable<FilterRepresentationModel>;
    /**
     * Return the search node for query task based on the given filter
     * @param filter - FilterRepresentationModel
     * @returns {TaskQueryRequestRepresentationModel}
     */
    private generateTaskRequestNodeFromFilter(filter);
    /**
     * Check if a taskId is filtered with the given filter
     * @param taskId - string
     * @param filter - FilterRepresentationModel
     * @returns {FilterRepresentationModel}
     */
    isTaskRelatedToFilter(taskId: string, filter: FilterRepresentationModel): Observable<FilterRepresentationModel>;
    /**
     * Retrieve all the tasks filtered by filterModel
     * @param filter - TaskFilterRepresentationModel
     * @returns {any}
     */
    getTasks(requestNode: TaskQueryRequestRepresentationModel): Observable<TaskListModel>;
    /**
     * Retrieve tasks filtered by filterModel and state
     * @param filter - TaskFilterRepresentationModel
     * @returns {any}
     */
    findTasksByState(requestNode: TaskQueryRequestRepresentationModel, state?: string): Observable<TaskListModel>;
    /**
     * Retrieve all tasks filtered by filterModel and state
     * @param filter - TaskFilterRepresentationModel
     * @returns {any}
     */
    findAllTaskByState(requestNode: TaskQueryRequestRepresentationModel, state?: string): Observable<TaskListModel>;
    /**
     * Retrieve all tasks filtered by filterModel irrespective of state
     * @param filter - TaskFilterRepresentationModel
     * @returns {any}
     */
    findAllTasksWithoutState(requestNode: TaskQueryRequestRepresentationModel): Observable<TaskListModel>;
    /**
     * Retrieve all the task details
     * @param id - taskId
     * @returns {<TaskDetailsModel>}
     */
    getTaskDetails(taskId: string): Observable<TaskDetailsModel>;
    /**
     * Retrieve all the task's checklist
     * @param id - taskId
     * @returns {TaskDetailsModel}
     */
    getTaskChecklist(id: string): Observable<TaskDetailsModel[]>;
    /**
     * Retrieve all the form shared with this user
     * @returns {TaskDetailsModel}
     */
    getFormList(): Observable<Form[]>;
    attachFormToATask(taskId: string, formId: number): Observable<any>;
    /**
     * Add a task
     * @param task - TaskDetailsModel
     * @returns {TaskDetailsModel}
     */
    addTask(task: TaskDetailsModel): Observable<TaskDetailsModel>;
    /**
     * Delete a task
     * @param taskId - string
     */
    deleteTask(taskId: string): Observable<TaskDetailsModel>;
    /**
     * Make the task completed
     * @param id - taskId
     * @returns {TaskDetailsModel}
     */
    completeTask(taskId: string): Observable<any>;
    /**
     * Return the total number of the tasks by filter
     * @param requestNode - TaskFilterRepresentationModel
     * @returns {any}
     */
    getTotalTasks(requestNode: TaskQueryRequestRepresentationModel): Observable<any>;
    /**
     * Create a new standalone task
     * @param task - TaskDetailsModel
     * @returns {TaskDetailsModel}
     */
    createNewTask(task: TaskDetailsModel): Observable<TaskDetailsModel>;
    /**
     * Assign task to user/group
     * @param taskId - string
     * @param requestNode - any
     * @returns {TaskDetailsModel}
     */
    assignTask(taskId: string, requestNode: any): Observable<TaskDetailsModel>;
    assignTaskByUserId(taskId: string, userId: number): Observable<TaskDetailsModel>;
    /**
     * Claim a task
     * @param id - taskId
     */
    claimTask(taskId: string): Observable<TaskDetailsModel>;
    /**
     * Unclaim a task
     * @param id - taskId
     */
    unclaimTask(taskId: string): Observable<TaskDetailsModel>;
    /**
     * Update due date
     * @param dueDate - the new due date
     */
    updateTask(taskId: any, updated: any): Observable<TaskDetailsModel>;
    /**
     * fetch the Task Audit information as a pdf
     * @param taskId - the task id
     */
    fetchTaskAuditPdfById(taskId: string): Observable<Blob>;
    /**
     * fetch the Task Audit information in a json format
     * @param taskId - the task id
     */
    fetchTaskAuditJsonById(taskId: string): Observable<any>;
    private callApiTasksFiltered(requestNode);
    private callApiTaskDetails(taskId);
    private callApiAddTask(task);
    private callApiDeleteTask(taskId);
    private callApiTaskChecklist(taskId);
    private callApiCreateTask(task);
    private callApiAssignTask(taskId, requestNode);
    private handleError(error);
}
