/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { AlfrescoApiService, LogService } from '@alfresco/adf-core';
import { Observable } from 'rxjs/Observable';
import { FilterRepresentationModel } from '../models/filter.model';
import { TaskListModel } from '../models/task-list.model';
import 'rxjs/add/observable/throw';
export declare class TaskFilterService {
    private apiService;
    private logService;
    private tasksListSubject;
    tasksList$: Observable<TaskListModel>;
    constructor(apiService: AlfrescoApiService, logService: LogService);
    /**
     * Create and return the default filters
     * @param appId
     * @returns {FilterRepresentationModel[]}
     */
    createDefaultFilters(appId: number): Observable<FilterRepresentationModel[]>;
    /**
     * Retrieve all the Tasks filters
     * @returns {Observable<any>}
     */
    getTaskListFilters(appId?: number): Observable<any>;
    /**
     * Retrieve the Tasks filter by id
     * @param filterId - number - The id of the filter
     * @param appId - string - optional - The id of app
     * @returns {Observable<FilterRepresentationModel>}
     */
    getTaskFilterById(filterId: number, appId?: number): Observable<FilterRepresentationModel>;
    /**
     * Retrieve the Tasks filter by name
     * @param taskName - string - The name of the filter
     * @returns {Observable<FilterRepresentationModel>}
     */
    getTaskFilterByName(taskName: string, appId?: number): Observable<FilterRepresentationModel>;
    /**
     * Add a filter
     * @param filter - FilterRepresentationModel
     * @returns {FilterRepresentationModel}
     */
    addFilter(filter: FilterRepresentationModel): Observable<FilterRepresentationModel>;
    callApiTaskFilters(appId?: number): Promise<any>;
    /**
     * Return a static Involved filter instance
     * @param appId
     * @returns {FilterRepresentationModel}
     */
    getInvolvedTasksFilterInstance(appId: number): FilterRepresentationModel;
    /**
     * Return a static My task filter instance
     * @param appId
     * @returns {FilterRepresentationModel}
     */
    getMyTasksFilterInstance(appId: number): FilterRepresentationModel;
    /**
     * Return a static Queued filter instance
     * @param appId
     * @returns {FilterRepresentationModel}
     */
    getQueuedTasksFilterInstance(appId: number): FilterRepresentationModel;
    /**
     * Return a static Completed filter instance
     * @param appId
     * @returns {FilterRepresentationModel}
     */
    getCompletedTasksFilterInstance(appId: number): FilterRepresentationModel;
    private handleError(error);
}
