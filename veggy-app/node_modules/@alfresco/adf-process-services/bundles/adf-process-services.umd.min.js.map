{"version":3,"file":"adf-process-services.umd.min.js","sources":["~/@alfresco/adf-process-services/process.module.ts","~/@alfresco/adf-process-services/process-list/models/process-instance-filter.model.ts","~/@alfresco/adf-process-services/attachment/attachment.module.ts","~/@alfresco/adf-process-services/attachment/create-task-attachment.component.ts","~/@alfresco/adf-process-services/attachment/create-process-attachment.component.ts","~/@alfresco/adf-process-services/attachment/process-attachment-list.component.ts","~/@alfresco/adf-process-services/attachment/task-attachment-list.component.ts","~/@alfresco/adf-process-services/app-list/apps-list.module.ts","~/@alfresco/adf-process-services/app-list/apps-list.component.ts","~/@alfresco/adf-process-services/process-list/process-list.module.ts","~/@alfresco/adf-process-services/app-list/icon.model.ts","~/@alfresco/adf-process-services/process-list/components/start-process.component.ts","~/@alfresco/adf-process-services/process-list/models/process-preset.model.ts","~/@alfresco/adf-process-services/process-list/components/process-list.component.ts","~/@alfresco/adf-process-services/process-list/components/process-instance-details.component.ts","~/@alfresco/adf-process-services/task-list/models/task-details.event.ts","~/@alfresco/adf-process-services/process-list/components/process-instance-tasks.component.ts","~/@alfresco/adf-process-services/process-list/components/process-instance-header.component.ts","~/@alfresco/adf-process-services/process-list/components/process-filters.component.ts","~/@alfresco/adf-process-services/process-list/models/filter-process.model.ts","~/@alfresco/adf-process-services/process-list/services/process-filter.service.ts","~/@alfresco/adf-process-services/process-list/components/process-audit.directive.ts","~/@alfresco/adf-process-services/task-list/task-list.module.ts","~/@alfresco/adf-process-services/process-list/models/process-definition.model.ts","~/@alfresco/adf-process-services/process-list/models/process-instance-variable.model.ts","~/@alfresco/adf-process-services/process-list/models/process-instance.model.ts","~/@alfresco/adf-process-services/process-list/services/process.service.ts","~/@alfresco/adf-process-services/task-list/models/task-preset.model.ts","~/@alfresco/adf-process-services/task-list/components/task-list.component.ts","~/@alfresco/adf-process-services/task-list/components/task-header.component.ts","~/@alfresco/adf-process-services/task-list/components/task-filters.component.ts","~/@alfresco/adf-process-services/task-list/components/task-audit.directive.ts","~/@alfresco/adf-process-services/task-list/models/start-task.model.ts","~/@alfresco/adf-process-services/task-list/components/start-task.component.ts","~/@alfresco/adf-process-services/task-list/components/no-task-detail-template.directive.ts","~/@alfresco/adf-process-services/task-list/components/task-details.component.ts","~/@alfresco/adf-process-services/task-list/components/checklist.component.ts","~/@alfresco/adf-process-services/task-list/services/task-filter.service.ts","~/@alfresco/adf-process-services/task-list/models/filter.model.ts","~/@alfresco/adf-process-services/task-list/models/form.model.ts","~/@alfresco/adf-process-services/task-list/models/task-details.model.ts","~/@alfresco/adf-process-services/task-list/services/tasklist.service.ts","~/@alfresco/adf-process-services/task-list/services/process-upload.service.ts","~/@alfresco/adf-process-services/task-list/services/task-upload.service.ts","~/@alfresco/adf-process-services/comments/comments.module.ts","~/@alfresco/adf-process-services/comments/comments.component.ts","~/@alfresco/adf-process-services/comments/comment-list.component.ts","~/@alfresco/adf-process-services/comments/process-comments.component.ts","~/@alfresco/adf-process-services/people/people.module.ts","~/@alfresco/adf-process-services/people/people.component.ts","~/@alfresco/adf-process-services/task-list/models/user-event.model.ts","~/@alfresco/adf-process-services/people/people-list.component.ts","~/@alfresco/adf-process-services/material.module.ts","../../../../node_modules/src/util/tryCatch.ts","../../../../node_modules/src/Subscription.ts","../../../../node_modules/src/util/pipe.ts","../../../../node_modules/src/operators/bufferTime.ts","../../../../node_modules/src/observable/PromiseObservable.ts","../../../../node_modules/src/observable/IteratorObservable.ts","../../../../node_modules/src/operators/debounceTime.ts","../../../../node_modules/src/util/Set.ts","../../../../node_modules/src/operators/sampleTime.ts","../../../../node_modules/src/operators/throttleTime.ts","../../../../node_modules/src/operators/windowTime.ts","../../../../node_modules/src/util/errorObject.ts","../../../../node_modules/src/util/isFunction.ts","../../../../node_modules/src/util/isArray.ts","../../../../node_modules/src/util/isObject.ts","../../../../node_modules/src/util/UnsubscriptionError.ts","../../../../node_modules/src/Observer.ts","../../../../node_modules/src/util/root.ts","../../../../node_modules/src/symbol/rxSubscriber.ts","../../../../node_modules/src/Subscriber.ts","../../../../node_modules/src/OuterSubscriber.ts","../../../../node_modules/src/util/isArrayLike.ts","../../../../node_modules/src/util/isPromise.ts","../../../../node_modules/src/util/toSubscriber.ts","../../../../node_modules/src/symbol/observable.ts","../../../../node_modules/src/util/noop.ts","../../../../node_modules/src/Observable.ts","../../../../node_modules/src/symbol/iterator.ts","../../../../node_modules/src/InnerSubscriber.ts","../../../../node_modules/src/util/subscribeToResult.ts","../../../../node_modules/src/operators/audit.ts","../../../../node_modules/src/scheduler/Action.ts","../../../../node_modules/src/scheduler/AsyncAction.ts","../../../../node_modules/src/Scheduler.ts","../../../../node_modules/src/scheduler/AsyncScheduler.ts","../../../../node_modules/src/scheduler/async.ts","../../../../node_modules/src/util/isNumeric.ts","../../../../node_modules/src/util/isScheduler.ts","../../../../node_modules/src/util/isDate.ts","../../../../node_modules/src/observable/TimerObservable.ts","../../../../node_modules/src/operators/buffer.ts","../../../../node_modules/src/operators/bufferCount.ts","../../../../node_modules/src/operators/bufferToggle.ts","../../../../node_modules/src/operators/bufferWhen.ts","../../../../node_modules/src/operators/catchError.ts","../../../../node_modules/src/observable/ScalarObservable.ts","../../../../node_modules/src/observable/EmptyObservable.ts","../../../../node_modules/src/observable/ArrayObservable.ts","../../../../node_modules/src/operators/combineLatest.ts","../../../../node_modules/src/observable/ArrayLikeObservable.ts","../../../../node_modules/src/Notification.ts","../../../../node_modules/src/operators/observeOn.ts","../../../../node_modules/src/observable/FromObservable.ts","../../../../node_modules/src/operators/mergeMap.ts","../../../../node_modules/src/operators/count.ts","../../../../node_modules/src/operators/debounce.ts","../../../../node_modules/src/operators/defaultIfEmpty.ts","../../../../node_modules/src/operators/delay.ts","../../../../node_modules/src/operators/delayWhen.ts","../../../../node_modules/src/operators/dematerialize.ts","../../../../node_modules/src/operators/distinct.ts","../../../../node_modules/src/operators/distinctUntilChanged.ts","../../../../node_modules/src/util/ArgumentOutOfRangeError.ts","../../../../node_modules/src/operators/elementAt.ts","../../../../node_modules/src/operators/every.ts","../../../../node_modules/src/operators/exhaust.ts","../../../../node_modules/src/operators/exhaustMap.ts","../../../../node_modules/src/operators/expand.ts","../../../../node_modules/src/operators/filter.ts","../../../../node_modules/src/operators/finalize.ts","../../../../node_modules/src/operators/find.ts","../../../../node_modules/src/util/EmptyError.ts","../../../../node_modules/src/operators/first.ts","../../../../node_modules/src/util/ObjectUnsubscribedError.ts","../../../../node_modules/src/SubjectSubscription.ts","../../../../node_modules/src/Subject.ts","../../../../node_modules/src/util/MapPolyfill.ts","../../../../node_modules/src/util/Map.ts","../../../../node_modules/src/util/FastMap.ts","../../../../node_modules/src/operators/groupBy.ts","../../../../node_modules/src/operators/ignoreElements.ts","../../../../node_modules/src/operators/isEmpty.ts","../../../../node_modules/src/operators/last.ts","../../../../node_modules/src/operators/map.ts","../../../../node_modules/src/operators/mapTo.ts","../../../../node_modules/src/operators/materialize.ts","../../../../node_modules/src/operators/scan.ts","../../../../node_modules/src/operators/takeLast.ts","../../../../node_modules/src/operators/mergeMapTo.ts","../../../../node_modules/src/operators/mergeScan.ts","../../../../node_modules/src/operators/refCount.ts","../../../../node_modules/src/observable/ConnectableObservable.ts","../../../../node_modules/src/operators/onErrorResumeNext.ts","../../../../node_modules/src/operators/pairwise.ts","../../../../node_modules/src/BehaviorSubject.ts","../../../../node_modules/src/AsyncSubject.ts","../../../../node_modules/src/scheduler/QueueAction.ts","../../../../node_modules/src/scheduler/queue.ts","../../../../node_modules/src/scheduler/QueueScheduler.ts","../../../../node_modules/src/ReplaySubject.ts","../../../../node_modules/src/observable/race.ts","../../../../node_modules/src/operators/repeat.ts","../../../../node_modules/src/operators/repeatWhen.ts","../../../../node_modules/src/operators/retry.ts","../../../../node_modules/src/operators/retryWhen.ts","../../../../node_modules/src/operators/sample.ts","../../../../node_modules/src/operators/sequenceEqual.ts","../../../../node_modules/src/operators/single.ts","../../../../node_modules/src/operators/skip.ts","../../../../node_modules/src/operators/skipLast.ts","../../../../node_modules/src/operators/skipUntil.ts","../../../../node_modules/src/operators/skipWhile.ts","../../../../node_modules/src/operators/switchMap.ts","../../../../node_modules/src/operators/switchMapTo.ts","../../../../node_modules/src/operators/take.ts","../../../../node_modules/src/operators/takeUntil.ts","../../../../node_modules/src/operators/takeWhile.ts","../../../../node_modules/src/operators/tap.ts","../../../../node_modules/src/operators/throttle.ts","../../../../node_modules/src/operators/timeInterval.ts","../../../../node_modules/src/util/TimeoutError.ts","../../../../node_modules/src/operators/timeout.ts","../../../../node_modules/src/operators/timeoutWith.ts","../../../../node_modules/src/operators/window.ts","../../../../node_modules/src/operators/windowCount.ts","../../../../node_modules/src/operators/windowToggle.ts","../../../../node_modules/src/operators/windowWhen.ts","../../../../node_modules/src/operators/withLatestFrom.ts","../../../../node_modules/src/operators/zip.ts","../../../../node_modules/src/operators/index.ts","~/@alfresco/adf-process-services/people/people-search.component.ts"],"sourcesContent":["/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { CoreModule, TRANSLATION_PROVIDER } from '@alfresco/adf-core';\n\nimport { MaterialModule } from './material.module';\n\nimport { ProcessListModule } from './process-list/process-list.module';\nimport { TaskListModule } from './task-list/task-list.module';\nimport { AppsListModule } from './app-list/apps-list.module';\nimport { CommentsModule } from './comments/comments.module';\nimport { AttachmentModule } from './attachment/attachment.module';\nimport { PeopleModule } from './people/people.module';\nexport class ProcessModule {\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [\n        CoreModule,\n        CommonModule,\n        CommentsModule,\n        FormsModule,\n        ReactiveFormsModule,\n        BrowserAnimationsModule,\n        MaterialModule,\n        ProcessListModule,\n        TaskListModule,\n        AppsListModule,\n        AttachmentModule,\n        PeopleModule\n    ],\n    providers: [\n        {\n            provide: TRANSLATION_PROVIDER,\n            multi: true,\n            useValue: {\n                name: 'adf-process-services',\n                source: 'assets/adf-process-services'\n            }\n        }\n    ],\n    exports: [\n        CommonModule,\n        CommentsModule,\n        FormsModule,\n        ReactiveFormsModule,\n        BrowserAnimationsModule,\n        ProcessListModule,\n        TaskListModule,\n        AppsListModule,\n        AttachmentModule,\n        PeopleModule,\n        MaterialModule\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ProcessModule_tsickle_Closure_declarations() {\n/** @type {?} */\nProcessModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nProcessModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\nexport class ProcessFilterRequestRepresentation {\n    processDefinitionId: string;\n    appDefinitionId: string;\n    state: string;\n    sort: string;\n    page: number;\n    size: number;\n/**\n * @param {?=} obj\n */\nconstructor(obj?: any) {\n        this.processDefinitionId = obj && obj.processDefinitionId || null;\n        this.appDefinitionId = obj && obj.appDefinitionId || null;\n        this.state = obj && obj.state || null;\n        this.sort = obj && obj.sort || null;\n        this.page = obj && obj.page || 0;\n        this.size = obj && obj.size || 25;\n    }\n}\n\nfunction ProcessFilterRequestRepresentation_tsickle_Closure_declarations() {\n/** @type {?} */\nProcessFilterRequestRepresentation.prototype.processDefinitionId;\n/** @type {?} */\nProcessFilterRequestRepresentation.prototype.appDefinitionId;\n/** @type {?} */\nProcessFilterRequestRepresentation.prototype.state;\n/** @type {?} */\nProcessFilterRequestRepresentation.prototype.sort;\n/** @type {?} */\nProcessFilterRequestRepresentation.prototype.page;\n/** @type {?} */\nProcessFilterRequestRepresentation.prototype.size;\n}\n\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { MaterialModule } from '../material.module';\nimport { DataColumnModule, DataTableModule, DirectiveModule } from '@alfresco/adf-core';\n\nimport { TaskAttachmentListComponent } from './task-attachment-list.component';\nimport { ProcessAttachmentListComponent } from './process-attachment-list.component';\nimport { CreateProcessAttachmentComponent } from './create-process-attachment.component';\nimport { AttachmentComponent } from './create-task-attachment.component';\nexport class AttachmentModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [\n        DataColumnModule,\n        DataTableModule,\n        MaterialModule,\n        CommonModule,\n        TranslateModule,\n        DirectiveModule\n    ],\n    declarations: [\n        TaskAttachmentListComponent,\n        ProcessAttachmentListComponent,\n        CreateProcessAttachmentComponent,\n        CreateProcessAttachmentComponent,\n        AttachmentComponent\n    ],\n    exports: [\n        TaskAttachmentListComponent,\n        ProcessAttachmentListComponent,\n        CreateProcessAttachmentComponent,\n        CreateProcessAttachmentComponent,\n        AttachmentComponent\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction AttachmentModule_tsickle_Closure_declarations() {\n/** @type {?} */\nAttachmentModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAttachmentModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { Component, EventEmitter, Input, OnChanges, Output, SimpleChanges } from '@angular/core';\nimport { ProcessContentService } from '@alfresco/adf-core';\nexport class AttachmentComponent implements OnChanges {\n\n    \n    taskId: string;\n\n    \n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    \n    success: EventEmitter<any> = new EventEmitter<any>();\n/**\n * @param {?} activitiContentService\n */\nconstructor(private activitiContentService: ProcessContentService) {\n    }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n        if (changes['taskId'] && changes['taskId'].currentValue) {\n            this.taskId = changes['taskId'].currentValue;\n        }\n    }\n/**\n * @param {?} event\n * @return {?}\n */\nonFileUpload(event: any) {\n        let /** @type {?} */ filesList: File[] = event.detail.files.map(obj => obj.file);\n\n        for (let /** @type {?} */ fileInfoObj of filesList) {\n            let /** @type {?} */ file: File = fileInfoObj;\n            let /** @type {?} */ opts = {\n                isRelatedContent: true\n            };\n            this.activitiContentService.createTaskRelatedContent(this.taskId, file, opts).subscribe(\n                (res) => {\n                    this.success.emit(res);\n                },\n                (err) => {\n                    this.error.emit(err);\n                }\n            );\n        }\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'adf-create-task-attachment',\n    styles: [`\n      .adf-create-attachment {\n        display: inline-block;\n        line-height: 0px;\n        vertical-align: middle; }\n    `],\n    template: `\n      <button\n          color=\"primary\"\n          mat-button\n          mat-raised-button\n          mat-icon-button\n          class=\"adf-create-attachment\"\n          [adf-upload]=\"true\"\n          mode=\"['click']\"\n          [multiple]=\"true\"\n          (upload-files)=\"onFileUpload($event)\">\n          <mat-icon>add</mat-icon>\n      </button>\n    `\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ProcessContentService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'taskId': [{ type: Input },],\n'error': [{ type: Output },],\n'success': [{ type: Output },],\n};\n}\n\nfunction AttachmentComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nAttachmentComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAttachmentComponent.ctorParameters;\n/** @type {?} */\nAttachmentComponent.propDecorators;\n/** @type {?} */\nAttachmentComponent.prototype.taskId;\n/** @type {?} */\nAttachmentComponent.prototype.error;\n/** @type {?} */\nAttachmentComponent.prototype.success;\n/** @type {?} */\nAttachmentComponent.prototype.activitiContentService;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { Component, EventEmitter, Input, OnChanges, Output, SimpleChanges } from '@angular/core';\nimport { ProcessContentService } from '@alfresco/adf-core';\nexport class CreateProcessAttachmentComponent implements OnChanges {\n\n    \n    processInstanceId: string;\n\n    \n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    \n    success: EventEmitter<any> = new EventEmitter<any>();\n/**\n * @param {?} activitiContentService\n */\nconstructor(private activitiContentService: ProcessContentService) {\n    }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n        if (changes['processInstanceId'] && changes['processInstanceId'].currentValue) {\n            this.processInstanceId = changes['processInstanceId'].currentValue;\n        }\n    }\n/**\n * @param {?} event\n * @return {?}\n */\nonFileUpload(event: any) {\n        let /** @type {?} */ filesList: File[] = event.detail.files.map(obj => obj.file);\n\n        for (let /** @type {?} */ fileInfoObj of filesList) {\n            let /** @type {?} */ file: File = fileInfoObj;\n            let /** @type {?} */ opts = {\n                isRelatedContent: true\n            };\n            this.activitiContentService.createProcessRelatedContent(this.processInstanceId, file, opts).subscribe(\n                (res) => {\n                    this.success.emit(res);\n                },\n                (err) => {\n                    this.error.emit(err);\n                });\n        }\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'adf-create-process-attachment',\n    styles: [`\n      .adf-create-attachment {\n          display: inline-block;\n          line-height: 0px;\n          vertical-align: middle;\n      }\n    `],\n    template: `\n      <button\n          id=\"add_new_process_content_button\"\n          color=\"primary\"\n          mat-button\n          mat-raised-button\n          mat-icon-button\n          class=\"adf-create-attachment\"\n          [adf-upload]=\"true\"\n          mode=\"['click']\"\n          [multiple]=\"true\"\n          (upload-files)=\"onFileUpload($event)\">\n          <mat-icon>add</mat-icon>\n      </button>\n    `\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ProcessContentService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'processInstanceId': [{ type: Input },],\n'error': [{ type: Output },],\n'success': [{ type: Output },],\n};\n}\n\nfunction CreateProcessAttachmentComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nCreateProcessAttachmentComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCreateProcessAttachmentComponent.ctorParameters;\n/** @type {?} */\nCreateProcessAttachmentComponent.propDecorators;\n/** @type {?} */\nCreateProcessAttachmentComponent.prototype.processInstanceId;\n/** @type {?} */\nCreateProcessAttachmentComponent.prototype.error;\n/** @type {?} */\nCreateProcessAttachmentComponent.prototype.success;\n/** @type {?} */\nCreateProcessAttachmentComponent.prototype.activitiContentService;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { ContentService, ThumbnailService } from '@alfresco/adf-core';\nimport { Component, EventEmitter, Input, NgZone, OnChanges, Output, SimpleChanges } from '@angular/core';\nimport { ProcessContentService } from '@alfresco/adf-core';\nexport class ProcessAttachmentListComponent implements OnChanges {\n\n    \n    processInstanceId: string;\n\n    \n    disabled: boolean = false;\n\n    \n    attachmentClick = new EventEmitter();\n\n    \n    success = new EventEmitter();\n\n    \n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    \n    emptyListImageUrl: string = './assets/images/empty_doc_lib.svg';\n\n    attachments: any[] = [];\n    isLoading: boolean = true;\n/**\n * @param {?} activitiContentService\n * @param {?} contentService\n * @param {?} thumbnailService\n * @param {?} ngZone\n */\nconstructor(private activitiContentService: ProcessContentService,\nprivate contentService: ContentService,\nprivate thumbnailService: ThumbnailService,\nprivate ngZone: NgZone) {\n    }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n        if (changes['processInstanceId'] && changes['processInstanceId'].currentValue) {\n            this.loadAttachmentsByProcessInstanceId(changes['processInstanceId'].currentValue);\n        }\n    }\n/**\n * @return {?}\n */\nreset() {\n        this.attachments = [];\n    }\n/**\n * @return {?}\n */\nreload(): void {\n        this.ngZone.run(() => {\n            this.loadAttachmentsByProcessInstanceId(this.processInstanceId);\n        });\n    }\n/**\n * @param {?} content\n * @return {?}\n */\nadd(content: any): void {\n        this.ngZone.run(() => {\n            this.attachments.push({\n                id: content.id,\n                name: content.name,\n                created: content.created,\n                createdBy: content.createdBy.firstName + ' ' + content.createdBy.lastName,\n                icon: this.thumbnailService.getMimeTypeIcon(content.mimeType)\n            });\n        });\n    }\n/**\n * @param {?} processInstanceId\n * @return {?}\n */\nprivate loadAttachmentsByProcessInstanceId(processInstanceId: string) {\n        if (processInstanceId) {\n            this.reset();\n            this.isLoading = true;\n            this.activitiContentService.getProcessRelatedContent(processInstanceId).subscribe(\n                (res: any) => {\n                    res.data.forEach(content => {\n                        this.attachments.push({\n                            id: content.id,\n                            name: content.name,\n                            created: content.created,\n                            createdBy: content.createdBy.firstName + ' ' + content.createdBy.lastName,\n                            icon: this.thumbnailService.getMimeTypeIcon(content.mimeType)\n                        });\n                    });\n                    this.success.emit(this.attachments);\n                    this.isLoading = false;\n                },\n                (err) => {\n                    this.error.emit(err);\n                    this.isLoading = false;\n                });\n        }\n    }\n/**\n * @param {?} contentId\n * @return {?}\n */\nprivate deleteAttachmentById(contentId: number) {\n        if (contentId) {\n            this.activitiContentService.deleteRelatedContent(contentId).subscribe(\n                (res: any) => {\n                    this.attachments = this.attachments.filter(content => {\n                        return content.id !== contentId;\n                    });\n                },\n                (err) => {\n                    this.error.emit(err);\n                });\n        }\n    }\n/**\n * @return {?}\n */\nisEmpty(): boolean {\n        return this.attachments && this.attachments.length === 0;\n    }\n/**\n * @param {?} event\n * @return {?}\n */\nonShowRowActionsMenu(event: any) {\n        let /** @type {?} */ viewAction = {\n            title: 'ADF_PROCESS_LIST.MENU_ACTIONS.VIEW_CONTENT',\n            name: 'view'\n        };\n\n        let /** @type {?} */ removeAction = {\n            title: 'ADF_PROCESS_LIST.MENU_ACTIONS.REMOVE_CONTENT',\n            name: 'remove'\n        };\n\n        let /** @type {?} */ downloadAction = {\n            title: 'ADF_PROCESS_LIST.MENU_ACTIONS.DOWNLOAD_CONTENT',\n            name: 'download'\n        };\n\n        event.value.actions = [\n            viewAction,\n            downloadAction\n        ];\n\n        if (!this.disabled) {\n            event.value.actions.splice(1, 0, removeAction);\n        }\n    }\n/**\n * @param {?} event\n * @return {?}\n */\nonExecuteRowAction(event: any) {\n        let /** @type {?} */ args = event.value;\n        let /** @type {?} */ action = args.action;\n        if (action.name === 'view') {\n            this.emitDocumentContent(args.row.obj);\n        } else if (action.name === 'remove') {\n            this.deleteAttachmentById(args.row.obj.id);\n        } else if (action.name === 'download') {\n            this.downloadContent(args.row.obj);\n        }\n    }\n/**\n * @param {?} event\n * @return {?}\n */\nopenContent(event: any): void {\n        let /** @type {?} */ content = event.value.obj;\n        this.emitDocumentContent(content);\n    }\n/**\n * @param {?} content\n * @return {?}\n */\nemitDocumentContent(content: any) {\n        this.activitiContentService.getFileRawContent(content.id).subscribe(\n            (blob: Blob) => {\n                content.contentBlob = blob;\n                this.attachmentClick.emit(content);\n            },\n            (err) => {\n                this.error.emit(err);\n            }\n        );\n    }\n/**\n * @param {?} content\n * @return {?}\n */\ndownloadContent(content: any): void {\n        this.activitiContentService.getFileRawContent(content.id).subscribe(\n            (blob: Blob) => this.contentService.downloadBlob(blob, content.name),\n            (err) => {\n                this.error.emit(err);\n            }\n        );\n    }\n/**\n * @return {?}\n */\nisDisabled(): boolean {\n        return this.disabled;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'adf-process-attachment-list',\n    styles: [`\n\n    `],\n    template: `\n      <adf-datatable [rows]=\"attachments\" [actions]=\"true\" [loading]=\"isLoading\" (rowDblClick)=\"openContent($event)\" (showRowActionsMenu)=\"onShowRowActionsMenu($event)\"\n          (executeRowAction)=\"onExecuteRowAction($event)\">\n\n          <adf-empty-list *ngIf=\"isEmpty()\">\n              <div adf-empty-list-header class=\"adf-empty-list-header\"> {{'ADF_PROCESS_LIST.PROCESS-ATTACHMENT.EMPTY.HEADER' | translate}} </div>\n              <div adf-empty-list-body *ngIf=\"!isDisabled()\">\n                  <div fxHide.lt-md=\"true\" class=\"adf-empty-list-drag_drop\">{{'ADF_PROCESS_LIST.PROCESS-ATTACHMENT.EMPTY.DRAG-AND-DROP.TITLE' | translate}}</div>\n                  <div fxHide.lt-md=\"true\" class=\"adf-empty-list__any-files-here-to-add\"> {{'ADF_PROCESS_LIST.PROCESS-ATTACHMENT.EMPTY.DRAG-AND-DROP.SUBTITLE' | translate}} </div>\n              </div>\n              <div adf-empty-list-footer *ngIf=\"!isDisabled()\">\n                  <img class=\"adf-empty-list__empty_doc_lib\" [src]=\"emptyListImageUrl\">\n              </div>\n          </adf-empty-list>\n\n          <data-columns>\n              <data-column key=\"icon\" type=\"image\" srTitle=\"ADF_PROCESS_LIST.PROPERTIES.THUMBNAIL\" [sortable]=\"false\"></data-column>\n              <data-column key=\"name\" type=\"text\" title=\"{{'ADF_PROCESS_LIST.PROPERTIES.NAME' | translate}}\" class=\"full-width ellipsis-cell\" [sortable]=\"true\"></data-column>\n              <data-column key=\"created\" type=\"date\" format=\"shortDate\" title=\"{{'ADF_PROCESS_LIST.PROPERTIES.CREATED' | translate}}\"></data-column>\n          </data-columns>\n\n          <loading-content-template>\n              <ng-template>\n                  <!--Add your custom loading template here-->\n                  <mat-progress-spinner class=\"adf-attachment-list-loading-margin\" [color]=\"'primary'\" [mode]=\"'indeterminate'\">\n                  </mat-progress-spinner>\n              </ng-template>\n          </loading-content-template>\n\n      </adf-datatable>\n    `\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ProcessContentService, },\n{type: ContentService, },\n{type: ThumbnailService, },\n{type: NgZone, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'processInstanceId': [{ type: Input },],\n'disabled': [{ type: Input },],\n'attachmentClick': [{ type: Output },],\n'success': [{ type: Output },],\n'error': [{ type: Output },],\n'emptyListImageUrl': [{ type: Input },],\n};\n}\n\nfunction ProcessAttachmentListComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nProcessAttachmentListComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nProcessAttachmentListComponent.ctorParameters;\n/** @type {?} */\nProcessAttachmentListComponent.propDecorators;\n/** @type {?} */\nProcessAttachmentListComponent.prototype.processInstanceId;\n/** @type {?} */\nProcessAttachmentListComponent.prototype.disabled;\n/** @type {?} */\nProcessAttachmentListComponent.prototype.attachmentClick;\n/** @type {?} */\nProcessAttachmentListComponent.prototype.success;\n/** @type {?} */\nProcessAttachmentListComponent.prototype.error;\n/** @type {?} */\nProcessAttachmentListComponent.prototype.emptyListImageUrl;\n/** @type {?} */\nProcessAttachmentListComponent.prototype.attachments;\n/** @type {?} */\nProcessAttachmentListComponent.prototype.isLoading;\n/** @type {?} */\nProcessAttachmentListComponent.prototype.activitiContentService;\n/** @type {?} */\nProcessAttachmentListComponent.prototype.contentService;\n/** @type {?} */\nProcessAttachmentListComponent.prototype.thumbnailService;\n/** @type {?} */\nProcessAttachmentListComponent.prototype.ngZone;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { ContentService, ThumbnailService, EmptyListComponent } from '@alfresco/adf-core';\nimport { AfterContentInit, ContentChild, Component, ElementRef, EventEmitter, Input, NgZone, OnChanges, Output, SimpleChanges, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { ProcessContentService } from '@alfresco/adf-core';\nexport class TaskAttachmentListComponent implements OnChanges, AfterContentInit {\n\n    \n    emptyTemplate: EmptyListComponent;\n\n    \n    taskId: string;\n\n    \n    disabled: boolean = false;\n\n    \n    attachmentClick = new EventEmitter();\n\n    \n    success = new EventEmitter();\n\n    \n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    hasCustomTemplate: boolean = false;\n\n    \n    customTemplateRef: ElementRef;\n\n    curret: any;\n\n    attachments: any[] = [];\n    isLoading: boolean = false;\n/**\n * @param {?} activitiContentService\n * @param {?} contentService\n * @param {?} thumbnailService\n * @param {?} ngZone\n */\nconstructor(private activitiContentService: ProcessContentService,\nprivate contentService: ContentService,\nprivate thumbnailService: ThumbnailService,\nprivate ngZone: NgZone) {\n    }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n        if (changes['taskId'] && changes['taskId'].currentValue) {\n            this.loadAttachmentsByTaskId(changes['taskId'].currentValue);\n        }\n    }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n        if (this.emptyTemplate) {\n            this.hasCustomTemplate = true;\n        }\n    }\n/**\n * @return {?}\n */\nreset(): void {\n        this.attachments = [];\n    }\n/**\n * @return {?}\n */\nhasCutomEmptyTemplate() {\n        return !!this.emptyTemplate;\n    }\n/**\n * @return {?}\n */\nreload(): void {\n        this.ngZone.run(() => {\n            this.loadAttachmentsByTaskId(this.taskId);\n        });\n    }\n/**\n * @param {?} content\n * @return {?}\n */\nadd(content: any): void {\n        this.ngZone.run(() => {\n            this.attachments.push({\n                id: content.id,\n                name: content.name,\n                created: content.created,\n                createdBy: content.createdBy.firstName + ' ' + content.createdBy.lastName,\n                icon: this.thumbnailService.getMimeTypeIcon(content.mimeType)\n            });\n        });\n    }\n/**\n * @param {?} taskId\n * @return {?}\n */\nprivate loadAttachmentsByTaskId(taskId: string) {\n        if (taskId) {\n            this.isLoading = true;\n            this.reset();\n            this.activitiContentService.getTaskRelatedContent(taskId).subscribe(\n                (res: any) => {\n                    let /** @type {?} */ attachList = [];\n                    res.data.forEach(content => {\n                        attachList.push({\n                            id: content.id,\n                            name: content.name,\n                            created: content.created,\n                            createdBy: content.createdBy.firstName + ' ' + content.createdBy.lastName,\n                            icon: this.thumbnailService.getMimeTypeIcon(content.mimeType)\n                        });\n                    });\n                    this.attachments = attachList;\n                    this.success.emit(this.attachments);\n                    this.isLoading = false;\n                },\n                (err) => {\n                    this.error.emit(err);\n                    this.isLoading = false;\n                });\n        }\n    }\n/**\n * @param {?} contentId\n * @return {?}\n */\ndeleteAttachmentById(contentId: number) {\n        if (contentId) {\n            this.activitiContentService.deleteRelatedContent(contentId).subscribe(\n                (res: any) => {\n                    this.attachments = this.attachments.filter(content => {\n                        return content.id !== contentId;\n                    });\n                },\n                (err) => {\n                    this.error.emit(err);\n                });\n        }\n    }\n/**\n * @return {?}\n */\nisEmpty(): boolean {\n        return this.attachments && this.attachments.length === 0;\n    }\n/**\n * @param {?} event\n * @return {?}\n */\nonShowRowActionsMenu(event: any) {\n        let /** @type {?} */ viewAction = {\n            title: 'ADF_TASK_LIST.MENU_ACTIONS.VIEW_CONTENT',\n            name: 'view'\n        };\n\n        let /** @type {?} */ removeAction = {\n            title: 'ADF_TASK_LIST.MENU_ACTIONS.REMOVE_CONTENT',\n            name: 'remove'\n        };\n\n        let /** @type {?} */ downloadAction = {\n            title: 'ADF_TASK_LIST.MENU_ACTIONS.DOWNLOAD_CONTENT',\n            name: 'download'\n        };\n\n        event.value.actions = [\n            viewAction,\n            downloadAction\n        ];\n\n        if (!this.disabled) {\n            event.value.actions.splice(1, 0, removeAction);\n        }\n    }\n/**\n * @param {?} event\n * @return {?}\n */\nonExecuteRowAction(event: any) {\n        let /** @type {?} */ args = event.value;\n        let /** @type {?} */ action = args.action;\n        if (action.name === 'view') {\n            this.emitDocumentContent(args.row.obj);\n        } else if (action.name === 'remove') {\n            this.deleteAttachmentById(args.row.obj.id);\n        } else if (action.name === 'download') {\n            this.downloadContent(args.row.obj);\n        }\n    }\n/**\n * @param {?} event\n * @return {?}\n */\nopenContent(event: any): void {\n        let /** @type {?} */ content = event.value.obj;\n        this.emitDocumentContent(content);\n    }\n/**\n * @param {?} content\n * @return {?}\n */\nemitDocumentContent(content: any) {\n        this.activitiContentService.getFileRawContent(content.id).subscribe(\n            (blob: Blob) => {\n                content.contentBlob = blob;\n                this.attachmentClick.emit(content);\n            },\n            (err) => {\n                this.error.emit(err);\n            }\n        );\n    }\n/**\n * @param {?} content\n * @return {?}\n */\ndownloadContent(content: any): void {\n        this.activitiContentService.getFileRawContent(content.id).subscribe(\n            (blob: Blob) => this.contentService.downloadBlob(blob, content.name),\n            (err) => {\n                this.error.emit(err);\n            }\n        );\n    }\n/**\n * @return {?}\n */\nisDisabled(): boolean {\n        return this.disabled;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'adf-task-attachment-list',\n    styles: [`\n\n    `],\n    template: `\n      <adf-datatable [rows]=\"attachments\"\n                     [actions]=\"true\"\n                     [loading]=\"isLoading\"\n                     (rowDblClick)=\"openContent($event)\"\n                     (showRowActionsMenu)=\"onShowRowActionsMenu($event)\"\n                     (executeRowAction)=\"onExecuteRowAction($event)\">\n                  <no-content-template>\n                      <ng-template>\n                          <ng-content *ngIf=\"hasCustomTemplate; else defaulEmptyList\" class=\"adf-custom-empty-template\"></ng-content>\n                          <ng-template #defaulEmptyList>\n                              <adf-empty-list>\n                                  <div adf-empty-list-header class=\"adf-empty-list-header\">\n                                      {{'ADF_TASK_LIST.ATTACHMENT.EMPTY.HEADER' | translate}}\n                                  </div>\n                              </adf-empty-list>\n                          </ng-template>\n                      </ng-template>\n                  </no-content-template>\n\n                  <data-columns>\n                      <data-column key=\"icon\" type=\"image\" srTitle=\"ADF_TASK_LIST.PROPERTIES.THUMBNAIL\" [sortable]=\"false\"></data-column>\n                      <data-column key=\"name\" type=\"text\" title=\"ADF_TASK_LIST.PROPERTIES.NAME\" class=\"full-width ellipsis-cell\" [sortable]=\"true\"></data-column>\n                      <data-column key=\"created\" type=\"date\" format=\"shortDate\" title=\"ADF_TASK_LIST.PROPERTIES.CREATED\"></data-column>\n                  </data-columns>\n                  <loading-content-template>\n                      <ng-template>\n                      <!--Add your custom loading template here-->\n                          <mat-progress-spinner class=\"adf-attachment-list-loading-margin\" [color]=\"'primary'\" [mode]=\"'indeterminate'\">\n                          </mat-progress-spinner>\n                      </ng-template>\n                  </loading-content-template>\n      </adf-datatable>\n    `,\n    encapsulation: ViewEncapsulation.None\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ProcessContentService, },\n{type: ContentService, },\n{type: ThumbnailService, },\n{type: NgZone, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'emptyTemplate': [{ type: ContentChild, args: [EmptyListComponent, ] },],\n'taskId': [{ type: Input },],\n'disabled': [{ type: Input },],\n'attachmentClick': [{ type: Output },],\n'success': [{ type: Output },],\n'error': [{ type: Output },],\n'customTemplateRef': [{ type: ViewChild, args: ['customEmptyListTemplate', ] },],\n};\n}\n\nfunction TaskAttachmentListComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nTaskAttachmentListComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTaskAttachmentListComponent.ctorParameters;\n/** @type {?} */\nTaskAttachmentListComponent.propDecorators;\n/** @type {?} */\nTaskAttachmentListComponent.prototype.emptyTemplate;\n/** @type {?} */\nTaskAttachmentListComponent.prototype.taskId;\n/** @type {?} */\nTaskAttachmentListComponent.prototype.disabled;\n/** @type {?} */\nTaskAttachmentListComponent.prototype.attachmentClick;\n/** @type {?} */\nTaskAttachmentListComponent.prototype.success;\n/** @type {?} */\nTaskAttachmentListComponent.prototype.error;\n/** @type {?} */\nTaskAttachmentListComponent.prototype.hasCustomTemplate;\n/** @type {?} */\nTaskAttachmentListComponent.prototype.customTemplateRef;\n/** @type {?} */\nTaskAttachmentListComponent.prototype.curret;\n/** @type {?} */\nTaskAttachmentListComponent.prototype.attachments;\n/** @type {?} */\nTaskAttachmentListComponent.prototype.isLoading;\n/** @type {?} */\nTaskAttachmentListComponent.prototype.activitiContentService;\n/** @type {?} */\nTaskAttachmentListComponent.prototype.contentService;\n/** @type {?} */\nTaskAttachmentListComponent.prototype.thumbnailService;\n/** @type {?} */\nTaskAttachmentListComponent.prototype.ngZone;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { CommonModule } from '@angular/common';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { NgModule } from '@angular/core';\nimport { MaterialModule } from '../material.module';\nimport { TranslateModule } from '@ngx-translate/core';\n\nimport { AppsListComponent } from './apps-list.component';\nexport class AppsListModule {\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [\n        CommonModule,\n        MaterialModule,\n        FlexLayoutModule,\n        TranslateModule\n    ],\n    declarations: [\n        AppsListComponent\n    ],\n    providers: [],\n    exports: [\n        AppsListComponent\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction AppsListModule_tsickle_Closure_declarations() {\n/** @type {?} */\nAppsListModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAppsListModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { AppsProcessService, TranslationService } from '@alfresco/adf-core';\nimport { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\nimport { AppDefinitionRepresentationModel } from '../task-list';\nimport { IconModel } from './icon.model';\nexport class AppsListComponent implements OnInit {\npublic static LAYOUT_LIST: string = 'LIST';\npublic static LAYOUT_GRID: string = 'GRID';\npublic static DEFAULT_TASKS_APP: string = 'tasks';\npublic static DEFAULT_TASKS_APP_NAME: string = 'ADF_TASK_LIST.APPS.TASK_APP_NAME';\npublic static DEFAULT_TASKS_APP_THEME: string = 'theme-2';\npublic static DEFAULT_TASKS_APP_ICON: string = 'glyphicon-asterisk';\npublic static DEFAULT_TASKS_APP_MATERIAL_ICON: string = 'favorite_border';\n\n    \n    layoutType: string = AppsListComponent.LAYOUT_GRID;\n\n    \n    filtersAppId: any[];\n\n    \n    appClick: EventEmitter<AppDefinitionRepresentationModel> = new EventEmitter<AppDefinitionRepresentationModel>();\n\n    \n    error: EventEmitter<any> = new EventEmitter<any>();\nprivate appsObserver: Observer<AppDefinitionRepresentationModel>;\n    apps$: Observable<AppDefinitionRepresentationModel>;\n\n    currentApp: AppDefinitionRepresentationModel;\n\n    appList: AppDefinitionRepresentationModel [] = [];\nprivate iconsMDL: IconModel;\n/**\n * @param {?} appsProcessService\n * @param {?} translationService\n */\nconstructor(\nprivate appsProcessService: AppsProcessService,\nprivate translationService: TranslationService) {\n            this.apps$ = new Observable<AppDefinitionRepresentationModel>(observer => this.appsObserver = observer).share();\n    }\n/**\n * @return {?}\n */\nngOnInit() {\n        if (!this.isValidType()) {\n            this.setDefaultLayoutType();\n        }\n\n        this.apps$.subscribe((app: any) => {\n            this.appList.push(app);\n        });\n        this.iconsMDL = new IconModel();\n        this.load();\n    }\n/**\n * @return {?}\n */\nprivate load() {\n        this.appsProcessService.getDeployedApplications()\n        .subscribe(\n            (res: AppDefinitionRepresentationModel[]) => {\n                this.filterApps(res).forEach((app: AppDefinitionRepresentationModel) => {\n                    if (this.isDefaultApp(app)) {\n                        app.theme = AppsListComponent.DEFAULT_TASKS_APP_THEME;\n                        app.icon = AppsListComponent.DEFAULT_TASKS_APP_ICON;\n                        this.appsObserver.next(app);\n                    } else if (app.deploymentId) {\n                        this.appsObserver.next(app);\n                    }\n                });\n            },\n            (err) => {\n                this.error.emit(err);\n            }\n        );\n    }\n/**\n * @param {?} app\n * @return {?}\n */\nisDefaultApp(app) {\n        return app.defaultAppId === AppsListComponent.DEFAULT_TASKS_APP;\n    }\n/**\n * @param {?} app\n * @return {?}\n */\ngetAppName(app) {\n        return this.isDefaultApp(app)\n            ? this.translationService.get(AppsListComponent.DEFAULT_TASKS_APP_NAME)\n            : Observable.of(app.name);\n    }\n/**\n * Pass the selected app as next\n * @param {?} app\n * @return {?}\n */\npublic selectApp(app: AppDefinitionRepresentationModel) {\n        this.currentApp = app;\n        this.appClick.emit(app);\n    }\n/**\n * Return true if the appId is the current app\n * @param {?} appId\n * @return {?}\n */\nisSelected(appId: number): boolean {\n        return (this.currentApp !== undefined && appId === this.currentApp.id);\n    }\n/**\n * @param {?} apps\n * @return {?}\n */\nprivate filterApps(apps: AppDefinitionRepresentationModel []): AppDefinitionRepresentationModel[] {\n        let /** @type {?} */ filteredApps: AppDefinitionRepresentationModel[] = [];\n        if (this.filtersAppId) {\n            apps.filter((app: AppDefinitionRepresentationModel) => {\n                this.filtersAppId.forEach((filter) => {\n                    if (app.defaultAppId === filter.defaultAppId ||\n                        app.deploymentId === filter.deploymentId ||\n                        app.name === filter.name ||\n                        app.id === filter.id ||\n                        app.modelId === filter.modelId ||\n                        app.tenantId === filter.tenantId) {\n                        filteredApps.push(app);\n                    }\n                });\n            });\n        } else {\n            return apps;\n        }\n        return filteredApps;\n    }\n/**\n * Check if the value of the layoutType property is an allowed value\n * @return {?}\n */\nisValidType(): boolean {\n        if (this.layoutType && (this.layoutType === AppsListComponent.LAYOUT_LIST || this.layoutType === AppsListComponent.LAYOUT_GRID)) {\n            return true;\n        }\n        return false;\n    }\n/**\n * Assign the default value to LayoutType\n * @return {?}\n */\nsetDefaultLayoutType(): void {\n        this.layoutType = AppsListComponent.LAYOUT_GRID;\n    }\n/**\n * Return true if the layout type is LIST\n * @return {?}\n */\nisList(): boolean {\n        return this.layoutType === AppsListComponent.LAYOUT_LIST;\n    }\n/**\n * Return true if the layout type is GRID\n * @return {?}\n */\nisGrid(): boolean {\n        return this.layoutType === AppsListComponent.LAYOUT_GRID;\n    }\n/**\n * @return {?}\n */\nisEmpty(): boolean {\n        return this.appList.length === 0;\n    }\n/**\n * @param {?} app\n * @return {?}\n */\ngetTheme(app: AppDefinitionRepresentationModel): string {\n        return app.theme ? app.theme : '';\n    }\n/**\n * @param {?} app\n * @return {?}\n */\ngetBackgroundIcon(app: AppDefinitionRepresentationModel): string {\n        return this.iconsMDL.mapGlyphiconToMaterialDesignIcons(app.icon);\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'adf-apps',\n    template: `\n      <div class=\"menu-container\" *ngIf=\"!isEmpty()\">\n          <mat-list *ngIf=\"isList()\" class=\"adf-app-list\">\n              <mat-list-item class=\"adf-app-list-item\" (click)=\"selectApp(app)\" (keyup.enter)=\"selectApp(app)\" *ngFor=\"let app of appList\" tabindex=\"0\" role=\"button\" title=\"{{app.name}}\">\n                  <mat-icon matListIcon>touch_app</mat-icon>\n                  <span matLine>{{getAppName(app) | async}}</span>\n              </mat-list-item>\n          </mat-list>\n          <div fxLayout=\"row wrap\" *ngIf=\"isGrid()\" class=\"adf-app-listgrid\">\n              <div *ngFor=\"let app of appList\"\n                  class=\"adf-app-listgrid-item\"\n                  fxFlex=\"33.33333%\" fxFlex.lt-md=\"50%\" fxFlex.lt-sm=\"100%\">\n                      <mat-card tabindex=\"0\"\n                          fxLayout=\"column\"\n                          role=\"button\"\n                          class=\"adf-app-listgrid-item-card\"\n                          title=\"{{getAppName(app) | async}}\"\n                          [ngClass]=\"[getTheme(app)]\"\n                          (click)=\"selectApp(app)\"\n                          (keyup.enter)=\"selectApp(app)\">\n                              <div class=\"adf-app-listgrid-item-card-logo\">\n                                  <mat-icon class=\"adf-app-listgrid-item-card-logo-icon\">{{getBackgroundIcon(app)}}</mat-icon>\n                              </div>\n                              <div mat-card-title class=\"adf-app-listgrid-item-card-title\">\n                                  <h1>{{getAppName(app) | async}}</h1>\n                              </div>\n                              <mat-card-subtitle class=\"adf-app-listgrid-item-card-subtitle\" fxFlex=\"1 0 auto\">\n                                  <p>{{app.description}}</p>\n                              </mat-card-subtitle>\n\n                              <mat-card-actions class=\"adf-app-listgrid-item-card-actions\">\n                                  <mat-icon class=\"adf-app-listgrid-item-card-actions-icon\" *ngIf=\"isSelected(app.id)\">done</mat-icon>\n                              </mat-card-actions>\n                      </mat-card>\n              </div>\n          </div>\n      </div>\n      <div class=\"menu-container\" *ngIf=\"isEmpty()\">\n          {{ 'ADF_TASK_LIST.APPS.NONE' | translate }}\n      </div>\n    `,\n    styles: [`\n      :host {\n        width: 100%; }\n\n      .adf-app-list-item {\n        cursor: pointer; }\n\n      .adf-app-listgrid {\n        padding: 8px; }\n        .adf-app-listgrid-item {\n          outline: none;\n          padding: 8px;\n          -webkit-box-sizing: border-box;\n                  box-sizing: border-box; }\n          .adf-app-listgrid-item-card {\n            outline: none;\n            -webkit-transition: -webkit-transform 280ms cubic-bezier(0.4, 0, 0.2, 1), -webkit-box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);\n            transition: -webkit-transform 280ms cubic-bezier(0.4, 0, 0.2, 1), -webkit-box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);\n            transition: transform 280ms cubic-bezier(0.4, 0, 0.2, 1), box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);\n            transition: transform 280ms cubic-bezier(0.4, 0, 0.2, 1), box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1), -webkit-transform 280ms cubic-bezier(0.4, 0, 0.2, 1), -webkit-box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);\n            min-height: 200px;\n            padding: 0; }\n            .adf-app-listgrid-item-card.theme-1 {\n              background-color: #269abc; }\n            .adf-app-listgrid-item-card.theme-2 {\n              background-color: #7da9b0; }\n            .adf-app-listgrid-item-card.theme-3 {\n              background-color: #7689ab; }\n            .adf-app-listgrid-item-card.theme-4 {\n              background-color: #c74e3e; }\n            .adf-app-listgrid-item-card.theme-5 {\n              background-color: #fab96c; }\n            .adf-app-listgrid-item-card.theme-6 {\n              background-color: #759d4c; }\n            .adf-app-listgrid-item-card.theme-7 {\n              background-color: #b1b489; }\n            .adf-app-listgrid-item-card.theme-8 {\n              background-color: #a17299; }\n            .adf-app-listgrid-item-card.theme-9 {\n              background-color: #696c67; }\n            .adf-app-listgrid-item-card.theme-10 {\n              background-color: #cabb33; }\n            .adf-app-listgrid-item-card:hover {\n              -webkit-box-shadow: 0 8px 10px 1px rgba(0, 0, 0, 0.14), 0 3px 14px 2px rgba(0, 0, 0, 0.12), 0 5px 5px -3px rgba(0, 0, 0, 0.2);\n                      box-shadow: 0 8px 10px 1px rgba(0, 0, 0, 0.14), 0 3px 14px 2px rgba(0, 0, 0, 0.12), 0 5px 5px -3px rgba(0, 0, 0, 0.2);\n              cursor: pointer;\n              -webkit-transform: scale(1.015);\n                      transform: scale(1.015); }\n            .adf-app-listgrid-item-card-logo {\n              position: absolute;\n              right: 20px;\n              top: 20px;\n              padding: 16px; }\n              .adf-app-listgrid-item-card-logo-icon {\n                font-size: 70px;\n                width: 1em;\n                height: 1em; }\n                .theme-1 .adf-app-listgrid-item-card-logo-icon {\n                  color: #168aac; }\n                .theme-2 .adf-app-listgrid-item-card-logo-icon {\n                  color: #6d99a0; }\n                .theme-3 .adf-app-listgrid-item-card-logo-icon {\n                  color: #66799b; }\n                .theme-4 .adf-app-listgrid-item-card-logo-icon {\n                  color: #b73e2e; }\n                .theme-5 .adf-app-listgrid-item-card-logo-icon {\n                  color: #eaa95c; }\n                .theme-6 .adf-app-listgrid-item-card-logo-icon {\n                  color: #658d3c; }\n                .theme-7 .adf-app-listgrid-item-card-logo-icon {\n                  color: #a1a479; }\n                .theme-8 .adf-app-listgrid-item-card-logo-icon {\n                  color: #916289; }\n                .theme-9 .adf-app-listgrid-item-card-logo-icon {\n                  color: #595c57; }\n                .theme-10 .adf-app-listgrid-item-card-logo-icon {\n                  color: #baab23; }\n            .adf-app-listgrid-item-card-title {\n              padding: 16px; }\n              .adf-app-listgrid-item-card-title h1 {\n                color: white;\n                width: 80%;\n                font-size: 24px;\n                margin: 0;\n                line-height: normal;\n                white-space: nowrap;\n                text-overflow: ellipsis;\n                overflow: hidden; }\n            .adf-app-listgrid-item-card-subtitle {\n              padding: 16px; }\n            .adf-app-listgrid-item-card-actions {\n              padding: 0 16px 16px 16px;\n              border-top: 1px solid rgba(0, 0, 0, 0.1);\n              min-height: 48px;\n              -webkit-box-sizing: border-box;\n                      box-sizing: border-box; }\n              .adf-app-listgrid-item-card-actions-icon {\n                color: #e9f1f3; }\n              .adf-app-listgrid-item-card-actions.mat-card-actions {\n                margin-left: 0px;\n                margin-right: 0px; }\n                .adf-app-listgrid-item-card-actions.mat-card-actions:last-child {\n                  margin-bottom: 0; }\n    `]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: AppsProcessService, },\n{type: TranslationService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'layoutType': [{ type: Input },],\n'filtersAppId': [{ type: Input },],\n'appClick': [{ type: Output },],\n'error': [{ type: Output },],\n};\n}\n\nfunction AppsListComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nAppsListComponent.LAYOUT_LIST;\n/** @type {?} */\nAppsListComponent.LAYOUT_GRID;\n/** @type {?} */\nAppsListComponent.DEFAULT_TASKS_APP;\n/** @type {?} */\nAppsListComponent.DEFAULT_TASKS_APP_NAME;\n/** @type {?} */\nAppsListComponent.DEFAULT_TASKS_APP_THEME;\n/** @type {?} */\nAppsListComponent.DEFAULT_TASKS_APP_ICON;\n/** @type {?} */\nAppsListComponent.DEFAULT_TASKS_APP_MATERIAL_ICON;\n/** @type {?} */\nAppsListComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAppsListComponent.ctorParameters;\n/** @type {?} */\nAppsListComponent.propDecorators;\n/** @type {?} */\nAppsListComponent.prototype.layoutType;\n/** @type {?} */\nAppsListComponent.prototype.filtersAppId;\n/** @type {?} */\nAppsListComponent.prototype.appClick;\n/** @type {?} */\nAppsListComponent.prototype.error;\n/** @type {?} */\nAppsListComponent.prototype.appsObserver;\n/** @type {?} */\nAppsListComponent.prototype.apps$;\n/** @type {?} */\nAppsListComponent.prototype.currentApp;\n/** @type {?} */\nAppsListComponent.prototype.appList;\n/** @type {?} */\nAppsListComponent.prototype.iconsMDL;\n/** @type {?} */\nAppsListComponent.prototype.appsProcessService;\n/** @type {?} */\nAppsListComponent.prototype.translationService;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { FormModule } from '@alfresco/adf-core';\nimport { MaterialModule } from '../material.module';\n\nimport { CardViewModule, CardViewUpdateService, DataColumnModule, DataTableModule, DirectiveModule, PipeModule } from '@alfresco/adf-core';\nimport { TaskListModule } from '../task-list/task-list.module';\nimport { PeopleModule } from '../people/people.module';\nimport { CommentsModule } from '../comments/comments.module';\n\nimport { ProcessAuditDirective } from './components/process-audit.directive';\nimport { ProcessFiltersComponent } from './components/process-filters.component';\nimport { ProcessInstanceDetailsComponent } from './components/process-instance-details.component';\nimport { ProcessInstanceHeaderComponent } from './components/process-instance-header.component';\nimport { ProcessInstanceTasksComponent } from './components/process-instance-tasks.component';\nimport { ProcessInstanceListComponent } from './components/process-list.component';\nimport { StartProcessInstanceComponent } from './components/start-process.component';\n\nimport { ProcessService } from './services/process.service';\nimport { ProcessFilterService } from './services/process-filter.service';\nexport class ProcessListModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [\n        CommonModule,\n        DataTableModule,\n        FormModule,\n        TaskListModule,\n        MaterialModule,\n        FlexLayoutModule,\n        TranslateModule,\n        CardViewModule,\n        FormsModule,\n        ReactiveFormsModule,\n        PipeModule,\n        DataColumnModule,\n        DirectiveModule,\n        PeopleModule,\n        CommentsModule\n    ],\n    declarations: [\n        ProcessInstanceListComponent,\n        ProcessFiltersComponent,\n        ProcessInstanceDetailsComponent,\n        ProcessAuditDirective,\n        ProcessInstanceHeaderComponent,\n        ProcessInstanceTasksComponent,\n        StartProcessInstanceComponent\n    ],\n    providers: [\n        ProcessService,\n        ProcessFilterService,\n        CardViewUpdateService\n    ],\n    exports: [\n        ProcessInstanceListComponent,\n        ProcessFiltersComponent,\n        ProcessInstanceDetailsComponent,\n        ProcessAuditDirective,\n        ProcessInstanceHeaderComponent,\n        ProcessInstanceTasksComponent,\n        StartProcessInstanceComponent\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ProcessListModule_tsickle_Closure_declarations() {\n/** @type {?} */\nProcessListModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nProcessListModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\nexport class IconModel {\npublic static DEFAULT_TASKS_APP_MATERIAL_ICON: string = 'favorite_border';\nprivate iconsMDL: Map<string, string>;\nconstructor() {\n        this.initIconsMDL();\n    }\n/**\n * @param {?} icon\n * @return {?}\n */\nmapGlyphiconToMaterialDesignIcons(icon: string) {\n        return this.iconsMDL.get(icon) ? this.iconsMDL.get(icon) : IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON;\n    }\n/**\n * Map all the bootstrap glyphicon icons with Material design material icon\n * @return {?}\n */\ninitIconsMDL() {\n        this.iconsMDL = new Map<string, string>();\n\n        this.iconsMDL.set('glyphicon-asterisk', 'ac_unit');\n        this.iconsMDL.set('glyphicon-plus', 'add');\n        this.iconsMDL.set('glyphicon-euro', 'euro_symbol');\n        this.iconsMDL.set('glyphicon-cloud', 'cloud');\n        this.iconsMDL.set('glyphicon-envelope', 'mail');\n        this.iconsMDL.set('glyphicon-pencil', 'create');\n        this.iconsMDL.set('glyphicon-glass', 'local_bar');\n        this.iconsMDL.set('glyphicon-music', 'music_note');\n        this.iconsMDL.set('glyphicon-search', 'search');\n        this.iconsMDL.set('glyphicon-heart', 'favorite');\n        this.iconsMDL.set('glyphicon-heart-empty', 'favorite_border');\n        this.iconsMDL.set('glyphicon-star', 'star');\n        this.iconsMDL.set('glyphicon-star-empty', 'star_border');\n        this.iconsMDL.set('glyphicon-user', 'person');\n        this.iconsMDL.set('glyphicon-film', 'movie_creation');\n        this.iconsMDL.set('glyphicon-th-large', 'view_comfy');\n        this.iconsMDL.set('glyphicon-th', 'view_compact');\n        this.iconsMDL.set('glyphicon-th-list', 'list');\n        this.iconsMDL.set('glyphicon-ok', 'done');\n        this.iconsMDL.set('glyphicon-remove', 'cancel');\n        this.iconsMDL.set('glyphicon-zoom-in', 'zoom_in');\n        this.iconsMDL.set('glyphicon-zoom-out', 'zoom_out');\n        this.iconsMDL.set('glyphicon-off', 'highlight_off');\n        this.iconsMDL.set('glyphicon-signal', 'signal_cellular_4_bar');\n        this.iconsMDL.set('glyphicon-cog', 'settings');\n        this.iconsMDL.set('glyphicon-trash', 'delete');\n        this.iconsMDL.set('glyphicon-home', 'home');\n        this.iconsMDL.set('glyphicon-file', 'insert_drive_file');\n        this.iconsMDL.set('glyphicon-time', 'access_time');\n        this.iconsMDL.set('glyphicon-road', 'map');\n        this.iconsMDL.set('glyphicon-download-alt', 'file_download');\n        this.iconsMDL.set('glyphicon-download', 'file_download');\n        this.iconsMDL.set('glyphicon-upload', 'file_upload');\n        this.iconsMDL.set('glyphicon-inbox', 'inbox');\n        this.iconsMDL.set('glyphicon-play-circle', 'play_circle_outline');\n        this.iconsMDL.set('glyphicon-repeat', 'refresh');\n        this.iconsMDL.set('glyphicon-refresh', 'sync');\n        this.iconsMDL.set('glyphicon-list-alt', 'event_note');\n        this.iconsMDL.set('glyphicon-lock', 'lock_outline');\n        this.iconsMDL.set('glyphicon-flag', 'assistant_photo');\n        this.iconsMDL.set('glyphicon-headphones', 'headset');\n        this.iconsMDL.set('glyphicon-volume-up', 'volume_up');\n        this.iconsMDL.set('glyphicon-tag', 'local_offer');\n        this.iconsMDL.set('glyphicon-tags', 'local_offer');\n        this.iconsMDL.set('glyphicon-book', 'library_books');\n        this.iconsMDL.set('glyphicon-bookmark', 'collections_bookmark');\n        this.iconsMDL.set('glyphicon-print', 'local_printshop');\n        this.iconsMDL.set('glyphicon-camera', 'local_see');\n        this.iconsMDL.set('glyphicon-list', 'view_list');\n        this.iconsMDL.set('glyphicon-facetime-video', 'video_call');\n        this.iconsMDL.set('glyphicon-picture', 'photo');\n        this.iconsMDL.set('glyphicon-map-marker', 'add_location');\n        this.iconsMDL.set('glyphicon-adjust', 'brightness_4');\n        this.iconsMDL.set('glyphicon-tint', 'invert_colors');\n        this.iconsMDL.set('glyphicon-edit', 'edit');\n        this.iconsMDL.set('glyphicon-share', 'share');\n        this.iconsMDL.set('glyphicon-check', 'assignment_turned_in');\n        this.iconsMDL.set('glyphicon-move', 'open_with');\n        this.iconsMDL.set('glyphicon-play', 'play_arrow');\n        this.iconsMDL.set('glyphicon-eject', 'eject');\n        this.iconsMDL.set('glyphicon-plus-sign', 'add_circle');\n        this.iconsMDL.set('glyphicon-minus-sign', 'remove_circle');\n        this.iconsMDL.set('glyphicon-remove-sign', 'cancel');\n        this.iconsMDL.set('glyphicon-ok-sign', 'check_circle');\n        this.iconsMDL.set('glyphicon-question-sign', 'help');\n        this.iconsMDL.set('glyphicon-info-sign', 'info');\n        this.iconsMDL.set('glyphicon-screenshot', 'flare');\n        this.iconsMDL.set('glyphicon-remove-circle', 'cancel');\n        this.iconsMDL.set('glyphicon-ok-circle', 'add_circle');\n        this.iconsMDL.set('glyphicon-ban-circle', 'block');\n        this.iconsMDL.set('glyphicon-share-alt', 'redo');\n        this.iconsMDL.set('glyphicon-exclamation-sign', 'error');\n        this.iconsMDL.set('glyphicon-gift', 'giftcard');\n        this.iconsMDL.set('glyphicon-leaf', 'spa');\n        this.iconsMDL.set('glyphicon-fire', 'whatshot');\n        this.iconsMDL.set('glyphicon-eye-open', 'remove_red_eye');\n        this.iconsMDL.set('glyphicon-eye-close', 'remove_red_eye');\n        this.iconsMDL.set('glyphicon-warning-sign', 'warning');\n        this.iconsMDL.set('glyphicon-plane', 'airplanemode_active');\n        this.iconsMDL.set('glyphicon-calendar', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-random', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-comment', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-magnet', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-retweet', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-shopping-cart', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-folder-close', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-folder-open', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-hdd', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-bullhorn', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-bell', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-certificate', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-thumbs-up', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-thumbs-down', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-hand-left', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-globe', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-wrench', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-tasks', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-filter', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-briefcase', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-dashboard', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-paperclip', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-link', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-phone', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-pushpin', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-usd', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-gbp', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-sort', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-flash', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-record', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-save', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-open', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-saved', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-send', 'send');\n        this.iconsMDL.set('glyphicon-floppy-disk', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-credit-card', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-cutlery', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-earphone', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-phone-alt', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-tower', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-stats', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-cloud-download', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-cloud-upload', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-tree-conifer', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n        this.iconsMDL.set('glyphicon-tree-deciduous', IconModel.DEFAULT_TASKS_APP_MATERIAL_ICON);\n    }\n}\n\nfunction IconModel_tsickle_Closure_declarations() {\n/** @type {?} */\nIconModel.DEFAULT_TASKS_APP_MATERIAL_ICON;\n/** @type {?} */\nIconModel.prototype.iconsMDL;\n}\n\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { Component, EventEmitter, Input, OnChanges, Output, SimpleChanges,  ViewChild, ViewEncapsulation } from '@angular/core';\nimport { StartFormComponent } from '@alfresco/adf-core';\nimport { ProcessInstanceVariable } from '../models/process-instance-variable.model';\nimport { ProcessDefinitionRepresentation } from './../models/process-definition.model';\nimport { ProcessInstance } from './../models/process-instance.model';\nimport { ProcessService } from './../services/process.service';\nexport class StartProcessInstanceComponent implements OnChanges {\n\n    \n    appId: number;\n\n    \n    variables: ProcessInstanceVariable[];\n\n    \n    start: EventEmitter<ProcessInstance> = new EventEmitter<ProcessInstance>();\n\n    \n    cancel: EventEmitter<ProcessInstance> = new EventEmitter<ProcessInstance>();\n\n    \n    error: EventEmitter<ProcessInstance> = new EventEmitter<ProcessInstance>();\n\n    \n    startForm: StartFormComponent;\n\n    processDefinitions: ProcessDefinitionRepresentation[] = [];\n\n    name: string;\n\n    currentProcessDef: ProcessDefinitionRepresentation = new ProcessDefinitionRepresentation();\n\n    errorMessageId: string = '';\n/**\n * @param {?} activitiProcess\n */\nconstructor(private activitiProcess: ProcessService) {\n    }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n        let /** @type {?} */ appIdChange = changes['appId'];\n        let /** @type {?} */ appId = appIdChange ? appIdChange.currentValue : null;\n        this.load(appId);\n    }\n/**\n * @param {?=} appId\n * @return {?}\n */\npublic load(appId?: number) {\n        this.resetSelectedProcessDefinition();\n        this.resetErrorMessage();\n        this.activitiProcess.getProcessDefinitions(appId).subscribe(\n            (res) => {\n                this.processDefinitions = res;\n            },\n            () => {\n                this.errorMessageId = 'ADF_PROCESS_LIST.START_PROCESS.ERROR.LOAD_PROCESS_DEFS';\n            }\n        );\n    }\n/**\n * @param {?=} outcome\n * @return {?}\n */\npublic startProcess(outcome?: string) {\n        if (this.currentProcessDef.id && this.name) {\n            this.resetErrorMessage();\n            let /** @type {?} */ formValues = this.startForm ? this.startForm.form.values : undefined;\n            this.activitiProcess.startProcess(this.currentProcessDef.id, this.name, outcome, formValues, this.variables).subscribe(\n                (res) => {\n                    this.name = '';\n                    this.start.emit(res);\n                },\n                (err) => {\n                    this.errorMessageId = 'ADF_PROCESS_LIST.START_PROCESS.ERROR.START';\n                    this.error.error(err);\n                }\n            );\n        }\n    }\n/**\n * @param {?} processDefinitionId\n * @return {?}\n */\nonProcessDefChange(processDefinitionId) {\n        let /** @type {?} */ processDef = this.processDefinitions.find((processDefinition) => {\n            return processDefinition.id === processDefinitionId;\n        });\n        if (processDef) {\n            this.currentProcessDef = JSON.parse(JSON.stringify(processDef));\n        } else {\n            this.resetSelectedProcessDefinition();\n        }\n    }\n/**\n * @return {?}\n */\npublic cancelStartProcess() {\n        this.cancel.emit();\n    }\n/**\n * @return {?}\n */\nhasStartForm() {\n        return this.currentProcessDef && this.currentProcessDef.hasStartForm;\n    }\n/**\n * @return {?}\n */\nisProcessDefinitionEmpty() {\n        return this.processDefinitions ? (this.processDefinitions.length > 0 || this.errorMessageId) : this.errorMessageId;\n    }\n/**\n * @return {?}\n */\nisStartFormMissingOrValid() {\n        if (this.startForm) {\n            return this.startForm.form && this.startForm.form.isValid;\n        } else {\n            return true;\n        }\n    }\n/**\n * @return {?}\n */\nvalidateForm() {\n        return this.currentProcessDef.id && this.name && this.isStartFormMissingOrValid();\n    }\n/**\n * @return {?}\n */\nprivate resetSelectedProcessDefinition() {\n        this.currentProcessDef = new ProcessDefinitionRepresentation();\n    }\n/**\n * @return {?}\n */\nprivate resetErrorMessage(): void {\n        this.errorMessageId = '';\n    }\n/**\n * @return {?}\n */\nhasErrorMessage() {\n        return this.processDefinitions.length === 0 && !this.errorMessageId;\n    }\n/**\n * @param {?} outcome\n * @return {?}\n */\npublic onOutcomeClick(outcome: string) {\n        this.startProcess(outcome);\n    }\n/**\n * @return {?}\n */\npublic reset() {\n        this.resetSelectedProcessDefinition();\n        this.name = '';\n        if (this.startForm) {\n            this.startForm.data = {};\n        }\n        this.resetErrorMessage();\n    }\n/**\n * @return {?}\n */\nhasProcessName(): boolean {\n        return this.name ? true : false;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'adf-start-process',\n    template: `\n      <mat-card class=\"adf-start-process\">\n      \t<mat-card-title>{{'ADF_PROCESS_LIST.START_PROCESS.FORM.TITLE' | translate}}\n      \t</mat-card-title>\n      \t<mat-card-content *ngIf=\"isProcessDefinitionEmpty()\">\n      \t\t<mat-card-subtitle id=\"error-message\" *ngIf=\"errorMessageId\">\n      \t\t\t{{errorMessageId|translate}}\n      \t\t</mat-card-subtitle>\n      \t\t<mat-form-field class=\"adf-process-input-container\">\n      \t\t\t<input matInput placeholder=\"{{'ADF_PROCESS_LIST.START_PROCESS.FORM.LABEL.NAME'|translate}}\" [(ngModel)]=\"name\" id=\"processName\" required />\n      \t\t</mat-form-field>\n              <mat-form-field>\n                  <mat-select placeholder=\"{{'ADF_PROCESS_LIST.START_PROCESS.FORM.LABEL.TYPE'|translate}}\" [(ngModel)]=\"currentProcessDef.id\" (ngModelChange)=\"onProcessDefChange($event)\" required>\n                      <mat-option>{{'ADF_PROCESS_LIST.START_PROCESS.FORM.TYPE_PLACEHOLDER' | translate}}</mat-option>\n                      <mat-option *ngFor=\"let processDef of processDefinitions\" [value]=\"processDef.id\">\n                          {{ processDef.name }}\n                      </mat-option>\n                  </mat-select>\n              </mat-form-field>\n              <adf-start-form *ngIf=\"hasStartForm()\"\n                  [disableStartProcessButton]=\"!hasProcessName()\"\n      \t\t\t[processDefinitionId]=\"currentProcessDef.id\"\n      \t\t\t(outcomeClick)=\"onOutcomeClick($event)\"\n      \t\t    [showRefreshButton]=\"false\">\n      \t\t<button form-custom-button mat-button (click)=\"cancelStartProcess()\" id=\"cancle_process\" class=\"\"> {{'ADF_PROCESS_LIST.START_PROCESS.FORM.ACTION.CANCEL'| translate}} </button>\n      \t\t</adf-start-form>\n      \t</mat-card-content>\n      \t<mat-card-content *ngIf=\"hasErrorMessage()\">\n      \t\t<mat-card-subtitle class=\"error-message\" id=\"no-process-message\">\n      \t\t\t{{'ADF_PROCESS_LIST.START_PROCESS.NO_PROCESS_DEFINITIONS' | translate}}\n      \t\t</mat-card-subtitle>\n      \t</mat-card-content>\n      \t<mat-card-actions *ngIf=\"!hasStartForm()\">\n      \t\t<button mat-button *ngIf=\"!hasStartForm()\" (click)=\"cancelStartProcess()\" id=\"cancle_process\" class=\"\"> {{'ADF_PROCESS_LIST.START_PROCESS.FORM.ACTION.CANCEL'| translate}} </button>\n      \t\t<button mat-button *ngIf=\"!hasStartForm()\" [disabled]=\"!validateForm()\" (click)=\"startProcess()\" data-automation-id=\"btn-start\" id=\"button-start\" class=\"btn-start\"> {{'ADF_PROCESS_LIST.START_PROCESS.FORM.ACTION.START' | translate}} </button>\n      \t</mat-card-actions>\n      </mat-card>\n    `,\n    styles: [`\n      .adf-start-process {\n        width: calc(66.6666% - 48px);\n        margin-left: calc(33.3333333333% / 2);\n        margin-right: calc(33.3333333333% / 2);\n        margin-top: 10px; }\n        .adf-start-process .mat-select-trigger {\n          font-size: 14px !important; }\n        .adf-start-process mat-form-field {\n          width: 100%; }\n        .adf-start-process mat-select {\n          width: 100%;\n          padding: 16px 0px 0px 0px; }\n        .adf-start-process mat-card-actions {\n          text-align: right; }\n\n      .adf-process-input-container mat-form-field {\n        width: 100%; }\n\n      .adf-start-form-container .mat-card {\n        -webkit-box-shadow: none !important;\n                box-shadow: none !important;\n        padding: 0px !important; }\n\n      .adf-start-form-actions {\n        text-align: right !important; }\n    `],\n    encapsulation: ViewEncapsulation.None\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ProcessService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'appId': [{ type: Input },],\n'variables': [{ type: Input },],\n'start': [{ type: Output },],\n'cancel': [{ type: Output },],\n'error': [{ type: Output },],\n'startForm': [{ type: ViewChild, args: [StartFormComponent, ] },],\n};\n}\n\nfunction StartProcessInstanceComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nStartProcessInstanceComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStartProcessInstanceComponent.ctorParameters;\n/** @type {?} */\nStartProcessInstanceComponent.propDecorators;\n/** @type {?} */\nStartProcessInstanceComponent.prototype.appId;\n/** @type {?} */\nStartProcessInstanceComponent.prototype.variables;\n/** @type {?} */\nStartProcessInstanceComponent.prototype.start;\n/** @type {?} */\nStartProcessInstanceComponent.prototype.cancel;\n/** @type {?} */\nStartProcessInstanceComponent.prototype.error;\n/** @type {?} */\nStartProcessInstanceComponent.prototype.startForm;\n/** @type {?} */\nStartProcessInstanceComponent.prototype.processDefinitions;\n/** @type {?} */\nStartProcessInstanceComponent.prototype.name;\n/** @type {?} */\nStartProcessInstanceComponent.prototype.currentProcessDef;\n/** @type {?} */\nStartProcessInstanceComponent.prototype.errorMessageId;\n/** @type {?} */\nStartProcessInstanceComponent.prototype.activitiProcess;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport let /** @type {?} */ processPresetsDefaultModel = {\n    'default': [\n        {\n            'key': 'name',\n            'type': 'text',\n            'title': 'ADF_PROCESS_LIST.PROPERTIES.NAME',\n            'sortable': true\n        },\n        {\n            'key': 'created',\n            'type': 'text',\n            'title': 'ADF_PROCESS_LIST.PROPERTIES.CREATED',\n            'cssClass': 'hidden',\n            'sortable': true\n        }\n    ]\n};\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { DataColumn, DataRowEvent, DataSorting, DataTableAdapter, ObjectDataColumn, ObjectDataRow, ObjectDataTableAdapter } from '@alfresco/adf-core';\nimport { AppConfigService, DataColumnListComponent } from '@alfresco/adf-core';\nimport { DatePipe } from '@angular/common';\nimport { AfterContentInit, Component, ContentChild, EventEmitter, Input, OnChanges, Output, SimpleChanges } from '@angular/core';\nimport { ProcessFilterParamRepresentationModel } from '../models/filter-process.model';\nimport { ProcessInstance } from '../models/process-instance.model';\nimport { processPresetsDefaultModel } from '../models/process-preset.model';\nimport { ProcessService } from '../services/process.service';\nexport class ProcessInstanceListComponent implements OnChanges, AfterContentInit {\n\n     columnList: DataColumnListComponent;\n\n    \n    appId: number;\n\n    \n    processDefinitionKey: string;\n\n    \n    state: string;\n\n    \n    sort: string;\n\n    \n    name: string;\n\n    \n    presetColumn: string;\n\n    requestNode: ProcessFilterParamRepresentationModel;\n\n    \n    data: DataTableAdapter;\n\n    \n    rowClick: EventEmitter<string> = new EventEmitter<string>();\n\n    \n    success: EventEmitter<ProcessInstance[]> = new EventEmitter<ProcessInstance[]>();\n\n    \n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    currentInstanceId: string;\n    isLoading: boolean = true;\n    layoutPresets = {};\n/**\n * @param {?} processService\n * @param {?} appConfig\n */\nconstructor(private processService: ProcessService,\nprivate appConfig: AppConfigService) {\n    }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n        this.loadLayoutPresets();\n        this.setupSchema();\n\n        if (this.appId) {\n            this.reload();\n        }\n    }\n/**\n * Setup html-based (html definitions) or code behind (data adapter) schema.\n * If component is assigned with an empty data adater the default schema settings applied.\n * @return {?}\n */\nsetupSchema() {\n        let /** @type {?} */ schema: DataColumn[] = [];\n\n        if (this.columnList && this.columnList.columns && this.columnList.columns.length > 0) {\n            schema = this.columnList.columns.map(c => /** @type {?} */(( <DataColumn> c)));\n        }\n\n        if (!this.data) {\n            this.data = new ObjectDataTableAdapter([], schema.length > 0 ? schema : this.getLayoutPreset(this.presetColumn));\n        } else {\n            if (schema && schema.length > 0) {\n                this.data.setColumns(schema);\n            } else if (this.data.getColumns().length === 0) {\n                this.presetColumn ? this.setupDefaultColumns(this.presetColumn) : this.setupDefaultColumns();\n            }\n        }\n    }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n        if (this.isPropertyChanged(changes)) {\n            this.reload();\n        }\n    }\n/**\n * @param {?} changes\n * @return {?}\n */\nprivate isPropertyChanged(changes: SimpleChanges): boolean {\n        let /** @type {?} */ changed: boolean = false;\n\n        let /** @type {?} */ appId = changes['appId'];\n        let /** @type {?} */ processDefinitionKey = changes['processDefinitionKey'];\n        let /** @type {?} */ state = changes['state'];\n        let /** @type {?} */ sort = changes['sort'];\n        let /** @type {?} */ name = changes['name'];\n\n        if (appId && appId.currentValue) {\n            changed = true;\n        } else if (processDefinitionKey && processDefinitionKey.currentValue) {\n            changed = true;\n        } else if (state && state.currentValue) {\n            changed = true;\n        } else if (sort && sort.currentValue) {\n            changed = true;\n        } else if (name && name.currentValue) {\n            changed = true;\n        }\n        return changed;\n    }\n/**\n * @return {?}\n */\npublic reload() {\n        this.requestNode = this.createRequestNode();\n        this.load(this.requestNode);\n    }\n/**\n * @param {?} requestNode\n * @return {?}\n */\nprivate load(requestNode: ProcessFilterParamRepresentationModel) {\n        this.isLoading = true;\n        this.processService.getProcessInstances(requestNode, this.processDefinitionKey)\n            .subscribe(\n                (response) => {\n                    let /** @type {?} */ instancesRow = this.createDataRow(response);\n                    this.renderInstances(instancesRow);\n                    this.selectFirst();\n                    this.success.emit(response);\n                    this.isLoading = false;\n                },\n                error => {\n                    this.error.emit(error);\n                    this.isLoading = false;\n                });\n    }\n/**\n * Create an array of ObjectDataRow\n * @param {?} instances\n * @return {?}\n */\nprivate createDataRow(instances: any[]): ObjectDataRow[] {\n        let /** @type {?} */ instancesRows: ObjectDataRow[] = [];\n        instances.forEach((row) => {\n            instancesRows.push(new ObjectDataRow(row));\n        });\n        return instancesRows;\n    }\n/**\n * Render the instances list\n * \n * @param {?} instances\n * @return {?}\n */\nprivate renderInstances(instances: any[]) {\n        instances = this.optimizeNames(instances);\n        this.setDatatableSorting();\n        this.data.setRows(instances);\n    }\n/**\n * Sort the datatable rows based on current value of 'sort' property\n * @return {?}\n */\nprivate setDatatableSorting() {\n        if (!this.sort) {\n            return;\n        }\n        let /** @type {?} */ sortingParams: string[] = this.sort.split('-');\n        if (sortingParams.length === 2) {\n            let /** @type {?} */ sortColumn = sortingParams[0] === 'created' ? 'started' : sortingParams[0];\n            let /** @type {?} */ sortOrder = sortingParams[1];\n            this.data.setSorting(new DataSorting(sortColumn, sortOrder));\n        }\n    }\n/**\n * Select the first instance of a list if present\n * @return {?}\n */\nselectFirst() {\n        if (!this.isListEmpty()) {\n            let /** @type {?} */ row = this.data.getRows()[0];\n            row.isSelected = true;\n            this.data.selectedRow = row;\n            this.currentInstanceId = row.getValue('id');\n        } else {\n            if (this.data) {\n                this.data.selectedRow = null;\n            }\n            this.currentInstanceId = null;\n        }\n    }\n/**\n * Return the current id\n * @return {?}\n */\ngetCurrentId(): string {\n        return this.currentInstanceId;\n    }\n/**\n * Check if the list is empty\n * @return {?}\n */\nisListEmpty(): boolean {\n        return this.data === undefined ||\n            (this.data && this.data.getRows() && this.data.getRows().length === 0);\n    }\n/**\n * Emit the event rowClick passing the current task id when the row is clicked\n * @param {?} event\n * @return {?}\n */\nonRowClick(event: DataRowEvent) {\n        let /** @type {?} */ item = event;\n        this.currentInstanceId = item.value.getValue('id');\n        this.rowClick.emit(this.currentInstanceId);\n    }\n/**\n * Emit the event rowClick passing the current task id when pressed the Enter key on the selected row\n * @param {?} event\n * @return {?}\n */\nonRowKeyUp(event: CustomEvent) {\n        if (event.detail.keyboardEvent.key === 'Enter') {\n            event.preventDefault();\n            this.currentInstanceId = event.detail.row.getValue('id');\n            this.rowClick.emit(this.currentInstanceId);\n        }\n    }\n/**\n * Optimize name field\n * @param {?} instances\n * @return {?}\n */\nprivate optimizeNames(instances: any[]) {\n        instances = instances.map(t => {\n            t.obj.name = this.getProcessNameOrDescription(t.obj, 'medium');\n            return t;\n        });\n        return instances;\n    }\n/**\n * @param {?} processInstance\n * @param {?} dateFormat\n * @return {?}\n */\ngetProcessNameOrDescription(processInstance, dateFormat): string {\n        let /** @type {?} */ name = '';\n        if (processInstance) {\n            name = processInstance.name ||\n                processInstance.processDefinitionName + ' - ' + this.getFormatDate(processInstance.started, dateFormat);\n        }\n        return name;\n    }\n/**\n * @param {?} value\n * @param {?} format\n * @return {?}\n */\ngetFormatDate(value, format: string) {\n        let /** @type {?} */ datePipe = new DatePipe('en-US');\n        try {\n            return datePipe.transform(value, format);\n        } catch ( /** @type {?} */err) {\n            return '';\n        }\n    }\n/**\n * @return {?}\n */\nprivate createRequestNode() {\n        let /** @type {?} */ requestNode = {\n            appDefinitionId: this.appId,\n            state: this.state,\n            sort: this.sort\n        };\n        return new ProcessFilterParamRepresentationModel(requestNode);\n    }\n/**\n * @param {?=} preset\n * @return {?}\n */\nsetupDefaultColumns(preset: string = 'default'): void {\n        if (this.data) {\n            const /** @type {?} */ columns = this.getLayoutPreset(preset);\n            this.data.setColumns(columns);\n        }\n    }\n/**\n * @return {?}\n */\nprivate loadLayoutPresets(): void {\n        const /** @type {?} */ externalSettings = this.appConfig.get('adf-process-list.presets', null);\n\n        if (externalSettings) {\n            this.layoutPresets = Object.assign({}, processPresetsDefaultModel, externalSettings);\n        } else {\n            this.layoutPresets = processPresetsDefaultModel;\n        }\n\n    }\n/**\n * @param {?=} name\n * @return {?}\n */\nprivate getLayoutPreset(name: string = 'default'): DataColumn[] {\n        return (this.layoutPresets[name] || this.layoutPresets['default']).map(col => new ObjectDataColumn(col));\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'adf-process-instance-list',\n    styles: [`\n      adf-datatable >>> .column-header {\n          color: #232323;\n          font-size: 15px;\n      }\n\n      adf-datatable >>> .data-cell {\n          cursor: pointer !important;\n      }\n\n      adf-datatable >>> .cell-value{\n          width: 250px;\n          white-space: nowrap;\n          overflow: hidden;\n          text-overflow: ellipsis\n      }\n\n      .adf-process-list-loading-margin {\n          margin-left: calc((100% - 100px) / 2);\n          margin-right: calc((100% - 100px) / 2);\n      }\n\n      .no-content-message {\n          font-size: 16px;\n          font-weight: bold;\n          text-align: center;\n          opacity: 0.54;\n          color: #000;\n      }\n    `],\n    template: `\n      <div *ngIf=\"!requestNode\">{{ 'ADF_PROCESS_LIST.FILTERS.MESSAGES.NONE' | translate }}</div>\n      <div *ngIf=\"requestNode\">\n          <adf-datatable\n              [data]=\"data\"\n              [loading]=\"isLoading\"\n              (rowClick)=\"onRowClick($event)\"\n              (row-keyup)=\"onRowKeyUp($event)\">\n              <loading-content-template>\n                  <ng-template>\n                      <!--Add your custom loading template here-->\n                      <mat-progress-spinner\n                          class=\"adf-process-list-loading-margin\"\n                          [color]=\"'primary'\"\n                          [mode]=\"'indeterminate'\">\n                      </mat-progress-spinner>\n                  </ng-template>\n              </loading-content-template>\n              <no-content-template>\n                  <!--Add your custom empty template here-->\n                  <ng-template>\n                      <div class=\"no-content-message\">\n                          {{ 'ADF_PROCESS_LIST.LIST.NONE' | translate }}\n                      </div>\n                  </ng-template>\n              </no-content-template>\n          </adf-datatable>\n      </div>\n    `\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ProcessService, },\n{type: AppConfigService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'columnList': [{ type: ContentChild, args: [DataColumnListComponent, ] },],\n'appId': [{ type: Input },],\n'processDefinitionKey': [{ type: Input },],\n'state': [{ type: Input },],\n'sort': [{ type: Input },],\n'name': [{ type: Input },],\n'presetColumn': [{ type: Input },],\n'data': [{ type: Input },],\n'rowClick': [{ type: Output },],\n'success': [{ type: Output },],\n'error': [{ type: Output },],\n};\n}\n\nfunction ProcessInstanceListComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nProcessInstanceListComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nProcessInstanceListComponent.ctorParameters;\n/** @type {?} */\nProcessInstanceListComponent.propDecorators;\n/** @type {?} */\nProcessInstanceListComponent.prototype.columnList;\n/** @type {?} */\nProcessInstanceListComponent.prototype.appId;\n/** @type {?} */\nProcessInstanceListComponent.prototype.processDefinitionKey;\n/** @type {?} */\nProcessInstanceListComponent.prototype.state;\n/** @type {?} */\nProcessInstanceListComponent.prototype.sort;\n/** @type {?} */\nProcessInstanceListComponent.prototype.name;\n/** @type {?} */\nProcessInstanceListComponent.prototype.presetColumn;\n/** @type {?} */\nProcessInstanceListComponent.prototype.requestNode;\n/** @type {?} */\nProcessInstanceListComponent.prototype.data;\n/** @type {?} */\nProcessInstanceListComponent.prototype.rowClick;\n/** @type {?} */\nProcessInstanceListComponent.prototype.success;\n/** @type {?} */\nProcessInstanceListComponent.prototype.error;\n/** @type {?} */\nProcessInstanceListComponent.prototype.currentInstanceId;\n/** @type {?} */\nProcessInstanceListComponent.prototype.isLoading;\n/** @type {?} */\nProcessInstanceListComponent.prototype.layoutPresets;\n/** @type {?} */\nProcessInstanceListComponent.prototype.processService;\n/** @type {?} */\nProcessInstanceListComponent.prototype.appConfig;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { LogService } from '@alfresco/adf-core';\nimport { DatePipe } from '@angular/common';\nimport { Component, EventEmitter, Input, OnChanges, Output, SimpleChanges, ViewChild } from '@angular/core';\nimport { TaskDetailsEvent } from '../../task-list';\n\nimport { ProcessInstance } from '../models/process-instance.model';\nimport { ProcessService } from './../services/process.service';\nimport { ProcessInstanceHeaderComponent } from './process-instance-header.component';\nimport { ProcessInstanceTasksComponent } from './process-instance-tasks.component';\nexport class ProcessInstanceDetailsComponent implements OnChanges {\n\n    \n    processInstanceId: string;\n\n    \n    processInstanceHeader: ProcessInstanceHeaderComponent;\n\n    \n    tasksList: ProcessInstanceTasksComponent;\n\n    \n    showTitle: boolean = true;\n\n    \n    showRefreshButton: boolean = true;\n\n    \n    processCancelled: EventEmitter<any> = new EventEmitter<any>();\n\n    \n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    \n    taskClick: EventEmitter<TaskDetailsEvent> = new EventEmitter<TaskDetailsEvent>();\n\n    processInstanceDetails: ProcessInstance;\n\n    \n    showProcessDiagram: EventEmitter<any> = new EventEmitter<any>();\n/**\n * Constructor\n * @param {?} activitiProcess   Process service\n * @param {?} logService\n */\nconstructor(private activitiProcess: ProcessService,\nprivate logService: LogService) {\n    }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n        let /** @type {?} */ processInstanceId = changes['processInstanceId'];\n        if (processInstanceId && !processInstanceId.currentValue) {\n            this.reset();\n            return;\n        }\n        if (processInstanceId && processInstanceId.currentValue) {\n            this.load(processInstanceId.currentValue);\n            return;\n        }\n    }\n/**\n * Reset the task detail to undefined\n * @return {?}\n */\nreset() {\n        this.processInstanceDetails = null;\n    }\n/**\n * @param {?} processId\n * @return {?}\n */\nload(processId: string) {\n        if (processId) {\n            this.activitiProcess.getProcess(processId).subscribe(\n                (res: ProcessInstance) => {\n                    this.processInstanceDetails = res;\n                }\n            );\n        }\n    }\n/**\n * @return {?}\n */\nisRunning(): boolean {\n        return this.processInstanceDetails && !this.processInstanceDetails.ended;\n    }\n/**\n * @return {?}\n */\ncancelProcess() {\n        this.activitiProcess.cancelProcess(this.processInstanceId).subscribe(\n            (data) => {\n                this.processCancelled.emit(data);\n            }, (err) => {\n                this.error.emit(err);\n            });\n    }\n/**\n * @param {?} event\n * @return {?}\n */\nonTaskClicked(event: TaskDetailsEvent) {\n        this.taskClick.emit(event);\n    }\n/**\n * @param {?} dateFormat\n * @return {?}\n */\ngetProcessNameOrDescription(dateFormat): string {\n        let /** @type {?} */ name = '';\n        if (this.processInstanceDetails) {\n            name = this.processInstanceDetails.name ||\n                this.processInstanceDetails.processDefinitionName + ' - ' + this.getFormatDate(this.processInstanceDetails.started, dateFormat);\n        }\n        return name;\n    }\n/**\n * @param {?} value\n * @param {?} format\n * @return {?}\n */\ngetFormatDate(value, format: string) {\n        let /** @type {?} */ datePipe = new DatePipe('en-US');\n        try {\n            return datePipe.transform(value, format);\n        } catch ( /** @type {?} */err) {\n            this.logService.error(`ProcessListInstanceHeader: error parsing date ${value} to format ${format}`);\n        }\n    }\n/**\n * @param {?} processInstanceId\n * @return {?}\n */\nonShowProcessDiagram(processInstanceId: any) {\n        this.showProcessDiagram.emit({value: this.processInstanceId});\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'adf-process-instance-details',\n    template: `\n      <div *ngIf=\"!processInstanceDetails\">{{ 'ADF_PROCESS_LIST.DETAILS.MESSAGES.NONE'|translate }}</div>\n      <mat-card *ngIf=\"processInstanceDetails\">\n          <mat-card-header>\n              <mat-card-title>{{ getProcessNameOrDescription('medium') }}</mat-card-title>\n          </mat-card-header>\n          <mat-card-content>\n              <adf-process-instance-header\n                  [processInstance]=\"processInstanceDetails\"\n                  (showProcessDiagram)=\"onShowProcessDiagram($event)\">\n              </adf-process-instance-header>\n\n              <button class=\"adf-in-medias-res-button\" mat-button id=\"show-diagram-button\" type=\"button\" mat-button mat-raised-button [disabled]=\"!isRunning()\" (click)=\"onShowProcessDiagram(processInstanceId)\">{{ 'ADF_PROCESS_LIST.DETAILS.BUTTON.SHOW_DIAGRAM' | translate }}</button>\n\n              <mat-card>\n                  <mat-card-content>\n                      <adf-process-instance-tasks\n                          [processInstanceDetails]=\"processInstanceDetails\"\n                          (taskClick)=\"onTaskClicked($event)\">\n                      </adf-process-instance-tasks>\n                  </mat-card-content>\n              </mat-card>\n\n              <div data-automation-id=\"header-status\" *ngIf=\"isRunning()\" class=\"adf-in-medias-res-button\">\n                  <button mat-button type=\"button\" (click)=\"cancelProcess()\">{{ 'ADF_PROCESS_LIST.DETAILS.BUTTON.CANCEL' | translate }}</button>\n              </div>\n\n              <mat-card>\n                  <mat-card-content>\n                      <adf-process-instance-comments #activiticomments\n                          [readOnly]=\"false\"\n                          [processInstanceId]=\"processInstanceDetails.id\">\n                      </adf-process-instance-comments>\n                  </mat-card-content>\n              </mat-card>\n\n          </mat-card-content>\n      </mat-card>\n    `,\n    styles: [`\n      :host {\n          width: 100%;\n      }\n\n      .activiti-process-container {\n          width: 100%;\n          min-height: 100px;\n          overflow: visible;\n          padding: 10px;\n      }\n\n      .adf-comments-dialog {\n          position: fixed;\n          top: 50%;\n          -webkit-transform: translate(0, -50%);\n                  transform: translate(0, -50%);\n          width: 40%;\n      }\n\n      .adf-in-medias-res-button {\n          margin: 16px 0;\n      }\n    `]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ProcessService, },\n{type: LogService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'processInstanceId': [{ type: Input },],\n'processInstanceHeader': [{ type: ViewChild, args: [ProcessInstanceHeaderComponent, ] },],\n'tasksList': [{ type: ViewChild, args: [ProcessInstanceTasksComponent, ] },],\n'showTitle': [{ type: Input },],\n'showRefreshButton': [{ type: Input },],\n'processCancelled': [{ type: Output },],\n'error': [{ type: Output },],\n'taskClick': [{ type: Output },],\n'showProcessDiagram': [{ type: Output },],\n};\n}\n\nfunction ProcessInstanceDetailsComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nProcessInstanceDetailsComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nProcessInstanceDetailsComponent.ctorParameters;\n/** @type {?} */\nProcessInstanceDetailsComponent.propDecorators;\n/** @type {?} */\nProcessInstanceDetailsComponent.prototype.processInstanceId;\n/** @type {?} */\nProcessInstanceDetailsComponent.prototype.processInstanceHeader;\n/** @type {?} */\nProcessInstanceDetailsComponent.prototype.tasksList;\n/** @type {?} */\nProcessInstanceDetailsComponent.prototype.showTitle;\n/** @type {?} */\nProcessInstanceDetailsComponent.prototype.showRefreshButton;\n/** @type {?} */\nProcessInstanceDetailsComponent.prototype.processCancelled;\n/** @type {?} */\nProcessInstanceDetailsComponent.prototype.error;\n/** @type {?} */\nProcessInstanceDetailsComponent.prototype.taskClick;\n/** @type {?} */\nProcessInstanceDetailsComponent.prototype.processInstanceDetails;\n/** @type {?} */\nProcessInstanceDetailsComponent.prototype.showProcessDiagram;\n/** @type {?} */\nProcessInstanceDetailsComponent.prototype.activitiProcess;\n/** @type {?} */\nProcessInstanceDetailsComponent.prototype.logService;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { TaskDetailsModel } from './task-details.model';\nexport class TaskDetailsEvent {\nprivate _value: TaskDetailsModel;\nprivate _defaultPrevented: boolean = false;\n/**\n * @return {?}\n */\nget value(): TaskDetailsModel {\n        return this._value;\n    }\n/**\n * @return {?}\n */\nget defaultPrevented() {\n        return this._defaultPrevented;\n    }\n/**\n * @param {?} value\n */\nconstructor(value: TaskDetailsModel) {\n        this._value = value;\n    }\n/**\n * @return {?}\n */\npreventDefault() {\n        this._defaultPrevented = true;\n    }\n}\n\nfunction TaskDetailsEvent_tsickle_Closure_declarations() {\n/** @type {?} */\nTaskDetailsEvent.prototype._value;\n/** @type {?} */\nTaskDetailsEvent.prototype._defaultPrevented;\n}\n\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { LogService } from '@alfresco/adf-core';\nimport { DatePipe } from '@angular/common';\nimport { Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges, ViewChild } from '@angular/core';\nimport { MatDialog } from '@angular/material';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\nimport { TaskDetailsEvent, TaskDetailsModel } from '../../task-list';\nimport { ProcessInstance } from '../models/process-instance.model';\nimport { ProcessService } from './../services/process.service';\nexport class ProcessInstanceTasksComponent implements OnInit, OnChanges {\n\n    \n    processInstanceDetails: ProcessInstance;\n\n    \n    showRefreshButton: boolean = true;\n\n    \n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    activeTasks: TaskDetailsModel[] = [];\n    completedTasks: TaskDetailsModel[] = [];\nprivate taskObserver: Observer<TaskDetailsModel>;\nprivate completedTaskObserver: Observer<TaskDetailsModel>;\n\n    task$: Observable<TaskDetailsModel>;\n    completedTask$: Observable<TaskDetailsModel>;\n\n    message: string;\n    processId: string;\n\n    // @ViewChild('dialog')\n    // dialog: any;\n\n    \n    startDialog: any;\n\n    \n    taskdetails: any;\n\n    \n    taskClick: EventEmitter<TaskDetailsEvent> = new EventEmitter<TaskDetailsEvent>();\n/**\n * @param {?} activitiProcess\n * @param {?} logService\n * @param {?} dialog\n */\nconstructor(private activitiProcess: ProcessService,\nprivate logService: LogService,\nprivate dialog: MatDialog) {\n        this.task$ = new Observable<TaskDetailsModel>(observer => this.taskObserver = observer).share();\n        this.completedTask$ = new Observable<TaskDetailsModel>(observer => this.completedTaskObserver = observer).share();\n    }\n/**\n * @return {?}\n */\nngOnInit() {\n        this.task$.subscribe((task: TaskDetailsModel) => {\n            this.activeTasks.push(task);\n        });\n        this.completedTask$.subscribe((task: TaskDetailsModel) => {\n            this.completedTasks.push(task);\n        });\n    }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n        let /** @type {?} */ processInstanceDetails = changes['processInstanceDetails'];\n        if (processInstanceDetails && processInstanceDetails.currentValue) {\n            this.load(processInstanceDetails.currentValue.id);\n        }\n    }\n/**\n * @param {?} processInstanceId\n * @return {?}\n */\nload(processInstanceId: string) {\n        this.loadActive(processInstanceId);\n        this.loadCompleted(processInstanceId);\n    }\n/**\n * @param {?} processInstanceId\n * @return {?}\n */\nloadActive(processInstanceId: string) {\n        this.activeTasks = [];\n        if (processInstanceId) {\n            this.activitiProcess.getProcessTasks(processInstanceId, null).subscribe(\n                (res: TaskDetailsModel[]) => {\n                    res.forEach((task) => {\n                        this.taskObserver.next(task);\n                    });\n                },\n                (err) => {\n                    this.error.emit(err);\n                }\n            );\n        } else {\n            this.activeTasks = [];\n        }\n    }\n/**\n * @param {?} processInstanceId\n * @return {?}\n */\nloadCompleted(processInstanceId: string) {\n        this.completedTasks = [];\n        if (processInstanceId) {\n            this.activitiProcess.getProcessTasks(processInstanceId, 'completed').subscribe(\n                (res: TaskDetailsModel[]) => {\n                    res.forEach((task) => {\n                        this.completedTaskObserver.next(task);\n                    });\n                },\n                (err) => {\n                    this.error.emit(err);\n                }\n            );\n        } else {\n            this.completedTasks = [];\n        }\n    }\n/**\n * @return {?}\n */\nhasStartFormDefined(): boolean {\n        return this.processInstanceDetails && this.processInstanceDetails.startFormDefined === true;\n    }\n/**\n * @param {?} user\n * @return {?}\n */\ngetUserFullName(user: any) {\n        if (user) {\n            return (user.firstName && user.firstName !== 'null'\n                    ? user.firstName + ' ' : '') +\n                user.lastName;\n        }\n        return 'Nobody';\n    }\n/**\n * @param {?} value\n * @param {?} format\n * @return {?}\n */\ngetFormatDate(value, format: string) {\n        let /** @type {?} */ datePipe = new DatePipe('en-US');\n        try {\n            return datePipe.transform(value, format);\n        } catch ( /** @type {?} */err) {\n            this.logService.error(`ProcessListInstanceTask: error parsing date ${value} to format ${format}`);\n        }\n    }\n/**\n * @param {?} $event\n * @param {?} task\n * @return {?}\n */\nclickTask($event: any, task: TaskDetailsModel) {\n        let /** @type {?} */ args = new TaskDetailsEvent(task);\n        this.taskClick.emit(args);\n    }\n/**\n * @return {?}\n */\nclickStartTask() {\n        this.processId = this.processInstanceDetails.id;\n        this.showStartDialog();\n    }\n/**\n * @return {?}\n */\nshowStartDialog() {\n        this.dialog.open(this.startDialog, { height: '500px', width: '700px' });\n    }\n/**\n * @return {?}\n */\ncloseSartDialog() {\n        this.dialog.closeAll();\n    }\n/**\n * @return {?}\n */\nonRefreshClicked() {\n        this.load(this.processInstanceDetails.id);\n    }\n/**\n * @return {?}\n */\nonFormContentClick() {\n        this.closeSartDialog();\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'adf-process-instance-tasks',\n    template: `\n      <div  *ngIf=\"showRefreshButton\" class=\"process-tasks-refresh\" >\n          <button mat-icon-button (click)=\"onRefreshClicked()\">\n              <mat-icon class=\"md-24\" aria-label=\"Refresh\">refresh</mat-icon>\n          </button>\n      </div>\n\n      <!-- ACTIVE FORM -->\n\n      <mat-chip-list>\n          <span class=\"adf-chip-label\">{{ 'ADF_PROCESS_LIST.DETAILS.LABELS.TASKS_ACTIVE'|translate }}</span>\n          <mat-chip class=\"adf-process-badge\" color=\"accent\" selected=\"true\">{{activeTasks?.length}}</mat-chip>\n      </mat-chip-list>\n\n      <div class=\"menu-container\" *ngIf=\"activeTasks?.length > 0\" data-automation-id=\"active-tasks\">\n          <mat-list>\n              <mat-list-item class=\"process-tasks__task-item\" *ngFor=\"let task of activeTasks\" (click)=\"clickTask($event, task)\">\n                      <mat-icon mat-list-icon>assignment</mat-icon>\n                      <h3 matLine>{{task.name || 'Nameless task'}}</h3>\n                      <span matLine>\n                          {{ 'ADF_PROCESS_LIST.DETAILS.LABELS.TASK_SUBTITLE' | translate:{user: getUserFullName(task.assignee), created: getFormatDate(task.created, 'mediumDate') } }}\n                      </span>\n              </mat-list-item>\n          </mat-list>\n      </div>\n\n      <!-- START FORM -->\n\n      <div *ngIf=\"activeTasks?.length === 0\" data-automation-id=\"active-tasks-none\" class=\"no-results\">\n          {{ 'ADF_PROCESS_LIST.DETAILS.TASKS.NO_ACTIVE' | translate }}\n      </div>\n\n      <div *ngIf=\"hasStartFormDefined()\">\n          <span class=\"activiti-label\">{{ 'ADF_PROCESS_LIST.DETAILS.LABELS.START_FORM'|translate }}</span>\n\n          <!--IF START TASK COMPLETED -->\n          <div class=\"menu-container\">\n              <mat-list>\n                  <mat-list-item class=\"process-tasks__task-item\" (click)=\"clickStartTask($event)\">\n                      <mat-icon mat-list-icon>assignment</mat-icon>\n                      <h3 matLine>{{ 'ADF_PROCESS_LIST.DETAILS.LABELS.START_FORM'|translate }}</h3>\n                      <span matLine>\n                          {{ 'ADF_PROCESS_LIST.DETAILS.LABELS.TASK_SUBTITLE' | translate:{user:getUserFullName(processInstanceDetails.startedBy), created: getFormatDate(processInstanceDetails.started, 'mediumDate') } }}\n                      </span>\n                  </mat-list-item>\n              </mat-list>\n          </div>\n\n      </div>\n\n      <!-- COMPLETED FORM -->\n      <mat-chip-list>\n              <span class=\"adf-chip-label\">{{ 'ADF_PROCESS_LIST.DETAILS.LABELS.TASKS_COMPLETED'|translate }}</span>\n              <mat-chip class=\"adf-process-badge\" color=\"accent\" selected=\"true\">{{completedTasks?.length}}</mat-chip>\n      </mat-chip-list>\n\n      <div class=\"menu-container\" *ngIf=\"completedTasks?.length > 0\" data-automation-id=\"completed-tasks\">\n          <mat-list>\n              <mat-list-item class=\"process-tasks__task-item\" *ngFor=\"let task of completedTasks\" (click)=\"clickTask($event, task)\">\n                  <mat-icon mat-list-icon>assignment</mat-icon>\n                  <h3 matLine>{{task.name || 'Nameless task'}}</h3>\n                  <span matLine>\n                      {{ 'ADF_PROCESS_LIST.DETAILS.LABELS.TASK_SUBTITLE' | translate:{user:getUserFullName(task.assignee), created: getFormatDate(task.created, 'mediumDate') } }}\n                  </span>\n              </mat-list-item>\n          </mat-list>\n      </div>\n\n      <div *ngIf=\"completedTasks?.length === 0\" data-automation-id=\"completed-tasks-none\" class=\"no-results\">\n          {{ 'ADF_PROCESS_LIST.DETAILS.TASKS.NO_COMPLETED' | translate }}\n      </div>\n\n      <ng-template *ngIf=\"hasStartFormDefined()\" #startDialog>\n          <div id=\"adf-start-process-dialog\" class=\"adf-start-process-dialog\">\n              <h4 matDialogTitle>{{ 'ADF_PROCESS_LIST.DETAILS.LABELS.START_FORM'|translate }}</h4>\n              <div mat-dialog-content class=\"adf-start-process-dialog-content\">\n                  <adf-start-form [processId]=\"processId\"\n                                       [showRefreshButton]=\"false\" [readOnlyForm]=\"true\"\n                                       (formContentClicked)='onFormContentClick($event)'>\n                  </adf-start-form>\n              </div>\n              <div mat-dialog-actions class=\"adf-start-process-dialog-actions\">\n                  <button mat-button type=\"button\" (click)=\"closeSartDialog()\">{{ 'ADF_PROCESS_LIST.DETAILS.TASKS.TASK_CLOSE' | translate }}</button>\n              </div>\n          </div>\n      </ng-template>\n    `,\n    styles: [`\n      :host {\n          width: 100%;\n      }\n\n      .activiti-label {\n          font-weight: bolder;\n          vertical-align: top;\n      }\n\n      .adf-process-badge {\n          pointer-events: none;\n          outline: none;\n      }\n\n      .adf-chip-label {\n          position: relative;\n          top: 5px;\n          margin-right: 8px;\n          font-weight: bold;\n      }\n\n      .menu-container {\n          margin-bottom: 32px;\n      }\n\n      .activiti-label + .icon {\n          position: relative;\n          top: -2px;\n      }\n\n      .task-details-dialog {\n          position: fixed;\n          top: 50%;\n          -webkit-transform: translate(0, -50%);\n                  transform: translate(0, -50%);\n          width: 40%;\n      }\n\n      .process-tasks-refresh {\n          float: right;\n      }\n\n      .adf-start-process-dialog {\n          width: 100%;\n          height: 100%;\n          display: -webkit-box;\n          display: -ms-flexbox;\n          display: flex;\n          -webkit-box-orient: vertical;\n          -webkit-box-direction: normal;\n              -ms-flex-direction: column;\n                  flex-direction: column;\n      }\n\n      .adf-start-process-dialog-content {\n          -webkit-box-flex: 1;\n              -ms-flex-positive: 1;\n                  flex-grow: 1;\n      }\n\n      .adf-start-process-dialog-actions {\n          display: -webkit-box;\n          display: -ms-flexbox;\n          display: flex;\n          -webkit-box-pack: end;\n              -ms-flex-pack: end;\n                  justify-content: flex-end;\n      }\n\n      .no-results {\n          margin-left: 9px;\n          font-size: 14px;\n          font-weight: 400;\n          letter-spacing: 0;\n          line-height: 18px;\n          color: rgba(0, 0, 0, .54);\n          display: block;\n          padding: 12px;\n      }\n\n      .process-tasks__task-item {\n          cursor: pointer;\n      }\n    `]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ProcessService, },\n{type: LogService, },\n{type: MatDialog, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'processInstanceDetails': [{ type: Input },],\n'showRefreshButton': [{ type: Input },],\n'error': [{ type: Output },],\n'startDialog': [{ type: ViewChild, args: ['startDialog', ] },],\n'taskdetails': [{ type: ViewChild, args: ['taskdetails', ] },],\n'taskClick': [{ type: Output },],\n};\n}\n\nfunction ProcessInstanceTasksComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nProcessInstanceTasksComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nProcessInstanceTasksComponent.ctorParameters;\n/** @type {?} */\nProcessInstanceTasksComponent.propDecorators;\n/** @type {?} */\nProcessInstanceTasksComponent.prototype.processInstanceDetails;\n/** @type {?} */\nProcessInstanceTasksComponent.prototype.showRefreshButton;\n/** @type {?} */\nProcessInstanceTasksComponent.prototype.error;\n/** @type {?} */\nProcessInstanceTasksComponent.prototype.activeTasks;\n/** @type {?} */\nProcessInstanceTasksComponent.prototype.completedTasks;\n/** @type {?} */\nProcessInstanceTasksComponent.prototype.taskObserver;\n/** @type {?} */\nProcessInstanceTasksComponent.prototype.completedTaskObserver;\n/** @type {?} */\nProcessInstanceTasksComponent.prototype.task$;\n/** @type {?} */\nProcessInstanceTasksComponent.prototype.completedTask$;\n/** @type {?} */\nProcessInstanceTasksComponent.prototype.message;\n/** @type {?} */\nProcessInstanceTasksComponent.prototype.processId;\n/** @type {?} */\nProcessInstanceTasksComponent.prototype.startDialog;\n/** @type {?} */\nProcessInstanceTasksComponent.prototype.taskdetails;\n/** @type {?} */\nProcessInstanceTasksComponent.prototype.taskClick;\n/** @type {?} */\nProcessInstanceTasksComponent.prototype.activitiProcess;\n/** @type {?} */\nProcessInstanceTasksComponent.prototype.logService;\n/** @type {?} */\nProcessInstanceTasksComponent.prototype.dialog;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { CardViewDateItemModel, CardViewItem, CardViewTextItemModel } from '@alfresco/adf-core';\nimport { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { ProcessInstance } from '../models/process-instance.model';\nexport class ProcessInstanceHeaderComponent implements OnChanges {\n\n    \n    processInstance: ProcessInstance;\n\n    properties: CardViewItem [];\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n        this.refreshData();\n    }\n/**\n * @return {?}\n */\nrefreshData() {\n        if (this.processInstance) {\n            this.properties = [\n                new CardViewTextItemModel(\n                    {\n                        label: 'ADF_PROCESS_LIST.PROPERTIES.STATUS',\n                        value: this.getProcessStatus(),\n                        key: 'status'\n                    }),\n                new CardViewDateItemModel(\n                    {\n                        label: 'ADF_PROCESS_LIST.PROPERTIES.END_DATE',\n                        value: this.processInstance.ended,\n                        format: 'MMM DD YYYY',\n                        key: 'ended',\n                        default: 'ADF_PROCESS_LIST.PROPERTIES.END_DATE_DEFAULT'\n                    }),\n                new CardViewTextItemModel(\n                    {\n                        label: 'ADF_PROCESS_LIST.PROPERTIES.CATEGORY',\n                        value: this.processInstance.processDefinitionCategory,\n                        key: 'category',\n                        default: 'ADF_PROCESS_LIST.PROPERTIES.CATEGORY_DEFAULT'\n                    }),\n                new CardViewTextItemModel(\n                    {\n                        label: 'ADF_PROCESS_LIST.PROPERTIES.BUSINESS_KEY',\n                        value: this.processInstance.businessKey,\n                        key: 'businessKey',\n                        default: 'ADF_PROCESS_LIST.PROPERTIES.BUSINESS_KEY_DEFAULT'\n                    }),\n                new CardViewTextItemModel(\n                    {\n                        label: 'ADF_PROCESS_LIST.PROPERTIES.CREATED_BY',\n                        value: this.getStartedByFullName(),\n                        key: 'assignee',\n                        default: 'ADF_PROCESS_LIST.PROPERTIES.CREATED_BY_DEFAULT'\n                    }),\n                new CardViewDateItemModel(\n                    {\n                        label: 'ADF_PROCESS_LIST.PROPERTIES.CREATED',\n                        value: this.processInstance.started,\n                        format: 'MMM DD YYYY',\n                        key: 'created'\n                    }),\n                new CardViewTextItemModel(\n                    {label: 'ADF_PROCESS_LIST.PROPERTIES.ID',\n                    value: this.processInstance.id,\n                    key: 'id'\n                }),\n                new CardViewTextItemModel(\n                    {label: 'ADF_PROCESS_LIST.PROPERTIES.DESCRIPTION',\n                    value: this.processInstance.processDefinitionDescription,\n                    key: 'description',\n                    default: 'ADF_PROCESS_LIST.PROPERTIES.DESCRIPTION_DEFAULT'\n                })\n            ];\n        }\n    }\n/**\n * @return {?}\n */\ngetProcessStatus(): string {\n        if (this.processInstance) {\n            return this.isRunning() ? 'Running' : 'Completed';\n        }\n    }\n/**\n * @return {?}\n */\ngetStartedByFullName(): string {\n        let /** @type {?} */ fullName = '';\n        if (this.processInstance && this.processInstance.startedBy) {\n            fullName += this.processInstance.startedBy.firstName || '';\n            fullName += fullName ? ' ' : '';\n            fullName += this.processInstance.startedBy.lastName || '';\n        }\n        return fullName;\n    }\n/**\n * @return {?}\n */\nisRunning(): boolean {\n        return this.processInstance && !this.processInstance.ended;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'adf-process-instance-header',\n    template: `\n      <mat-card *ngIf=\"processInstance\" class=\"adf-card-container\">\n          <mat-card-content>\n              <adf-card-view [properties]=\"properties\"></adf-card-view>\n          </mat-card-content>\n      </mat-card>\n    `,\n    styles: [`\n      :host {\n          width: 100%;\n      }\n\n      .adf-card-container {\n          font-family: inherit;\n      }\n    `]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'processInstance': [{ type: Input },],\n};\n}\n\nfunction ProcessInstanceHeaderComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nProcessInstanceHeaderComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nProcessInstanceHeaderComponent.ctorParameters;\n/** @type {?} */\nProcessInstanceHeaderComponent.propDecorators;\n/** @type {?} */\nProcessInstanceHeaderComponent.prototype.processInstance;\n/** @type {?} */\nProcessInstanceHeaderComponent.prototype.properties;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { AppsProcessService } from '@alfresco/adf-core';\nimport { Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges } from '@angular/core';\nimport { ProcessInstanceFilterRepresentation } from 'alfresco-js-api';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\nimport { FilterProcessRepresentationModel } from '../models/filter-process.model';\nimport { ProcessFilterService } from './../services/process-filter.service';\nexport class ProcessFiltersComponent implements OnInit, OnChanges {\n\n    \n    filterParam: FilterProcessRepresentationModel;\n\n    \n    filterClick: EventEmitter<ProcessInstanceFilterRepresentation> = new EventEmitter<ProcessInstanceFilterRepresentation>();\n\n    \n    success: EventEmitter<ProcessInstanceFilterRepresentation[]> = new EventEmitter<ProcessInstanceFilterRepresentation[]>();\n\n    \n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    \n    appId: number;\n\n    \n    appName: string;\n\n    \n    showIcon: boolean = true;\nprivate filterObserver: Observer<ProcessInstanceFilterRepresentation>;\n    filter$: Observable<ProcessInstanceFilterRepresentation>;\n\n    currentFilter: ProcessInstanceFilterRepresentation;\n\n    filters: ProcessInstanceFilterRepresentation [] = [];\n/**\n * @param {?} processFilterService\n * @param {?} appsProcessService\n */\nconstructor(private processFilterService: ProcessFilterService,\nprivate appsProcessService: AppsProcessService) {\n        this.filter$ = new Observable<ProcessInstanceFilterRepresentation>(observer => this.filterObserver = observer).share();\n    }\n/**\n * @return {?}\n */\nngOnInit() {\n        this.filter$.subscribe((filter: ProcessInstanceFilterRepresentation) => {\n            this.filters.push(filter);\n        });\n    }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n        let /** @type {?} */ appId = changes['appId'];\n        if (appId && (appId.currentValue || appId.currentValue === null)) {\n            this.getFiltersByAppId(appId.currentValue);\n            return;\n        }\n        let /** @type {?} */ appName = changes['appName'];\n        if (appName && appName.currentValue) {\n            this.getFiltersByAppName(appName.currentValue);\n            return;\n        }\n    }\n/**\n * Return the filter list filtered by appId\n * @param {?=} appId - optional\n * @return {?}\n */\ngetFiltersByAppId(appId?: number) {\n        this.processFilterService.getProcessFilters(appId).subscribe(\n            (res: ProcessInstanceFilterRepresentation[]) => {\n                if (res.length === 0 && this.isFilterListEmpty()) {\n                    this.processFilterService.createDefaultFilters(appId).subscribe(\n                        (resDefault: ProcessInstanceFilterRepresentation[]) => {\n                            this.resetFilter();\n                            resDefault.forEach((filter) => {\n                                this.filterObserver.next(filter);\n                            });\n\n                            this.selectProcessFilter(this.filterParam);\n                            this.success.emit(resDefault);\n                        },\n                        (errDefault: any) => {\n                            this.error.emit(errDefault);\n                        }\n                    );\n                } else {\n                    this.resetFilter();\n                    res.forEach((filter) => {\n                        this.filterObserver.next(filter);\n                    });\n\n                    this.selectProcessFilter(this.filterParam);\n                    this.success.emit(res);\n                }\n            },\n            (err: any) => {\n                this.error.emit(err);\n            }\n        );\n    }\n/**\n * Return the filter list filtered by appName\n * @param {?} appName\n * @return {?}\n */\ngetFiltersByAppName(appName: string) {\n        this.appsProcessService.getDeployedApplicationsByName(appName).subscribe(\n            application => {\n                this.getFiltersByAppId(application.id);\n                this.selectProcessFilter(this.filterParam);\n            },\n            (err) => {\n                this.error.emit(err);\n            });\n    }\n/**\n * Pass the selected filter as next\n * @param {?} filter\n * @return {?}\n */\npublic selectFilter(filter: ProcessInstanceFilterRepresentation) {\n        this.currentFilter = filter;\n        this.filterClick.emit(filter);\n    }\n/**\n * Select the first filter of a list if present\n * @param {?} filterParam\n * @return {?}\n */\npublic selectProcessFilter(filterParam: FilterProcessRepresentationModel) {\n        if (filterParam) {\n            this.filters.filter((processFilter: ProcessInstanceFilterRepresentation, index) => {\n                if (filterParam.name && filterParam.name.toLowerCase() === processFilter.name.toLowerCase() || filterParam.index === index) {\n                    this.currentFilter = processFilter;\n                }\n            });\n        }\n        if (this.isCurrentFilterEmpty()) {\n            this.selectDefaultTaskFilter();\n        }\n    }\n/**\n * Select the Running filter\n * @return {?}\n */\npublic selectRunningFilter() {\n        this.selectProcessFilter(this.processFilterService.getRunningFilterInstance(null));\n    }\n/**\n * Select as default task filter the first in the list\n * @return {?}\n */\npublic selectDefaultTaskFilter() {\n        if (!this.isFilterListEmpty()) {\n            this.currentFilter = this.filters[0];\n        }\n    }\n/**\n * Return the current task\n * @return {?}\n */\ngetCurrentFilter(): ProcessInstanceFilterRepresentation {\n        return this.currentFilter;\n    }\n/**\n * Check if the filter list is empty\n * @return {?}\n */\nisFilterListEmpty(): boolean {\n        return this.filters === undefined || (this.filters && this.filters.length === 0);\n    }\n/**\n * Reset the filters properties\n * @return {?}\n */\nprivate resetFilter() {\n        this.filters = [];\n        this.currentFilter = undefined;\n    }\n/**\n * @return {?}\n */\nprivate isCurrentFilterEmpty(): boolean {\n        return this.currentFilter === undefined || null ? true : false;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'adf-process-instance-filters',\n    template: `\n      <div class=\"menu-container\">\n          <mat-list>\n              <mat-list-item (click)=\"selectFilter(filter)\" *ngFor=\"let filter of filters\"\n                              class=\"adf-filters__entry\" [class.active]=\"currentFilter === filter\">\n                  <mat-icon *ngIf=\"hasIcon\" matListIcon class=\"adf-filters__entry-icon\">assignment</mat-icon>\n                  <span matLine [attr.data-automation-id]=\"filter.name + '_filter'\">{{filter.name}}</span>\n              </mat-list-item>\n          </mat-list>\n      </div>\n    `,\n    styles: [`\n\n    `]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ProcessFilterService, },\n{type: AppsProcessService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'filterParam': [{ type: Input },],\n'filterClick': [{ type: Output },],\n'success': [{ type: Output },],\n'error': [{ type: Output },],\n'appId': [{ type: Input },],\n'appName': [{ type: Input },],\n'showIcon': [{ type: Input },],\n};\n}\n\nfunction ProcessFiltersComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nProcessFiltersComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nProcessFiltersComponent.ctorParameters;\n/** @type {?} */\nProcessFiltersComponent.propDecorators;\n/** @type {?} */\nProcessFiltersComponent.prototype.filterParam;\n/** @type {?} */\nProcessFiltersComponent.prototype.filterClick;\n/** @type {?} */\nProcessFiltersComponent.prototype.success;\n/** @type {?} */\nProcessFiltersComponent.prototype.error;\n/** @type {?} */\nProcessFiltersComponent.prototype.appId;\n/** @type {?} */\nProcessFiltersComponent.prototype.appName;\n/** @type {?} */\nProcessFiltersComponent.prototype.showIcon;\n/** @type {?} */\nProcessFiltersComponent.prototype.filterObserver;\n/** @type {?} */\nProcessFiltersComponent.prototype.filter$;\n/** @type {?} */\nProcessFiltersComponent.prototype.currentFilter;\n/** @type {?} */\nProcessFiltersComponent.prototype.filters;\n/** @type {?} */\nProcessFiltersComponent.prototype.processFilterService;\n/** @type {?} */\nProcessFiltersComponent.prototype.appsProcessService;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { ProcessFilterRequestRepresentation, ProcessInstanceFilterRepresentation, UserProcessInstanceFilterRepresentation } from 'alfresco-js-api';\nexport class FilterProcessRepresentationModel implements UserProcessInstanceFilterRepresentation {\n    appId: number;\n    filter: ProcessInstanceFilterRepresentation;\n    icon: number;\n    id: number;\n    index: number;\n    name: string;\n    recent: boolean;\n/**\n * @param {?} obj\n */\nconstructor(obj: any) {\n        if (obj) {\n            this.id = obj.id || null;\n            this.appId = obj.appId || null;\n            this.name = obj.name || null;\n            this.recent = !!obj.recent;\n            this.icon = obj.icon || null;\n            this.filter = obj.filter || null;\n            this.index = obj.index;\n        }\n    }\n/**\n * @return {?}\n */\nhasFilter() {\n        return !!this.filter;\n    }\n}\n\nfunction FilterProcessRepresentationModel_tsickle_Closure_declarations() {\n/** @type {?} */\nFilterProcessRepresentationModel.prototype.appId;\n/** @type {?} */\nFilterProcessRepresentationModel.prototype.filter;\n/** @type {?} */\nFilterProcessRepresentationModel.prototype.icon;\n/** @type {?} */\nFilterProcessRepresentationModel.prototype.id;\n/** @type {?} */\nFilterProcessRepresentationModel.prototype.index;\n/** @type {?} */\nFilterProcessRepresentationModel.prototype.name;\n/** @type {?} */\nFilterProcessRepresentationModel.prototype.recent;\n}\n\n/**\n * \n * This object represent the parameters of a process filter.\n * \n * \n */\nexport class ProcessFilterParamRepresentationModel implements ProcessFilterRequestRepresentation {\n\n    processDefinitionId?: number;\n    appDefinitionId?: number;\n    state?: string;\n    sort?: string;\n    page?: number;\n    size?: number;\n/**\n * @param {?=} obj\n */\nconstructor(obj?: any) {\n        this.processDefinitionId = obj.processDefinitionId || null;\n        this.appDefinitionId = obj.appDefinitionId || null;\n        this.state = obj.state || null;\n        this.sort = obj.sort || null;\n        this.page = obj.page || null;\n        this.size = obj.size || null;\n    }\n}\n\nfunction ProcessFilterParamRepresentationModel_tsickle_Closure_declarations() {\n/** @type {?} */\nProcessFilterParamRepresentationModel.prototype.processDefinitionId;\n/** @type {?} */\nProcessFilterParamRepresentationModel.prototype.appDefinitionId;\n/** @type {?} */\nProcessFilterParamRepresentationModel.prototype.state;\n/** @type {?} */\nProcessFilterParamRepresentationModel.prototype.sort;\n/** @type {?} */\nProcessFilterParamRepresentationModel.prototype.page;\n/** @type {?} */\nProcessFilterParamRepresentationModel.prototype.size;\n}\n\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { AlfrescoApiService } from '@alfresco/adf-core';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { FilterProcessRepresentationModel } from '../models/filter-process.model';\nimport'rxjs/add/observable/throw';\nexport class ProcessFilterService {\n/**\n * @param {?} alfrescoApiService\n */\nconstructor(private alfrescoApiService: AlfrescoApiService) {\n    }\n/**\n * @param {?} appId\n * @return {?}\n */\ngetProcessFilters(appId: number): Observable<FilterProcessRepresentationModel[]> {\n        return Observable.fromPromise(this.callApiProcessFilters(appId))\n            .map((response: any) => {\n                let /** @type {?} */ filters: FilterProcessRepresentationModel[] = [];\n                response.data.forEach((filter: FilterProcessRepresentationModel) => {\n                    let /** @type {?} */ filterModel = new FilterProcessRepresentationModel(filter);\n                    filters.push(filterModel);\n                });\n                return filters;\n            })\n            .catch(err => this.handleProcessError(err));\n    }\n/**\n * Retrieve the process filter by id\n * @param {?} filterId - number - The id of the filter\n * @param {?=} appId - string - optional - The id of app\n * @return {?}\n */\ngetProcessFilterById(filterId: number, appId?: number): Observable<FilterProcessRepresentationModel> {\n        return Observable.fromPromise(this.callApiProcessFilters(appId))\n            .map((response: any) => {\n                return response.data.find(filter => filter.id === filterId);\n            }).catch(err => this.handleProcessError(err));\n    }\n/**\n * Retrieve the process filter by name\n * @param {?} filterName - string - The name of the filter\n * @param {?=} appId - string - optional - The id of app\n * @return {?}\n */\ngetProcessFilterByName(filterName: string, appId?: number): Observable<FilterProcessRepresentationModel> {\n        return Observable.fromPromise(this.callApiProcessFilters(appId))\n            .map((response: any) => {\n                return response.data.find(filter => filter.name === filterName);\n            }).catch(err => this.handleProcessError(err));\n    }\n/**\n * Create and return the default filters\n * @param {?} appId\n * @return {?}\n */\npublic createDefaultFilters(appId: number): Observable<FilterProcessRepresentationModel[]> {\n        let /** @type {?} */ runningFilter = this.getRunningFilterInstance(appId);\n        let /** @type {?} */ runningObservable = this.addProcessFilter(runningFilter);\n\n        let /** @type {?} */ completedFilter = this.getCompletedFilterInstance(appId);\n        let /** @type {?} */ completedObservable = this.addProcessFilter(completedFilter);\n\n        let /** @type {?} */ allFilter = this.getAllFilterInstance(appId);\n        let /** @type {?} */ allObservable = this.addProcessFilter(allFilter);\n\n        return Observable.create(observer => {\n            Observable.forkJoin(\n                runningObservable,\n                completedObservable,\n                allObservable\n            ).subscribe(\n                (res) => {\n                    let /** @type {?} */ filters: FilterProcessRepresentationModel[] = [];\n                    res.forEach((filter) => {\n                        if (filter.name === runningFilter.name) {\n                            filters.push(runningFilter);\n                        } else if (filter.name === completedFilter.name) {\n                            filters.push(completedFilter);\n                        } else if (filter.name === allFilter.name) {\n                            filters.push(allFilter);\n                        }\n                    });\n                    observer.next(filters);\n                    observer.complete();\n                },\n                (err: any) => {\n                    this.handleProcessError(err);\n                });\n        });\n    }\n/**\n * @param {?} appId\n * @return {?}\n */\npublic getRunningFilterInstance(appId: number): FilterProcessRepresentationModel {\n        return new FilterProcessRepresentationModel({\n            'name': 'Running',\n            'appId': appId,\n            'recent': true,\n            'icon': 'glyphicon-random',\n            'filter': { 'sort': 'created-desc', 'name': '', 'state': 'running' }\n        });\n    }\n/**\n * Return a static Completed filter instance\n * @param {?} appId\n * @return {?}\n */\nprivate getCompletedFilterInstance(appId: number): FilterProcessRepresentationModel {\n        return new FilterProcessRepresentationModel({\n            'name': 'Completed',\n            'appId': appId,\n            'recent': false,\n            'icon': 'glyphicon-ok-sign',\n            'filter': { 'sort': 'created-desc', 'name': '', 'state': 'completed' }\n        });\n    }\n/**\n * Return a static All filter instance\n * @param {?} appId\n * @return {?}\n */\nprivate getAllFilterInstance(appId: number): FilterProcessRepresentationModel {\n        return new FilterProcessRepresentationModel({\n            'name': 'All',\n            'appId': appId,\n            'recent': true,\n            'icon': 'glyphicon-th',\n            'filter': { 'sort': 'created-desc', 'name': '', 'state': 'all' }\n        });\n    }\n/**\n * Add a filter\n * @param {?} filter - FilterProcessRepresentationModel\n * @return {?}\n */\naddProcessFilter(filter: FilterProcessRepresentationModel): Observable<FilterProcessRepresentationModel> {\n        return Observable.fromPromise(this.alfrescoApiService.getInstance().activiti.userFiltersApi.createUserProcessInstanceFilter(filter))\n            .map(res => res)\n            .map((response: FilterProcessRepresentationModel) => {\n                return response;\n            }).catch(err => this.handleProcessError(err));\n    }\n/**\n * @param {?=} appId\n * @return {?}\n */\ncallApiProcessFilters(appId?: number) {\n        if (appId) {\n            return this.alfrescoApiService.getInstance().activiti.userFiltersApi.getUserProcessInstanceFilters({ appId: appId });\n        } else {\n            return this.alfrescoApiService.getInstance().activiti.userFiltersApi.getUserProcessInstanceFilters();\n        }\n    }\n/**\n * @param {?} error\n * @return {?}\n */\nprivate handleProcessError(error: any) {\n        return Observable.throw(error || 'Server error');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: AlfrescoApiService, },\n];\n}\n\nfunction ProcessFilterService_tsickle_Closure_declarations() {\n/** @type {?} */\nProcessFilterService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nProcessFilterService.ctorParameters;\n/** @type {?} */\nProcessFilterService.prototype.alfrescoApiService;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { ContentService } from '@alfresco/adf-core';\nimport { Directive, EventEmitter, Input, OnChanges, Output, SimpleChanges } from '@angular/core';\nimport { ProcessService } from './../services/process.service';\n\nconst /** @type {?} */ JSON_FORMAT: string = 'json';\nconst /** @type {?} */ PDF_FORMAT: string = 'pdf';\nexport class ProcessAuditDirective implements OnChanges {\n\n    \n    processId: string;\n\n    \n    fileName: string = 'Audit';\n\n    \n    format: string = 'pdf';\n\n    \n    download: boolean = true;\n\n    \n    clicked: EventEmitter<any> = new EventEmitter<any>();\n\n    \n    error: EventEmitter<any> = new EventEmitter<any>();\npublic audit: any;\n/**\n *\n * @param {?} contentService\n * @param {?} processListService\n */\nconstructor(private contentService: ContentService,\nprivate processListService: ProcessService) {\n    }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges): void {\n        if (!this.isValidType()) {\n            this.setDefaultFormatType();\n        }\n    }\n/**\n * @return {?}\n */\nisValidType() {\n        if (this.format && (this.isJsonFormat() || this.isPdfFormat())) {\n            return true;\n        }\n        return false;\n    }\n/**\n * @return {?}\n */\nsetDefaultFormatType(): void {\n        this.format = PDF_FORMAT;\n    }\n/**\n * fetch the audit information in the requested format\n * @return {?}\n */\nfetchAuditInfo(): void {\n        if (this.isPdfFormat()) {\n            this.processListService.fetchProcessAuditPdfById(this.processId).subscribe(\n                (blob: Blob) => {\n                    this.audit = blob;\n                    if (this.download) {\n                        this.contentService.downloadBlob(this.audit, this.fileName + '.pdf');\n                    }\n                    this.clicked.emit({ format: this.format, value: this.audit, fileName: this.fileName });\n                },\n                (err) => {\n                    this.error.emit(err);\n                });\n        } else {\n            this.processListService.fetchProcessAuditJsonById(this.processId).subscribe(\n                (res) => {\n                    this.audit = res;\n                    this.clicked.emit({ format: this.format, value: this.audit, fileName: this.fileName });\n                },\n                (err) => {\n                    this.error.emit(err);\n                });\n        }\n    }\n/**\n * @return {?}\n */\nonClickAudit() {\n        this.fetchAuditInfo();\n    }\n/**\n * @return {?}\n */\nisJsonFormat() {\n        return this.format === JSON_FORMAT;\n    }\n/**\n * @return {?}\n */\nisPdfFormat() {\n        return this.format === PDF_FORMAT;\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'button[adf-process-audit]',\n    host: {\n        'role': 'button',\n        '(click)': 'onClickAudit()'\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ContentService, },\n{type: ProcessService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'processId': [{ type: Input, args: ['process-id', ] },],\n'fileName': [{ type: Input },],\n'format': [{ type: Input },],\n'download': [{ type: Input },],\n'clicked': [{ type: Output },],\n'error': [{ type: Output },],\n};\n}\n\nfunction ProcessAuditDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nProcessAuditDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nProcessAuditDirective.ctorParameters;\n/** @type {?} */\nProcessAuditDirective.propDecorators;\n/** @type {?} */\nProcessAuditDirective.prototype.processId;\n/** @type {?} */\nProcessAuditDirective.prototype.fileName;\n/** @type {?} */\nProcessAuditDirective.prototype.format;\n/** @type {?} */\nProcessAuditDirective.prototype.download;\n/** @type {?} */\nProcessAuditDirective.prototype.clicked;\n/** @type {?} */\nProcessAuditDirective.prototype.error;\n/** @type {?} */\nProcessAuditDirective.prototype.audit;\n/** @type {?} */\nProcessAuditDirective.prototype.contentService;\n/** @type {?} */\nProcessAuditDirective.prototype.processListService;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { CommonModule, DatePipe } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { FormModule } from '@alfresco/adf-core';\n\nimport { CardViewModule, DataColumnModule,  DataTableModule, DirectiveModule, InfoDrawerModule } from '@alfresco/adf-core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { MaterialModule } from '../material.module';\nimport { PeopleModule } from '../people/people.module';\nimport { CommentsModule } from '../comments/comments.module';\nimport { TaskUploadService } from './services/task-upload.service';\nimport { ProcessUploadService } from './services/process-upload.service';\nimport { TaskListService } from './services/tasklist.service';\nimport { TaskFilterService } from './services/task-filter.service';\n\nimport { ChecklistComponent } from './components/checklist.component';\nimport { NoTaskDetailsTemplateDirective } from './components/no-task-detail-template.directive';\nimport { StartTaskComponent } from './components/start-task.component';\nimport { TaskAuditDirective } from './components/task-audit.directive';\nimport { TaskDetailsComponent } from './components/task-details.component';\nimport { TaskFiltersComponent } from './components/task-filters.component';\nimport { TaskHeaderComponent } from './components/task-header.component';\nimport { TaskListComponent } from './components/task-list.component';\nexport class TaskListModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [\n        CommonModule,\n        CardViewModule,\n        DataTableModule,\n        DataColumnModule,\n        DirectiveModule,\n        FormModule,\n        FlexLayoutModule,\n        InfoDrawerModule,\n        MaterialModule,\n        TranslateModule,\n        FormsModule,\n        ReactiveFormsModule,\n        PeopleModule,\n        CommentsModule\n    ],\n    declarations: [\n        NoTaskDetailsTemplateDirective,\n        TaskFiltersComponent,\n        TaskListComponent,\n        TaskDetailsComponent,\n        TaskAuditDirective,\n        ChecklistComponent,\n        TaskHeaderComponent,\n        StartTaskComponent\n    ],\n    providers: [\n        TaskListService,\n        TaskFilterService,\n        TaskUploadService,\n        ProcessUploadService,\n        DatePipe\n    ],\n    exports: [\n        NoTaskDetailsTemplateDirective,\n        TaskFiltersComponent,\n        TaskListComponent,\n        TaskDetailsComponent,\n        TaskAuditDirective,\n        ChecklistComponent,\n        TaskHeaderComponent,\n        StartTaskComponent\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction TaskListModule_tsickle_Closure_declarations() {\n/** @type {?} */\nTaskListModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTaskListModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\nexport class ProcessDefinitionRepresentation {\n    id: string;\n    name: string;\n    description: string;\n    key: string;\n    category: string;\n    version: number;\n    deploymentId: string;\n    tenantId: string;\n    metaDataValues: any[];\n    hasStartForm: boolean;\n/**\n * @param {?=} obj\n */\nconstructor(obj?: any) {\n        this.id = obj && obj.id || null;\n        this.name = obj && obj.name || null;\n        this.description = obj && obj.description || null;\n        this.key = obj && obj.key || null;\n        this.category = obj && obj.category || null;\n        this.version = obj && obj.version || 0;\n        this.deploymentId = obj && obj.deploymentId || null;\n        this.tenantId = obj && obj.tenantId || null;\n        this.metaDataValues = obj && obj.metaDataValues || [];\n        this.hasStartForm = obj && obj.hasStartForm === true ? true : false;\n    }\n}\n\nfunction ProcessDefinitionRepresentation_tsickle_Closure_declarations() {\n/** @type {?} */\nProcessDefinitionRepresentation.prototype.id;\n/** @type {?} */\nProcessDefinitionRepresentation.prototype.name;\n/** @type {?} */\nProcessDefinitionRepresentation.prototype.description;\n/** @type {?} */\nProcessDefinitionRepresentation.prototype.key;\n/** @type {?} */\nProcessDefinitionRepresentation.prototype.category;\n/** @type {?} */\nProcessDefinitionRepresentation.prototype.version;\n/** @type {?} */\nProcessDefinitionRepresentation.prototype.deploymentId;\n/** @type {?} */\nProcessDefinitionRepresentation.prototype.tenantId;\n/** @type {?} */\nProcessDefinitionRepresentation.prototype.metaDataValues;\n/** @type {?} */\nProcessDefinitionRepresentation.prototype.hasStartForm;\n}\n\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { RestVariable } from 'alfresco-js-api';\nexport class ProcessInstanceVariable implements RestVariable {\n\n    name?: string;\n    scope?: string;\n    type?: string;\n    value?: string;\n    valueUrl?: string;\n/**\n * @param {?=} obj\n */\nconstructor(obj?: any) {\n        this.name = obj && obj.name !== undefined ? obj.name : null;\n        this.scope = obj && obj.scope !== undefined ? obj.scope : null;\n        this.value = obj && obj.value !== undefined ? obj.value : null;\n        this.valueUrl = obj && obj.valueUrl !== undefined ? obj.valueUrl : null;\n    }\n}\n\nfunction ProcessInstanceVariable_tsickle_Closure_declarations() {\n/** @type {?} */\nProcessInstanceVariable.prototype.name;\n/** @type {?} */\nProcessInstanceVariable.prototype.scope;\n/** @type {?} */\nProcessInstanceVariable.prototype.type;\n/** @type {?} */\nProcessInstanceVariable.prototype.value;\n/** @type {?} */\nProcessInstanceVariable.prototype.valueUrl;\n}\n\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { LightUserRepresentation, ProcessInstanceRepresentation, RestVariable } from 'alfresco-js-api';\nexport class ProcessInstance implements ProcessInstanceRepresentation {\n\n    businessKey?: string;\n    ended?: Date;\n    graphicalNotationDefined?: boolean;\n    id?: string;\n    name?: string;\n    processDefinitionCategory?: string;\n    processDefinitionDeploymentId?: string;\n    processDefinitionDescription?: string;\n    processDefinitionId?: string;\n    processDefinitionKey?: string;\n    processDefinitionName?: string;\n    processDefinitionVersion?: number;\n    startFormDefined?: boolean;\n    started?: Date;\n    startedBy?: LightUserRepresentation;\n    tenantId?: string;\n    variables?: RestVariable[];\n/**\n * @param {?=} data\n */\nconstructor(data?: any) {\n        this.businessKey = data && data.businessKey !== undefined ? data.businessKey : null;\n        this.ended = data && data.ended !== undefined ? data.ended : null;\n        this.graphicalNotationDefined = data && data.graphicalNotationDefined !== undefined ? data.graphicalNotationDefined : null;\n        this.id = data && data.id !== undefined ? data.id : null;\n        this.name = data && data.name !== undefined ? data.name : null;\n        this.processDefinitionCategory = data && data.processDefinitionCategory !== undefined ? data.processDefinitionCategory : null;\n        this.processDefinitionDeploymentId = data && data.processDefinitionDeploymentId !== undefined ? data.processDefinitionDeploymentId : null;\n        this.processDefinitionDescription = data && data.processDefinitionDescription !== undefined ? data.processDefinitionDescription : null;\n        this.processDefinitionId = data && data.processDefinitionId !== undefined ? data.processDefinitionId : null;\n        this.processDefinitionKey = data && data.processDefinitionKey !== undefined ? data.processDefinitionKey : null;\n        this.processDefinitionName = data && data.processDefinitionName !== undefined ? data.processDefinitionName : null;\n        this.processDefinitionVersion = data && data.processDefinitionVersion !== undefined ? data.processDefinitionVersion : null;\n        this.startFormDefined = data && data.startFormDefined !== undefined ? data.startFormDefined : null;\n        this.started = data && data.started !== undefined ? data.started : null;\n        this.startedBy = data && data.startedBy !== undefined ? data.startedBy : null;\n        this.tenantId = data && data.tenantId !== undefined ? data.tenantId : null;\n        this.variables = data && data.variables !== undefined ? data.variables : null;\n    }\n\n}\n\nfunction ProcessInstance_tsickle_Closure_declarations() {\n/** @type {?} */\nProcessInstance.prototype.businessKey;\n/** @type {?} */\nProcessInstance.prototype.ended;\n/** @type {?} */\nProcessInstance.prototype.graphicalNotationDefined;\n/** @type {?} */\nProcessInstance.prototype.id;\n/** @type {?} */\nProcessInstance.prototype.name;\n/** @type {?} */\nProcessInstance.prototype.processDefinitionCategory;\n/** @type {?} */\nProcessInstance.prototype.processDefinitionDeploymentId;\n/** @type {?} */\nProcessInstance.prototype.processDefinitionDescription;\n/** @type {?} */\nProcessInstance.prototype.processDefinitionId;\n/** @type {?} */\nProcessInstance.prototype.processDefinitionKey;\n/** @type {?} */\nProcessInstance.prototype.processDefinitionName;\n/** @type {?} */\nProcessInstance.prototype.processDefinitionVersion;\n/** @type {?} */\nProcessInstance.prototype.startFormDefined;\n/** @type {?} */\nProcessInstance.prototype.started;\n/** @type {?} */\nProcessInstance.prototype.startedBy;\n/** @type {?} */\nProcessInstance.prototype.tenantId;\n/** @type {?} */\nProcessInstance.prototype.variables;\n}\n\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { AlfrescoApiService } from '@alfresco/adf-core';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { TaskDetailsModel } from '../../task-list';\nimport { ProcessFilterParamRepresentationModel } from '../models/filter-process.model';\nimport { ProcessDefinitionRepresentation } from '../models/process-definition.model';\nimport { ProcessInstanceVariable } from '../models/process-instance-variable.model';\nimport { ProcessInstance } from '../models/process-instance.model';\nimport'rxjs/add/observable/throw';\n\ndeclare let moment: any;\nexport class ProcessService {\n/**\n * @param {?} alfrescoApiService\n */\nconstructor(private alfrescoApiService: AlfrescoApiService) {\n    }\n/**\n * @param {?} requestNode\n * @param {?=} processDefinitionKey\n * @return {?}\n */\ngetProcessInstances(requestNode: ProcessFilterParamRepresentationModel, processDefinitionKey?: string): Observable<ProcessInstance[]> {\n        return Observable.fromPromise(this.alfrescoApiService.getInstance().activiti.processApi.getProcessInstances(requestNode))\n            .map((res: any) => {\n                if (processDefinitionKey) {\n                    return res.data.filter(process => process.processDefinitionKey === processDefinitionKey);\n                } else {\n                    return res.data;\n                }\n            }).catch(err => this.handleProcessError(err));\n    }\n/**\n * fetch the Process Audit information as a pdf\n * @param {?} processId - the process id\n * @return {?}\n */\nfetchProcessAuditPdfById(processId: string): Observable<Blob> {\n        return Observable.fromPromise(this.alfrescoApiService.getInstance().activiti.processApi.getProcessAuditPdf(processId))\n            .catch(err => this.handleProcessError(err));\n    }\n/**\n * fetch the Process Audit information in a json format\n * @param {?} processId - the process id\n * @return {?}\n */\nfetchProcessAuditJsonById(processId: string): Observable<any> {\n        return Observable.fromPromise(this.alfrescoApiService.getInstance().activiti.processApi.getProcessAuditJson(processId))\n            .catch(err => this.handleProcessError(err));\n    }\n/**\n * @param {?} processInstanceId\n * @return {?}\n */\ngetProcess(processInstanceId: string): Observable<ProcessInstance> {\n        return Observable.fromPromise(this.alfrescoApiService.getInstance().activiti.processApi.getProcessInstance(processInstanceId))\n            .catch(err => this.handleProcessError(err));\n    }\n/**\n * @param {?} processInstanceId\n * @param {?=} state\n * @return {?}\n */\ngetProcessTasks(processInstanceId: string, state?: string): Observable<TaskDetailsModel[]> {\n        let /** @type {?} */ taskOpts = state ? {\n                processInstanceId: processInstanceId,\n                state: state\n            } : {\n                processInstanceId: processInstanceId\n            };\n        return Observable.fromPromise(this.alfrescoApiService.getInstance().activiti.taskApi.listTasks(taskOpts))\n            .map(this.extractData)\n            .map(tasks => tasks.map((task: any) => {\n                task.created = moment(task.created, 'YYYY-MM-DD').format();\n                return task;\n            }))\n            .catch(err => this.handleProcessError(err));\n    }\n/**\n * @param {?=} appId\n * @return {?}\n */\ngetProcessDefinitions(appId?: number): Observable<ProcessDefinitionRepresentation[]> {\n        let /** @type {?} */ opts = appId ? {\n                latest: true,\n                appDefinitionId: appId\n            } : {\n                latest: true\n            };\n        return Observable.fromPromise(\n            this.alfrescoApiService.getInstance().activiti.processApi.getProcessDefinitions(opts)\n        )\n            .map(this.extractData)\n            .map(processDefs => processDefs.map((pd) => new ProcessDefinitionRepresentation(pd)))\n            .catch(err => this.handleProcessError(err));\n    }\n/**\n * @param {?} processDefinitionId\n * @param {?} name\n * @param {?=} outcome\n * @param {?=} startFormValues\n * @param {?=} variables\n * @return {?}\n */\nstartProcess(processDefinitionId: string, name: string, outcome?: string, startFormValues?: any, variables?: ProcessInstanceVariable[]): Observable<ProcessInstance> {\n        let /** @type {?} */ startRequest: any = {\n            name: name,\n            processDefinitionId: processDefinitionId\n        };\n        if (outcome) {\n            startRequest.outcome = outcome;\n        }\n        if (startFormValues) {\n            startRequest.values = startFormValues;\n        }\n        if (variables) {\n            startRequest.variables = variables;\n        }\n        return Observable.fromPromise(\n            this.alfrescoApiService.getInstance().activiti.processApi.startNewProcessInstance(startRequest)\n        )\n            .map((pd) => new ProcessInstance(pd))\n            .catch(err => this.handleProcessError(err));\n    }\n/**\n * @param {?} processInstanceId\n * @return {?}\n */\ncancelProcess(processInstanceId: string): Observable<void> {\n        return Observable.fromPromise(\n            this.alfrescoApiService.getInstance().activiti.processApi.deleteProcessInstance(processInstanceId)\n        )\n            .catch(err => this.handleProcessError(err));\n    }\n/**\n * @param {?} processInstanceId\n * @return {?}\n */\ngetProcessInstanceVariables(processInstanceId: string): Observable<ProcessInstanceVariable[]> {\n        return Observable.fromPromise(\n            this.alfrescoApiService.getInstance().activiti.processInstanceVariablesApi.getProcessInstanceVariables(processInstanceId)\n        )\n            .map((processVars: any[]) => processVars.map((pd) => new ProcessInstanceVariable(pd)))\n            .catch(err => this.handleProcessError(err));\n    }\n/**\n * @param {?} processInstanceId\n * @param {?} variables\n * @return {?}\n */\ncreateOrUpdateProcessInstanceVariables(processInstanceId: string, variables: ProcessInstanceVariable[]): Observable<ProcessInstanceVariable[]> {\n        return Observable.fromPromise(\n            this.alfrescoApiService.getInstance().activiti.processInstanceVariablesApi.createOrUpdateProcessInstanceVariables(processInstanceId, variables)\n        )\n            .catch(err => this.handleProcessError(err));\n    }\n/**\n * @param {?} processInstanceId\n * @param {?} variableName\n * @return {?}\n */\ndeleteProcessInstanceVariable(processInstanceId: string, variableName: string): Observable<void> {\n        return Observable.fromPromise(\n            this.alfrescoApiService.getInstance().activiti.processInstanceVariablesApi.deleteProcessInstanceVariable(processInstanceId, variableName)\n        )\n            .catch(err => this.handleProcessError(err));\n    }\n/**\n * @param {?} res\n * @return {?}\n */\nprivate extractData(res: any) {\n        return res.data || {};\n    }\n/**\n * @param {?} error\n * @return {?}\n */\nprivate handleProcessError(error: any) {\n        return Observable.throw(error || 'Server error');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: AlfrescoApiService, },\n];\n}\n\nfunction ProcessService_tsickle_Closure_declarations() {\n/** @type {?} */\nProcessService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nProcessService.ctorParameters;\n/** @type {?} */\nProcessService.prototype.alfrescoApiService;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport let /** @type {?} */ taskPresetsDefaultModel = {\n    'default': [\n        {\n            'key': 'name',\n            'type': 'text',\n            'title': 'ADF_TASK_LIST.PROPERTIES.NAME',\n            'sortable': true\n        },\n        {\n            'key': 'created',\n            'type': 'text',\n            'title': 'ADF_TASK_LIST.PROPERTIES.CREATED',\n            'cssClass': 'hidden',\n            'sortable': true\n        },\n        {\n            'key': 'assignee',\n            'type': 'text',\n            'title': 'ADF_TASK_LIST.PROPERTIES.ASSIGNEE',\n            'cssClass': 'hidden',\n            'sortable': true\n        }\n    ]\n};\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { DataColumn, DataRowEvent, DataTableAdapter, ObjectDataColumn, ObjectDataRow, ObjectDataTableAdapter } from '@alfresco/adf-core';\nimport { AppConfigService, DataColumnListComponent } from '@alfresco/adf-core';\nimport { AfterContentInit, Component, ContentChild, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { TaskQueryRequestRepresentationModel } from '../models/filter.model';\nimport { TaskListModel } from '../models/task-list.model';\nimport { taskPresetsDefaultModel } from '../models/task-preset.model';\nimport { TaskListService } from './../services/tasklist.service';\n\nconst /** @type {?} */ DEFAULT_SIZE = 5;\nexport class TaskListComponent implements OnChanges, OnInit, AfterContentInit {\n\n    requestNode: TaskQueryRequestRepresentationModel;\n\n     columnList: DataColumnListComponent;\n\n    \n    appId: number;\n\n    \n    processInstanceId: string;\n\n    \n    processDefinitionKey: string;\n\n    \n    state: string;\n\n    \n    assignment: string;\n\n    \n    sort: string;\n\n    \n    name: string;\n\n    \n    landingTaskId: string;\n\n    \n    data: DataTableAdapter;\n\n    \n    selectionMode: string = 'single'; // none|single|multiple\n\n    \n    presetColumn: string;\n\n    \n    multiselect: boolean = false;\n\n    \n    rowClick: EventEmitter<string> = new EventEmitter<string>();\n\n    \n    rowsSelected: EventEmitter<any[]> = new EventEmitter<any[]>();\n\n    \n    success: EventEmitter<any> = new EventEmitter<any>();\n\n    \n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    currentInstanceId: string;\n    selectedInstances: any[];\n    layoutPresets = {};\n\n    \n    page: number = 0;\n\n    \n    size: number = DEFAULT_SIZE;\n\n    isLoading: boolean = true;\n/**\n * Toggles custom data source mode.\n * When enabled the component reloads data from it's current source instead of the server side.\n * This allows generating and displaying custom data sets (i.e. filtered out content).\n * \n * \\@memberOf TaskListComponent\n */\nhasCustomDataSource: boolean = false;\n    isStreamLoaded = false;\n/**\n * @param {?} taskListService\n * @param {?} appConfig\n */\nconstructor(private taskListService: TaskListService,\nprivate appConfig: AppConfigService) {\n    }\n/**\n * @return {?}\n */\ninitStream() {\n        if (!this.isStreamLoaded) {\n            this.isStreamLoaded = true;\n            this.taskListService.tasksList$.subscribe(\n                (tasks) => {\n                    let /** @type {?} */ instancesRow = this.createDataRow(tasks.data);\n                    this.renderInstances(instancesRow);\n                    this.selectTask(this.landingTaskId);\n                    this.success.emit(tasks);\n                    this.isLoading = false;\n                }, (error) => {\n                    this.error.emit(error);\n                    this.isLoading = false;\n                });\n        }\n    }\n/**\n * @return {?}\n */\nngOnInit() {\n        if (this.data === undefined) {\n            this.data = new ObjectDataTableAdapter();\n        }\n        this.initStream();\n    }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n        this.loadLayoutPresets();\n        this.setupSchema();\n    }\n/**\n * Setup html-based (html definitions) or code behind (data adapter) schema.\n * If component is assigned with an empty data adater the default schema settings applied.\n * @return {?}\n */\nsetupSchema(): void {\n        let /** @type {?} */ schema: DataColumn[] = [];\n\n        if (this.columnList && this.columnList.columns && this.columnList.columns.length > 0) {\n            schema = this.columnList.columns.map(c => /** @type {?} */(( <DataColumn> c)));\n        }\n\n        if (!this.data) {\n            this.data = new ObjectDataTableAdapter([], schema.length > 0 ? schema :  this.presetColumn  ? this.getLayoutPreset(this.presetColumn) : this.getLayoutPreset());\n\n        } else {\n            if (schema && schema.length > 0) {\n                this.data.setColumns(schema);\n            } else if (this.data.getColumns().length === 0) {\n                this.presetColumn ? this.setupDefaultColumns(this.presetColumn) : this.setupDefaultColumns();\n            }\n        }\n    }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n        this.initStream();\n        if (this.isPropertyChanged(changes)) {\n            this.reload();\n        }\n    }\n/**\n * @param {?} rows\n * @return {?}\n */\nsetCustomDataSource(rows: ObjectDataRow[]): void {\n        if (this.data) {\n            this.data.setRows(rows);\n            this.hasCustomDataSource = true;\n        }\n    }\n/**\n * @param {?} changes\n * @return {?}\n */\nprivate isPropertyChanged(changes: SimpleChanges): boolean {\n        let /** @type {?} */ changed: boolean = true;\n\n        let /** @type {?} */ landingTaskId = changes['landingTaskId'];\n        if (landingTaskId && landingTaskId.currentValue && this.isEqualToCurrentId(landingTaskId.currentValue)) {\n            changed = false;\n        }\n        return changed;\n    }\n/**\n * @return {?}\n */\nreload(): void {\n        if (!this.hasCustomDataSource) {\n            this.requestNode = this.createRequestNode();\n            this.load(this.requestNode);\n        }\n    }\n/**\n * @param {?} requestNode\n * @return {?}\n */\nprivate load(requestNode: TaskQueryRequestRepresentationModel) {\n        this.isLoading = true;\n        this.loadTasksByState().subscribe();\n    }\n/**\n * @return {?}\n */\nprivate loadTasksByState(): Observable<TaskListModel> {\n        return this.requestNode.state === 'all'\n               ? this.taskListService.findAllTasksWithoutState(this.requestNode)\n               : this.taskListService.findTasksByState(this.requestNode);\n    }\n/**\n * Create an array of ObjectDataRow\n * @param {?} instances\n * @return {?}\n */\nprivate createDataRow(instances: any[]): ObjectDataRow[] {\n        let /** @type {?} */ instancesRows: ObjectDataRow[] = [];\n        instances.forEach((row) => {\n            instancesRows.push(new ObjectDataRow(row));\n        });\n        return instancesRows;\n    }\n/**\n * Render the instances list\n * \n * @param {?} instances\n * @return {?}\n */\nprivate renderInstances(instances: any[]) {\n        instances = this.optimizeNames(instances);\n        this.data.setRows(instances);\n    }\n/**\n * Select the task given in input if present\n * @param {?} taskIdSelected\n * @return {?}\n */\nselectTask(taskIdSelected: string): void {\n        if (!this.isListEmpty()) {\n            let /** @type {?} */ rows = this.data.getRows();\n            if (rows.length > 0) {\n                let /** @type {?} */ dataRow;\n                if (taskIdSelected) {\n                    dataRow = rows.find((currentRow: any) => {\n                        return currentRow.getValue('id') === taskIdSelected;\n                    });\n\n                    if (!dataRow) {\n                        dataRow = rows[0];\n                    }\n                } else {\n                    dataRow = rows[0];\n                }\n\n                this.data.selectedRow = dataRow;\n                dataRow.isSelected = true;\n                this.currentInstanceId = dataRow.getValue('id');\n            }\n        } else {\n            if (this.data) {\n                this.data.selectedRow = null;\n            }\n\n            this.currentInstanceId = null;\n        }\n    }\n/**\n * Return the current id\n * @return {?}\n */\ngetCurrentId(): string {\n        return this.currentInstanceId;\n    }\n/**\n * Check if the taskId is the same of the selected task\n * @param {?} taskId\n * @return {?}\n */\nisEqualToCurrentId(taskId: string) {\n        return this.currentInstanceId === taskId ? true : false;\n    }\n/**\n * Check if the list is empty\n * @return {?}\n */\nisListEmpty(): boolean {\n        return this.data === undefined ||\n            (this.data && this.data.getRows() && this.data.getRows().length === 0);\n    }\n/**\n * @param {?} item\n * @return {?}\n */\nonRowClick(item: DataRowEvent) {\n        this.currentInstanceId = item.value.getValue('id');\n        this.rowClick.emit(this.currentInstanceId);\n    }\n/**\n * @param {?} event\n * @return {?}\n */\nonRowSelect(event: CustomEvent) {\n        this.selectedInstances = [...event.detail.selection];\n        this.rowsSelected.emit(this.selectedInstances);\n    }\n/**\n * @param {?} event\n * @return {?}\n */\nonRowUnselect(event: CustomEvent) {\n        this.selectedInstances = [...event.detail.selection];\n        this.rowsSelected.emit(this.selectedInstances);\n    }\n/**\n * @param {?} event\n * @return {?}\n */\nonRowKeyUp(event: CustomEvent) {\n        if (event.detail.keyboardEvent.key === 'Enter') {\n            event.preventDefault();\n            this.currentInstanceId = event.detail.row.getValue('id');\n            this.rowClick.emit(this.currentInstanceId);\n        }\n    }\n/**\n * Optimize name field\n * @param {?} istances\n * @return {?}\n */\nprivate optimizeNames(istances: any[]) {\n        istances = istances.map(t => {\n            t.obj.name = t.obj.name || 'No name';\n            return t;\n        });\n        return istances;\n    }\n/**\n * @return {?}\n */\nprivate createRequestNode() {\n\n        let /** @type {?} */ requestNode = {\n            appDefinitionId: this.appId,\n            processInstanceId: this.processInstanceId,\n            processDefinitionKey: this.processDefinitionKey,\n            text: this.name,\n            assignment: this.assignment,\n            state: this.state,\n            sort: this.sort,\n            landingTaskId: this.landingTaskId,\n            page: this.page,\n            size: this.size,\n            start: 0\n        };\n        return new TaskQueryRequestRepresentationModel(requestNode);\n    }\n/**\n * @param {?=} preset\n * @return {?}\n */\nsetupDefaultColumns(preset: string = 'default'): void {\n        if (this.data) {\n            const /** @type {?} */ columns = this.getLayoutPreset(preset);\n            this.data.setColumns(columns);\n        }\n    }\n/**\n * @return {?}\n */\nprivate loadLayoutPresets(): void {\n        const /** @type {?} */ externalSettings = this.appConfig.get('adf-task-list.presets', null);\n\n        if (externalSettings) {\n            this.layoutPresets = Object.assign({}, taskPresetsDefaultModel, externalSettings);\n        } else {\n            this.layoutPresets = taskPresetsDefaultModel;\n        }\n\n    }\n/**\n * @param {?=} name\n * @return {?}\n */\nprivate getLayoutPreset(name: string = 'default'): DataColumn[] {\n        return (this.layoutPresets[name] || this.layoutPresets['default']).map(col => new ObjectDataColumn(col));\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'adf-tasklist',\n    template: `\n      <div *ngIf=\"!requestNode\">{{ 'ADF_TASK_LIST.FILTERS.MESSAGES.NONE' | translate }}</div>\n      <div *ngIf=\"requestNode\">\n          <div>\n              <adf-datatable\n                  [data]=\"data\"\n                  [loading]=\"isLoading\"\n                  [multiselect]=\"multiselect\"\n                  [selectionMode]=\"selectionMode\"\n                  (row-select)=\"onRowSelect($event)\"\n                  (row-unselect)=\"onRowUnselect($event)\"\n                  (rowClick)=\"onRowClick($event)\"\n                  (row-keyup)=\"onRowKeyUp($event)\">\n                  <loading-content-template>\n                      <ng-template>\n                          <!--Add your custom loading template here-->\n                          <mat-progress-spinner\n                          class=\"adf-task-list-loading-margin\"\n                          [color]=\"'primary'\"\n                          [mode]=\"'indeterminate'\">\n                          </mat-progress-spinner>\n                      </ng-template>\n                  </loading-content-template>\n                  <no-content-template>\n                      <!--Add your custom empty template here-->\n                      <ng-template>\n                          <div class=\"no-content-message\">\n                              {{ 'ADF_TASK_LIST.LIST.MESSAGES.NONE' | translate }}\n                          </div>\n                      </ng-template>\n                  </no-content-template>\n              </adf-datatable>\n          </div>\n      </div>\n    `,\n    styles: [`\n      alfresco-datatable >>> .column-header {\n          color: #232323;\n          font-size: 15px;\n      }\n\n      alfresco-datatable >>> .data-cell {\n          cursor: pointer !important;\n      }\n\n      alfresco-datatable >>> .cell-value{\n          width: 250px;\n          white-space: nowrap;\n          overflow: hidden;\n          text-overflow: ellipsis\n      }\n\n      .adf-task-list-loading-margin {\n          margin-left: calc((100% - 100px) / 2);\n          margin-right: calc((100% - 100px) / 2);\n      }\n\n      .no-content-message {\n          font-size: 16px;\n          font-weight: bold;\n          text-align: center;\n          opacity: 0.54;\n          color: #000;\n      }\n    `]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: TaskListService, },\n{type: AppConfigService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'columnList': [{ type: ContentChild, args: [DataColumnListComponent, ] },],\n'appId': [{ type: Input },],\n'processInstanceId': [{ type: Input },],\n'processDefinitionKey': [{ type: Input },],\n'state': [{ type: Input },],\n'assignment': [{ type: Input },],\n'sort': [{ type: Input },],\n'name': [{ type: Input },],\n'landingTaskId': [{ type: Input },],\n'data': [{ type: Input },],\n'selectionMode': [{ type: Input },],\n'presetColumn': [{ type: Input },],\n'multiselect': [{ type: Input },],\n'rowClick': [{ type: Output },],\n'rowsSelected': [{ type: Output },],\n'success': [{ type: Output },],\n'error': [{ type: Output },],\n'page': [{ type: Input },],\n'size': [{ type: Input },],\n};\n}\n\nfunction TaskListComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nTaskListComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTaskListComponent.ctorParameters;\n/** @type {?} */\nTaskListComponent.propDecorators;\n/** @type {?} */\nTaskListComponent.prototype.requestNode;\n/** @type {?} */\nTaskListComponent.prototype.columnList;\n/** @type {?} */\nTaskListComponent.prototype.appId;\n/** @type {?} */\nTaskListComponent.prototype.processInstanceId;\n/** @type {?} */\nTaskListComponent.prototype.processDefinitionKey;\n/** @type {?} */\nTaskListComponent.prototype.state;\n/** @type {?} */\nTaskListComponent.prototype.assignment;\n/** @type {?} */\nTaskListComponent.prototype.sort;\n/** @type {?} */\nTaskListComponent.prototype.name;\n/** @type {?} */\nTaskListComponent.prototype.landingTaskId;\n/** @type {?} */\nTaskListComponent.prototype.data;\n/** @type {?} */\nTaskListComponent.prototype.selectionMode;\n/** @type {?} */\nTaskListComponent.prototype.presetColumn;\n/** @type {?} */\nTaskListComponent.prototype.multiselect;\n/** @type {?} */\nTaskListComponent.prototype.rowClick;\n/** @type {?} */\nTaskListComponent.prototype.rowsSelected;\n/** @type {?} */\nTaskListComponent.prototype.success;\n/** @type {?} */\nTaskListComponent.prototype.error;\n/** @type {?} */\nTaskListComponent.prototype.currentInstanceId;\n/** @type {?} */\nTaskListComponent.prototype.selectedInstances;\n/** @type {?} */\nTaskListComponent.prototype.layoutPresets;\n/** @type {?} */\nTaskListComponent.prototype.page;\n/** @type {?} */\nTaskListComponent.prototype.size;\n/** @type {?} */\nTaskListComponent.prototype.isLoading;\n/**\n * Toggles custom data source mode.\n * When enabled the component reloads data from it's current source instead of the server side.\n * This allows generating and displaying custom data sets (i.e. filtered out content).\n * \n * \\@memberOf TaskListComponent\n * @type {?}\n */\nTaskListComponent.prototype.hasCustomDataSource;\n/** @type {?} */\nTaskListComponent.prototype.isStreamLoaded;\n/** @type {?} */\nTaskListComponent.prototype.taskListService;\n/** @type {?} */\nTaskListComponent.prototype.appConfig;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges } from '@angular/core';\n\nimport { BpmUserService, CardViewDateItemModel, CardViewItem, CardViewMapItemModel, CardViewTextItemModel, LogService } from '@alfresco/adf-core';\n\nimport { TaskDetailsModel } from '../models/task-details.model';\nimport { TaskListService } from './../services/tasklist.service';\nexport class TaskHeaderComponent implements OnChanges, OnInit {\n\n    \n    formName: string = null;\n\n    \n    taskDetails: TaskDetailsModel;\n\n    \n    claim: EventEmitter<any> = new EventEmitter<any>();\n\n    \n    unclaim: EventEmitter<any> = new EventEmitter<any>();\nprivate currentUserId: number;\n\n    properties: CardViewItem [];\n    inEdit: boolean = false;\n/**\n * @param {?} activitiTaskService\n * @param {?} bpmUserService\n * @param {?} logService\n */\nconstructor(private activitiTaskService: TaskListService,\nprivate bpmUserService: BpmUserService,\nprivate logService: LogService) {\n    }\n/**\n * @return {?}\n */\nngOnInit() {\n        this.loadCurrentBpmUserId();\n    }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n        this.refreshData();\n    }\n/**\n * Refresh the card data\n * @return {?}\n */\nrefreshData() {\n        if (this.taskDetails) {\n            const /** @type {?} */ parentInfoMap = this.getParentInfo();\n            this.properties = [\n                new CardViewTextItemModel(\n                    {\n                     label: 'ADF_TASK_LIST.PROPERTIES.ASSIGNEE',\n                     value: this.taskDetails.getFullName(),\n                     key: 'assignee',\n                     default: 'ADF_TASK_LIST.PROPERTIES.ASSIGNEE_DEFAULT',\n                     clickable: !this.isCompleted()\n                    }\n                ),\n                new CardViewTextItemModel(\n                    {\n                        label: 'ADF_TASK_LIST.PROPERTIES.STATUS',\n                        value: this.getTaskStatus(),\n                        key: 'status'\n                    }\n                ),\n                new CardViewTextItemModel(\n                    {\n                        label: 'ADF_TASK_LIST.PROPERTIES.PRIORITY',\n                        value: this.taskDetails.priority,\n                        key: 'priority'\n                    }\n                ),\n                new CardViewDateItemModel(\n                    {\n                        label: 'ADF_TASK_LIST.PROPERTIES.DUE_DATE',\n                        value: this.taskDetails.dueDate,\n                        key: 'dueDate',\n                        default: 'ADF_TASK_LIST.PROPERTIES.DUE_DATE_DEFAULT',\n                        editable: true\n                    }\n                ),\n                new CardViewTextItemModel(\n                    {\n                        label: 'ADF_TASK_LIST.PROPERTIES.CATEGORY',\n                        value: this.taskDetails.category,\n                        key: 'category',\n                        default: 'ADF_TASK_LIST.PROPERTIES.CATEGORY_DEFAULT'\n                    }\n                ),\n                new CardViewMapItemModel(\n                    {\n                        label: 'ADF_TASK_LIST.PROPERTIES.PARENT_NAME',\n                        value: parentInfoMap, key: 'parentName',\n                        default: 'ADF_TASK_LIST.PROPERTIES.PARENT_NAME_DEFAULT',\n                        clickable: true\n                    }\n                ),\n                new CardViewTextItemModel(\n                    {\n                        label: 'ADF_TASK_LIST.PROPERTIES.CREATED_BY',\n                        value: this.taskDetails.getFullName(),\n                        key: 'created-by'\n                    }\n                ),\n                new CardViewDateItemModel(\n                    {\n                        label: 'ADF_TASK_LIST.PROPERTIES.CREATED',\n                        value: this.taskDetails.created,\n                        key: 'created'\n                    }\n                ),\n                new CardViewTextItemModel(\n                    {\n                        label: 'ADF_TASK_LIST.PROPERTIES.ID',\n                        value: this.taskDetails.id,\n                        key: 'id'\n                    }\n                ),\n                new CardViewTextItemModel(\n                    {\n                        label: 'ADF_TASK_LIST.PROPERTIES.DESCRIPTION',\n                        value: this.taskDetails.description,\n                        key: 'description',\n                        default: 'ADF_TASK_LIST.PROPERTIES.DESCRIPTION_DEFAULT',\n                        multiline: true,\n                        editable: true\n                    }\n                ),\n                new CardViewTextItemModel(\n                    {\n                        label: 'ADF_TASK_LIST.PROPERTIES.FORM_NAME',\n                        value: this.formName,\n                        key: 'formName',\n                        default: 'ADF_TASK_LIST.PROPERTIES.FORM_NAME_DEFAULT'\n                    }\n                )\n            ];\n        }\n    }\n/**\n * Loads current bpm userId\n * @return {?}\n */\nprivate loadCurrentBpmUserId(): void {\n        this.bpmUserService.getCurrentUserInfo().subscribe((res) => {\n            this.currentUserId = res ? +res.id : null;\n        });\n    }\n/**\n * Return the process parent information\n * @return {?}\n */\ngetParentInfo() {\n        if (this.taskDetails.processInstanceId && this.taskDetails.processDefinitionName) {\n            return new Map([[this.taskDetails.processInstanceId, this.taskDetails.processDefinitionName]]);\n        }\n    }\n/**\n * Does the task have an assignee\n * @return {?}\n */\npublic hasAssignee(): boolean {\n        return !!this.taskDetails.assignee ? true : false;\n    }\n/**\n * Returns true if the task is assigne to logged in user\n * @param {?} userId\n * @return {?}\n */\npublic isAssignedTo(userId): boolean {\n        return this.hasAssignee() ? this.taskDetails.assignee.id === userId : false;\n    }\n/**\n * Return true if the task assigned\n * @return {?}\n */\npublic isAssignedToCurrentUser(): boolean {\n        return this.hasAssignee() && this.isAssignedTo(this.currentUserId);\n    }\n/**\n * Return true if the user is a candidate member\n * @return {?}\n */\nisCandidateMember() {\n        return this.taskDetails.managerOfCandidateGroup || this.taskDetails.memberOfCandidateGroup || this.taskDetails.memberOfCandidateUsers;\n    }\n/**\n * Return true if the task claimable\n * @return {?}\n */\npublic isTaskClaimable(): boolean {\n        return !this.hasAssignee() && this.isCandidateMember();\n    }\n/**\n * Return true if the task claimed by candidate member.\n * @return {?}\n */\npublic isTaskClaimedByCandidateMember(): boolean {\n        return this.isCandidateMember() && this.isAssignedToCurrentUser() && !this.isCompleted();\n    }\n/**\n * Returns task's status\n * @return {?}\n */\ngetTaskStatus(): string {\n        return (this.taskDetails && this.taskDetails.isCompleted()) ? 'Completed' : 'Running';\n    }\n/**\n * Claim task\n * \n * @param {?} taskId\n * @return {?}\n */\nclaimTask(taskId: string) {\n        this.activitiTaskService.claimTask(taskId).subscribe(\n            (res: any) => {\n                this.logService.info('Task claimed');\n                this.claim.emit(taskId);\n            });\n    }\n/**\n * Unclaim task\n * \n * @param {?} taskId\n * @return {?}\n */\nunclaimTask(taskId: string) {\n        this.activitiTaskService.unclaimTask(taskId).subscribe(\n            (res: any) => {\n                this.logService.info('Task unclaimed');\n                this.unclaim.emit(taskId);\n            });\n    }\n/**\n * Returns true if the task is completed\n * @return {?}\n */\nisCompleted(): boolean {\n        return this.taskDetails && !!this.taskDetails.endDate;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'adf-task-header',\n    template: `\n      <mat-card *ngIf=\"taskDetails\" class=\"adf-card-container\">\n          <mat-card-content>\n              <adf-card-view [properties]=\"properties\" [editable]=\"!isCompleted()\"></adf-card-view>\n          </mat-card-content>\n\n          <mat-card-actions class=\"adf-controls\">\n              <button *ngIf=\"isTaskClaimedByCandidateMember()\" mat-button data-automation-id=\"header-unclaim-button\" id=\"unclaim-task\" (click)=\"unclaimTask(taskDetails.id)\" class=\"adf-claim-controls\">{{ 'ADF_TASK_LIST.DETAILS.BUTTON.UNCLAIM' | translate }}\n              </button>\n              <button *ngIf=\"isTaskClaimable()\" mat-button data-automation-id=\"header-claim-button\" id=\"claim-task\" (click)=\"claimTask(taskDetails.id)\" class=\"adf-claim-controls\">{{ 'ADF_TASK_LIST.DETAILS.BUTTON.CLAIM' | translate }}\n              </button>\n          </mat-card-actions>\n      </mat-card>\n    `,\n    styles: [`\n\n    `]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: TaskListService, },\n{type: BpmUserService, },\n{type: LogService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'formName': [{ type: Input },],\n'taskDetails': [{ type: Input },],\n'claim': [{ type: Output },],\n'unclaim': [{ type: Output },],\n};\n}\n\nfunction TaskHeaderComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nTaskHeaderComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTaskHeaderComponent.ctorParameters;\n/** @type {?} */\nTaskHeaderComponent.propDecorators;\n/** @type {?} */\nTaskHeaderComponent.prototype.formName;\n/** @type {?} */\nTaskHeaderComponent.prototype.taskDetails;\n/** @type {?} */\nTaskHeaderComponent.prototype.claim;\n/** @type {?} */\nTaskHeaderComponent.prototype.unclaim;\n/** @type {?} */\nTaskHeaderComponent.prototype.currentUserId;\n/** @type {?} */\nTaskHeaderComponent.prototype.properties;\n/** @type {?} */\nTaskHeaderComponent.prototype.inEdit;\n/** @type {?} */\nTaskHeaderComponent.prototype.activitiTaskService;\n/** @type {?} */\nTaskHeaderComponent.prototype.bpmUserService;\n/** @type {?} */\nTaskHeaderComponent.prototype.logService;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { AppsProcessService } from '@alfresco/adf-core';\nimport { Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\nimport { FilterParamsModel, FilterRepresentationModel } from '../models/filter.model';\nimport { TaskFilterService } from './../services/task-filter.service';\nimport { TaskListService } from './../services/tasklist.service';\nexport class TaskFiltersComponent implements OnInit, OnChanges {\n\n    \n    filterParam: FilterParamsModel;\n\n    \n    filterClick: EventEmitter<FilterRepresentationModel> = new EventEmitter<FilterRepresentationModel>();\n\n    \n    success: EventEmitter<any> = new EventEmitter<any>();\n\n    \n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    \n    appId: number;\n\n    \n    appName: string;\n\n    \n    hasIcon: boolean = true;\nprivate filterObserver: Observer<FilterRepresentationModel>;\n    filter$: Observable<FilterRepresentationModel>;\n\n    currentFilter: FilterRepresentationModel;\n\n    filters: FilterRepresentationModel [] = [];\n/**\n * @param {?} taskFilterService\n * @param {?} taskListService\n * @param {?} appsProcessService\n */\nconstructor(private taskFilterService: TaskFilterService,\nprivate taskListService: TaskListService,\nprivate appsProcessService: AppsProcessService) {\n        this.filter$ = new Observable<FilterRepresentationModel>(observer => this.filterObserver = observer).share();\n    }\n/**\n * @return {?}\n */\nngOnInit() {\n        this.filter$.subscribe((filter: FilterRepresentationModel) => {\n            this.filters.push(filter);\n        });\n    }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n        let /** @type {?} */ appId = changes['appId'];\n        if (appId && (appId.currentValue || appId.currentValue === null)) {\n            this.getFiltersByAppId(appId.currentValue);\n            return;\n        }\n        let /** @type {?} */ appName = changes['appName'];\n        if (appName && appName !== null && appName.currentValue) {\n            this.getFiltersByAppName(appName.currentValue);\n            return;\n        }\n\n        this.getFiltersByAppId();\n    }\n/**\n * Return the task list filtered by appId or by appName\n * @param {?=} appId\n * @param {?=} appName\n * @return {?}\n */\ngetFilters(appId?: number, appName?: string) {\n        if (appName) {\n            this.getFiltersByAppName(appName);\n        } else {\n            this.getFiltersByAppId(appId);\n        }\n    }\n/**\n * Return the filter list filtered by appId\n * @param {?=} appId - optional\n * @return {?}\n */\ngetFiltersByAppId(appId?: number) {\n        this.taskFilterService.getTaskListFilters(appId).subscribe(\n            (res: FilterRepresentationModel[]) => {\n                if (res.length === 0 && this.isFilterListEmpty()) {\n                    this.taskFilterService.createDefaultFilters(appId).subscribe(\n                        (resDefault: FilterRepresentationModel[]) => {\n                            this.resetFilter();\n                            resDefault.forEach((filter) => {\n                                this.filterObserver.next(filter);\n                            });\n\n                            this.selectTaskFilter(this.filterParam, this.filters);\n                            this.success.emit(resDefault);\n                        },\n                        (errDefault: any) => {\n                            this.error.emit(errDefault);\n                        }\n                    );\n                } else {\n                    this.resetFilter();\n                    res.forEach((filter) => {\n                        this.filterObserver.next(filter);\n                    });\n\n                    this.selectTaskFilter(this.filterParam, this.filters);\n                    this.success.emit(res);\n                }\n            },\n            (err: any) => {\n                this.error.emit(err);\n            }\n        );\n    }\n/**\n * Return the filter list filtered by appName\n * @param {?} appName\n * @return {?}\n */\ngetFiltersByAppName(appName: string) {\n        this.appsProcessService.getDeployedApplicationsByName(appName).subscribe(\n            application => {\n                this.getFiltersByAppId(application.id);\n                this.selectTaskFilter(this.filterParam, this.filters);\n            },\n            (err) => {\n                this.error.emit(err);\n            });\n    }\n/**\n * Pass the selected filter as next\n * @param {?} filter\n * @return {?}\n */\npublic selectFilter(filter: FilterRepresentationModel) {\n        this.currentFilter = filter;\n        this.filterClick.emit(filter);\n    }\n/**\n * @param {?} taskId\n * @return {?}\n */\npublic selectFilterWithTask(taskId: string) {\n        let /** @type {?} */ filteredFilterList: FilterRepresentationModel[] = [];\n        this.taskListService.getFilterForTaskById(taskId, this.filters).subscribe(\n            (filter: FilterRepresentationModel) => {\n                filteredFilterList.push(filter);\n            },\n            (err) => {\n                this.error.emit(err);\n            },\n            () => {\n                if (filteredFilterList.length > 0) {\n                    this.selectTaskFilter(new FilterParamsModel({name: 'My Tasks'}), filteredFilterList);\n                    this.filterClick.emit(this.currentFilter);\n                }\n            });\n    }\n/**\n * Select the first filter of a list if present\n * @param {?} filterParam\n * @param {?} filteredFilterList\n * @return {?}\n */\npublic selectTaskFilter(filterParam: FilterParamsModel, filteredFilterList: FilterRepresentationModel[]) {\n        let /** @type {?} */ findTaskFilter;\n        if (filterParam) {\n            filteredFilterList.filter((taskFilter: FilterRepresentationModel, index) => {\n                if (filterParam.name && filterParam.name.toLowerCase() === taskFilter.name.toLowerCase() ||\n                    filterParam.id === taskFilter.id.toString()\n                    || filterParam.index === index) {\n                    findTaskFilter = taskFilter;\n                }\n            });\n        }\n        if (findTaskFilter) {\n            this.currentFilter = findTaskFilter;\n        } else {\n             this.selectDefaultTaskFilter(filteredFilterList);\n        }\n    }\n/**\n * Select as default task filter the first in the list\n * @param {?} filteredFilterList\n * @return {?}\n */\npublic selectDefaultTaskFilter(filteredFilterList: FilterRepresentationModel[]) {\n        if (!this.isFilterListEmpty()) {\n            this.currentFilter = this.filters[0];\n        }\n    }\n/**\n * Return the current task\n * @return {?}\n */\ngetCurrentFilter(): FilterRepresentationModel {\n        return this.currentFilter;\n    }\n/**\n * Check if the filter list is empty\n * @return {?}\n */\nisFilterListEmpty(): boolean {\n        return this.filters === undefined || (this.filters && this.filters.length === 0);\n    }\n/**\n * Reset the filters properties\n * @return {?}\n */\nprivate resetFilter() {\n        this.filters = [];\n        this.currentFilter = undefined;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'adf-filters, taskListService-filters',\n    template: `\n      <div class=\"menu-container\">\n          <mat-list>\n              <mat-list-item (click)=\"selectFilter(filter)\" *ngFor=\"let filter of filters\"\n                            class=\"adf-filters__entry\" [class.active]=\"currentFilter === filter\">\n                  <mat-icon *ngIf=\"hasIcon\" matListIcon class=\"adf-filters__entry-icon\">assignment</mat-icon>\n                  <span matLine [attr.data-automation-id]=\"filter.name + '_filter'\">{{filter.name}}</span>\n              </mat-list-item>\n          </mat-list>\n      </div>\n    `,\n    styles: [`\n\n    `]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: TaskFilterService, },\n{type: TaskListService, },\n{type: AppsProcessService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'filterParam': [{ type: Input },],\n'filterClick': [{ type: Output },],\n'success': [{ type: Output },],\n'error': [{ type: Output },],\n'appId': [{ type: Input },],\n'appName': [{ type: Input },],\n'hasIcon': [{ type: Input },],\n};\n}\n\nfunction TaskFiltersComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nTaskFiltersComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTaskFiltersComponent.ctorParameters;\n/** @type {?} */\nTaskFiltersComponent.propDecorators;\n/** @type {?} */\nTaskFiltersComponent.prototype.filterParam;\n/** @type {?} */\nTaskFiltersComponent.prototype.filterClick;\n/** @type {?} */\nTaskFiltersComponent.prototype.success;\n/** @type {?} */\nTaskFiltersComponent.prototype.error;\n/** @type {?} */\nTaskFiltersComponent.prototype.appId;\n/** @type {?} */\nTaskFiltersComponent.prototype.appName;\n/** @type {?} */\nTaskFiltersComponent.prototype.hasIcon;\n/** @type {?} */\nTaskFiltersComponent.prototype.filterObserver;\n/** @type {?} */\nTaskFiltersComponent.prototype.filter$;\n/** @type {?} */\nTaskFiltersComponent.prototype.currentFilter;\n/** @type {?} */\nTaskFiltersComponent.prototype.filters;\n/** @type {?} */\nTaskFiltersComponent.prototype.taskFilterService;\n/** @type {?} */\nTaskFiltersComponent.prototype.taskListService;\n/** @type {?} */\nTaskFiltersComponent.prototype.appsProcessService;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { ContentService } from '@alfresco/adf-core';\nimport { Directive, EventEmitter, Input, OnChanges, Output, SimpleChanges } from '@angular/core';\nimport { TaskListService } from './../services/tasklist.service';\n\nconst /** @type {?} */ JSON_FORMAT: string = 'json';\nconst /** @type {?} */ PDF_FORMAT: string = 'pdf';\nexport class TaskAuditDirective implements OnChanges {\n\n    \n    taskId: string;\n\n    \n    fileName: string = 'Audit';\n\n    \n    format: string = 'pdf';\n\n    \n    download: boolean = true;\n\n    \n    clicked: EventEmitter<any> = new EventEmitter<any>();\n\n    \n    error: EventEmitter<any> = new EventEmitter<any>();\npublic audit: any;\n/**\n *\n * @param {?} contentService\n * @param {?} taskListService\n */\nconstructor(private contentService: ContentService,\nprivate taskListService: TaskListService) {\n    }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges): void {\n        if (!this.isValidType()) {\n            this.setDefaultFormatType();\n        }\n    }\n/**\n * @return {?}\n */\nisValidType() {\n        if (this.format && (this.isJsonFormat() || this.isPdfFormat())) {\n            return true;\n        }\n        return false;\n    }\n/**\n * @return {?}\n */\nsetDefaultFormatType(): void {\n        this.format = PDF_FORMAT;\n    }\n/**\n * fetch the audit information in the requested format\n * @return {?}\n */\nfetchAuditInfo(): void {\n        if (this.isPdfFormat()) {\n            this.taskListService.fetchTaskAuditPdfById(this.taskId).subscribe(\n                (blob: Blob) => {\n                    this.audit = blob;\n                    if (this.download) {\n                        this.contentService.downloadBlob(this.audit, this.fileName + '.pdf');\n                    }\n                    this.clicked.emit({ format: this.format, value: this.audit, fileName: this.fileName });\n                },\n                (err) => {\n                    this.error.emit(err);\n                });\n        } else {\n            this.taskListService.fetchTaskAuditJsonById(this.taskId).subscribe(\n                (res) => {\n                    this.audit = res;\n                    this.clicked.emit({ format: this.format, value: this.audit, fileName: this.fileName });\n                },\n                (err) => {\n                    this.error.emit(err);\n                });\n        }\n    }\n/**\n * @return {?}\n */\nonClickAudit() {\n        this.fetchAuditInfo();\n    }\n/**\n * @return {?}\n */\nisJsonFormat() {\n        return this.format === JSON_FORMAT;\n    }\n/**\n * @return {?}\n */\nisPdfFormat() {\n        return this.format === PDF_FORMAT;\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'button[adf-task-audit]',\n    host: {\n        'role': 'button',\n        '(click)': 'onClickAudit()'\n    }\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ContentService, },\n{type: TaskListService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'taskId': [{ type: Input, args: ['task-id', ] },],\n'fileName': [{ type: Input },],\n'format': [{ type: Input },],\n'download': [{ type: Input },],\n'clicked': [{ type: Output },],\n'error': [{ type: Output },],\n};\n}\n\nfunction TaskAuditDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nTaskAuditDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTaskAuditDirective.ctorParameters;\n/** @type {?} */\nTaskAuditDirective.propDecorators;\n/** @type {?} */\nTaskAuditDirective.prototype.taskId;\n/** @type {?} */\nTaskAuditDirective.prototype.fileName;\n/** @type {?} */\nTaskAuditDirective.prototype.format;\n/** @type {?} */\nTaskAuditDirective.prototype.download;\n/** @type {?} */\nTaskAuditDirective.prototype.clicked;\n/** @type {?} */\nTaskAuditDirective.prototype.error;\n/** @type {?} */\nTaskAuditDirective.prototype.audit;\n/** @type {?} */\nTaskAuditDirective.prototype.contentService;\n/** @type {?} */\nTaskAuditDirective.prototype.taskListService;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n *\n * This object represent of the StartTaskModel.\n *\n *\n * @returns {StartTaskModel} .\n */\n\nimport { UserProcessModel } from '@alfresco/adf-core';\nexport class StartTaskModel {\n\n    name: string;\n    description: string;\n    assignee: UserProcessModel;\n    dueDate: any;\n    formKey: any;\n    category: string;\n/**\n * @param {?=} obj\n */\nconstructor(obj?: any) {\n        this.name = obj && obj.name || null;\n        this.description = obj && obj.description || null;\n        this.assignee = obj && obj.assignee ? new UserProcessModel(obj.assignee) : null;\n        this.dueDate = obj && obj.dueDate || null;\n        this.formKey = obj && obj.formKey || null;\n        this.category = obj && obj.category || null;\n    }\n}\n\nfunction StartTaskModel_tsickle_Closure_declarations() {\n/** @type {?} */\nStartTaskModel.prototype.name;\n/** @type {?} */\nStartTaskModel.prototype.description;\n/** @type {?} */\nStartTaskModel.prototype.assignee;\n/** @type {?} */\nStartTaskModel.prototype.dueDate;\n/** @type {?} */\nStartTaskModel.prototype.formKey;\n/** @type {?} */\nStartTaskModel.prototype.category;\n}\n\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { LogService, PeopleProcessService, UserPreferencesService, UserProcessModel } from '@alfresco/adf-core';\nimport { Component, EventEmitter, Input, OnInit, Output, ViewEncapsulation } from '@angular/core';\nimport { DateAdapter, MAT_DATE_FORMATS } from '@angular/material/core';\nimport { MOMENT_DATE_FORMATS, MomentDateAdapter } from '@alfresco/adf-core';\nimport moment from 'moment-es6';\nimport { Moment } from 'moment';\nimport { Observable } from 'rxjs/Observable';\nimport { Form } from '../models/form.model';\nimport { StartTaskModel } from '../models/start-task.model';\nimport { TaskDetailsModel } from '../models/task-details.model';\nimport { TaskListService } from './../services/tasklist.service';\nexport class StartTaskComponent implements OnInit {\npublic FORMAT_DATE: string = 'DD/MM/YYYY';\n\n    \n    appId: number;\n\n    \n    success: EventEmitter<any> = new EventEmitter<any>();\n\n    \n    cancel: EventEmitter<void> = new EventEmitter<void>();\n\n    \n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    people: UserProcessModel[] = [];\n\n    startTaskmodel: StartTaskModel = new StartTaskModel();\n\n    forms: Form[];\n\n    assigneeId: number;\n\n    formKey: number;\n\n    taskId: string;\n\n    dateError: boolean;\n/**\n * Constructor\n * @param {?} taskService\n * @param {?} peopleService\n * @param {?} dateAdapter\n * @param {?} preferences\n * @param {?} logService\n */\nconstructor(private taskService: TaskListService,\nprivate peopleService: PeopleProcessService,\nprivate dateAdapter: DateAdapter<Moment>,\nprivate preferences: UserPreferencesService,\nprivate logService: LogService) {\n    }\n/**\n * @return {?}\n */\nngOnInit() {\n        this.preferences.locale$.subscribe((locale) => {\n            this.dateAdapter.setLocale(locale);\n        });\n        this.loadFormsTask();\n        this.getUsers();\n    }\n/**\n * @return {?}\n */\npublic start(): void {\n        if (this.startTaskmodel.name) {\n            if (this.appId) {\n                this.startTaskmodel.category = this.appId.toString();\n            }\n            this.taskService.createNewTask(new TaskDetailsModel(this.startTaskmodel))\n                .switchMap((createRes: any) =>\n                    this.attachForm(createRes.id, this.formKey).defaultIfEmpty(createRes)\n                        .switchMap((attachRes: any) =>\n                            this.assignTaskByUserId(createRes.id, this.assigneeId).defaultIfEmpty(attachRes ? attachRes : createRes)\n                        )\n                )\n                .subscribe(\n                    (res: any) => {\n                        this.success.emit(res);\n                    },\n                    (err) => {\n                        this.error.emit(err);\n                        this.logService.error('An error occurred while creating new task');\n                    });\n        }\n    }\n/**\n * @param {?} taskId\n * @param {?} formKey\n * @return {?}\n */\nprivate attachForm(taskId: string, formKey: number): Observable<any> {\n        let /** @type {?} */ response = Observable.of();\n        if (taskId && formKey) {\n            response = this.taskService.attachFormToATask(taskId, formKey);\n        }\n        return response;\n    }\n/**\n * @param {?} taskId\n * @param {?} userId\n * @return {?}\n */\nprivate assignTaskByUserId(taskId: string, userId: any): Observable<any> {\n        let /** @type {?} */ response = Observable.of();\n        if (taskId && userId) {\n            response = this.taskService.assignTaskByUserId(taskId, userId);\n        }\n        return response;\n    }\n/**\n * @return {?}\n */\npublic onCancel(): void {\n        this.cancel.emit();\n    }\n/**\n * @return {?}\n */\nprivate loadFormsTask(): void {\n        this.taskService.getFormList().subscribe((res: Form[]) => {\n                this.forms = res;\n            },\n            (err) => {\n                this.error.emit(err);\n                this.logService.error('An error occurred while trying to get the forms');\n            });\n    }\n/**\n * @return {?}\n */\nprivate getUsers(): void {\n        this.peopleService.getWorkflowUsers().subscribe((users) => {\n            this.people = users;\n        }, (err) => {\n            this.error.emit(err);\n            this.logService.error('Could not load users');\n        });\n    }\n/**\n * @param {?} user\n * @return {?}\n */\npublic isUserNameEmpty(user: UserProcessModel): boolean {\n        return !user || (this.isEmpty(user.firstName) && this.isEmpty(user.lastName));\n    }\n/**\n * @param {?} data\n * @return {?}\n */\nprivate isEmpty(data: string): boolean {\n        return data === undefined || data === null || data.trim().length === 0;\n    }\n/**\n * @param {?} firstName\n * @param {?} lastName\n * @param {?=} delimiter\n * @return {?}\n */\npublic getDisplayUser(firstName: string, lastName: string, delimiter: string = '-'): string {\n        firstName = (firstName !== null ? firstName : '');\n        lastName = (lastName !== null ? lastName : '');\n        return firstName + delimiter + lastName;\n    }\n/**\n * @param {?} newDateValue\n * @return {?}\n */\nonDateChanged(newDateValue): void {\n        this.dateError = false;\n\n        if (newDateValue) {\n            let /** @type {?} */ momentDate = moment(newDateValue, this.FORMAT_DATE, true);\n            if (!momentDate.isValid()) {\n                this.dateError = true;\n            }\n        }\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'adf-start-task',\n    template: `\n      <mat-card class=\"adf-new-task-layout-card\">\n          <mat-grid-list cols=\"1\" rowHeight=\"60px\">\n              <mat-grid-tile>\n                  <div class=\"adf-new-task-heading\">{{'ADF_TASK_LIST.START_TASK.FORM.TITLE'|translate}}</div>\n              </mat-grid-tile>\n          </mat-grid-list>\n          <mat-card-content>\n              <mat-grid-list cols=\"1\" rowHeight=\"80px\">\n                  <mat-grid-tile>\n                      <mat-form-field class=\"adf-new-task-text-width\">\n                          <input matInput placeholder=\"{{'ADF_TASK_LIST.START_TASK.FORM.LABEL.NAME'|translate}}\"\n                                 [(ngModel)]=\"startTaskmodel.name\" required id=\"name_id\">\n                      </mat-form-field>\n                  </mat-grid-tile>\n              </mat-grid-list>\n              <mat-grid-list cols=\"1\" rowHeight=\"80px\">\n                  <mat-grid-tile>\n                      <mat-form-field class=\"adf-new-task-text-width\">\n                          <textarea matInput placeholder=\"{{'ADF_TASK_LIST.START_TASK.FORM.LABEL.DESCRIPTION'|translate}}\"\n                                    [(ngModel)]=\"startTaskmodel.description\" id=\"description_id\"></textarea>\n                      </mat-form-field>\n                  </mat-grid-tile>\n              </mat-grid-list>\n              <mat-grid-list cols=\"2\" rowHeight=\"80px\">\n                  <mat-grid-tile>\n                      <mat-form-field class=\"adf-start-task-input-container\">\n                          <input matInput\n                                 [matDatepicker]=\"taskDatePicker\"\n                                 (keydown)=\"true\"\n                                 (focusout)=\"onDateChanged($event.srcElement.value)\"\n                                 placeholder=\"{{'ADF_TASK_LIST.START_TASK.FORM.LABEL.DATE'|translate}}\"\n                                 [(ngModel)]=\"startTaskmodel.dueDate\" id=\"date_id\">\n                          <mat-datepicker-toggle matSuffix [for]=\"taskDatePicker\"></mat-datepicker-toggle>\n                      </mat-form-field>\n                      <mat-datepicker #taskDatePicker [touchUi]=\"true\"\n                                     (dateChanged)=\"onDateChanged($event)\"></mat-datepicker>\n                      <div class=\"adf-error-text-container\">\n                          <div *ngIf=\"dateError\">\n                              <div class=\"adf-error-text\">{{'ADF_TASK_LIST.START_TASK.FORM.DATE.ERROR'|translate}}</div>\n                              <mat-icon class=\"adf-error-icon\">warning</mat-icon>\n                          </div>\n                      </div>\n                  </mat-grid-tile>\n                  <mat-grid-tile>\n                    <mat-form-field class=\"adf-start-task-input-container\">\n                      <mat-select placeholder=\"{{'ADF_TASK_LIST.START_TASK.FORM.LABEL.ASSIGNEE'|translate}}\" id=\"assignee_id\"\n                                 class=\"adf-mat-select\" [(ngModel)]=\"assigneeId\">\n                          <mat-option>{{'ADF_TASK_LIST.START_TASK.FORM.LABEL.NONE'|translate}}</mat-option>\n                          <span *ngFor=\"let user of people\">\n                              <mat-option [value]=\"user.id\" *ngIf=\"!isUserNameEmpty(user)\">{{ getDisplayUser(user.firstName,\n                                  user.lastName, ' ')}}\n                              </mat-option>\n                          </span>\n                      </mat-select>\n                    </mat-form-field>\n                  </mat-grid-tile>\n              </mat-grid-list>\n              <mat-grid-list cols=\"2\" rowHeight=\"80px\">\n                  <mat-grid-tile>\n                      <mat-form-field class=\"adf-start-task-input-container\">\n                          <mat-select placeholder=\"{{'ADF_TASK_LIST.START_TASK.FORM.LABEL.FORM'|translate}}\" id=\"form_id\" [(ngModel)]=\"formKey\">\n                              <mat-option>{{'ADF_TASK_LIST.START_TASK.FORM.LABEL.NONE'|translate}}</mat-option>\n                              <mat-option *ngFor=\"let form of forms\" [value]=\"form.id\">{{ form.name }}</mat-option>\n                          </mat-select>\n                      </mat-form-field>\n                  </mat-grid-tile>\n                  <mat-grid-tile></mat-grid-tile>\n              </mat-grid-list>\n          </mat-card-content>\n          <mat-card-actions>\n              <mat-grid-list cols=\"1\" rowHeight=\"60px\">\n                  <mat-grid-tile>\n                      <div class=\"adf-new-task-footer\">\n                          <button mat-button (click)=\"onCancel()\" id=\"button-cancle\">\n                              {{'ADF_TASK_LIST.START_TASK.FORM.ACTION.CANCEL'|translate}}\n                          </button>\n                          <button mat-button [disabled]=\"!startTaskmodel.name || dateError\" (click)=\"start()\" id=\"button-start\">\n                              {{'ADF_TASK_LIST.START_TASK.FORM.ACTION.START'|translate}}\n                          </button>\n                      </div>\n                  </mat-grid-tile>\n              </mat-grid-list>\n          </mat-card-actions>\n      </mat-card>\n    `,\n    styles: [`\n\n    `],\n    providers: [\n        { provide: DateAdapter, useClass: MomentDateAdapter },\n        { provide: MAT_DATE_FORMATS, useValue: MOMENT_DATE_FORMATS }],\n    encapsulation: ViewEncapsulation.None\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: TaskListService, },\n{type: PeopleProcessService, },\n{type: DateAdapter, },\n{type: UserPreferencesService, },\n{type: LogService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'appId': [{ type: Input },],\n'success': [{ type: Output },],\n'cancel': [{ type: Output },],\n'error': [{ type: Output },],\n};\n}\n\nfunction StartTaskComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nStartTaskComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStartTaskComponent.ctorParameters;\n/** @type {?} */\nStartTaskComponent.propDecorators;\n/** @type {?} */\nStartTaskComponent.prototype.FORMAT_DATE;\n/** @type {?} */\nStartTaskComponent.prototype.appId;\n/** @type {?} */\nStartTaskComponent.prototype.success;\n/** @type {?} */\nStartTaskComponent.prototype.cancel;\n/** @type {?} */\nStartTaskComponent.prototype.error;\n/** @type {?} */\nStartTaskComponent.prototype.people;\n/** @type {?} */\nStartTaskComponent.prototype.startTaskmodel;\n/** @type {?} */\nStartTaskComponent.prototype.forms;\n/** @type {?} */\nStartTaskComponent.prototype.assigneeId;\n/** @type {?} */\nStartTaskComponent.prototype.formKey;\n/** @type {?} */\nStartTaskComponent.prototype.taskId;\n/** @type {?} */\nStartTaskComponent.prototype.dateError;\n/** @type {?} */\nStartTaskComponent.prototype.taskService;\n/** @type {?} */\nStartTaskComponent.prototype.peopleService;\n/** @type {?} */\nStartTaskComponent.prototype.dateAdapter;\n/** @type {?} */\nStartTaskComponent.prototype.preferences;\n/** @type {?} */\nStartTaskComponent.prototype.logService;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport {\n    AfterContentInit,\n    ContentChild,\n    Directive,\n    TemplateRef\n} from '@angular/core';\nimport { TaskDetailsComponent } from './task-details.component';\nexport class NoTaskDetailsTemplateDirective implements AfterContentInit {\n\n    \n    template: any;\n/**\n * @param {?} activitiTaskDetails\n */\nconstructor(\nprivate activitiTaskDetails: TaskDetailsComponent) {\n    }\n/**\n * @return {?}\n */\nngAfterContentInit() {\n        this.activitiTaskDetails.noTaskDetailsTemplateComponent = this.template;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: 'no-task-details-template'\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: TaskDetailsComponent, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'template': [{ type: ContentChild, args: [TemplateRef, ] },],\n};\n}\n\nfunction NoTaskDetailsTemplateDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nNoTaskDetailsTemplateDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNoTaskDetailsTemplateDirective.ctorParameters;\n/** @type {?} */\nNoTaskDetailsTemplateDirective.propDecorators;\n/** @type {?} */\nNoTaskDetailsTemplateDirective.prototype.template;\n/** @type {?} */\nNoTaskDetailsTemplateDirective.prototype.activitiTaskDetails;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { PeopleProcessService, UserProcessModel } from '@alfresco/adf-core';\nimport { AuthenticationService, CardViewUpdateService, ClickNotification, LogService, UpdateNotification } from '@alfresco/adf-core';\nimport { Component,\n    EventEmitter,\n    Input,\n    OnChanges,\n    OnInit,\n    Output,\n    SimpleChanges,\n    TemplateRef,\n    ViewChild\n} from '@angular/core';\nimport { MatDialog, MatDialogRef } from '@angular/material';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\nimport { ContentLinkModel, FormFieldValidator, FormModel, FormOutcomeEvent } from '@alfresco/adf-core';\nimport { TaskQueryRequestRepresentationModel } from '../models/filter.model';\nimport { TaskDetailsModel } from '../models/task-details.model';\nimport { TaskListService } from './../services/tasklist.service';\nimport { CommentsComponent } from '../../comments';\nexport class TaskDetailsComponent implements OnInit, OnChanges {\n\n    \n    activiticomments: CommentsComponent;\n\n    \n    activitichecklist: any;\n\n    \n    errorDialog: TemplateRef<any>;\n\n    \n    debugMode: boolean = false;\n\n    \n    taskId: string;\n\n    \n    showNextTask: boolean = true;\n\n    \n    showHeader: boolean = true;\n\n    \n    showHeaderContent: boolean = true;\n\n    \n    showInvolvePeople: boolean = true;\n\n    \n    showComments: boolean = true;\n\n    \n    showChecklist: boolean = true;\n\n    \n    showFormTitle: boolean = true;\n\n    \n    showFormCompleteButton: boolean = true;\n\n    \n    showFormSaveButton: boolean = true;\n\n    \n    readOnlyForm: boolean = false;\n\n    \n    showFormRefreshButton: boolean = true;\n\n    \n    fieldValidators: FormFieldValidator[] = [];\n\n    \n    formSaved: EventEmitter<FormModel> = new EventEmitter<FormModel>();\n\n    \n    formCompleted: EventEmitter<FormModel> = new EventEmitter<FormModel>();\n\n    \n    formContentClicked: EventEmitter<ContentLinkModel> = new EventEmitter<ContentLinkModel>();\n\n    \n    formLoaded: EventEmitter<FormModel> = new EventEmitter<FormModel>();\n\n    \n    taskCreated: EventEmitter<TaskDetailsModel> = new EventEmitter<TaskDetailsModel>();\n\n    \n    taskDeleted: EventEmitter<string> = new EventEmitter<string>();\n\n    \n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    \n    executeOutcome: EventEmitter<FormOutcomeEvent> = new EventEmitter<FormOutcomeEvent>();\n\n    \n    assignTask: EventEmitter<void> = new EventEmitter<void>();\n\n    taskDetails: TaskDetailsModel;\n    taskFormName: string = null;\n\n    taskPeople: UserProcessModel[] = [];\n\n    noTaskDetailsTemplateComponent: TemplateRef<any>;\n\n    showAssignee: boolean = false;\nprivate peopleSearchObserver: Observer<UserProcessModel[]>;\npublic errorDialogRef: MatDialogRef<TemplateRef<any>>;\n\n    peopleSearch$: Observable<UserProcessModel[]>;\n/**\n * @param {?} taskListService\n * @param {?} authService\n * @param {?} peopleProcessService\n * @param {?} logService\n * @param {?} cardViewUpdateService\n * @param {?} dialog\n */\nconstructor(private taskListService: TaskListService,\nprivate authService: AuthenticationService,\nprivate peopleProcessService: PeopleProcessService,\nprivate logService: LogService,\nprivate cardViewUpdateService: CardViewUpdateService,\nprivate dialog: MatDialog) {\n        this.peopleSearch$ = new Observable<UserProcessModel[]>(observer => this.peopleSearchObserver = observer).share();\n    }\n/**\n * @return {?}\n */\nngOnInit() {\n        if (this.taskId) {\n            this.loadDetails(this.taskId);\n        }\n\n        this.cardViewUpdateService.itemUpdated$.subscribe(this.updateTaskDetails.bind(this));\n        this.cardViewUpdateService.itemClicked$.subscribe(this.clickTaskDetails.bind(this));\n    }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges): void {\n        let /** @type {?} */ taskId = changes.taskId;\n        this.showAssignee = false;\n\n        if (taskId && !taskId.currentValue) {\n            this.reset();\n        } else if (taskId && taskId.currentValue) {\n            this.taskFormName = null;\n            this.loadDetails(taskId.currentValue);\n        }\n    }\n/**\n * Reset the task details\n * @return {?}\n */\nprivate reset() {\n        this.taskDetails = null;\n    }\n/**\n * Check if the task has a form\n * @return {?}\n */\nhasFormKey() {\n        return (this.taskDetails\n        && this.taskDetails.formKey\n        && this.taskDetails.formKey !== 'null');\n    }\n/**\n * @return {?}\n */\nisTaskActive() {\n        return this.taskDetails && this.taskDetails.duration === null;\n    }\n/**\n * Save a task detail and update it after a successful response\n * \n * @param {?} updateNotification\n * @return {?}\n */\nprivate updateTaskDetails(updateNotification: UpdateNotification) {\n        this.taskListService.updateTask(this.taskId, updateNotification.changed)\n            .subscribe(\n                () => {\n                    this.loadDetails(this.taskId);\n                }\n            );\n    }\n/**\n * @param {?} clickNotification\n * @return {?}\n */\nprivate clickTaskDetails(clickNotification: ClickNotification) {\n        if (clickNotification.target.key === 'assignee') {\n            this.showAssignee = true;\n        }\n    }\n/**\n * Load the activiti task details\n * @param {?} taskId\n * @return {?}\n */\nprivate loadDetails(taskId: string) {\n        this.taskPeople = [];\n        this.readOnlyForm = false;\n\n        if (taskId) {\n            this.taskListService.getTaskDetails(taskId).subscribe(\n                (res: TaskDetailsModel) => {\n                    this.taskDetails = res;\n\n                    if (this.taskDetails.name === 'null') {\n                        this.taskDetails.name = 'No name';\n                    }\n\n                    let /** @type {?} */ endDate: any = res.endDate;\n                    this.readOnlyForm = this.readOnlyForm ? this.readOnlyForm : !!(endDate && !isNaN(endDate.getTime()));\n                    if (this.taskDetails && this.taskDetails.involvedPeople) {\n                        this.taskDetails.involvedPeople.forEach((user) => {\n                            this.taskPeople.push(new UserProcessModel(user));\n                        });\n                    }\n                });\n        }\n    }\n/**\n * @return {?}\n */\nisAssigned(): boolean {\n        return this.taskDetails.assignee ? true : false;\n    }\n/**\n * @return {?}\n */\nisAssignedToMe(): boolean {\n        return this.taskDetails.assignee.email === this.authService.getBpmUsername();\n    }\n/**\n * Retrieve the next open task\n * @param {?} processInstanceId\n * @param {?} processDefinitionId\n * @return {?}\n */\nprivate loadNextTask(processInstanceId: string, processDefinitionId: string): void {\n        let /** @type {?} */ requestNode = new TaskQueryRequestRepresentationModel(\n            {\n                processInstanceId: processInstanceId,\n                processDefinitionId: processDefinitionId\n            }\n        );\n        this.taskListService.getTasks(requestNode).subscribe(\n            (response) => {\n                if (response && response.length > 0) {\n                    this.taskDetails = new TaskDetailsModel(response[0]);\n                } else {\n                    this.reset();\n                }\n            }, (error) => {\n                this.error.emit(error);\n            });\n    }\n/**\n * Complete button clicked\n * @return {?}\n */\nonComplete(): void {\n        this.taskListService.completeTask(this.taskId).subscribe(\n            (res) => this.onFormCompleted(null)\n        );\n    }\n/**\n * @param {?} content\n * @return {?}\n */\nonFormContentClick(content: ContentLinkModel): void {\n        this.formContentClicked.emit(content);\n    }\n/**\n * @param {?} form\n * @return {?}\n */\nonFormSaved(form: FormModel): void {\n        this.formSaved.emit(form);\n    }\n/**\n * @param {?} form\n * @return {?}\n */\nonFormCompleted(form: FormModel): void {\n        this.formCompleted.emit(form);\n        if (this.showNextTask && (this.taskDetails.processInstanceId || this.taskDetails.processDefinitionId)) {\n            this.loadNextTask(this.taskDetails.processInstanceId, this.taskDetails.processDefinitionId);\n        }\n    }\n/**\n * @param {?} form\n * @return {?}\n */\nonFormLoaded(form: FormModel): void {\n        this.taskFormName = (form && form.name ? form.name : null);\n        this.formLoaded.emit(form);\n    }\n/**\n * @param {?} task\n * @return {?}\n */\nonChecklistTaskCreated(task: TaskDetailsModel): void {\n        this.taskCreated.emit(task);\n    }\n/**\n * @param {?} taskId\n * @return {?}\n */\nonChecklistTaskDeleted(taskId: string): void {\n        this.taskDeleted.emit(taskId);\n    }\n/**\n * @param {?} error\n * @return {?}\n */\nonFormError(error: any): void {\n        this.errorDialogRef = this.dialog.open(this.errorDialog, {width: '500px'});\n        this.error.emit(error);\n    }\n/**\n * @param {?} event\n * @return {?}\n */\nonFormExecuteOutcome(event: FormOutcomeEvent): void {\n        this.executeOutcome.emit(event);\n    }\n/**\n * @return {?}\n */\ncloseErrorDialog(): void {\n        this.dialog.closeAll();\n    }\n/**\n * @param {?} taskId\n * @return {?}\n */\nonClaimAction(taskId: string): void {\n        this.loadDetails(taskId);\n    }\n/**\n * @return {?}\n */\ntoggleHeaderContent(): void {\n        this.showHeaderContent = !this.showHeaderContent;\n    }\n/**\n * @return {?}\n */\nisCompletedTask(): boolean {\n        return this.taskDetails && this.taskDetails.endDate ? true : undefined;\n    }\n/**\n * @param {?} searchedWord\n * @return {?}\n */\nsearchUser(searchedWord: string) {\n        this.peopleProcessService.getWorkflowUsers(null, searchedWord)\n            .subscribe((users) => {\n                users = users.filter((user) => user.id !== this.taskDetails.assignee.id);\n                this.peopleSearchObserver.next(users);\n            }, error => this.logService.error('Could not load users'));\n    }\n/**\n * @return {?}\n */\nonCloseSearch() {\n        this.showAssignee = false;\n    }\n/**\n * @param {?} selectedUser\n * @return {?}\n */\nassignTaskToUser(selectedUser: UserProcessModel) {\n        this.taskListService.assignTask(this.taskDetails.id, selectedUser).subscribe(\n            (res: any) => {\n                this.logService.info('Task Assigned to ' + selectedUser.email);\n                this.assignTask.emit();\n            });\n        this.showAssignee = false;\n    }\n/**\n * @return {?}\n */\ngetTaskHeaderViewClass(): string {\n        if (this.showAssignee) {\n            return 'assign-edit-view';\n        } else {\n            return 'default-view';\n        }\n    }\n/**\n * @return {?}\n */\nisReadOnlyComment(): boolean {\n        return (this.taskDetails && this.taskDetails.isCompleted()) && (this.taskPeople && this.taskPeople.length === 0);\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'adf-task-details',\n    template: `\n      <div *ngIf=\"!taskDetails\">\n          <ng-template *ngIf=\"noTaskDetailsTemplateComponent\" ngFor [ngForOf]=\"[data]\"\n                       [ngForTemplate]=\"noTaskDetailsTemplateComponent\">\n              {{ 'ADF_TASK_LIST.DETAILS.MESSAGES.NONE' | translate }}\n          </ng-template>\n          <div *ngIf=\"!noTaskDetailsTemplateComponent\">\n              {{ 'ADF_TASK_LIST.DETAILS.MESSAGES.NONE' | translate }}\n          </div>\n      </div>\n      <div *ngIf=\"taskDetails\" class=\"adf-task-details\">\n\n          <div *ngIf=\"showHeader\" class=\"adf-task-details-header\">\n              <h2 class=\"activiti-task-details__header\">\n                  <span>{{taskDetails.name || 'No name'}}</span>\n              </h2>\n          </div>\n\n          <div class=\"adf-task-details-core\"\n              fxLayout=\"column\"\n              fxLayoutGap=\"8px\"\n              fxLayout.lt-lg=\"column\">\n\n              <div class=\"adf-task-details-core-form\">\n                  <div *ngIf=\"isAssigned()\">\n                      <adf-form *ngIf=\"hasFormKey()\" #activitiForm\n                                [showDebugButton]=\"debugMode\"\n                                [taskId]=\"taskDetails.id\"\n                                [showTitle]=\"showFormTitle\"\n                                [showRefreshButton]=\"showFormRefreshButton\"\n                                [showCompleteButton]=\"showFormCompleteButton\"\n                                [disableCompleteButton]=\"!isAssignedToMe()\"\n                                [showSaveButton]=\"showFormSaveButton\"\n                                [readOnly]=\"readOnlyForm\"\n                                [fieldValidators]=\"fieldValidators\"\n                                (formSaved)='onFormSaved($event)'\n                                (formCompleted)='onFormCompleted($event)'\n                                (formContentClicked)='onFormContentClick($event)'\n                                (formLoaded)='onFormLoaded($event)'\n                                (error)='onFormError($event)'\n                                (executeOutcome)='onFormExecuteOutcome($event)'>\n                          <div empty-form><h3 class=\"adf-task-title\">Please select a Task</h3></div>\n                      </adf-form>\n                  </div>\n                  <div *ngIf=\"!isAssigned()\">\n                      {{ 'ADF_TASK_LIST.DETAILS.MESSAGES.CLAIM' | translate }}\n                  </div>\n                  <button mat-raised-button class=\"activiti-task-details__action-button\"\n                          *ngIf=\"!hasFormKey() && isTaskActive()\" (click)=\"onComplete()\">\n                      {{ 'ADF_TASK_LIST.DETAILS.BUTTON.COMPLETE' | translate }}\n                  </button>\n              </div>\n              <div class=\"adf-task-details-core-sidebar\">\n                  <adf-info-drawer *ngIf=\"showHeaderContent\" title=\"{{ 'ADF_TASK_LIST.DETAILS.LABELS.INFO_DRAWER_TITLE' | translate }}\" class=\"adf-task-details-core-sidebar-drawer\">\n                      <adf-info-drawer-tab label=\"{{ 'ADF_TASK_LIST.DETAILS.LABELS.INFO_DRAWER_TAB_DETAILS_TITLE' | translate }}\">\n                          <div class=\"assignment-container\" *ngIf=\"showAssignee\">\n                              <adf-people-search\n                                  (searchPeople)=\"searchUser($event)\"\n                                  (success)=\"assignTaskToUser($event)\"\n                                  (closeSearch)=\"onCloseSearch()\"\n                                  [results]=\"peopleSearch$\">\n                                  <ng-container people-search-title>{{ 'ADF_TASK_LIST.DETAILS.LABELS.ADD_ASSIGNEE' | translate }}\n                                  </ng-container>\n                                  <ng-container people-search-action-label>{{ 'ADF_TASK_LIST.PEOPLE.ADD_ASSIGNEE' | translate }}\n                                  </ng-container>\n                              </adf-people-search>\n                          </div>\n                          <adf-task-header\n                              [class]=\"getTaskHeaderViewClass()\"\n                              [taskDetails]=\"taskDetails\"\n                              [formName]=\"taskFormName\"\n                              (claim)=\"onClaimAction($event)\"\n                              (unclaim)=\"onClaimAction($event)\">\n                          </adf-task-header>\n                          <adf-people *ngIf=\"showInvolvePeople\" #people\n                                      [people]=\"taskPeople\"\n                                      [readOnly]=\"readOnlyForm\"\n                                      [taskId]=\"taskDetails.id\">\n                          </adf-people>\n                      </adf-info-drawer-tab>\n\n                      <adf-info-drawer-tab label=\"{{ 'ADF_TASK_LIST.DETAILS.LABELS.INFO_DRAWER_TAB_ACTIVITY_TITLE' | translate }}\">\n                          <mat-card *ngIf=\"showComments\">\n                              <mat-card-content>\n                                  <adf-comments #activiticomments\n                                                [readOnly]=\"isReadOnlyComment()\"\n                                                [taskId]=\"taskDetails.id\">\n                                  </adf-comments>\n                              </mat-card-content>\n                          </mat-card>\n                      </adf-info-drawer-tab>\n\n                  </adf-info-drawer>\n\n                  <div *ngIf=\"showHeaderContent\" class=\"adf-task-details-core-sidebar-checklist\">\n                      <div *ngIf=\"showChecklist\">\n                          <adf-checklist #activitichecklist\n                                         [readOnly]=\"readOnlyForm\"\n                                         [taskId]=\"taskDetails.id\"\n                                         [assignee]=\"taskDetails?.assignee?.id\"\n                                         (checklistTaskCreated)=\"onChecklistTaskCreated($event)\"\n                                         (checklistTaskDeleted)=\"onChecklistTaskDeleted($event)\">\n                          </adf-checklist>\n                      </div>\n                  </div>\n              </div>\n          </div>\n\n          <ng-template #errorDialog>\n              <h3 matDialogTitle>{{'ADF_TASK_LIST.DETAILS.ERROR.TITLE'|translate}}</h3>\n              <mat-dialog-content>\n                  <p>{{'ADF_TASK_LIST.DETAILS.ERROR.DESCRIPTION'|translate}}</p>\n              </mat-dialog-content>\n              <mat-dialog-actions>\n                  <button mat-button type=\"button\" (click)=\"closeErrorDialog()\">{{'ADF_TASK_LIST.DETAILS.ERROR.CLOSE'|translate}}\n                  </button>\n              </mat-dialog-actions>\n          </ng-template>\n\n      </div>\n    `,\n    styles: [`\n      :host {\n        width: 100%; }\n\n      .error-dialog h3 {\n        margin: 16px 0; }\n\n      .activiti-task-details__header {\n        -ms-flex-item-align: end;\n            align-self: flex-end;\n        display: -webkit-box;\n        display: -ms-flexbox;\n        display: flex;\n        font-size: 24px;\n        font-weight: 300;\n        line-height: normal;\n        overflow: hidden;\n        margin: 8px 0 16px 0;\n        cursor: pointer;\n        user-select: none;\n        -moz-user-select: none;\n        -webkit-user-select: none;\n        -ms-user-select: none; }\n\n      .activiti-task-details__action-button {\n        text-transform: uppercase; }\n\n      adf-people ::ng-deep .assignment-top-container {\n        background-color: #fff; }\n\n      .assignment-container {\n        background: #fff;\n        border: 1px solid #e1e1e1;\n        padding: 10px 20px;\n        width: auto; }\n\n      adf-task-header.assign-edit-view ::ng-deep adf-card-view ::ng-deep .adf-property[data-automation-id=\"header-assignee\"] {\n        display: none; }\n\n      .adf-task-details-header {\n        display: -webkit-box;\n        display: -ms-flexbox;\n        display: flex;\n        -webkit-box-pack: justify;\n            -ms-flex-pack: justify;\n                justify-content: space-between; }\n        .adf-task-details-header-toggle {\n          position: relative;\n          top: 10px;\n          margin-right: 2px;\n          height: 23px;\n          cursor: pointer;\n          user-select: none;\n          -moz-user-select: none;\n          -webkit-user-select: none;\n          -ms-user-select: none; }\n\n      .adf-task-details-core {\n        display: -webkit-box;\n        display: -ms-flexbox;\n        display: flex;\n        -webkit-box-pack: justify;\n            -ms-flex-pack: justify;\n                justify-content: space-between; }\n        @media screen and (max-width: 1279px) {\n          .adf-task-details-core-sidebar-drawer {\n            margin-left: 0px; } }\n        .adf-task-details-core-sidebar-checklist {\n          margin-top: 30px;\n          padding-left: 20px;\n          padding-right: 20px; }\n        .adf-task-details-core-form {\n          -webkit-box-flex: 1;\n              -ms-flex-positive: 1;\n                  flex-grow: 1; }\n          .adf-task-details-core-form ::ng-deep .adf-form-debug-container {\n            padding: 20px 0 0 0; }\n            .adf-task-details-core-form ::ng-deep .adf-form-debug-container .mat-slide-toggle {\n              float: right; }\n              .adf-task-details-core-form ::ng-deep .adf-form-debug-container .mat-slide-toggle + div {\n                background-color: black;\n                padding: 20px;\n                clear: both;\n                margin-top: 30px;\n                color: white; }\n          .adf-task-details-core-form ::ng-deep .mat-tab-label {\n            -webkit-box-flex: 1;\n                -ms-flex-positive: 1;\n                    flex-grow: 1; }\n    `],\n    providers: [\n        CardViewUpdateService\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: TaskListService, },\n{type: AuthenticationService, },\n{type: PeopleProcessService, },\n{type: LogService, },\n{type: CardViewUpdateService, },\n{type: MatDialog, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'activiticomments': [{ type: ViewChild, args: ['activiticomments', ] },],\n'activitichecklist': [{ type: ViewChild, args: ['activitichecklist', ] },],\n'errorDialog': [{ type: ViewChild, args: ['errorDialog', ] },],\n'debugMode': [{ type: Input },],\n'taskId': [{ type: Input },],\n'showNextTask': [{ type: Input },],\n'showHeader': [{ type: Input },],\n'showHeaderContent': [{ type: Input },],\n'showInvolvePeople': [{ type: Input },],\n'showComments': [{ type: Input },],\n'showChecklist': [{ type: Input },],\n'showFormTitle': [{ type: Input },],\n'showFormCompleteButton': [{ type: Input },],\n'showFormSaveButton': [{ type: Input },],\n'readOnlyForm': [{ type: Input },],\n'showFormRefreshButton': [{ type: Input },],\n'fieldValidators': [{ type: Input },],\n'formSaved': [{ type: Output },],\n'formCompleted': [{ type: Output },],\n'formContentClicked': [{ type: Output },],\n'formLoaded': [{ type: Output },],\n'taskCreated': [{ type: Output },],\n'taskDeleted': [{ type: Output },],\n'error': [{ type: Output },],\n'executeOutcome': [{ type: Output },],\n'assignTask': [{ type: Output },],\n};\n}\n\nfunction TaskDetailsComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nTaskDetailsComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTaskDetailsComponent.ctorParameters;\n/** @type {?} */\nTaskDetailsComponent.propDecorators;\n/** @type {?} */\nTaskDetailsComponent.prototype.activiticomments;\n/** @type {?} */\nTaskDetailsComponent.prototype.activitichecklist;\n/** @type {?} */\nTaskDetailsComponent.prototype.errorDialog;\n/** @type {?} */\nTaskDetailsComponent.prototype.debugMode;\n/** @type {?} */\nTaskDetailsComponent.prototype.taskId;\n/** @type {?} */\nTaskDetailsComponent.prototype.showNextTask;\n/** @type {?} */\nTaskDetailsComponent.prototype.showHeader;\n/** @type {?} */\nTaskDetailsComponent.prototype.showHeaderContent;\n/** @type {?} */\nTaskDetailsComponent.prototype.showInvolvePeople;\n/** @type {?} */\nTaskDetailsComponent.prototype.showComments;\n/** @type {?} */\nTaskDetailsComponent.prototype.showChecklist;\n/** @type {?} */\nTaskDetailsComponent.prototype.showFormTitle;\n/** @type {?} */\nTaskDetailsComponent.prototype.showFormCompleteButton;\n/** @type {?} */\nTaskDetailsComponent.prototype.showFormSaveButton;\n/** @type {?} */\nTaskDetailsComponent.prototype.readOnlyForm;\n/** @type {?} */\nTaskDetailsComponent.prototype.showFormRefreshButton;\n/** @type {?} */\nTaskDetailsComponent.prototype.fieldValidators;\n/** @type {?} */\nTaskDetailsComponent.prototype.formSaved;\n/** @type {?} */\nTaskDetailsComponent.prototype.formCompleted;\n/** @type {?} */\nTaskDetailsComponent.prototype.formContentClicked;\n/** @type {?} */\nTaskDetailsComponent.prototype.formLoaded;\n/** @type {?} */\nTaskDetailsComponent.prototype.taskCreated;\n/** @type {?} */\nTaskDetailsComponent.prototype.taskDeleted;\n/** @type {?} */\nTaskDetailsComponent.prototype.error;\n/** @type {?} */\nTaskDetailsComponent.prototype.executeOutcome;\n/** @type {?} */\nTaskDetailsComponent.prototype.assignTask;\n/** @type {?} */\nTaskDetailsComponent.prototype.taskDetails;\n/** @type {?} */\nTaskDetailsComponent.prototype.taskFormName;\n/** @type {?} */\nTaskDetailsComponent.prototype.taskPeople;\n/** @type {?} */\nTaskDetailsComponent.prototype.noTaskDetailsTemplateComponent;\n/** @type {?} */\nTaskDetailsComponent.prototype.showAssignee;\n/** @type {?} */\nTaskDetailsComponent.prototype.peopleSearchObserver;\n/** @type {?} */\nTaskDetailsComponent.prototype.errorDialogRef;\n/** @type {?} */\nTaskDetailsComponent.prototype.peopleSearch$;\n/** @type {?} */\nTaskDetailsComponent.prototype.taskListService;\n/** @type {?} */\nTaskDetailsComponent.prototype.authService;\n/** @type {?} */\nTaskDetailsComponent.prototype.peopleProcessService;\n/** @type {?} */\nTaskDetailsComponent.prototype.logService;\n/** @type {?} */\nTaskDetailsComponent.prototype.cardViewUpdateService;\n/** @type {?} */\nTaskDetailsComponent.prototype.dialog;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges, ViewChild } from '@angular/core';\nimport { MatDialog } from '@angular/material';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\nimport { TaskDetailsModel } from '../models/task-details.model';\nimport { TaskListService } from './../services/tasklist.service';\nexport class ChecklistComponent implements OnInit, OnChanges {\n\n    \n    taskId: string;\n\n    \n    readOnly: boolean = false;\n\n    \n    assignee: string;\n\n    \n    checklistTaskCreated: EventEmitter<TaskDetailsModel> = new EventEmitter<TaskDetailsModel>();\n\n    \n    checklistTaskDeleted: EventEmitter<string> = new EventEmitter<string>();\n\n    \n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    \n    addNewDialog: any;\n\n    taskName: string;\n\n    checklist: TaskDetailsModel [] = [];\nprivate taskObserver: Observer<TaskDetailsModel>;\n    task$: Observable<TaskDetailsModel>;\n/**\n * Constructor\n * @param {?} activitiTaskList\n * @param {?} dialog\n */\nconstructor(\nprivate activitiTaskList: TaskListService,\nprivate dialog: MatDialog\n    ) {\n        this.task$ = new Observable<TaskDetailsModel>(observer => this.taskObserver = observer).share();\n    }\n/**\n * @return {?}\n */\nngOnInit() {\n        this.task$.subscribe((task: TaskDetailsModel) => {\n            this.checklist.push(task);\n        });\n    }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n        let /** @type {?} */ taskId = changes['taskId'];\n        if (taskId && taskId.currentValue) {\n            this.getTaskChecklist(taskId.currentValue);\n            return;\n        }\n    }\n/**\n * @param {?} taskId\n * @return {?}\n */\npublic getTaskChecklist(taskId: string) {\n        this.checklist = [];\n        if (this.taskId) {\n            this.activitiTaskList.getTaskChecklist(this.taskId).subscribe(\n                (res: TaskDetailsModel[]) => {\n                    res.forEach((task) => {\n                        this.taskObserver.next(task);\n                    });\n                },\n                (error) => {\n                    this.error.emit(error);\n                }\n            );\n        } else {\n            this.checklist = [];\n        }\n    }\n/**\n * @return {?}\n */\nshowDialog() {\n        this.dialog.open(this.addNewDialog, { width: '350px' });\n    }\n/**\n * @return {?}\n */\npublic add() {\n        let /** @type {?} */ newTask = new TaskDetailsModel({\n            name: this.taskName,\n            parentTaskId: this.taskId,\n            assignee: { id: this.assignee }\n        });\n        this.activitiTaskList.addTask(newTask).subscribe(\n            (res: TaskDetailsModel) => {\n                this.checklist.push(res);\n                this.checklistTaskCreated.emit(res);\n                this.taskName = '';\n            },\n            (error) => {\n                this.error.emit(error);\n            }\n        );\n        this.cancel();\n    }\n/**\n * @param {?} taskId\n * @return {?}\n */\npublic delete(taskId: string) {\n        this.activitiTaskList.deleteTask(taskId).subscribe(\n            () => {\n                this.checklist = this.checklist.filter(check => check.id !== taskId);\n                this.checklistTaskDeleted.emit(taskId);\n            },\n            (error) => {\n                this.error.emit(error);\n            });\n    }\n/**\n * @return {?}\n */\npublic cancel() {\n        this.dialog.closeAll();\n        // if (this.addNewDialog) {\n        //     this.addNewDialog.nativeElement.close();\n        // }\n        this.taskName = '';\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'adf-checklist',\n    template: `\n      <div class=\"adf-checklist-control\">\n          <mat-chip-list id=\"checklist-label\">\n              <span class=\"activiti-label\">{{ 'ADF_TASK_LIST.DETAILS.LABELS.CHECKLIST' | translate }}</span>\n              <mat-chip class=\"adf-process-badge\" color=\"accent\" selected=\"true\">{{checklist?.length}}</mat-chip>\n          </mat-chip-list>\n\n\n          <button mat-icon-button *ngIf=\"!readOnly\" matTooltip=\"Add a checklist\" [matTooltipPosition]=\"'before'\" id=\"add-checklist\" class=\"adf-add-to-checklist-button\" (click)=\"showDialog()\">\n              <mat-icon>add</mat-icon>\n          </button>\n      </div>\n\n      <div class=\"adf-checklist-menu-container\" *ngIf=\"checklist?.length > 0\">\n          <mat-chip-list class=\"mat-chip-list-stacked\">\n              <mat-chip id=\"check-{{check.id}}\" class=\"adf-checklist-chip\" *ngFor=\"let check of checklist\">\n                  <span>{{check.name}}</span>\n                  <button  *ngIf=\"!readOnly\" mat-icon-button type=\"button\" class=\"adf-checklist-cancel-button\" (click)=\"delete(check.id)\">\n                      <mat-icon id=\"remove-{{check.id}}\" matChipRemove>cancel</mat-icon>\n                  </button>\n              </mat-chip>\n          </mat-chip-list>\n\n      </div>\n      <div *ngIf=\"checklist?.length === 0\" id=\"checklist-none-message\">\n          {{ 'ADF_TASK_LIST.DETAILS.CHECKLIST.NONE' | translate }}\n      </div>\n\n      <ng-template #dialog>\n          <div class=\"adf-checklist-dialog\" id=\"checklist-dialog\">\n              <h4 matDialogTitle id=\"add-checklist-title\">New Check</h4>\n              <mat-dialog-content>\n                  <mat-form-field>\n                      <input matInput placeholder=\"Name\" [(ngModel)]=\"taskName\" id=\"checklist-name\"  data-automation-id=\"checklist-name\">\n                  </mat-form-field>\n              </mat-dialog-content>\n              <mat-dialog-actions class=\"adf-checklist-dialog-actions\">\n                  <button mat-button type=\"button\" id=\"close-check-dialog\" (click)=\"cancel()\">Cancel</button>\n                  <button mat-button type=\"button\" id=\"add-check\" (click)=\"add()\">Add Checklist</button>\n              </mat-dialog-actions>\n          </div>\n      </ng-template>\n    `,\n    styles: [`\n      :host {\n        width: 100%; }\n\n      .activiti-label {\n        font-weight: bolder; }\n\n      .mat-form-field {\n        width: 100%; }\n\n      .adf-checklist-cancel-button {\n        margin-top: -13px;\n        margin-right: -13px;\n        float: right; }\n\n      .adf-checklist-chip {\n        outline: none; }\n\n      .adf-checklist-menu-container {\n        margin-top: 10px; }\n\n      #checklist-none-message {\n        margin-top: 10px;\n        color: rgba(0, 0, 0, 0.5); }\n\n      .adf-checklist-control {\n        display: -webkit-box;\n        display: -ms-flexbox;\n        display: flex;\n        -webkit-box-pack: justify;\n            -ms-flex-pack: justify;\n                justify-content: space-between; }\n        .adf-checklist-control .activiti-label {\n          margin-top: 6px;\n          margin-right: 10px; }\n        .adf-checklist-control .adf-add-to-checklist-button {\n          float: right; }\n\n      .adf-checklist-dialog-actions {\n        display: -webkit-box;\n        display: -ms-flexbox;\n        display: flex;\n        -webkit-box-pack: end;\n            -ms-flex-pack: end;\n                justify-content: flex-end; }\n    `],\n    providers: [TaskListService]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: TaskListService, },\n{type: MatDialog, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'taskId': [{ type: Input },],\n'readOnly': [{ type: Input },],\n'assignee': [{ type: Input },],\n'checklistTaskCreated': [{ type: Output },],\n'checklistTaskDeleted': [{ type: Output },],\n'error': [{ type: Output },],\n'addNewDialog': [{ type: ViewChild, args: ['dialog', ] },],\n};\n}\n\nfunction ChecklistComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nChecklistComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nChecklistComponent.ctorParameters;\n/** @type {?} */\nChecklistComponent.propDecorators;\n/** @type {?} */\nChecklistComponent.prototype.taskId;\n/** @type {?} */\nChecklistComponent.prototype.readOnly;\n/** @type {?} */\nChecklistComponent.prototype.assignee;\n/** @type {?} */\nChecklistComponent.prototype.checklistTaskCreated;\n/** @type {?} */\nChecklistComponent.prototype.checklistTaskDeleted;\n/** @type {?} */\nChecklistComponent.prototype.error;\n/** @type {?} */\nChecklistComponent.prototype.addNewDialog;\n/** @type {?} */\nChecklistComponent.prototype.taskName;\n/** @type {?} */\nChecklistComponent.prototype.checklist;\n/** @type {?} */\nChecklistComponent.prototype.taskObserver;\n/** @type {?} */\nChecklistComponent.prototype.task$;\n/** @type {?} */\nChecklistComponent.prototype.activitiTaskList;\n/** @type {?} */\nChecklistComponent.prototype.dialog;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { AlfrescoApiService, LogService } from '@alfresco/adf-core';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { Subject } from 'rxjs/Subject';\nimport { FilterRepresentationModel } from '../models/filter.model';\nimport { TaskListModel } from '../models/task-list.model';\nimport'rxjs/add/observable/throw';\nexport class TaskFilterService {\nprivate tasksListSubject = new Subject<TaskListModel>();\npublic tasksList$: Observable<TaskListModel>;\n/**\n * @param {?} apiService\n * @param {?} logService\n */\nconstructor(private apiService: AlfrescoApiService,\nprivate logService: LogService) {\n        this.tasksList$ = this.tasksListSubject.asObservable();\n    }\n/**\n * Create and return the default filters\n * @param {?} appId\n * @return {?}\n */\npublic createDefaultFilters(appId: number): Observable<FilterRepresentationModel[]> {\n        let /** @type {?} */ involvedTasksFilter = this.getInvolvedTasksFilterInstance(appId);\n        let /** @type {?} */ involvedObservable = this.addFilter(involvedTasksFilter);\n\n        let /** @type {?} */ myTasksFilter = this.getMyTasksFilterInstance(appId);\n        let /** @type {?} */ myTaskObservable = this.addFilter(myTasksFilter);\n\n        let /** @type {?} */ queuedTasksFilter = this.getQueuedTasksFilterInstance(appId);\n        let /** @type {?} */ queuedObservable = this.addFilter(queuedTasksFilter);\n\n        let /** @type {?} */ completedTasksFilter = this.getCompletedTasksFilterInstance(appId);\n        let /** @type {?} */ completeObservable = this.addFilter(completedTasksFilter);\n\n        return Observable.create(observer => {\n            Observable.forkJoin(\n                involvedObservable,\n                myTaskObservable,\n                queuedObservable,\n                completeObservable\n            ).subscribe(\n                (res) => {\n                    let /** @type {?} */ filters: FilterRepresentationModel[] = [];\n                    res.forEach((filter) => {\n                        if (filter.name === involvedTasksFilter.name) {\n                            filters.push(involvedTasksFilter);\n                        } else if (filter.name === myTasksFilter.name) {\n                            filters.push(myTasksFilter);\n                        } else if (filter.name === queuedTasksFilter.name) {\n                            filters.push(queuedTasksFilter);\n                        } else if (filter.name === completedTasksFilter.name) {\n                            filters.push(completedTasksFilter);\n                        }\n                    });\n                    observer.next(filters);\n                    observer.complete();\n                },\n                (err: any) => {\n                    this.logService.error(err);\n                });\n        });\n    }\n/**\n * Retrieve all the Tasks filters\n * @param {?=} appId\n * @return {?}\n */\ngetTaskListFilters(appId?: number): Observable<any> {\n        return Observable.fromPromise(this.callApiTaskFilters(appId))\n            .map((response: any) => {\n                let /** @type {?} */ filters: FilterRepresentationModel[] = [];\n                response.data.forEach((filter: FilterRepresentationModel) => {\n                    let /** @type {?} */ filterModel = new FilterRepresentationModel(filter);\n                    filters.push(filterModel);\n                });\n                return filters;\n            }).catch(err => this.handleError(err));\n    }\n/**\n * Retrieve the Tasks filter by id\n * @param {?} filterId - number - The id of the filter\n * @param {?=} appId - string - optional - The id of app\n * @return {?}\n */\ngetTaskFilterById(filterId: number, appId?: number): Observable<FilterRepresentationModel> {\n        return Observable.fromPromise(this.callApiTaskFilters(appId))\n            .map((response: any) => {\n                return response.data.find(filter => filter.id === filterId);\n            }).catch(err => this.handleError(err));\n    }\n/**\n * Retrieve the Tasks filter by name\n * @param {?} taskName - string - The name of the filter\n * @param {?=} appId\n * @return {?}\n */\ngetTaskFilterByName(taskName: string, appId?: number): Observable<FilterRepresentationModel> {\n        return Observable.fromPromise(this.callApiTaskFilters(appId))\n            .map((response: any) => {\n                return response.data.find(filter => filter.name === taskName);\n            }).catch(err => this.handleError(err));\n    }\n/**\n * Add a filter\n * @param {?} filter - FilterRepresentationModel\n * @return {?}\n */\naddFilter(filter: FilterRepresentationModel): Observable<FilterRepresentationModel> {\n        return Observable.fromPromise(this.apiService.getInstance().activiti.userFiltersApi.createUserTaskFilter(filter))\n            .map(res => res)\n            .map((response: FilterRepresentationModel) => {\n                return response;\n            }).catch(err => this.handleError(err));\n    }\n/**\n * @param {?=} appId\n * @return {?}\n */\ncallApiTaskFilters(appId?: number) {\n        if (appId) {\n            return this.apiService.getInstance().activiti.userFiltersApi.getUserTaskFilters({appId: appId});\n        } else {\n            return this.apiService.getInstance().activiti.userFiltersApi.getUserTaskFilters();\n        }\n    }\n/**\n * Return a static Involved filter instance\n * @param {?} appId\n * @return {?}\n */\ngetInvolvedTasksFilterInstance(appId: number): FilterRepresentationModel {\n        return new FilterRepresentationModel({\n            'name': 'Involved Tasks',\n            'appId': appId,\n            'recent': false,\n            'icon': 'glyphicon-align-left',\n            'filter': {'sort': 'created-desc', 'name': '', 'state': 'open', 'assignment': 'involved'}\n        });\n    }\n/**\n * Return a static My task filter instance\n * @param {?} appId\n * @return {?}\n */\ngetMyTasksFilterInstance(appId: number): FilterRepresentationModel {\n        return new FilterRepresentationModel({\n            'name': 'My Tasks',\n            'appId': appId,\n            'recent': false,\n            'icon': 'glyphicon-inbox',\n            'filter': {'sort': 'created-desc', 'name': '', 'state': 'open', 'assignment': 'assignee'}\n        });\n    }\n/**\n * Return a static Queued filter instance\n * @param {?} appId\n * @return {?}\n */\ngetQueuedTasksFilterInstance(appId: number): FilterRepresentationModel {\n        return new FilterRepresentationModel({\n            'name': 'Queued Tasks',\n            'appId': appId,\n            'recent': false,\n            'icon': 'glyphicon-record',\n            'filter': {'sort': 'created-desc', 'name': '', 'state': 'open', 'assignment': 'candidate'}\n        });\n    }\n/**\n * Return a static Completed filter instance\n * @param {?} appId\n * @return {?}\n */\ngetCompletedTasksFilterInstance(appId: number): FilterRepresentationModel {\n        return new FilterRepresentationModel({\n            'name': 'Completed Tasks',\n            'appId': appId,\n            'recent': true,\n            'icon': 'glyphicon-ok-sign',\n            'filter': {'sort': 'created-desc', 'name': '', 'state': 'completed', 'assignment': 'involved'}\n        });\n    }\n/**\n * @param {?} error\n * @return {?}\n */\nprivate handleError(error: any) {\n        this.logService.error(error);\n        this.tasksListSubject.error(error);\n        return Observable.throw(error || 'Server error');\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: AlfrescoApiService, },\n{type: LogService, },\n];\n}\n\nfunction TaskFilterService_tsickle_Closure_declarations() {\n/** @type {?} */\nTaskFilterService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTaskFilterService.ctorParameters;\n/** @type {?} */\nTaskFilterService.prototype.tasksListSubject;\n/** @type {?} */\nTaskFilterService.prototype.tasksList$;\n/** @type {?} */\nTaskFilterService.prototype.apiService;\n/** @type {?} */\nTaskFilterService.prototype.logService;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { TaskQueryRequestRepresentation, UserTaskFilterRepresentation } from 'alfresco-js-api';\nexport class AppDefinitionRepresentationModel {\n    defaultAppId: string;\n    deploymentId: string;\n    name: string;\n    description: string;\n    theme: string;\n    icon: string;\n    id: number;\n    modelId: number;\n    tenantId: number;\n/**\n * @param {?=} obj\n */\nconstructor(obj?: any) {\n        if (obj) {\n            this.defaultAppId = obj.defaultAppId ? obj.defaultAppId : null;\n            this.deploymentId = obj.deploymentId ? obj.deploymentId : null;\n            this.name = obj.name ? obj.name : null;\n            this.description = obj.description ? obj.description : null;\n            this.theme = obj.theme ? obj.theme : null;\n            this.icon = obj.icon ? obj.icon : null;\n            this.id = obj.id ? obj.id : null;\n            this.modelId = obj.modelId ? obj.modelId : null;\n            this.tenantId = obj.tenantId ? obj.tenantId : null;\n        }\n    }\n}\n\nfunction AppDefinitionRepresentationModel_tsickle_Closure_declarations() {\n/** @type {?} */\nAppDefinitionRepresentationModel.prototype.defaultAppId;\n/** @type {?} */\nAppDefinitionRepresentationModel.prototype.deploymentId;\n/** @type {?} */\nAppDefinitionRepresentationModel.prototype.name;\n/** @type {?} */\nAppDefinitionRepresentationModel.prototype.description;\n/** @type {?} */\nAppDefinitionRepresentationModel.prototype.theme;\n/** @type {?} */\nAppDefinitionRepresentationModel.prototype.icon;\n/** @type {?} */\nAppDefinitionRepresentationModel.prototype.id;\n/** @type {?} */\nAppDefinitionRepresentationModel.prototype.modelId;\n/** @type {?} */\nAppDefinitionRepresentationModel.prototype.tenantId;\n}\n\nexport class FilterParamsModel {\n    id: string;\n    name: string;\n    index: number;\n/**\n * @param {?=} obj\n */\nconstructor(obj?: any) {\n        if (obj) {\n            this.id = obj.id || null;\n            this.name = obj.name || null;\n            this.index = obj.index;\n        }\n    }\n}\n\nfunction FilterParamsModel_tsickle_Closure_declarations() {\n/** @type {?} */\nFilterParamsModel.prototype.id;\n/** @type {?} */\nFilterParamsModel.prototype.name;\n/** @type {?} */\nFilterParamsModel.prototype.index;\n}\n\nexport class FilterRepresentationModel implements UserTaskFilterRepresentation {\n    id: number;\n    appId: number;\n    name: string;\n    recent: boolean;\n    icon: string;\n    filter: FilterParamRepresentationModel;\n    index: number;\n/**\n * @param {?=} obj\n */\nconstructor(obj?: any) {\n        if (obj) {\n            this.id = obj.id || null;\n            this.appId = obj.appId || null;\n            this.name = obj.name || null;\n            this.recent = !!obj.recent;\n            this.icon = obj.icon || null;\n            this.filter = new FilterParamRepresentationModel(obj.filter);\n            this.index = obj.index;\n        }\n    }\n/**\n * @return {?}\n */\nhasFilter() {\n        return this.filter ? true : false;\n    }\n}\n\nfunction FilterRepresentationModel_tsickle_Closure_declarations() {\n/** @type {?} */\nFilterRepresentationModel.prototype.id;\n/** @type {?} */\nFilterRepresentationModel.prototype.appId;\n/** @type {?} */\nFilterRepresentationModel.prototype.name;\n/** @type {?} */\nFilterRepresentationModel.prototype.recent;\n/** @type {?} */\nFilterRepresentationModel.prototype.icon;\n/** @type {?} */\nFilterRepresentationModel.prototype.filter;\n/** @type {?} */\nFilterRepresentationModel.prototype.index;\n}\n\nexport class FilterParamRepresentationModel {\n    processDefinitionId: string;\n    processDefinitionKey: string;\n    name: string;\n    state: string;\n    sort: string;\n    assignment: string;\n    dueAfter: Date;\n    dueBefore: Date;\n/**\n * @param {?=} obj\n */\nconstructor(obj?: any) {\n        if (obj) {\n            this.processDefinitionId = obj.processDefinitionId || null;\n            this.processDefinitionKey = obj.processDefinitionKey || null;\n            this.name = obj.name || null;\n            this.state = obj.state || null;\n            this.sort = obj.sort || null;\n            this.assignment = obj.assignment || null;\n            this.dueAfter = obj.dueAfter || null;\n            this.dueBefore = obj.dueBefore || null;\n        }\n    }\n}\n\nfunction FilterParamRepresentationModel_tsickle_Closure_declarations() {\n/** @type {?} */\nFilterParamRepresentationModel.prototype.processDefinitionId;\n/** @type {?} */\nFilterParamRepresentationModel.prototype.processDefinitionKey;\n/** @type {?} */\nFilterParamRepresentationModel.prototype.name;\n/** @type {?} */\nFilterParamRepresentationModel.prototype.state;\n/** @type {?} */\nFilterParamRepresentationModel.prototype.sort;\n/** @type {?} */\nFilterParamRepresentationModel.prototype.assignment;\n/** @type {?} */\nFilterParamRepresentationModel.prototype.dueAfter;\n/** @type {?} */\nFilterParamRepresentationModel.prototype.dueBefore;\n}\n\nexport class TaskQueryRequestRepresentationModel implements TaskQueryRequestRepresentation {\n    appDefinitionId: string;\n    processInstanceId: string;\n    processDefinitionId: string;\n    text: string;\n    assignment: string;\n    state: string;\n    start: string;\n    sort: string;\n    page: number;\n    size: number;\n/**\n * @param {?=} obj\n */\nconstructor(obj?: any) {\n        if (obj) {\n            this.appDefinitionId = obj.appDefinitionId || null;\n            this.processInstanceId = obj.processInstanceId || null;\n            this.processDefinitionId = obj.processDefinitionId || null;\n            this.text = obj.text || null;\n            this.assignment = obj.assignment || null;\n            this.state = obj.state || null;\n            this.start = obj.start || null;\n            this.sort = obj.sort || null;\n            this.page = obj.page || 0;\n            this.size = obj.size || 25;\n        }\n    }\n}\n\nfunction TaskQueryRequestRepresentationModel_tsickle_Closure_declarations() {\n/** @type {?} */\nTaskQueryRequestRepresentationModel.prototype.appDefinitionId;\n/** @type {?} */\nTaskQueryRequestRepresentationModel.prototype.processInstanceId;\n/** @type {?} */\nTaskQueryRequestRepresentationModel.prototype.processDefinitionId;\n/** @type {?} */\nTaskQueryRequestRepresentationModel.prototype.text;\n/** @type {?} */\nTaskQueryRequestRepresentationModel.prototype.assignment;\n/** @type {?} */\nTaskQueryRequestRepresentationModel.prototype.state;\n/** @type {?} */\nTaskQueryRequestRepresentationModel.prototype.start;\n/** @type {?} */\nTaskQueryRequestRepresentationModel.prototype.sort;\n/** @type {?} */\nTaskQueryRequestRepresentationModel.prototype.page;\n/** @type {?} */\nTaskQueryRequestRepresentationModel.prototype.size;\n}\n\n","\n/**\n * \n * This object represent of the Form.\n * \n * \n */\nexport class Form {\n\n    id: number;\n    name: string;\n/**\n * @param {?} id\n * @param {?} name\n */\nconstructor(id: number, name: string) {\n        this.name = name;\n        this.id = id;\n    }\n}\n\nfunction Form_tsickle_Closure_declarations() {\n/** @type {?} */\nForm.prototype.id;\n/** @type {?} */\nForm.prototype.name;\n}\n\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n *\n * This object represent the details of a task.\n *\n *\n * @returns {TaskDetailsModel} .\n */\n\nimport { UserProcessModel } from '@alfresco/adf-core';\nimport { TaskRepresentation } from 'alfresco-js-api';\nimport { UserGroupModel } from './user-group.model';\nexport class TaskDetailsModel implements TaskRepresentation {\n    id: string;\n    name: string;\n    assignee: UserProcessModel;\n    priority: number;\n    adhocTaskCanBeReassigned: boolean;\n    category: string;\n    created: Date;\n    description: string;\n    dueDate: Date;\n    duration: number;\n    endDate: Date;\n    executionId: string;\n    formKey: string;\n    initiatorCanCompleteTask: boolean;\n    managerOfCandidateGroup: boolean;\n    memberOfCandidateGroup: boolean;\n    memberOfCandidateUsers: boolean;\n    involvedGroups: UserGroupModel [];\n    involvedPeople: UserProcessModel [];\n    parentTaskId: string;\n    parentTaskName: string;\n    processDefinitionCategory: string;\n    processDefinitionDeploymentId: string;\n    processDefinitionDescription: string;\n    processDefinitionId: string;\n    processDefinitionKey: string;\n    processDefinitionName: string;\n    processDefinitionVersion: number = 0;\n    processInstanceId: string;\n    processInstanceName: string;\n    processInstanceStartUserId: string;\n    taskDefinitionKey: string;\n/**\n * @param {?=} obj\n */\nconstructor(obj?: any) {\n        if (obj) {\n            this.id = obj.id || null;\n            this.name = obj.name || null;\n            this.priority = obj.priority;\n            this.assignee = obj.assignee ? new UserProcessModel(obj.assignee) : null;\n            this.adhocTaskCanBeReassigned = obj.adhocTaskCanBeReassigned;\n            this.category = obj.category || null;\n            this.created = obj.created || null;\n            this.description = obj.description || null;\n            this.dueDate = obj.dueDate || null;\n            this.duration = obj.duration || null;\n            this.endDate = obj.endDate || null;\n            this.executionId = obj.executionId || null;\n            this.formKey = obj.formKey || null;\n            this.initiatorCanCompleteTask = !!obj.initiatorCanCompleteTask;\n            this.managerOfCandidateGroup = !!obj.managerOfCandidateGroup;\n            this.memberOfCandidateGroup = !!obj.memberOfCandidateGroup;\n            this.memberOfCandidateUsers = !!obj.memberOfCandidateUsers;\n            this.involvedGroups = obj.involvedGroups;\n            this.involvedPeople = obj.involvedPeople;\n            this.parentTaskId = obj.parentTaskId || null;\n            this.parentTaskName = obj.parentTaskName || null;\n            this.processDefinitionCategory = obj.processDefinitionCategory || null;\n            this.processDefinitionDeploymentId = obj.processDefinitionDeploymentId || null;\n            this.processDefinitionDescription = obj.processDefinitionDescription || null;\n            this.processDefinitionId = obj.processDefinitionId || null;\n            this.processDefinitionKey = obj.processDefinitionKey || null;\n            this.processDefinitionName = obj.processDefinitionName || null;\n            this.processDefinitionVersion = obj.processDefinitionVersion || 0;\n            this.processInstanceId = obj.processInstanceId || null;\n            this.processInstanceName = obj.processInstanceName || null;\n            this.processInstanceStartUserId = obj.processInstanceStartUserId || null;\n            this.taskDefinitionKey = obj.taskDefinitionKey || null;\n        }\n    }\n/**\n * @return {?}\n */\ngetFullName(): string {\n        let /** @type {?} */ fullName: string = '';\n\n        if (this.assignee) {\n            let /** @type {?} */ firstName: string = this.assignee.firstName ? this.assignee.firstName : '';\n            let /** @type {?} */ lastName: string = this.assignee.lastName ? this.assignee.lastName : '';\n            fullName = `${firstName} ${lastName}`;\n        }\n\n        return fullName.trim();\n    }\n/**\n * @return {?}\n */\nisCompleted(): boolean {\n        return !!this.endDate;\n    }\n}\n\nfunction TaskDetailsModel_tsickle_Closure_declarations() {\n/** @type {?} */\nTaskDetailsModel.prototype.id;\n/** @type {?} */\nTaskDetailsModel.prototype.name;\n/** @type {?} */\nTaskDetailsModel.prototype.assignee;\n/** @type {?} */\nTaskDetailsModel.prototype.priority;\n/** @type {?} */\nTaskDetailsModel.prototype.adhocTaskCanBeReassigned;\n/** @type {?} */\nTaskDetailsModel.prototype.category;\n/** @type {?} */\nTaskDetailsModel.prototype.created;\n/** @type {?} */\nTaskDetailsModel.prototype.description;\n/** @type {?} */\nTaskDetailsModel.prototype.dueDate;\n/** @type {?} */\nTaskDetailsModel.prototype.duration;\n/** @type {?} */\nTaskDetailsModel.prototype.endDate;\n/** @type {?} */\nTaskDetailsModel.prototype.executionId;\n/** @type {?} */\nTaskDetailsModel.prototype.formKey;\n/** @type {?} */\nTaskDetailsModel.prototype.initiatorCanCompleteTask;\n/** @type {?} */\nTaskDetailsModel.prototype.managerOfCandidateGroup;\n/** @type {?} */\nTaskDetailsModel.prototype.memberOfCandidateGroup;\n/** @type {?} */\nTaskDetailsModel.prototype.memberOfCandidateUsers;\n/** @type {?} */\nTaskDetailsModel.prototype.involvedGroups;\n/** @type {?} */\nTaskDetailsModel.prototype.involvedPeople;\n/** @type {?} */\nTaskDetailsModel.prototype.parentTaskId;\n/** @type {?} */\nTaskDetailsModel.prototype.parentTaskName;\n/** @type {?} */\nTaskDetailsModel.prototype.processDefinitionCategory;\n/** @type {?} */\nTaskDetailsModel.prototype.processDefinitionDeploymentId;\n/** @type {?} */\nTaskDetailsModel.prototype.processDefinitionDescription;\n/** @type {?} */\nTaskDetailsModel.prototype.processDefinitionId;\n/** @type {?} */\nTaskDetailsModel.prototype.processDefinitionKey;\n/** @type {?} */\nTaskDetailsModel.prototype.processDefinitionName;\n/** @type {?} */\nTaskDetailsModel.prototype.processDefinitionVersion;\n/** @type {?} */\nTaskDetailsModel.prototype.processInstanceId;\n/** @type {?} */\nTaskDetailsModel.prototype.processInstanceName;\n/** @type {?} */\nTaskDetailsModel.prototype.processInstanceStartUserId;\n/** @type {?} */\nTaskDetailsModel.prototype.taskDefinitionKey;\n}\n\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { AlfrescoApiService, LogService } from '@alfresco/adf-core';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { Subject } from 'rxjs/Subject';\nimport { FilterRepresentationModel, TaskQueryRequestRepresentationModel } from '../models/filter.model';\nimport { Form } from '../models/form.model';\nimport { TaskDetailsModel } from '../models/task-details.model';\nimport { TaskListModel } from '../models/task-list.model';\nimport'rxjs/add/observable/throw';\nimport'rxjs/add/observable/forkJoin';\nimport'rxjs/add/observable/fromPromise';\nimport'rxjs/operator/switchMap';\nexport class TaskListService {\nprivate tasksListSubject = new Subject<TaskListModel>();\npublic tasksList$: Observable<TaskListModel>;\n/**\n * @param {?} apiService\n * @param {?} logService\n */\nconstructor(private apiService: AlfrescoApiService,\nprivate logService: LogService) {\n        this.tasksList$ = this.tasksListSubject.asObservable();\n    }\n/**\n * Return all the filters in the list where the task id belong\n * @param {?} taskId - string\n * @param {?} filterList\n * @return {?}\n */\ngetFilterForTaskById(taskId: string, filterList: FilterRepresentationModel[]): Observable<FilterRepresentationModel> {\n        return Observable.from(filterList)\n            .flatMap((filter: FilterRepresentationModel) => this.isTaskRelatedToFilter(taskId, filter))\n            .filter((filter: FilterRepresentationModel) => filter != null);\n    }\n/**\n * Return the search node for query task based on the given filter\n * @param {?} filter - FilterRepresentationModel\n * @return {?}\n */\nprivate generateTaskRequestNodeFromFilter(filter: FilterRepresentationModel): TaskQueryRequestRepresentationModel {\n        let /** @type {?} */ requestNode = {\n            appDefinitionId: filter.appId,\n            assignment: filter.filter.assignment,\n            state: filter.filter.state,\n            sort: filter.filter.sort\n        };\n        return new TaskQueryRequestRepresentationModel(requestNode);\n    }\n/**\n * Check if a taskId is filtered with the given filter\n * @param {?} taskId - string\n * @param {?} filter - FilterRepresentationModel\n * @return {?}\n */\nisTaskRelatedToFilter(taskId: string, filter: FilterRepresentationModel): Observable<FilterRepresentationModel> {\n        let /** @type {?} */ requestNodeForFilter = this.generateTaskRequestNodeFromFilter(filter);\n        return Observable.fromPromise(this.callApiTasksFiltered(requestNodeForFilter))\n            .map((res: any) => {\n                return res.data.find(element => element.id === taskId) ? filter : null;\n            }).catch(err => this.handleError(err));\n    }\n/**\n * Retrieve all the tasks filtered by filterModel\n * @param {?} requestNode\n * @return {?}\n */\ngetTasks(requestNode: TaskQueryRequestRepresentationModel): Observable<TaskListModel> {\n        return Observable.fromPromise(this.callApiTasksFiltered(requestNode))\n            .map((res: any) => {\n                this.tasksListSubject.next(res);\n                return res;\n            }).catch(err => this.handleError(err));\n    }\n/**\n * Retrieve tasks filtered by filterModel and state\n * @param {?} requestNode\n * @param {?=} state\n * @return {?}\n */\nfindTasksByState(requestNode: TaskQueryRequestRepresentationModel, state?: string): Observable<TaskListModel> {\n        if (state) {\n            requestNode.state = state;\n        }\n        return this.getTasks(requestNode);\n    }\n/**\n * Retrieve all tasks filtered by filterModel and state\n * @param {?} requestNode\n * @param {?=} state\n * @return {?}\n */\nfindAllTaskByState(requestNode: TaskQueryRequestRepresentationModel, state?: string): Observable<TaskListModel> {\n        if (state) {\n            requestNode.state = state;\n        }\n        return this.getTotalTasks(requestNode).switchMap((res: any) => {\n            requestNode.size = res.total;\n            return this.getTasks(requestNode);\n        });\n    }\n/**\n * Retrieve all tasks filtered by filterModel irrespective of state\n * @param {?} requestNode\n * @return {?}\n */\nfindAllTasksWithoutState(requestNode: TaskQueryRequestRepresentationModel): Observable<TaskListModel> {\n        return Observable.forkJoin(\n                this.findTasksByState(requestNode, 'open'),\n                this.findAllTaskByState(requestNode, 'completed'),\n                (activeTasks: TaskListModel, completedTasks: TaskListModel) => {\n                    const /** @type {?} */ tasks = Object.assign({}, activeTasks);\n                    tasks.total += completedTasks.total;\n                    tasks.data = tasks.data.concat(completedTasks.data);\n                    this.tasksListSubject.next(tasks);\n                    return tasks;\n                }\n            );\n    }\n/**\n * Retrieve all the task details\n * @param {?} taskId\n * @return {?}\n */\ngetTaskDetails(taskId: string): Observable<TaskDetailsModel> {\n        return Observable.fromPromise(this.callApiTaskDetails(taskId))\n            .map(res => res)\n            .map((details: any) => {\n                return new TaskDetailsModel(details);\n            }).catch(err => this.handleError(err));\n    }\n/**\n * Retrieve all the task's checklist\n * @param {?} id - taskId\n * @return {?}\n */\ngetTaskChecklist(id: string): Observable<TaskDetailsModel[]> {\n        return Observable.fromPromise(this.callApiTaskChecklist(id))\n            .map(res => res)\n            .map((response: any) => {\n                let /** @type {?} */ checklists: TaskDetailsModel[] = [];\n                response.data.forEach((checklist) => {\n                    checklists.push(new TaskDetailsModel(checklist));\n                });\n                return checklists;\n            }).catch(err => this.handleError(err));\n    }\n/**\n * Retrieve all the form shared with this user\n * @return {?}\n */\ngetFormList(): Observable<Form []> {\n        let /** @type {?} */ opts = {\n            'filter': 'myReusableForms', // String | filter\n            'sort': 'modifiedDesc', // String | sort\n            'modelType': 2 // Integer | modelType\n        };\n\n        return Observable.fromPromise(this.apiService.getInstance().activiti.modelsApi.getModels(opts)).map(res => res)\n            .map((response: any) => {\n                let /** @type {?} */ forms: Form[] = [];\n                response.data.forEach((form) => {\n                    forms.push(new Form(form.id, form.name));\n                });\n                return forms;\n            }).catch(err => this.handleError(err));\n    }\n/**\n * @param {?} taskId\n * @param {?} formId\n * @return {?}\n */\nattachFormToATask(taskId: string, formId: number): Observable<any> {\n        return Observable.fromPromise(this.apiService.getInstance().activiti.taskApi.attachForm(taskId, {'formId': formId})).catch(err => this.handleError(err));\n    }\n/**\n * Add a task\n * @param {?} task - TaskDetailsModel\n * @return {?}\n */\naddTask(task: TaskDetailsModel): Observable<TaskDetailsModel> {\n        return Observable.fromPromise(this.callApiAddTask(task))\n            .map(res => res)\n            .map((response: TaskDetailsModel) => {\n                return new TaskDetailsModel(response);\n            }).catch(err => this.handleError(err));\n    }\n/**\n * Delete a task\n * @param {?} taskId - string\n * @return {?}\n */\ndeleteTask(taskId: string): Observable<TaskDetailsModel> {\n        return Observable.fromPromise(this.callApiDeleteTask(taskId))\n            .catch(err => this.handleError(err));\n    }\n/**\n * Make the task completed\n * @param {?} taskId\n * @return {?}\n */\ncompleteTask(taskId: string) {\n        return Observable.fromPromise(this.apiService.getInstance().activiti.taskApi.completeTask(taskId))\n            .map(res => res)\n            .catch(err => this.handleError(err));\n    }\n/**\n * Return the total number of the tasks by filter\n * @param {?} requestNode - TaskFilterRepresentationModel\n * @return {?}\n */\npublic getTotalTasks(requestNode: TaskQueryRequestRepresentationModel): Observable<any> {\n        requestNode.size = 0;\n        return Observable.fromPromise(this.callApiTasksFiltered(requestNode))\n            .map((res: any) => {\n                return res;\n            }).catch(err => this.handleError(err));\n    }\n/**\n * Create a new standalone task\n * @param {?} task - TaskDetailsModel\n * @return {?}\n */\ncreateNewTask(task: TaskDetailsModel): Observable<TaskDetailsModel> {\n        return Observable.fromPromise(this.callApiCreateTask(task))\n            .map(res => res)\n            .map((response: TaskDetailsModel) => {\n                return new TaskDetailsModel(response);\n            }).catch(err => this.handleError(err));\n    }\n/**\n * Assign task to user/group\n * @param {?} taskId - string\n * @param {?} requestNode - any\n * @return {?}\n */\nassignTask(taskId: string, requestNode: any): Observable<TaskDetailsModel> {\n        let /** @type {?} */ assignee = {assignee: requestNode.id};\n        return Observable.fromPromise(this.callApiAssignTask(taskId, assignee))\n            .map(res => res)\n            .map((response: TaskDetailsModel) => {\n                return new TaskDetailsModel(response);\n            }).catch(err => this.handleError(err));\n    }\n/**\n * @param {?} taskId\n * @param {?} userId\n * @return {?}\n */\nassignTaskByUserId(taskId: string, userId: number): Observable<TaskDetailsModel> {\n        let /** @type {?} */ assignee = {assignee: userId};\n        return Observable.fromPromise(this.callApiAssignTask(taskId, assignee))\n            .map(res => res)\n            .map((response: TaskDetailsModel) => {\n                return new TaskDetailsModel(response);\n            }).catch(err => this.handleError(err));\n    }\n/**\n * Claim a task\n * @param {?} taskId\n * @return {?}\n */\nclaimTask(taskId: string): Observable<TaskDetailsModel> {\n        return Observable.fromPromise(this.apiService.getInstance().activiti.taskApi.claimTask(taskId))\n            .catch(err => this.handleError(err));\n    }\n/**\n * Unclaim a task\n * @param {?} taskId\n * @return {?}\n */\nunclaimTask(taskId: string): Observable<TaskDetailsModel> {\n        return Observable.fromPromise(this.apiService.getInstance().activiti.taskApi.unclaimTask(taskId))\n            .catch(err => this.handleError(err));\n    }\n/**\n * Update due date\n * @param {?} taskId\n * @param {?} updated\n * @return {?}\n */\nupdateTask(taskId: any, updated): Observable<TaskDetailsModel> {\n        return Observable.fromPromise(this.apiService.getInstance().activiti.taskApi.updateTask(taskId, updated))\n            .catch(err => this.handleError(err));\n    }\n/**\n * fetch the Task Audit information as a pdf\n * @param {?} taskId - the task id\n * @return {?}\n */\nfetchTaskAuditPdfById(taskId: string): Observable<Blob> {\n        return Observable.fromPromise(this.apiService.getInstance().activiti.taskApi.getTaskAuditPdf(taskId))\n            .catch(err => this.handleError(err));\n    }\n/**\n * fetch the Task Audit information in a json format\n * @param {?} taskId - the task id\n * @return {?}\n */\nfetchTaskAuditJsonById(taskId: string): Observable<any> {\n        return Observable.fromPromise(this.apiService.getInstance().activiti.taskApi.getTaskAuditJson(taskId))\n            .catch(err => this.handleError(err));\n    }\n/**\n * @param {?} requestNode\n * @return {?}\n */\nprivate callApiTasksFiltered(requestNode: TaskQueryRequestRepresentationModel) {\n        return this.apiService.getInstance().activiti.taskApi.listTasks(requestNode);\n    }\n/**\n * @param {?} taskId\n * @return {?}\n */\nprivate callApiTaskDetails(taskId: string) {\n        return this.apiService.getInstance().activiti.taskApi.getTask(taskId);\n    }\n/**\n * @param {?} task\n * @return {?}\n */\nprivate callApiAddTask(task: TaskDetailsModel) {\n        return this.apiService.getInstance().activiti.taskApi.addSubtask(task.parentTaskId, task);\n    }\n/**\n * @param {?} taskId\n * @return {?}\n */\nprivate callApiDeleteTask(taskId: string) {\n        return this.apiService.getInstance().activiti.taskApi.deleteTask(taskId);\n    }\n/**\n * @param {?} taskId\n * @return {?}\n */\nprivate callApiTaskChecklist(taskId: string) {\n        return this.apiService.getInstance().activiti.taskApi.getChecklist(taskId);\n    }\n/**\n * @param {?} task\n * @return {?}\n */\nprivate callApiCreateTask(task: TaskDetailsModel) {\n        return this.apiService.getInstance().activiti.taskApi.createNewTask(task);\n    }\n/**\n * @param {?} taskId\n * @param {?} requestNode\n * @return {?}\n */\nprivate callApiAssignTask(taskId: string, requestNode: any) {\n        return this.apiService.getInstance().activiti.taskApi.assignTask(taskId, requestNode);\n    }\n/**\n * @param {?} error\n * @return {?}\n */\nprivate handleError(error: any) {\n        this.logService.error(error);\n        this.tasksListSubject.error(error);\n        return Observable.throw(error || 'Server error');\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: AlfrescoApiService, },\n{type: LogService, },\n];\n}\n\nfunction TaskListService_tsickle_Closure_declarations() {\n/** @type {?} */\nTaskListService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTaskListService.ctorParameters;\n/** @type {?} */\nTaskListService.prototype.tasksListSubject;\n/** @type {?} */\nTaskListService.prototype.tasksList$;\n/** @type {?} */\nTaskListService.prototype.apiService;\n/** @type {?} */\nTaskListService.prototype.logService;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { AlfrescoApiService, AppConfigService, UploadService } from '@alfresco/adf-core';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport'rxjs/add/observable/throw';\nexport class ProcessUploadService extends UploadService {\n\n    instanceApi: AlfrescoApiService;\n/**\n * @param {?} apiService\n * @param {?} appConfigService\n */\nconstructor(apiService: AlfrescoApiService, appConfigService: AppConfigService) {\n        super(apiService, appConfigService);\n        this.instanceApi = apiService;\n    }\n/**\n * @param {?} file\n * @return {?}\n */\ngetUploadPromise(file: any): any {\n        let /** @type {?} */ opts = {\n            isRelatedContent: true\n        };\n        let /** @type {?} */ processInstanceId = file.options.parentId;\n        let /** @type {?} */ promise = this.instanceApi.getInstance().activiti.contentApi.createRelatedContentOnProcessInstance(processInstanceId, file.file, opts);\n\n        promise.catch(err => this.handleError(err));\n\n        return promise;\n    }\n/**\n * @param {?} error\n * @return {?}\n */\nprivate handleError(error: any) {\n        return Observable.throw(error || 'Server error');\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: AlfrescoApiService, },\n{type: AppConfigService, },\n];\n}\n\nfunction ProcessUploadService_tsickle_Closure_declarations() {\n/** @type {?} */\nProcessUploadService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nProcessUploadService.ctorParameters;\n/** @type {?} */\nProcessUploadService.prototype.instanceApi;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { AlfrescoApiService, AppConfigService, UploadService } from '@alfresco/adf-core';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport'rxjs/add/observable/throw';\nexport class TaskUploadService extends UploadService {\n\n    instanceApi: AlfrescoApiService;\n/**\n * @param {?} apiService\n * @param {?} appConfigService\n */\nconstructor(apiService: AlfrescoApiService, appConfigService: AppConfigService) {\n        super(apiService, appConfigService);\n        this.instanceApi = apiService;\n    }\n/**\n * @param {?} file\n * @return {?}\n */\ngetUploadPromise(file: any): any {\n        let /** @type {?} */ opts = {\n            isRelatedContent: true\n        };\n        let /** @type {?} */ taskId = file.options.parentId;\n        let /** @type {?} */ promise = this.instanceApi.getInstance().activiti.contentApi.createRelatedContentOnTask(taskId, file.file, opts);\n\n        promise.catch(err => this.handleError(err));\n\n        return promise;\n    }\n/**\n * @param {?} error\n * @return {?}\n */\nprivate handleError(error: any) {\n        return Observable.throw(error || 'Server error');\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: AlfrescoApiService, },\n{type: AppConfigService, },\n];\n}\n\nfunction TaskUploadService_tsickle_Closure_declarations() {\n/** @type {?} */\nTaskUploadService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTaskUploadService.ctorParameters;\n/** @type {?} */\nTaskUploadService.prototype.instanceApi;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { MaterialModule } from '../material.module';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { DataColumnModule, DataTableModule } from '@alfresco/adf-core';\n\nimport { ProcessCommentsComponent } from './process-comments.component';\nimport { CommentListComponent } from './comment-list.component';\nimport { CommentsComponent } from './comments.component';\nexport class CommentsModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [\n        DataColumnModule,\n        DataTableModule,\n        FormsModule,\n        ReactiveFormsModule,\n        MaterialModule,\n        CommonModule,\n        TranslateModule\n    ],\n    declarations: [\n        ProcessCommentsComponent,\n        CommentListComponent,\n        CommentsComponent\n    ],\n    exports: [\n        ProcessCommentsComponent,\n        CommentListComponent,\n        CommentsComponent\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction CommentsModule_tsickle_Closure_declarations() {\n/** @type {?} */\nCommentsModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCommentsModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { CommentProcessModel, CommentProcessService } from '@alfresco/adf-core';\nimport { Component, EventEmitter, Input, OnChanges, Output, SimpleChanges } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\nexport class CommentsComponent implements OnChanges {\n\n    \n    taskId: string;\n\n    \n    readOnly: boolean = false;\n\n    \n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    comments: CommentProcessModel [] = [];\nprivate commentObserver: Observer<CommentProcessModel>;\n    comment$: Observable<CommentProcessModel>;\n\n    message: string;\n\n    beingAdded: boolean = false;\n/**\n * @param {?} commentProcessService\n */\nconstructor(private commentProcessService: CommentProcessService) {\n        this.comment$ = new Observable<CommentProcessModel>(observer =>  this.commentObserver = observer).share();\n        this.comment$.subscribe((comment: CommentProcessModel) => {\n            this.comments.push(comment);\n        });\n    }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n        let /** @type {?} */ taskId = changes['taskId'];\n        if (taskId) {\n            if (taskId.currentValue) {\n                this.getTaskComments(taskId.currentValue);\n            } else {\n                this.resetComments();\n            }\n        }\n    }\n/**\n * @param {?} taskId\n * @return {?}\n */\nprivate getTaskComments(taskId: string): void {\n        this.resetComments();\n        if (taskId) {\n            this.commentProcessService.getTaskComments(taskId).subscribe(\n                (res: CommentProcessModel[]) => {\n                    res = res.sort((comment1: CommentProcessModel, comment2: CommentProcessModel) => {\n                        let /** @type {?} */ date1 = new Date(comment1.created);\n                        let /** @type {?} */ date2 = new Date(comment2.created);\n                        return date1 > date2 ? -1 : date1 < date2 ? 1 : 0;\n                    });\n                    res.forEach((comment) => {\n                        this.commentObserver.next(comment);\n                    });\n                    },\n                (err) => {\n                    this.error.emit(err);\n                }\n            );\n        }\n    }\n/**\n * @return {?}\n */\nprivate resetComments(): void {\n        this.comments = [];\n    }\n/**\n * @return {?}\n */\nadd(): void {\n        if (this.message && this.message.trim() && !this.beingAdded) {\n            this.beingAdded = true;\n            this.commentProcessService.addTaskComment(this.taskId, this.message)\n            .subscribe(\n                (res: CommentProcessModel) => {\n                        this.comments.unshift(res);\n                        this.message = '';\n                        this.beingAdded = false;\n\n                },\n                (err) => {\n                    this.error.emit(err);\n                    this.beingAdded = false;\n                }\n            );\n        }\n    }\n/**\n * @return {?}\n */\nclear(): void {\n        this.message = '';\n    }\n/**\n * @return {?}\n */\nisReadOnly(): boolean {\n        return this.readOnly;\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'adf-comments',\n    template: `\n      <div class=\"adf-comments-container\">\n          <div id=\"comment-header\" class=\"adf-comments-header\">\n              {{'ADF_TASK_LIST.DETAILS.COMMENTS.HEADER' | translate: { count: comments?.length} }}\n          </div>\n          <div class=\"adf-comments-input-container\" *ngIf=\"!isReadOnly()\">\n                  <mat-form-field class=\"adf-full-width\">\n                      <input matInput id=\"comment-input\" placeholder=\"{{'ADF_TASK_LIST.DETAILS.COMMENTS.ADD' | translate}}\" [(ngModel)]=\"message\" (keyup.enter)=\"add()\" (keyup.esc)=\"clear()\">\n                  </mat-form-field>\n          </div>\n\n          <div *ngIf=\"comments.length > 0\">\n              <adf-comment-list [comments]=\"comments\">\n              </adf-comment-list>\n          </div>\n      </div>\n    `,\n    styles: [`\n      .adf-comments-container {\n          height: 100%;\n          width: 100%;\n          overflow: auto;\n      }\n\n      .adf-comments-header {\n          padding: 10px 20px;\n          font-size: 14px;\n          font-weight: 600;\n          border-bottom: 1px solid #e1e1e1;\n          color: #a1a1a1;\n      }\n\n      .adf-comments-input-container {\n          padding: 0 15px;\n          width: calc(100% - 30px);\n          padding-top: 8px;\n          border-bottom: 1px solid #e1e1e1;\n      }\n\n      .adf-full-width {\n          width: 100%;\n      }\n\n      adf-comment-list {\n          float: left;\n          overflow: auto;\n          height: calc(100% - 101px);\n          width: 100%;\n      }\n    `]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: CommentProcessService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'taskId': [{ type: Input },],\n'readOnly': [{ type: Input },],\n'error': [{ type: Output },],\n};\n}\n\nfunction CommentsComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nCommentsComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCommentsComponent.ctorParameters;\n/** @type {?} */\nCommentsComponent.propDecorators;\n/** @type {?} */\nCommentsComponent.prototype.taskId;\n/** @type {?} */\nCommentsComponent.prototype.readOnly;\n/** @type {?} */\nCommentsComponent.prototype.error;\n/** @type {?} */\nCommentsComponent.prototype.comments;\n/** @type {?} */\nCommentsComponent.prototype.commentObserver;\n/** @type {?} */\nCommentsComponent.prototype.comment$;\n/** @type {?} */\nCommentsComponent.prototype.message;\n/** @type {?} */\nCommentsComponent.prototype.beingAdded;\n/** @type {?} */\nCommentsComponent.prototype.commentProcessService;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { CommentProcessModel, PeopleProcessService, UserProcessModel } from '@alfresco/adf-core';\nimport { DatePipe } from '@angular/common';\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\nexport class CommentListComponent {\n\n    \n    comments: CommentProcessModel[];\n\n    \n    clickRow: EventEmitter<CommentProcessModel> = new EventEmitter<CommentProcessModel>();\n\n    selectedComment: CommentProcessModel;\n/**\n * @param {?} datePipe\n * @param {?} peopleProcessService\n */\nconstructor(private datePipe: DatePipe,\npublic peopleProcessService: PeopleProcessService) {\n    }\n/**\n * @param {?} event\n * @return {?}\n */\nselectComment(event: any): void {\n        this.selectedComment = event.value.obj;\n        this.clickRow.emit(this.selectedComment);\n    }\n/**\n * @param {?} user\n * @return {?}\n */\ngetUserShortName(user: UserProcessModel): string {\n        let /** @type {?} */ shortName = '';\n        if (user) {\n            if (user.firstName) {\n                shortName = user.firstName[0].toUpperCase();\n            }\n            if (user.lastName) {\n                shortName += user.lastName[0].toUpperCase();\n            }\n        }\n        return shortName;\n    }\n/**\n * @param {?} aDate\n * @return {?}\n */\ntransformDate(aDate: string): string {\n        let /** @type {?} */ formattedDate: string;\n        let /** @type {?} */ givenDate = Number.parseInt(this.datePipe.transform(aDate, 'yMMdd'));\n        let /** @type {?} */ today = Number.parseInt(this.datePipe.transform(Date.now(), 'yMMdd'));\n        if (givenDate === today) {\n            formattedDate = 'Today, ' + this.datePipe.transform(aDate, 'hh:mm a');\n        } else {\n            let /** @type {?} */ yesterday = Number.parseInt(this.datePipe.transform(Date.now() - 24 * 3600 * 1000, 'yMMdd'));\n            if (givenDate === yesterday) {\n                formattedDate = 'Yesterday, ' + this.datePipe.transform(aDate, 'hh:mm a');\n            } else {\n                formattedDate = this.datePipe.transform(aDate, 'MMM dd y, hh:mm a');\n            }\n        }\n        return formattedDate;\n    }\n/**\n * @return {?}\n */\nhasComments(): boolean {\n        return this.comments && this.comments.length && true;\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'adf-comment-list',\n    template: `\n      <adf-datatable\n          [rows]=\"comments\"\n          (rowClick)=\"selectComment($event)\" *ngIf=\"hasComments()\">\n\n          <data-columns>\n              <data-column key=\"createdBy\" title=\"{{'ADF_TASK_LIST.DETAILS.COMMENTS.CREATED_BY_HEADER' | translate }}\">\n                  <ng-template let-entry=\"$implicit\">\n                      <div id=\"comment-user-icon\"\n                      class=\"adf-comment-img-container\">\n                          <div\n                              *ngIf=\"!entry.row.obj.createdBy.pictureId\" class=\"adf-comment-user-icon\">\n                                  {{getUserShortName(entry.row.obj.createdBy)}}</div>\n                          <div>\n                              <img *ngIf=\"entry.row.obj.createdBy.pictureId\" class=\"adf-people-img\"\n                                  [src]=\"peopleProcessService.getUserImage(entry.row.obj.createdBy)\"/>\n                          </div>\n                      </div>\n                  </ng-template>\n              </data-column>\n              <data-column key=\"message\" title=\"{{'ADF_TASK_LIST.DETAILS.COMMENTS.MESSAGE_HEADER' | translate }}\">\n                  <ng-template let-entry=\"$implicit\">\n                      <div class=\"adf-comment-contents\">\n                          <div id=\"comment-user\" class=\"adf-comment-user-name\">\n                              {{entry.row.obj.createdBy?.firstName}} {{entry.row.obj.createdBy?.lastName}}\n                          </div>\n                          <div id=\"comment-message\" class=\"adf-comment-message\">\n                              {{entry.row.obj.message}}\n                          </div>\n                          <div id=\"comment-time\" class=\"adf-comment-message-time\">\n                              {{transformDate(entry.row.obj.created)}}\n                          </div>\n                      </div>\n                  </ng-template>\n              </data-column>\n          </data-columns>\n\n      </adf-datatable>\n    `,\n    styles: [`\n\n    `]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: DatePipe, },\n{type: PeopleProcessService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'comments': [{ type: Input },],\n'clickRow': [{ type: Output },],\n};\n}\n\nfunction CommentListComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nCommentListComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCommentListComponent.ctorParameters;\n/** @type {?} */\nCommentListComponent.propDecorators;\n/** @type {?} */\nCommentListComponent.prototype.comments;\n/** @type {?} */\nCommentListComponent.prototype.clickRow;\n/** @type {?} */\nCommentListComponent.prototype.selectedComment;\n/** @type {?} */\nCommentListComponent.prototype.datePipe;\n/** @type {?} */\nCommentListComponent.prototype.peopleProcessService;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { CommentProcessModel, CommentProcessService } from '@alfresco/adf-core';\nimport { Component, EventEmitter, Input, OnChanges, Output, SimpleChanges } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\nexport class ProcessCommentsComponent implements OnChanges {\n\n    \n    processInstanceId: string;\n\n    \n    readOnly: boolean = true;\n\n    \n    error: EventEmitter<any> = new EventEmitter<any>();\n\n    comments: CommentProcessModel [] = [];\nprivate commentObserver: Observer<CommentProcessModel>;\n    comment$: Observable<CommentProcessModel>;\n\n    message: string;\n\n    beingAdded: boolean = false;\n/**\n * @param {?} commentProcessService\n */\nconstructor(private commentProcessService: CommentProcessService) {\n        this.comment$ = new Observable<CommentProcessModel>(observer =>  this.commentObserver = observer).share();\n        this.comment$.subscribe((comment: CommentProcessModel) => {\n            this.comments.push(comment);\n        });\n    }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n        let /** @type {?} */ processInstanceId = changes['processInstanceId'];\n        if (processInstanceId) {\n            if (processInstanceId.currentValue) {\n                this.getProcessInstanceComments(processInstanceId.currentValue);\n            } else {\n                this.resetComments();\n            }\n        }\n    }\n/**\n * @param {?} processInstanceId\n * @return {?}\n */\nprivate getProcessInstanceComments(processInstanceId: string): void {\n        this.resetComments();\n        if (processInstanceId) {\n            this.commentProcessService.getProcessInstanceComments(processInstanceId).subscribe(\n                (res: CommentProcessModel[]) => {\n                    res = res.sort((comment1: CommentProcessModel, comment2: CommentProcessModel) => {\n                        let /** @type {?} */ date1 = new Date(comment1.created);\n                        let /** @type {?} */ date2 = new Date(comment2.created);\n                        return date1 > date2 ? -1 : date1 < date2 ? 1 : 0;\n                    });\n                    res.forEach((comment) => {\n                        this.commentObserver.next(comment);\n                    });\n                },\n                (err) => {\n                    this.error.emit(err);\n                }\n            );\n        }\n    }\n/**\n * @return {?}\n */\nprivate resetComments(): void {\n        this.comments = [];\n    }\n/**\n * @return {?}\n */\nadd(): void {\n        if (this.message && this.message.trim() && !this.beingAdded) {\n            this.beingAdded = true;\n            this.commentProcessService.addProcessInstanceComment(this.processInstanceId, this.message)\n                .subscribe(\n                    (res: CommentProcessModel) => {\n                        this.comments.unshift(res);\n                        this.message = '';\n                        this.beingAdded = false;\n\n                    },\n                    (err) => {\n                        this.error.emit(err);\n                        this.beingAdded = false;\n                    }\n                );\n        }\n    }\n/**\n * @return {?}\n */\nclear(): void {\n        this.message = '';\n    }\n/**\n * @return {?}\n */\nisReadOnly(): boolean {\n        return this.readOnly;\n    }\n/**\n * @param {?} error\n * @return {?}\n */\nonError(error: any) {\n        this.error.emit(error);\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'adf-process-instance-comments',\n    template: `\n      <div class=\"adf-comments-container\">\n          <div id=\"comment-header\" class=\"adf-comments-header\">\n              {{'ADF_PROCESS_LIST.DETAILS.COMMENTS.HEADER' | translate: { count: comments?.length} }}\n          </div>\n          <div class=\"adf-comments-input-container\" *ngIf=\"!isReadOnly()\">\n              <mat-form-field class=\"adf-full-width\">\n                  <input matInput id=\"comment-input\" placeholder=\"{{'ADF_PROCESS_LIST.DETAILS.COMMENTS.ADD' | translate}}\" [(ngModel)]=\"message\" (keyup.enter)=\"add()\" (keyup.esc)=\"clear()\">\n              </mat-form-field>\n          </div>\n\n          <div *ngIf=\"comments.length > 0\">\n              <adf-comment-list [comments]=\"comments\">\n              </adf-comment-list>\n          </div>\n      </div>\n    `,\n    styles: [`\n      :host {\n          width: 100%;\n      }\n\n      .activiti-label {\n          font-weight: bolder;\n          vertical-align: top;\n      }\n\n      .activiti-label + .icon {\n          position: relative;\n          top: -2px;\n      }\n\n      .list-wrap {\n          word-wrap: break-word;\n          word-break: break-all;\n          -webkit-hyphens:auto;\n          -o-hyphens:auto;\n          -ms-hyphens:auto;\n              hyphens:auto;\n      }\n\n      .hide-long-names {\n          overflow: auto;\n      }\n\n      .adf-comments-container {\n          height: 100%;\n          width: 100%;\n          overflow: auto;\n      }\n\n      .adf-comments-header {\n          padding: 10px 20px;\n          font-size: 14px;\n          font-weight: 600;\n          border-bottom: 1px solid #e1e1e1;\n          color: #a1a1a1;\n      }\n\n      .adf-comments-input-container {\n          padding: 0 15px;\n          width: calc(100% - 30px);\n          padding-top: 8px;\n          border-bottom: 1px solid #e1e1e1;\n      }\n\n      .adf-full-width {\n          width: 100%;\n      }\n\n      adf-comment-list {\n          float: left;\n          overflow: auto;\n          height: calc(100% - 101px);\n          width: 100%;\n      }\n    `]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: CommentProcessService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'processInstanceId': [{ type: Input },],\n'readOnly': [{ type: Input },],\n'error': [{ type: Output },],\n};\n}\n\nfunction ProcessCommentsComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nProcessCommentsComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nProcessCommentsComponent.ctorParameters;\n/** @type {?} */\nProcessCommentsComponent.propDecorators;\n/** @type {?} */\nProcessCommentsComponent.prototype.processInstanceId;\n/** @type {?} */\nProcessCommentsComponent.prototype.readOnly;\n/** @type {?} */\nProcessCommentsComponent.prototype.error;\n/** @type {?} */\nProcessCommentsComponent.prototype.comments;\n/** @type {?} */\nProcessCommentsComponent.prototype.commentObserver;\n/** @type {?} */\nProcessCommentsComponent.prototype.comment$;\n/** @type {?} */\nProcessCommentsComponent.prototype.message;\n/** @type {?} */\nProcessCommentsComponent.prototype.beingAdded;\n/** @type {?} */\nProcessCommentsComponent.prototype.commentProcessService;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { MaterialModule } from '../material.module';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { DataColumnModule,  DataTableModule } from '@alfresco/adf-core';\nimport { PeopleComponent } from './people.component';\nimport { PeopleListComponent } from './people-list.component';\nimport { PeopleSearchActionLabelDirective, PeopleSearchComponent, PeopleSearchTitleDirective } from './people-search.component';\nexport class PeopleModule {\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [\n        FormsModule,\n        ReactiveFormsModule,\n        DataColumnModule,\n        DataTableModule,\n        MaterialModule,\n        CommonModule,\n        TranslateModule\n    ],\n    declarations: [\n        PeopleComponent,\n        PeopleSearchComponent,\n        PeopleSearchTitleDirective,\n        PeopleSearchActionLabelDirective,\n        PeopleListComponent\n    ],\n    exports: [\n        PeopleComponent,\n        PeopleSearchComponent,\n        PeopleSearchTitleDirective,\n        PeopleSearchActionLabelDirective,\n        PeopleListComponent\n    ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction PeopleModule_tsickle_Closure_declarations() {\n/** @type {?} */\nPeopleModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPeopleModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { LogService, UserProcessModel } from '@alfresco/adf-core';\nimport { PeopleProcessService } from '@alfresco/adf-core';\nimport { AfterViewInit, Component, Input, OnInit, ViewChild } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\nimport { UserEventModel } from '../task-list/models/user-event.model';\nimport { PeopleSearchComponent } from './people-search.component';\nexport class PeopleComponent implements OnInit, AfterViewInit {\n\n    \n    people: UserProcessModel[] = [];\n\n    \n    taskId: string = '';\n\n    \n    readOnly: boolean = false;\n\n    \n    peopleSearch: PeopleSearchComponent;\n\n    showAssignment: boolean = false;\nprivate peopleSearchObserver: Observer<UserProcessModel[]>;\n    peopleSearch$: Observable<UserProcessModel[]>;\n/**\n * @param {?} logService\n * @param {?} peopleProcessService\n */\nconstructor(private logService: LogService,\npublic peopleProcessService: PeopleProcessService) {\n        this.peopleSearch$ = new Observable<UserProcessModel[]>(observer => this.peopleSearchObserver = observer).share();\n    }\n/**\n * @return {?}\n */\nngOnInit() {\n    }\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    }\n/**\n * @return {?}\n */\ninvolveUserAndCloseSearch() {\n        if (this.peopleSearch) {\n            this.peopleSearch.involveUserAndClose();\n        }\n    }\n/**\n * @return {?}\n */\ninvolveUserWithoutCloseSearch() {\n        if (this.peopleSearch) {\n            this.peopleSearch.involveUser();\n        }\n    }\n/**\n * @param {?} searchedWord\n * @return {?}\n */\nsearchUser(searchedWord: string) {\n        this.peopleProcessService.getWorkflowUsers(this.taskId, searchedWord)\n            .subscribe((users) => {\n                this.peopleSearchObserver.next(users);\n            }, error => this.logService.error(error));\n    }\n/**\n * @param {?} user\n * @return {?}\n */\ninvolveUser(user: UserProcessModel) {\n        this.peopleProcessService.involveUserWithTask(this.taskId, user.id.toString())\n            .subscribe(() => {\n                this.people = [...this.people, user];\n            }, error => this.logService.error('Impossible to involve user with task'));\n    }\n/**\n * @param {?} user\n * @return {?}\n */\nremoveInvolvedUser(user: UserProcessModel) {\n        this.peopleProcessService.removeInvolvedUser(this.taskId, user.id.toString())\n            .subscribe(() => {\n                this.people = this.people.filter((involvedUser) => {\n                    return involvedUser.id !== user.id;\n                });\n            }, error => this.logService.error('Impossible to remove involved user from task'));\n    }\n/**\n * @param {?} firstName\n * @param {?} lastName\n * @param {?=} delimiter\n * @return {?}\n */\ngetDisplayUser(firstName: string, lastName: string, delimiter: string = '-'): string {\n        firstName = (firstName !== null ? firstName : '');\n        lastName = (lastName !== null ? lastName : '');\n        return firstName + delimiter + lastName;\n    }\n/**\n * @param {?} firstName\n * @param {?} lastName\n * @return {?}\n */\ngetInitialUserName(firstName: string, lastName: string) {\n        firstName = (firstName !== null && firstName !== '' ? firstName[0] : '');\n        lastName = (lastName !== null && lastName !== '' ? lastName[0] : '');\n        return this.getDisplayUser(firstName, lastName, '');\n    }\n/**\n * @return {?}\n */\nonAddAssignement() {\n        this.showAssignment = true;\n    }\n/**\n * @param {?} event\n * @return {?}\n */\nonClickAction(event: UserEventModel) {\n        if (event.type === 'remove') {\n            this.removeInvolvedUser(event.value);\n        }\n    }\n/**\n * @return {?}\n */\nhasPeople() {\n        return this.people && this.people.length > 0;\n    }\n/**\n * @return {?}\n */\nisEditMode() {\n        return !this.readOnly;\n    }\n/**\n * @return {?}\n */\nonCloseSearch() {\n        this.showAssignment = false;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'adf-people',\n    template: `\n      <mat-card class=\"assignment-top-container\">\n          <div mat-card-content class=\"assignment-top-container-content\">\n              <div class=\"assignment-header\">\n                      <div *ngIf=\"hasPeople()\" class=\"assigment-count\" id=\"people-title\">\n                          {{ 'ADF_TASK_LIST.DETAILS.LABELS.PEOPLE' | translate }} {{ ' (' + people.length + ')' }}\n                      </div>\n                      <div *ngIf=\"!hasPeople()\" class=\"assigment-count\" id=\"no-people-label\">\n                          {{ 'ADF_TASK_LIST.DETAILS.PEOPLE.NONE' | translate }}\n                      </div>\n                      <div *ngIf=\"isEditMode()\" class=\"add-people\" (click)=\"onAddAssignement()\">\n                          <mat-icon class=\"adf-add-person-icon\">person_add</mat-icon>\n                      </div>\n                  </div>\n                  <div class=\"assignment-container\" *ngIf=\"showAssignment\">\n                      <adf-people-search\n                      (searchPeople)=\"searchUser($event)\"\n                      (success)=\"involveUser($event)\"\n                      (closeSearch)=\"onCloseSearch()\"\n                      [results]=\"peopleSearch$\">\n                          <ng-container people-search-title>{{ 'ADF_TASK_LIST.DETAILS.LABELS.ADD_PEOPLE' | translate }}</ng-container>\n                          <ng-container people-search-action-label>{{ 'ADF_TASK_LIST.PEOPLE.ADD_USER' | translate }}</ng-container>\n                      </adf-people-search>\n                  </div>\n                  <div class=\"assignment-list-container\" id=\"assignment-people-list\" *ngIf=\"hasPeople()\">\n                      <adf-people-list\n                      [users]=\"people\"\n                      [actions]=\"isEditMode()\"\n                      (clickAction)=\"onClickAction($event)\">\n                          <data-columns>\n                              <data-column key=\"firstName\">\n                                  <ng-template let-entry=\"$implicit\">\n                                      <div *ngIf=\"!entry.row.obj.pictureId\" class=\"adf-people-search-people-pic\">\n                                          {{getInitialUserName(entry.row.obj.firstName, entry.row.obj.lastName)}}</div>\n                                      <div>\n                                          <img *ngIf=\"entry.row.obj.pictureId\" class=\"people-img\"\n                                              [src]=\"peopleProcessService.getUserImage(entry.row.obj)\"/>\n                                      </div>\n                                  </ng-template>\n                              </data-column>\n                              <data-column key=\"email\" class=\"full-width\">\n                                  <ng-template let-entry=\"$implicit\">\n                                      <div class=\"people-full-name\">{{ getDisplayUser(entry.row.obj.firstName, entry.row.obj.lastName, ' ') }}</div>\n                                      <div class=\"people-email\">{{ entry.row.obj.email }}</div>\n                                      <div class=\"people-edit-label\">can edit</div>\n                                  </ng-template>\n                              </data-column>\n                          </data-columns>\n                      </adf-people-list>\n                  </div>\n          </div>\n      </mat-card>\n    `,\n    styles: [`\n\n    `]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: LogService, },\n{type: PeopleProcessService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'people': [{ type: Input },],\n'taskId': [{ type: Input },],\n'readOnly': [{ type: Input },],\n'peopleSearch': [{ type: ViewChild, args: [PeopleSearchComponent, ] },],\n};\n}\n\nfunction PeopleComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nPeopleComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPeopleComponent.ctorParameters;\n/** @type {?} */\nPeopleComponent.propDecorators;\n/** @type {?} */\nPeopleComponent.prototype.people;\n/** @type {?} */\nPeopleComponent.prototype.taskId;\n/** @type {?} */\nPeopleComponent.prototype.readOnly;\n/** @type {?} */\nPeopleComponent.prototype.peopleSearch;\n/** @type {?} */\nPeopleComponent.prototype.showAssignment;\n/** @type {?} */\nPeopleComponent.prototype.peopleSearchObserver;\n/** @type {?} */\nPeopleComponent.prototype.peopleSearch$;\n/** @type {?} */\nPeopleComponent.prototype.logService;\n/** @type {?} */\nPeopleComponent.prototype.peopleProcessService;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\n/**\n * \n * This object represent the User Event.\n * \n * \n */\nexport class UserEventModel {\n    type: string = '';\n    value: any = {};\n/**\n * @param {?=} obj\n */\nconstructor(obj?: any) {\n        this.type = obj && obj.type;\n        this.value = obj && obj.value || {};\n    }\n}\n\nfunction UserEventModel_tsickle_Closure_declarations() {\n/** @type {?} */\nUserEventModel.prototype.type;\n/** @type {?} */\nUserEventModel.prototype.value;\n}\n\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { DataTableComponent } from '@alfresco/adf-core';\nimport { DataColumnListComponent, UserProcessModel } from '@alfresco/adf-core';\nimport { AfterContentInit, AfterViewInit, Component, ContentChild, EventEmitter, Input, Output, ViewChild } from '@angular/core';\nimport { UserEventModel } from '../task-list/models/user-event.model';\nexport class PeopleListComponent implements AfterViewInit, AfterContentInit {\n\n     columnList: DataColumnListComponent;\n\n    \n    peopleDataTable: DataTableComponent;\n\n    \n    users: UserProcessModel[];\n\n    \n    actions: boolean = false;\n\n    \n    clickRow: EventEmitter<UserProcessModel> = new EventEmitter<UserProcessModel>();\n\n    \n    clickAction: EventEmitter<UserEventModel> = new EventEmitter<UserEventModel>();\n\n    user: UserProcessModel;\n/**\n * @return {?}\n */\nngAfterContentInit() {\n        this.peopleDataTable.columnList = this.columnList;\n    }\n/**\n * @return {?}\n */\nngAfterViewInit() {\n    }\n/**\n * @param {?} event\n * @return {?}\n */\nselectUser(event: any) {\n        this.user = event.value.obj;\n        this.clickRow.emit(this.user);\n    }\n/**\n * @return {?}\n */\nhasActions(): boolean {\n        return this.actions;\n    }\n/**\n * @param {?} event\n * @return {?}\n */\nonShowRowActionsMenu(event: any) {\n\n        let /** @type {?} */ removeAction = {\n            title: 'Remove',\n            name: 'remove'\n        };\n\n        event.value.actions = [\n            removeAction\n        ];\n    }\n/**\n * @param {?} event\n * @return {?}\n */\nonExecuteRowAction(event: any) {\n        let /** @type {?} */ args = event.value;\n        let /** @type {?} */ action = args.action;\n        this.clickAction.emit(new UserEventModel({type: action.name, value: args.row.obj}));\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'adf-people-list',\n    template: `\n      <adf-datatable\n          [rows]=\"users\"\n          [actions]=\"hasActions()\"\n          (rowClick)=\"selectUser($event)\"\n          (rowDblClick)=\"selectUser($event)\"\n          (showRowActionsMenu)=\"onShowRowActionsMenu($event)\"\n          (executeRowAction)=\"onExecuteRowAction($event)\">\n      </adf-datatable>\n    `,\n    styles: [`\n\n    `]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'columnList': [{ type: ContentChild, args: [DataColumnListComponent, ] },],\n'peopleDataTable': [{ type: ViewChild, args: [DataTableComponent, ] },],\n'users': [{ type: Input },],\n'actions': [{ type: Input },],\n'clickRow': [{ type: Output },],\n'clickAction': [{ type: Output },],\n};\n}\n\nfunction PeopleListComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nPeopleListComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPeopleListComponent.ctorParameters;\n/** @type {?} */\nPeopleListComponent.propDecorators;\n/** @type {?} */\nPeopleListComponent.prototype.columnList;\n/** @type {?} */\nPeopleListComponent.prototype.peopleDataTable;\n/** @type {?} */\nPeopleListComponent.prototype.users;\n/** @type {?} */\nPeopleListComponent.prototype.actions;\n/** @type {?} */\nPeopleListComponent.prototype.clickRow;\n/** @type {?} */\nPeopleListComponent.prototype.clickAction;\n/** @type {?} */\nPeopleListComponent.prototype.user;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { NgModule } from '@angular/core';\nimport {\n    MAT_PLACEHOLDER_GLOBAL_OPTIONS, MatAutocompleteModule, MatButtonModule, MatCardModule, MatCheckboxModule,\n    MatChipsModule, MatDatepickerModule, MatDialogModule, MatGridListModule, MatIconModule,\n    MatInputModule, MatListModule, MatNativeDateModule, MatOptionModule, MatProgressSpinnerModule, MatRadioModule,\n    MatRippleModule, MatSelectModule, MatSlideToggleModule, MatTableModule, MatTabsModule,\n    MatTooltipModule\n} from '@angular/material';\n/**\n * @return {?}\n */\nexport function modules() {\n    return [\n        MatAutocompleteModule, MatButtonModule, MatCardModule, MatDialogModule,\n        MatCheckboxModule, MatDatepickerModule, MatGridListModule, MatIconModule, MatInputModule,\n        MatListModule, MatOptionModule, MatRadioModule, MatSelectModule, MatSlideToggleModule, MatTableModule,\n        MatTabsModule, MatProgressSpinnerModule, MatNativeDateModule, MatRippleModule, MatTooltipModule,\n        MatChipsModule\n    ];\n}\nexport class MaterialModule {static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    providers: [\n        {provide: MAT_PLACEHOLDER_GLOBAL_OPTIONS, useValue: { float: 'never' }}\n    ],\n    imports: modules(),\n    exports: modules()\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction MaterialModule_tsickle_Closure_declarations() {\n/** @type {?} */\nMaterialModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nMaterialModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { errorObject } from './errorObject';\n\nlet tryCatchTarget: Function;\n\nfunction tryCatcher(this: any): any {\n  try {\n    return tryCatchTarget.apply(this, arguments);\n  } catch (e) {\n    errorObject.e = e;\n    return errorObject;\n  }\n}\n\nexport function tryCatch<T extends Function>(fn: T): T {\n  tryCatchTarget = fn;\n  return <any>tryCatcher;\n};\n","import { isArray } from './util/isArray';\nimport { isObject } from './util/isObject';\nimport { isFunction } from './util/isFunction';\nimport { tryCatch } from './util/tryCatch';\nimport { errorObject } from './util/errorObject';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\n\nexport interface AnonymousSubscription {\n  unsubscribe(): void;\n}\n\nexport type TeardownLogic = AnonymousSubscription | Function | void;\n\nexport interface ISubscription extends AnonymousSubscription {\n  unsubscribe(): void;\n  readonly closed: boolean;\n}\n\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nexport class Subscription implements ISubscription {\n  public static EMPTY: Subscription = (function(empty: any){\n    empty.closed = true;\n    return empty;\n  }(new Subscription()));\n\n  /**\n   * A flag to indicate whether this Subscription has already been unsubscribed.\n   * @type {boolean}\n   */\n  public closed: boolean = false;\n\n  protected _parent: Subscription = null;\n  protected _parents: Subscription[] = null;\n  private _subscriptions: ISubscription[] = null;\n\n  /**\n   * @param {function(): void} [unsubscribe] A function describing how to\n   * perform the disposal of resources when the `unsubscribe` method is called.\n   */\n  constructor(unsubscribe?: () => void) {\n    if (unsubscribe) {\n      (<any> this)._unsubscribe = unsubscribe;\n    }\n  }\n\n  /**\n   * Disposes the resources held by the subscription. May, for instance, cancel\n   * an ongoing Observable execution or cancel any other type of work that\n   * started when the Subscription was created.\n   * @return {void}\n   */\n  unsubscribe(): void {\n    let hasErrors = false;\n    let errors: any[];\n\n    if (this.closed) {\n      return;\n    }\n\n    let { _parent, _parents, _unsubscribe, _subscriptions } = (<any> this);\n\n    this.closed = true;\n    this._parent = null;\n    this._parents = null;\n    // null out _subscriptions first so any child subscriptions that attempt\n    // to remove themselves from this subscription will noop\n    this._subscriptions = null;\n\n    let index = -1;\n    let len = _parents ? _parents.length : 0;\n\n    // if this._parent is null, then so is this._parents, and we\n    // don't have to remove ourselves from any parent subscriptions.\n    while (_parent) {\n      _parent.remove(this);\n      // if this._parents is null or index >= len,\n      // then _parent is set to null, and the loop exits\n      _parent = ++index < len && _parents[index] || null;\n    }\n\n    if (isFunction(_unsubscribe)) {\n      let trial = tryCatch(_unsubscribe).call(this);\n      if (trial === errorObject) {\n        hasErrors = true;\n        errors = errors || (\n          errorObject.e instanceof UnsubscriptionError ?\n            flattenUnsubscriptionErrors(errorObject.e.errors) : [errorObject.e]\n        );\n      }\n    }\n\n    if (isArray(_subscriptions)) {\n\n      index = -1;\n      len = _subscriptions.length;\n\n      while (++index < len) {\n        const sub = _subscriptions[index];\n        if (isObject(sub)) {\n          let trial = tryCatch(sub.unsubscribe).call(sub);\n          if (trial === errorObject) {\n            hasErrors = true;\n            errors = errors || [];\n            let err = errorObject.e;\n            if (err instanceof UnsubscriptionError) {\n              errors = errors.concat(flattenUnsubscriptionErrors(err.errors));\n            } else {\n              errors.push(err);\n            }\n          }\n        }\n      }\n    }\n\n    if (hasErrors) {\n      throw new UnsubscriptionError(errors);\n    }\n  }\n\n  /**\n   * Adds a tear down to be called during the unsubscribe() of this\n   * Subscription.\n   *\n   * If the tear down being added is a subscription that is already\n   * unsubscribed, is the same reference `add` is being called on, or is\n   * `Subscription.EMPTY`, it will not be added.\n   *\n   * If this subscription is already in an `closed` state, the passed\n   * tear down logic will be executed immediately.\n   *\n   * @param {TeardownLogic} teardown The additional logic to execute on\n   * teardown.\n   * @return {Subscription} Returns the Subscription used or created to be\n   * added to the inner subscriptions list. This Subscription can be used with\n   * `remove()` to remove the passed teardown logic from the inner subscriptions\n   * list.\n   */\n  add(teardown: TeardownLogic): Subscription {\n    if (!teardown || (teardown === Subscription.EMPTY)) {\n      return Subscription.EMPTY;\n    }\n\n    if (teardown === this) {\n      return this;\n    }\n\n    let subscription = (<Subscription> teardown);\n\n    switch (typeof teardown) {\n      case 'function':\n        subscription = new Subscription(<(() => void) > teardown);\n      case 'object':\n        if (subscription.closed || typeof subscription.unsubscribe !== 'function') {\n          return subscription;\n        } else if (this.closed) {\n          subscription.unsubscribe();\n          return subscription;\n        } else if (typeof subscription._addParent !== 'function' /* quack quack */) {\n          const tmp = subscription;\n          subscription = new Subscription();\n          subscription._subscriptions = [tmp];\n        }\n        break;\n      default:\n        throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n    }\n\n    const subscriptions = this._subscriptions || (this._subscriptions = []);\n\n    subscriptions.push(subscription);\n    subscription._addParent(this);\n\n    return subscription;\n  }\n\n  /**\n   * Removes a Subscription from the internal list of subscriptions that will\n   * unsubscribe during the unsubscribe process of this Subscription.\n   * @param {Subscription} subscription The subscription to remove.\n   * @return {void}\n   */\n  remove(subscription: Subscription): void {\n    const subscriptions = this._subscriptions;\n    if (subscriptions) {\n      const subscriptionIndex = subscriptions.indexOf(subscription);\n      if (subscriptionIndex !== -1) {\n        subscriptions.splice(subscriptionIndex, 1);\n      }\n    }\n  }\n\n  private _addParent(parent: Subscription) {\n    let { _parent, _parents } = this;\n    if (!_parent || _parent === parent) {\n      // If we don't have a parent, or the new parent is the same as the\n      // current parent, then set this._parent to the new parent.\n      this._parent = parent;\n    } else if (!_parents) {\n      // If there's already one parent, but not multiple, allocate an Array to\n      // store the rest of the parent Subscriptions.\n      this._parents = [parent];\n    } else if (_parents.indexOf(parent) === -1) {\n      // Only add the new parent to the _parents list if it's not already there.\n      _parents.push(parent);\n    }\n  }\n}\n\nfunction flattenUnsubscriptionErrors(errors: any[]) {\n return errors.reduce((errs, err) => errs.concat((err instanceof UnsubscriptionError) ? err.errors : err), []);\n}\n","import { noop } from './noop';\nimport { UnaryFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function pipe<T>(): UnaryFunction<T, T>;\nexport function pipe<T, A>(op1: UnaryFunction<T, A>): UnaryFunction<T, A>;\nexport function pipe<T, A, B>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>): UnaryFunction<T, B>;\nexport function pipe<T, A, B, C>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>): UnaryFunction<T, C>;\nexport function pipe<T, A, B, C, D>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>): UnaryFunction<T, D>;\nexport function pipe<T, A, B, C, D, E>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>): UnaryFunction<T, E>;\nexport function pipe<T, A, B, C, D, E, F>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>): UnaryFunction<T, F>;\nexport function pipe<T, A, B, C, D, E, F, G>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>): UnaryFunction<T, G>;\nexport function pipe<T, A, B, C, D, E, F, G, H>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>, op8: UnaryFunction<G, H>): UnaryFunction<T, H>;\nexport function pipe<T, A, B, C, D, E, F, G, H, I>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>, op8: UnaryFunction<G, H>, op9: UnaryFunction<H, I>): UnaryFunction<T, I>;\n/* tslint:enable:max-line-length */\n\nexport function pipe<T, R>(...fns: Array<UnaryFunction<T, R>>): UnaryFunction<T, R> {\n  return pipeFromArray(fns);\n}\n\n/* @internal */\nexport function pipeFromArray<T, R>(fns: Array<UnaryFunction<T, R>>): UnaryFunction<T, R> {\n  if (!fns) {\n    return noop as UnaryFunction<any, any>;\n  }\n\n  if (fns.length === 1) {\n    return fns[0];\n  }\n\n  return function piped(input: T): R {\n    return fns.reduce((prev: any, fn: UnaryFunction<T, R>) => fn(prev), input);\n  };\n}\n","import { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { Operator } from '../Operator';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { isScheduler } from '../util/isScheduler';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function bufferTime<T>(bufferTimeSpan: number, scheduler?: IScheduler): OperatorFunction<T, T[]>;\nexport function bufferTime<T>(bufferTimeSpan: number, bufferCreationInterval: number, scheduler?: IScheduler): OperatorFunction<T, T[]>;\nexport function bufferTime<T>(bufferTimeSpan: number, bufferCreationInterval: number, maxBufferSize: number, scheduler?: IScheduler): OperatorFunction<T, T[]>;\n/* tslint:enable:max-line-length */\n\n/**\n * Buffers the source Observable values for a specific time period.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * those arrays periodically in time.</span>\n *\n * <img src=\"./img/bufferTime.png\" width=\"100%\">\n *\n * Buffers values from the source for a specific time duration `bufferTimeSpan`.\n * Unless the optional argument `bufferCreationInterval` is given, it emits and\n * resets the buffer every `bufferTimeSpan` milliseconds. If\n * `bufferCreationInterval` is given, this operator opens the buffer every\n * `bufferCreationInterval` milliseconds and closes (emits and resets) the\n * buffer every `bufferTimeSpan` milliseconds. When the optional argument\n * `maxBufferSize` is specified, the buffer will be closed either after\n * `bufferTimeSpan` milliseconds or when it contains `maxBufferSize` elements.\n *\n * @example <caption>Every second, emit an array of the recent click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(1000);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds, emit the click events from the next 2 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(2000, 5000);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link windowTime}\n *\n * @param {number} bufferTimeSpan The amount of time to fill each buffer array.\n * @param {number} [bufferCreationInterval] The interval at which to start new\n * buffers.\n * @param {number} [maxBufferSize] The maximum buffer size.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine buffer boundaries.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferTime\n * @owner Observable\n */\nexport function bufferTime<T>(bufferTimeSpan: number): OperatorFunction<T, T[]> {\n  let length: number = arguments.length;\n\n  let scheduler: IScheduler = async;\n  if (isScheduler(arguments[arguments.length - 1])) {\n    scheduler = arguments[arguments.length - 1];\n    length--;\n  }\n\n  let bufferCreationInterval: number = null;\n  if (length >= 2) {\n    bufferCreationInterval = arguments[1];\n  }\n\n  let maxBufferSize: number = Number.POSITIVE_INFINITY;\n  if (length >= 3) {\n    maxBufferSize = arguments[2];\n  }\n\n  return function bufferTimeOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferTimeOperator<T>(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler));\n  };\n}\n\nclass BufferTimeOperator<T> implements Operator<T, T[]> {\n  constructor(private bufferTimeSpan: number,\n              private bufferCreationInterval: number,\n              private maxBufferSize: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferTimeSubscriber(\n      subscriber, this.bufferTimeSpan, this.bufferCreationInterval, this.maxBufferSize, this.scheduler\n    ));\n  }\n}\n\nclass Context<T> {\n  buffer: T[] = [];\n  closeAction: Subscription;\n}\n\ntype CreationState<T> = {\n  bufferTimeSpan: number;\n  bufferCreationInterval: number,\n  subscriber: BufferTimeSubscriber<T>;\n  scheduler: IScheduler;\n};\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferTimeSubscriber<T> extends Subscriber<T> {\n  private contexts: Array<Context<T>> = [];\n  private timespanOnly: boolean;\n\n  constructor(destination: Subscriber<T[]>,\n              private bufferTimeSpan: number,\n              private bufferCreationInterval: number,\n              private maxBufferSize: number,\n              private scheduler: IScheduler) {\n    super(destination);\n    const context = this.openContext();\n    this.timespanOnly = bufferCreationInterval == null || bufferCreationInterval < 0;\n    if (this.timespanOnly) {\n      const timeSpanOnlyState = { subscriber: this, context, bufferTimeSpan };\n      this.add(context.closeAction = scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n    } else {\n      const closeState = { subscriber: this, context };\n      const creationState: CreationState<T> = { bufferTimeSpan, bufferCreationInterval, subscriber: this, scheduler };\n      this.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, closeState));\n      this.add(scheduler.schedule(dispatchBufferCreation, bufferCreationInterval, creationState));\n    }\n  }\n\n  protected _next(value: T) {\n    const contexts = this.contexts;\n    const len = contexts.length;\n    let filledBufferContext: Context<T>;\n    for (let i = 0; i < len; i++) {\n      const context = contexts[i];\n      const buffer = context.buffer;\n      buffer.push(value);\n      if (buffer.length == this.maxBufferSize) {\n        filledBufferContext = context;\n      }\n    }\n\n    if (filledBufferContext) {\n      this.onBufferFull(filledBufferContext);\n    }\n  }\n\n  protected _error(err: any) {\n    this.contexts.length = 0;\n    super._error(err);\n  }\n\n  protected _complete() {\n    const { contexts, destination } = this;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      destination.next(context.buffer);\n    }\n    super._complete();\n  }\n\n  protected _unsubscribe() {\n    this.contexts = null;\n  }\n\n  protected onBufferFull(context: Context<T>) {\n    this.closeContext(context);\n    const closeAction = context.closeAction;\n    closeAction.unsubscribe();\n    this.remove(closeAction);\n\n    if (!this.closed && this.timespanOnly) {\n      context = this.openContext();\n      const bufferTimeSpan = this.bufferTimeSpan;\n      const timeSpanOnlyState = { subscriber: this, context, bufferTimeSpan };\n      this.add(context.closeAction = this.scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n    }\n  }\n\n  openContext(): Context<T> {\n    const context: Context<T> = new Context<T>();\n    this.contexts.push(context);\n    return context;\n  }\n\n  closeContext(context: Context<T>) {\n    this.destination.next(context.buffer);\n    const contexts = this.contexts;\n\n    const spliceIndex = contexts ? contexts.indexOf(context) : -1;\n    if (spliceIndex >= 0) {\n      contexts.splice(contexts.indexOf(context), 1);\n    }\n  }\n}\n\nfunction dispatchBufferTimeSpanOnly(this: Action<any>, state: any) {\n  const subscriber: BufferTimeSubscriber<any> = state.subscriber;\n\n  const prevContext = state.context;\n  if (prevContext) {\n    subscriber.closeContext(prevContext);\n  }\n\n  if (!subscriber.closed) {\n    state.context = subscriber.openContext();\n    state.context.closeAction = this.schedule(state, state.bufferTimeSpan);\n  }\n}\n\ninterface DispatchArg<T> {\n  subscriber: BufferTimeSubscriber<T>;\n  context: Context<T>;\n}\n\nfunction dispatchBufferCreation<T>(this: Action<CreationState<T>>, state: CreationState<T>) {\n  const { bufferCreationInterval, bufferTimeSpan, subscriber, scheduler } = state;\n  const context = subscriber.openContext();\n  const action = <Action<CreationState<T>>>this;\n  if (!subscriber.closed) {\n    subscriber.add(context.closeAction = scheduler.schedule<DispatchArg<T>>(dispatchBufferClose, bufferTimeSpan, { subscriber, context }));\n    action.schedule(state, bufferCreationInterval);\n  }\n}\n\nfunction dispatchBufferClose<T>(arg: DispatchArg<T>) {\n  const { subscriber, context } = arg;\n  subscriber.closeContext(context);\n}\n","import { root } from '../util/root';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class PromiseObservable<T> extends Observable<T> {\n\n  public value: T;\n\n  /**\n   * Converts a Promise to an Observable.\n   *\n   * <span class=\"informal\">Returns an Observable that just emits the Promise's\n   * resolved value, then completes.</span>\n   *\n   * Converts an ES2015 Promise or a Promises/A+ spec compliant Promise to an\n   * Observable. If the Promise resolves with a value, the output Observable\n   * emits that resolved value as a `next`, and then completes. If the Promise\n   * is rejected, then the output Observable emits the corresponding Error.\n   *\n   * @example <caption>Convert the Promise returned by Fetch to an Observable</caption>\n   * var result = Rx.Observable.fromPromise(fetch('http://myserver.com/'));\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @see {@link bindCallback}\n   * @see {@link from}\n   *\n   * @param {PromiseLike<T>} promise The promise to be converted.\n   * @param {Scheduler} [scheduler] An optional IScheduler to use for scheduling\n   * the delivery of the resolved value (or the rejection).\n   * @return {Observable<T>} An Observable which wraps the Promise.\n   * @static true\n   * @name fromPromise\n   * @owner Observable\n   */\n  static create<T>(promise: PromiseLike<T>, scheduler?: IScheduler): Observable<T> {\n    return new PromiseObservable(promise, scheduler);\n  }\n\n  constructor(private promise: PromiseLike<T>, private scheduler?: IScheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const promise = this.promise;\n    const scheduler = this.scheduler;\n\n    if (scheduler == null) {\n      if (this._isScalar) {\n        if (!subscriber.closed) {\n          subscriber.next(this.value);\n          subscriber.complete();\n        }\n      } else {\n        promise.then(\n          (value) => {\n            this.value = value;\n            this._isScalar = true;\n            if (!subscriber.closed) {\n              subscriber.next(value);\n              subscriber.complete();\n            }\n          },\n          (err) => {\n            if (!subscriber.closed) {\n              subscriber.error(err);\n            }\n          }\n        )\n        .then(null, err => {\n          // escape the promise trap, throw unhandled errors\n          root.setTimeout(() => { throw err; });\n        });\n      }\n    } else {\n      if (this._isScalar) {\n        if (!subscriber.closed) {\n          return scheduler.schedule(dispatchNext, 0, { value: this.value, subscriber });\n        }\n      } else {\n        promise.then(\n          (value) => {\n            this.value = value;\n            this._isScalar = true;\n            if (!subscriber.closed) {\n              subscriber.add(scheduler.schedule(dispatchNext, 0, { value, subscriber }));\n            }\n          },\n          (err) => {\n            if (!subscriber.closed) {\n              subscriber.add(scheduler.schedule(dispatchError, 0, { err, subscriber }));\n            }\n          })\n          .then(null, (err) => {\n            // escape the promise trap, throw unhandled errors\n            root.setTimeout(() => { throw err; });\n          });\n      }\n    }\n  }\n}\n\ninterface DispatchNextArg<T> {\n  subscriber: Subscriber<T>;\n  value: T;\n}\nfunction dispatchNext<T>(arg: DispatchNextArg<T>) {\n  const { value, subscriber } = arg;\n  if (!subscriber.closed) {\n    subscriber.next(value);\n    subscriber.complete();\n  }\n}\n\ninterface DispatchErrorArg<T> {\n  subscriber: Subscriber<T>;\n  err: any;\n}\nfunction dispatchError<T>(arg: DispatchErrorArg<T>) {\n  const { err, subscriber } = arg;\n  if (!subscriber.closed) {\n    subscriber.error(err);\n  }\n}\n","import { root } from '../util/root';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class IteratorObservable<T> extends Observable<T> {\n  private iterator: any;\n\n  static create<T>(iterator: any, scheduler?: IScheduler): IteratorObservable<T> {\n    return new IteratorObservable(iterator, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { index, hasError, iterator, subscriber } = state;\n\n    if (hasError) {\n      subscriber.error(state.error);\n      return;\n    }\n\n    let result = iterator.next();\n    if (result.done) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(result.value);\n    state.index = index + 1;\n\n    if (subscriber.closed) {\n      if (typeof iterator.return === 'function') {\n        iterator.return();\n      }\n      return;\n    }\n\n    (<any> this).schedule(state);\n  }\n\n  constructor(iterator: any, private scheduler?: IScheduler) {\n    super();\n\n    if (iterator == null) {\n      throw new Error('iterator cannot be null.');\n    }\n\n    this.iterator = getIterator(iterator);\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n\n    let index = 0;\n    const { iterator, scheduler } = this;\n\n    if (scheduler) {\n      return scheduler.schedule(IteratorObservable.dispatch, 0, {\n        index, iterator, subscriber\n      });\n    } else {\n      do {\n        let result = iterator.next();\n        if (result.done) {\n          subscriber.complete();\n          break;\n        } else {\n          subscriber.next(result.value);\n        }\n        if (subscriber.closed) {\n          if (typeof iterator.return === 'function') {\n            iterator.return();\n          }\n          break;\n        }\n      } while (true);\n    }\n  }\n}\n\nclass StringIterator {\n  constructor(private str: string,\n              private idx: number = 0,\n              private len: number = str.length) {\n  }\n  [Symbol_iterator]() { return (this); }\n  next() {\n    return this.idx < this.len ? {\n        done: false,\n        value: this.str.charAt(this.idx++)\n    } : {\n        done: true,\n        value: undefined\n    };\n  }\n}\n\nclass ArrayIterator {\n  constructor(private arr: Array<any>,\n              private idx: number = 0,\n              private len: number = toLength(arr)) {\n  }\n  [Symbol_iterator]() { return this; }\n  next() {\n    return this.idx < this.len ? {\n        done: false,\n        value: this.arr[this.idx++]\n    } : {\n        done: true,\n        value: undefined\n    };\n  }\n}\n\nfunction getIterator(obj: any) {\n  const i = obj[Symbol_iterator];\n  if (!i && typeof obj === 'string') {\n    return new StringIterator(obj);\n  }\n  if (!i && obj.length !== undefined) {\n    return new ArrayIterator(obj);\n  }\n  if (!i) {\n    throw new TypeError('object is not iterable');\n  }\n  return obj[Symbol_iterator]();\n}\n\nconst maxSafeInteger = Math.pow(2, 53) - 1;\n\nfunction toLength(o: any) {\n  let len = +o.length;\n  if (isNaN(len)) {\n      return 0;\n  }\n  if (len === 0 || !numberIsFinite(len)) {\n      return len;\n  }\n  len = sign(len) * Math.floor(Math.abs(len));\n  if (len <= 0) {\n      return 0;\n  }\n  if (len > maxSafeInteger) {\n      return maxSafeInteger;\n  }\n  return len;\n}\n\nfunction numberIsFinite(value: any) {\n  return typeof value === 'number' && root.isFinite(value);\n}\n\nfunction sign(value: any) {\n  let valueAsNumber = +value;\n  if (valueAsNumber === 0) {\n    return valueAsNumber;\n  }\n  if (isNaN(valueAsNumber)) {\n    return valueAsNumber;\n  }\n  return valueAsNumber < 0 ? -1 : 1;\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { async } from '../scheduler/async';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link delay}, but passes only the most\n * recent value from each burst of emissions.</span>\n *\n * <img src=\"./img/debounceTime.png\" width=\"100%\">\n *\n * `debounceTime` delays values emitted by the source Observable, but drops\n * previous pending delayed emissions if a new value arrives on the source\n * Observable. This operator keeps track of the most recent value from the\n * source Observable, and emits that only when `dueTime` enough time has passed\n * without any other value appearing on the source Observable. If a new value\n * appears before `dueTime` silence occurs, the previous value will be dropped\n * and will not be emitted on the output Observable.\n *\n * This is a rate-limiting operator, because it is impossible for more than one\n * value to be emitted in any time window of duration `dueTime`, but it is also\n * a delay-like operator since output emissions do not occur at the same time as\n * they did on the source Observable. Optionally takes a {@link IScheduler} for\n * managing timers.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounceTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} dueTime The timeout duration in milliseconds (or the time\n * unit determined internally by the optional `scheduler`) for the window of\n * time required to wait for emission silence before emitting the most recent\n * source value.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the timeout for each value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified `dueTime`, and may drop some values if they occur\n * too frequently.\n * @method debounceTime\n * @owner Observable\n */\nexport function debounceTime<T>(dueTime: number, scheduler: IScheduler = async): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DebounceTimeOperator(dueTime, scheduler));\n}\n\nclass DebounceTimeOperator<T> implements Operator<T, T> {\n  constructor(private dueTime: number, private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DebounceTimeSubscriber<T> extends Subscriber<T> {\n  private debouncedSubscription: Subscription = null;\n  private lastValue: T = null;\n  private hasValue: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              private dueTime: number,\n              private scheduler: IScheduler) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    this.clearDebounce();\n    this.lastValue = value;\n    this.hasValue = true;\n    this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext, this.dueTime, this));\n  }\n\n  protected _complete() {\n    this.debouncedNext();\n    this.destination.complete();\n  }\n\n  debouncedNext(): void {\n    this.clearDebounce();\n\n    if (this.hasValue) {\n      this.destination.next(this.lastValue);\n      this.lastValue = null;\n      this.hasValue = false;\n    }\n  }\n\n  private clearDebounce(): void {\n    const debouncedSubscription = this.debouncedSubscription;\n\n    if (debouncedSubscription !== null) {\n      this.remove(debouncedSubscription);\n      debouncedSubscription.unsubscribe();\n      this.debouncedSubscription = null;\n    }\n  }\n}\n\nfunction dispatchNext(subscriber: DebounceTimeSubscriber<any>) {\n  subscriber.debouncedNext();\n}\n","import { root } from './root';\n\nexport interface ISetCtor {\n  new<T>(): ISet<T>;\n}\n\nexport interface ISet<T> {\n  add(value: T): void;\n  has(value: T): boolean;\n  size: number;\n  clear(): void;\n}\n\nexport function minimalSetImpl<T>(): ISetCtor {\n  // THIS IS NOT a full impl of Set, this is just the minimum\n  // bits of functionality we need for this library.\n  return class MinimalSet<T> implements ISet<T> {\n    private _values: T[] = [];\n\n    add(value: T): void {\n      if (!this.has(value)) {\n        this._values.push(value);\n      }\n    }\n\n    has(value: T): boolean {\n      return this._values.indexOf(value) !== -1;\n    }\n\n    get size(): number {\n      return this._values.length;\n    }\n\n    clear(): void {\n      this._values.length = 0;\n    }\n  };\n}\n\nexport const Set: ISetCtor = root.Set || minimalSetImpl();","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { async } from '../scheduler/async';\nimport { TeardownLogic } from '../Subscription';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits the most recently emitted value from the source Observable within\n * periodic time intervals.\n *\n * <span class=\"informal\">Samples the source Observable at periodic time\n * intervals, emitting what it samples.</span>\n *\n * <img src=\"./img/sampleTime.png\" width=\"100%\">\n *\n * `sampleTime` periodically looks at the source Observable and emits whichever\n * value it has most recently emitted since the previous sampling, unless the\n * source has not emitted anything since the previous sampling. The sampling\n * happens periodically in time every `period` milliseconds (or the time unit\n * defined by the optional `scheduler` argument). The sampling starts as soon as\n * the output Observable is subscribed.\n *\n * @example <caption>Every second, emit the most recent click at most once</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.sampleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {number} period The sampling period expressed in milliseconds or the\n * time unit determined internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the sampling.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable at the specified time interval.\n * @method sampleTime\n * @owner Observable\n */\nexport function sampleTime<T>(period: number, scheduler: IScheduler = async): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SampleTimeOperator(period, scheduler));\n}\n\nclass SampleTimeOperator<T> implements Operator<T, T> {\n  constructor(private period: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SampleTimeSubscriber(subscriber, this.period, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SampleTimeSubscriber<T> extends Subscriber<T> {\n  lastValue: T;\n  hasValue: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              private period: number,\n              private scheduler: IScheduler) {\n    super(destination);\n    this.add(scheduler.schedule(dispatchNotification, period, { subscriber: this, period }));\n  }\n\n  protected _next(value: T) {\n    this.lastValue = value;\n    this.hasValue = true;\n  }\n\n  notifyNext() {\n    if (this.hasValue) {\n      this.hasValue = false;\n      this.destination.next(this.lastValue);\n    }\n  }\n}\n\nfunction dispatchNotification<T>(this: Action<any>, state: any) {\n  let { subscriber, period } = state;\n  subscriber.notifyNext();\n  this.schedule(state, period);\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\nimport { ThrottleConfig, defaultThrottleConfig } from './throttle';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for `duration` milliseconds, then repeats this process.\n *\n * <span class=\"informal\">Lets a value pass, then ignores source values for the\n * next `duration` milliseconds.</span>\n *\n * <img src=\"./img/throttleTime.png\" width=\"100%\">\n *\n * `throttleTime` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled. After `duration` milliseconds (or the time unit determined\n * internally by the optional `scheduler`) has passed, the timer is disabled,\n * and this process repeats for the next source value. Optionally takes a\n * {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {number} duration Time to wait before emitting another value after\n * emitting the last value, measured in milliseconds or the time unit determined\n * internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the throttling.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttleTime\n * @owner Observable\n */\nexport function throttleTime<T>(duration: number,\n                                scheduler: IScheduler = async,\n                                config: ThrottleConfig = defaultThrottleConfig): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new ThrottleTimeOperator(duration, scheduler, config.leading, config.trailing));\n}\n\nclass ThrottleTimeOperator<T> implements Operator<T, T> {\n  constructor(private duration: number,\n              private scheduler: IScheduler,\n              private leading: boolean,\n              private trailing: boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(\n      new ThrottleTimeSubscriber(subscriber, this.duration, this.scheduler, this.leading, this.trailing)\n    );\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ThrottleTimeSubscriber<T> extends Subscriber<T> {\n  private throttled: Subscription;\n  private _hasTrailingValue: boolean = false;\n  private _trailingValue: T = null;\n\n  constructor(destination: Subscriber<T>,\n              private duration: number,\n              private scheduler: IScheduler,\n              private leading: boolean,\n              private trailing: boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    if (this.throttled) {\n      if (this.trailing) {\n        this._trailingValue = value;\n        this._hasTrailingValue = true;\n      }\n    } else {\n      this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, { subscriber: this }));\n      if (this.leading) {\n        this.destination.next(value);\n      }\n    }\n  }\n\n  clearThrottle() {\n    const throttled = this.throttled;\n    if (throttled) {\n      if (this.trailing && this._hasTrailingValue) {\n        this.destination.next(this._trailingValue);\n        this._trailingValue = null;\n        this._hasTrailingValue = false;\n      }\n      throttled.unsubscribe();\n      this.remove(throttled);\n      this.throttled = null;\n    }\n  }\n}\n\ninterface DispatchArg<T> {\n  subscriber: ThrottleTimeSubscriber<T>;\n}\n\nfunction dispatchNext<T>(arg: DispatchArg<T>) {\n  const { subscriber } = arg;\n  subscriber.clearThrottle();\n}\n","import { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { Subject } from '../Subject';\nimport { Operator } from '../Operator';\nimport { async } from '../scheduler/async';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { isNumeric } from '../util/isNumeric';\nimport { isScheduler } from '../util/isScheduler';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Branch out the source Observable values as a nested Observable periodically\n * in time.\n *\n * <span class=\"informal\">It's like {@link bufferTime}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowTime.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable starts a new window periodically, as\n * determined by the `windowCreationInterval` argument. It emits each window\n * after a fixed timespan, specified by the `windowTimeSpan` argument. When the\n * source Observable completes or encounters an error, the output Observable\n * emits the current window and propagates the notification from the source\n * Observable. If `windowCreationInterval` is not provided, the output\n * Observable starts a new window when the previous window of duration\n * `windowTimeSpan` completes. If `maxWindowCount` is provided, each window\n * will emit at most fixed number of values. Window will complete immediately\n * after emitting last value and next one still will open as specified by\n * `windowTimeSpan` and `windowCreationInterval` arguments.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds start a window 1 second long, and emit at most 2 click events per window</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000, 5000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Same as example above but with maxWindowCount instead of take</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000, 5000, 2) // each window has still at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferTime}\n *\n * @param {number} windowTimeSpan The amount of time to fill each window.\n * @param {number} [windowCreationInterval] The interval at which to start new\n * windows.\n * @param {number} [maxWindowSize=Number.POSITIVE_INFINITY] Max number of\n * values each window can emit before completion.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine window boundaries.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowTime\n * @owner Observable\n */\nexport function windowTime<T>(windowTimeSpan: number,\n                              scheduler?: IScheduler): OperatorFunction<T, Observable<T>>;\nexport function windowTime<T>(windowTimeSpan: number,\n                              windowCreationInterval: number,\n                              scheduler?: IScheduler): OperatorFunction<T, Observable<T>>;\nexport function windowTime<T>(windowTimeSpan: number,\n                              windowCreationInterval: number,\n                              maxWindowSize: number,\n                              scheduler?: IScheduler): OperatorFunction<T, Observable<T>>;\n\nexport function windowTime<T>(windowTimeSpan: number): OperatorFunction<T, Observable<T>> {\n  let scheduler: IScheduler = async;\n  let windowCreationInterval: number = null;\n  let maxWindowSize: number = Number.POSITIVE_INFINITY;\n\n  if (isScheduler(arguments[3])) {\n    scheduler = arguments[3];\n  }\n\n  if (isScheduler(arguments[2])) {\n    scheduler = arguments[2];\n  } else if (isNumeric(arguments[2])) {\n    maxWindowSize = arguments[2];\n  }\n\n  if (isScheduler(arguments[1])) {\n    scheduler = arguments[1];\n  } else if (isNumeric(arguments[1])) {\n    windowCreationInterval = arguments[1];\n  }\n\n  return function windowTimeOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowTimeOperator<T>(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler));\n  };\n}\n\nclass WindowTimeOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowTimeSpan: number,\n              private windowCreationInterval: number | null,\n              private maxWindowSize: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowTimeSubscriber(\n      subscriber, this.windowTimeSpan, this.windowCreationInterval, this.maxWindowSize, this.scheduler\n    ));\n  }\n}\n\ninterface CreationState<T> {\n  windowTimeSpan: number;\n  windowCreationInterval: number;\n  subscriber: WindowTimeSubscriber<T>;\n  scheduler: IScheduler;\n}\n\ninterface TimeSpanOnlyState<T> {\n    window: CountedSubject<T>;\n    windowTimeSpan: number;\n    subscriber: WindowTimeSubscriber<T>;\n  }\n\ninterface CloseWindowContext<T> {\n  action: Action<CreationState<T>>;\n  subscription: Subscription;\n}\n\ninterface CloseState<T> {\n  subscriber: WindowTimeSubscriber<T>;\n  window: CountedSubject<T>;\n  context: CloseWindowContext<T>;\n}\n\nclass CountedSubject<T> extends Subject<T> {\n  private _numberOfNextedValues: number = 0;\n\n  next(value?: T): void {\n    this._numberOfNextedValues++;\n    super.next(value);\n  }\n\n  get numberOfNextedValues(): number {\n    return this._numberOfNextedValues;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowTimeSubscriber<T> extends Subscriber<T> {\n  private windows: CountedSubject<T>[] = [];\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private windowTimeSpan: number,\n              private windowCreationInterval: number | null,\n              private maxWindowSize: number,\n              private scheduler: IScheduler) {\n    super(destination);\n\n    const window = this.openWindow();\n    if (windowCreationInterval !== null && windowCreationInterval >= 0) {\n      const closeState: CloseState<T> = { subscriber: this, window, context: <any>null };\n      const creationState: CreationState<T> = { windowTimeSpan, windowCreationInterval, subscriber: this, scheduler };\n      this.add(scheduler.schedule(dispatchWindowClose, windowTimeSpan, closeState));\n      this.add(scheduler.schedule(dispatchWindowCreation, windowCreationInterval, creationState));\n    } else {\n      const timeSpanOnlyState: TimeSpanOnlyState<T> = { subscriber: this, window, windowTimeSpan };\n      this.add(scheduler.schedule(dispatchWindowTimeSpanOnly, windowTimeSpan, timeSpanOnlyState));\n    }\n  }\n\n  protected _next(value: T): void {\n    const windows = this.windows;\n    const len = windows.length;\n    for (let i = 0; i < len; i++) {\n      const window = windows[i];\n      if (!window.closed) {\n        window.next(value);\n        if (window.numberOfNextedValues >= this.maxWindowSize) {\n          this.closeWindow(window);\n        }\n      }\n    }\n  }\n\n  protected _error(err: any): void {\n    const windows = this.windows;\n    while (windows.length > 0) {\n      windows.shift().error(err);\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    const windows = this.windows;\n    while (windows.length > 0) {\n      const window = windows.shift();\n      if (!window.closed) {\n        window.complete();\n      }\n    }\n    this.destination.complete();\n  }\n\n  public openWindow(): CountedSubject<T> {\n    const window = new CountedSubject<T>();\n    this.windows.push(window);\n    const destination = this.destination;\n    destination.next(window);\n    return window;\n  }\n\n  public closeWindow(window: CountedSubject<T>): void {\n    window.complete();\n    const windows = this.windows;\n    windows.splice(windows.indexOf(window), 1);\n  }\n}\n\nfunction dispatchWindowTimeSpanOnly<T>(this: Action<TimeSpanOnlyState<T>>, state: TimeSpanOnlyState<T>): void {\n  const { subscriber, windowTimeSpan, window } = state;\n  if (window) {\n    subscriber.closeWindow(window);\n  }\n  state.window = subscriber.openWindow();\n  this.schedule(state, windowTimeSpan);\n}\n\nfunction dispatchWindowCreation<T>(this: Action<CreationState<T>>, state: CreationState<T>): void {\n  const { windowTimeSpan, subscriber, scheduler, windowCreationInterval } = state;\n  const window = subscriber.openWindow();\n  const action = this;\n  let context: CloseWindowContext<T> = { action, subscription: <any>null };\n  const timeSpanState: CloseState<T> = { subscriber, window, context };\n  context.subscription = scheduler.schedule(dispatchWindowClose, windowTimeSpan, timeSpanState);\n  action.add(context.subscription);\n  action.schedule(state, windowCreationInterval);\n}\n\nfunction dispatchWindowClose<T>(state: CloseState<T>): void {\n  const { subscriber, window, context } = state;\n  if (context && context.action && context.subscription) {\n    context.action.remove(context.subscription);\n  }\n  subscriber.closeWindow(window);\n}\n","// typeof any so that it we don't have to cast when comparing a result to the error object\nexport const errorObject: any = { e: {} };","export function isFunction(x: any): x is Function {\n  return typeof x === 'function';\n}\n","export const isArray = Array.isArray || (<T>(x: any): x is T[] => x && typeof x.length === 'number');\n","export function isObject(x: any): x is Object {\n  return x != null && typeof x === 'object';\n}\n","/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nexport class UnsubscriptionError extends Error {\n  constructor(public errors: any[]) {\n    super();\n    const err: any = Error.call(this, errors ?\n      `${errors.length} errors occurred during unsubscription:\n  ${errors.map((err, i) => `${i + 1}) ${err.toString()}`).join('\\n  ')}` : '');\n    (<any> this).name = err.name = 'UnsubscriptionError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","export interface NextObserver<T> {\n  closed?: boolean;\n  next: (value: T) => void;\n  error?: (err: any) => void;\n  complete?: () => void;\n}\n\nexport interface ErrorObserver<T> {\n  closed?: boolean;\n  next?: (value: T) => void;\n  error: (err: any) => void;\n  complete?: () => void;\n}\n\nexport interface CompletionObserver<T> {\n  closed?: boolean;\n  next?: (value: T) => void;\n  error?: (err: any) => void;\n  complete: () => void;\n}\n\nexport type PartialObserver<T> = NextObserver<T> | ErrorObserver<T> | CompletionObserver<T>;\n\nexport interface Observer<T> {\n  closed?: boolean;\n  next: (value: T) => void;\n  error: (err: any) => void;\n  complete: () => void;\n}\n\nexport const empty: Observer<any> = {\n  closed: true,\n  next(value: any): void { /* noop */},\n  error(err: any): void { throw err; },\n  complete(): void { /*noop*/ }\n};\n","declare let global: any;\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\ndeclare var WorkerGlobalScope: any;\n// CommonJS / Node have global context exposed as \"global\" variable.\n// We don't want to include the whole node.d.ts this this compilation unit so we'll just fake\n// the global \"global\" var for now.\n\nconst __window = typeof window !== 'undefined' && window;\nconst __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&\n    self instanceof WorkerGlobalScope && self;\nconst __global = typeof global !== 'undefined' && global;\nconst _root: any = __window || __global || __self;\n\n// Workaround Closure Compiler restriction: The body of a goog.module cannot use throw.\n// This is needed when used with angular/tsickle which inserts a goog.module statement.\n// Wrap in IIFE\n(function () {\n  if (!_root) {\n    throw new Error('RxJS could not find any global context (window, self, global)');\n  }\n})();\n\nexport { _root as root };","import { root } from '../util/root';\n\nconst Symbol: any = root.Symbol;\n\nexport const rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function') ?\n  Symbol.for('rxSubscriber') : '@@rxSubscriber';\n\n/**\n * @deprecated use rxSubscriber instead\n */\nexport const $$rxSubscriber = rxSubscriber;\n","import { isFunction } from './util/isFunction';\nimport { Observer, PartialObserver } from './Observer';\nimport { Subscription } from './Subscription';\nimport { empty as emptyObserver } from './Observer';\nimport { rxSubscriber as rxSubscriberSymbol } from './symbol/rxSubscriber';\n\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nexport class Subscriber<T> extends Subscription implements Observer<T> {\n\n  [rxSubscriberSymbol]() { return this; }\n\n  /**\n   * A static factory for a Subscriber, given a (potentially partial) definition\n   * of an Observer.\n   * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n   * Observer represented by the given arguments.\n   */\n  static create<T>(next?: (x?: T) => void,\n                   error?: (e?: any) => void,\n                   complete?: () => void): Subscriber<T> {\n    const subscriber = new Subscriber(next, error, complete);\n    subscriber.syncErrorThrowable = false;\n    return subscriber;\n  }\n\n  public syncErrorValue: any = null;\n  public syncErrorThrown: boolean = false;\n  public syncErrorThrowable: boolean = false;\n\n  protected isStopped: boolean = false;\n  protected destination: PartialObserver<any>; // this `any` is the escape hatch to erase extra type param (e.g. R)\n\n  /**\n   * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n   * defined Observer or a `next` callback function.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   */\n  constructor(destinationOrNext?: PartialObserver<any> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    switch (arguments.length) {\n      case 0:\n        this.destination = emptyObserver;\n        break;\n      case 1:\n        if (!destinationOrNext) {\n          this.destination = emptyObserver;\n          break;\n        }\n        if (typeof destinationOrNext === 'object') {\n          if (destinationOrNext instanceof Subscriber) {\n            this.destination = (<Subscriber<any>> destinationOrNext);\n            (<any> this.destination).add(this);\n          } else {\n            this.syncErrorThrowable = true;\n            this.destination = new SafeSubscriber<T>(this, <PartialObserver<any>> destinationOrNext);\n          }\n          break;\n        }\n      default:\n        this.syncErrorThrowable = true;\n        this.destination = new SafeSubscriber<T>(this, <((value: T) => void)> destinationOrNext, error, complete);\n        break;\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `next` from\n   * the Observable, with a value. The Observable may call this method 0 or more\n   * times.\n   * @param {T} [value] The `next` value.\n   * @return {void}\n   */\n  next(value?: T): void {\n    if (!this.isStopped) {\n      this._next(value);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `error` from\n   * the Observable, with an attached {@link Error}. Notifies the Observer that\n   * the Observable has experienced an error condition.\n   * @param {any} [err] The `error` exception.\n   * @return {void}\n   */\n  error(err?: any): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._error(err);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive a valueless notification of type\n   * `complete` from the Observable. Notifies the Observer that the Observable\n   * has finished sending push-based notifications.\n   * @return {void}\n   */\n  complete(): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._complete();\n    }\n  }\n\n  unsubscribe(): void {\n    if (this.closed) {\n      return;\n    }\n    this.isStopped = true;\n    super.unsubscribe();\n  }\n\n  protected _next(value: T): void {\n    this.destination.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.destination.error(err);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.destination.complete();\n    this.unsubscribe();\n  }\n\n  protected _unsubscribeAndRecycle(): Subscriber<T> {\n    const { _parent, _parents } = this;\n    this._parent = null;\n    this._parents = null;\n    this.unsubscribe();\n    this.closed = false;\n    this.isStopped = false;\n    this._parent = _parent;\n    this._parents = _parents;\n    return this;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SafeSubscriber<T> extends Subscriber<T> {\n\n  private _context: any;\n\n  constructor(private _parentSubscriber: Subscriber<T>,\n              observerOrNext?: PartialObserver<T> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    let next: ((value: T) => void);\n    let context: any = this;\n\n    if (isFunction(observerOrNext)) {\n      next = (<((value: T) => void)> observerOrNext);\n    } else if (observerOrNext) {\n      next = (<PartialObserver<T>> observerOrNext).next;\n      error = (<PartialObserver<T>> observerOrNext).error;\n      complete = (<PartialObserver<T>> observerOrNext).complete;\n      if (observerOrNext !== emptyObserver) {\n        context = Object.create(observerOrNext);\n        if (isFunction(context.unsubscribe)) {\n          this.add(<() => void> context.unsubscribe.bind(context));\n        }\n        context.unsubscribe = this.unsubscribe.bind(this);\n      }\n    }\n\n    this._context = context;\n    this._next = next;\n    this._error = error;\n    this._complete = complete;\n  }\n\n  next(value?: T): void {\n    if (!this.isStopped && this._next) {\n      const { _parentSubscriber } = this;\n      if (!_parentSubscriber.syncErrorThrowable) {\n        this.__tryOrUnsub(this._next, value);\n      } else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  error(err?: any): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      if (this._error) {\n        if (!_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(this._error, err);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, this._error, err);\n          this.unsubscribe();\n        }\n      } else if (!_parentSubscriber.syncErrorThrowable) {\n        this.unsubscribe();\n        throw err;\n      } else {\n        _parentSubscriber.syncErrorValue = err;\n        _parentSubscriber.syncErrorThrown = true;\n        this.unsubscribe();\n      }\n    }\n  }\n\n  complete(): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      if (this._complete) {\n        const wrappedComplete = () => this._complete.call(this._context);\n\n        if (!_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(wrappedComplete);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n          this.unsubscribe();\n        }\n      } else {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  private __tryOrUnsub(fn: Function, value?: any): void {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      this.unsubscribe();\n      throw err;\n    }\n  }\n\n  private __tryOrSetError(parent: Subscriber<T>, fn: Function, value?: any): boolean {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      parent.syncErrorValue = err;\n      parent.syncErrorThrown = true;\n      return true;\n    }\n    return false;\n  }\n\n  protected _unsubscribe(): void {\n    const { _parentSubscriber } = this;\n    this._context = null;\n    this._parentSubscriber = null;\n    _parentSubscriber.unsubscribe();\n  }\n}\n","import { Subscriber } from './Subscriber';\nimport { InnerSubscriber } from './InnerSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class OuterSubscriber<T, R> extends Subscriber<T> {\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(innerValue);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, R>): void {\n    this.destination.error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    this.destination.complete();\n  }\n}\n","export const isArrayLike = (<T>(x: any): x is ArrayLike<T> => x && typeof x.length === 'number');","export function isPromise<T>(value: any | Promise<T>): value is Promise<T> {\n  return value && typeof (<any>value).subscribe !== 'function' && typeof (value as any).then === 'function';\n}\n","import { Subscriber } from '../Subscriber';\nimport { rxSubscriber as rxSubscriberSymbol } from '../symbol/rxSubscriber';\nimport { PartialObserver, empty as emptyObserver } from '../Observer';\n\nexport function toSubscriber<T>(\n  nextOrObserver?: PartialObserver<T> | ((value: T) => void),\n  error?: (error: any) => void,\n  complete?: () => void): Subscriber<T> {\n\n  if (nextOrObserver) {\n    if (nextOrObserver instanceof Subscriber) {\n      return (<Subscriber<T>> nextOrObserver);\n    }\n\n    if (nextOrObserver[rxSubscriberSymbol]) {\n      return nextOrObserver[rxSubscriberSymbol]();\n    }\n  }\n\n  if (!nextOrObserver && !error && !complete) {\n    return new Subscriber(emptyObserver);\n  }\n\n  return new Subscriber(nextOrObserver, error, complete);\n}\n","import { root } from '../util/root';\n\nexport function getSymbolObservable(context: any) {\n  let $$observable: any;\n  let Symbol = context.Symbol;\n\n  if (typeof Symbol === 'function') {\n    if (Symbol.observable) {\n      $$observable = Symbol.observable;\n    } else {\n        $$observable = Symbol('observable');\n        Symbol.observable = $$observable;\n    }\n  } else {\n    $$observable = '@@observable';\n  }\n\n  return $$observable;\n}\n\nexport const observable = getSymbolObservable(root);\n\n/**\n * @deprecated use observable instead\n */\nexport const $$observable = observable;\n","/* tslint:disable:no-empty */\nexport function noop() { }\n","import { PartialObserver } from './Observer';\nimport { Operator } from './Operator';\nimport { Subscriber } from './Subscriber';\nimport { Subscription, AnonymousSubscription, TeardownLogic } from './Subscription';\nimport { root } from './util/root';\nimport { toSubscriber } from './util/toSubscriber';\nimport { IfObservable } from './observable/IfObservable';\nimport { ErrorObservable } from './observable/ErrorObservable';\nimport { observable as Symbol_observable } from './symbol/observable';\nimport { OperatorFunction } from './interfaces';\nimport { pipeFromArray } from './util/pipe';\n\nexport interface Subscribable<T> {\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): AnonymousSubscription;\n}\n\nexport type SubscribableOrPromise<T> = Subscribable<T> | PromiseLike<T>;\nexport type ObservableInput<T> = SubscribableOrPromise<T> | ArrayLike<T>;\n\n/**\n * A representation of any set of values over any amount of time. This is the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nexport class Observable<T> implements Subscribable<T> {\n\n  public _isScalar: boolean = false;\n\n  protected source: Observable<any>;\n  protected operator: Operator<any, T>;\n\n  /**\n   * @constructor\n   * @param {Function} subscribe the function that is called when the Observable is\n   * initially subscribed to. This function is given a Subscriber, to which new values\n   * can be `next`ed, or an `error` method can be called to raise an error, or\n   * `complete` can be called to notify of a successful completion.\n   */\n  constructor(subscribe?: (this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic) {\n    if (subscribe) {\n      this._subscribe = subscribe;\n    }\n  }\n\n  // HACK: Since TypeScript inherits static properties too, we have to\n  // fight against TypeScript here so Subject can have a different static create signature\n  /**\n   * Creates a new cold Observable by calling the Observable constructor\n   * @static true\n   * @owner Observable\n   * @method create\n   * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n   * @return {Observable} a new cold observable\n   */\n  static create: Function = <T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\n    return new Observable<T>(subscribe);\n  }\n\n  /**\n   * Creates a new Observable, with this Observable as the source, and the passed\n   * operator defined as the new observable's operator.\n   * @method lift\n   * @param {Operator} operator the operator defining the operation to take on the observable\n   * @return {Observable} a new observable with the Operator applied\n   */\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const observable = new Observable<R>();\n    observable.source = this;\n    observable.operator = operator;\n    return observable;\n  }\n\n  subscribe(): Subscription;\n  subscribe(observer: PartialObserver<T>): Subscription;\n  subscribe(next?: (value: T) => void, error?: (error: any) => void, complete?: () => void): Subscription;\n  /**\n   * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.\n   *\n   * <span class=\"informal\">Use it when you have all these Observables, but still nothing is happening.</span>\n   *\n   * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It\n   * might be for example a function that you passed to a {@link create} static factory, but most of the time it is\n   * a library implementation, which defines what and when will be emitted by an Observable. This means that calling\n   * `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often\n   * thought.\n   *\n   * Apart from starting the execution of an Observable, this method allows you to listen for values\n   * that an Observable emits, as well as for when it completes or errors. You can achieve this in two\n   * following ways.\n   *\n   * The first way is creating an object that implements {@link Observer} interface. It should have methods\n   * defined by that interface, but note that it should be just a regular JavaScript object, which you can create\n   * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular do\n   * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also\n   * that your object does not have to implement all methods. If you find yourself creating a method that doesn't\n   * do anything, you can simply omit it. Note however, that if `error` method is not provided, all errors will\n   * be left uncaught.\n   *\n   * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.\n   * This means you can provide three functions as arguments to `subscribe`, where first function is equivalent\n   * of a `next` method, second of an `error` method and third of a `complete` method. Just as in case of Observer,\n   * if you do not need to listen for something, you can omit a function, preferably by passing `undefined` or `null`,\n   * since `subscribe` recognizes these functions by where they were placed in function call. When it comes\n   * to `error` function, just as before, if not provided, errors emitted by an Observable will be thrown.\n   *\n   * Whatever style of calling `subscribe` you use, in both cases it returns a Subscription object.\n   * This object allows you to call `unsubscribe` on it, which in turn will stop work that an Observable does and will clean\n   * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback\n   * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.\n   *\n   * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.\n   * It is an Observable itself that decides when these functions will be called. For example {@link of}\n   * by default emits all its values synchronously. Always check documentation for how given Observable\n   * will behave when subscribed and if its default behavior can be modified with a {@link Scheduler}.\n   *\n   * @example <caption>Subscribe with an Observer</caption>\n   * const sumObserver = {\n   *   sum: 0,\n   *   next(value) {\n   *     console.log('Adding: ' + value);\n   *     this.sum = this.sum + value;\n   *   },\n   *   error() { // We actually could just remove this method,\n   *   },        // since we do not really care about errors right now.\n   *   complete() {\n   *     console.log('Sum equals: ' + this.sum);\n   *   }\n   * };\n   *\n   * Rx.Observable.of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.\n   * .subscribe(sumObserver);\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   *\n   *\n   * @example <caption>Subscribe with functions</caption>\n   * let sum = 0;\n   *\n   * Rx.Observable.of(1, 2, 3)\n   * .subscribe(\n   *   function(value) {\n   *     console.log('Adding: ' + value);\n   *     sum = sum + value;\n   *   },\n   *   undefined,\n   *   function() {\n   *     console.log('Sum equals: ' + sum);\n   *   }\n   * );\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   *\n   *\n   * @example <caption>Cancel a subscription</caption>\n   * const subscription = Rx.Observable.interval(1000).subscribe(\n   *   num => console.log(num),\n   *   undefined,\n   *   () => console.log('completed!') // Will not be called, even\n   * );                                // when cancelling subscription\n   *\n   *\n   * setTimeout(() => {\n   *   subscription.unsubscribe();\n   *   console.log('unsubscribed!');\n   * }, 2500);\n   *\n   * // Logs:\n   * // 0 after 1s\n   * // 1 after 2s\n   * // \"unsubscribed!\" after 2.5s\n   *\n   *\n   * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,\n   *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed\n   *  Observable.\n   * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,\n   *  the error will be thrown as unhandled.\n   * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.\n   * @return {ISubscription} a subscription reference to the registered handlers\n   * @method subscribe\n   */\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): Subscription {\n\n    const { operator } = this;\n    const sink = toSubscriber(observerOrNext, error, complete);\n\n    if (operator) {\n      operator.call(sink, this.source);\n    } else {\n      sink.add(this.source ? this._subscribe(sink) : this._trySubscribe(sink));\n    }\n\n    if (sink.syncErrorThrowable) {\n      sink.syncErrorThrowable = false;\n      if (sink.syncErrorThrown) {\n        throw sink.syncErrorValue;\n      }\n    }\n\n    return sink;\n  }\n\n  protected _trySubscribe(sink: Subscriber<T>): TeardownLogic {\n    try {\n      return this._subscribe(sink);\n    } catch (err) {\n      sink.syncErrorThrown = true;\n      sink.syncErrorValue = err;\n      sink.error(err);\n    }\n  }\n\n  /**\n   * @method forEach\n   * @param {Function} next a handler for each value emitted by the observable\n   * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise\n   * @return {Promise} a promise that either resolves on observable completion or\n   *  rejects with the handled error\n   */\n  forEach(next: (value: T) => void, PromiseCtor?: typeof Promise): Promise<void> {\n    if (!PromiseCtor) {\n      if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n        PromiseCtor = root.Rx.config.Promise;\n      } else if (root.Promise) {\n        PromiseCtor = root.Promise;\n      }\n    }\n\n    if (!PromiseCtor) {\n      throw new Error('no Promise impl found');\n    }\n\n    return new PromiseCtor<void>((resolve, reject) => {\n      // Must be declared in a separate statement to avoid a RefernceError when\n      // accessing subscription below in the closure due to Temporal Dead Zone.\n      let subscription: Subscription;\n      subscription = this.subscribe((value) => {\n        if (subscription) {\n          // if there is a subscription, then we can surmise\n          // the next handling is asynchronous. Any errors thrown\n          // need to be rejected explicitly and unsubscribe must be\n          // called manually\n          try {\n            next(value);\n          } catch (err) {\n            reject(err);\n            subscription.unsubscribe();\n          }\n        } else {\n          // if there is NO subscription, then we're getting a nexted\n          // value synchronously during subscription. We can just call it.\n          // If it errors, Observable's `subscribe` will ensure the\n          // unsubscription logic is called, then synchronously rethrow the error.\n          // After that, Promise will trap the error and send it\n          // down the rejection path.\n          next(value);\n        }\n      }, reject, resolve);\n    });\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): TeardownLogic {\n    return this.source.subscribe(subscriber);\n  }\n\n  // `if` and `throw` are special snow flakes, the compiler sees them as reserved words\n  static if: typeof IfObservable.create;\n  static throw: typeof ErrorObservable.create;\n\n  /**\n   * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n   * @method Symbol.observable\n   * @return {Observable} this instance of the observable\n   */\n  [Symbol_observable]() {\n    return this;\n  }\n\n  /* tslint:disable:max-line-length */\n  pipe(): Observable<T>\n  pipe<A>(op1: OperatorFunction<T, A>): Observable<A>\n  pipe<A, B>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>): Observable<B>\n  pipe<A, B, C>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>): Observable<C>\n  pipe<A, B, C, D>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>): Observable<D>\n  pipe<A, B, C, D, E>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>): Observable<E>\n  pipe<A, B, C, D, E, F>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>): Observable<F>\n  pipe<A, B, C, D, E, F, G>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>): Observable<G>\n  pipe<A, B, C, D, E, F, G, H>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>): Observable<H>\n  pipe<A, B, C, D, E, F, G, H, I>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>, op9: OperatorFunction<H, I>): Observable<I>\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Used to stitch together functional operators into a chain.\n   * @method pipe\n   * @return {Observable} the Observable result of all of the operators having\n   * been called in the order they were passed in.\n   *\n   * @example\n   *\n   * import { map, filter, scan } from 'rxjs/operators';\n   *\n   * Rx.Observable.interval(1000)\n   *   .pipe(\n   *     filter(x => x % 2 === 0),\n   *     map(x => x + x),\n   *     scan((acc, x) => acc + x)\n   *   )\n   *   .subscribe(x => console.log(x))\n   */\n  pipe<R>(...operations: OperatorFunction<T, R>[]): Observable<R> {\n    if (operations.length === 0) {\n      return this as any;\n    }\n\n    return pipeFromArray(operations)(this);\n  }\n\n  /* tslint:disable:max-line-length */\n  toPromise<T>(this: Observable<T>): Promise<T>;\n  toPromise<T>(this: Observable<T>, PromiseCtor: typeof Promise): Promise<T>;\n  toPromise<T>(this: Observable<T>, PromiseCtor: PromiseConstructorLike): Promise<T>;\n  /* tslint:enable:max-line-length */\n\n  toPromise(PromiseCtor?: PromiseConstructorLike) {\n    if (!PromiseCtor) {\n      if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n        PromiseCtor = root.Rx.config.Promise;\n      } else if (root.Promise) {\n        PromiseCtor = root.Promise;\n      }\n    }\n\n    if (!PromiseCtor) {\n      throw new Error('no Promise impl found');\n    }\n\n    return new PromiseCtor((resolve, reject) => {\n      let value: any;\n      this.subscribe((x: T) => value = x, (err: any) => reject(err), () => resolve(value));\n    }) as Promise<T>;\n  }\n}\n","import { root } from '../util/root';\n\nexport function symbolIteratorPonyfill(root: any) {\n  const Symbol: any = root.Symbol;\n\n  if (typeof Symbol === 'function') {\n    if (!Symbol.iterator) {\n      Symbol.iterator = Symbol('iterator polyfill');\n    }\n    return Symbol.iterator;\n  } else {\n    // [for Mozilla Gecko 27-35:](https://mzl.la/2ewE1zC)\n    const { Set } = root;\n    if (Set && typeof new Set()['@@iterator'] === 'function') {\n      return '@@iterator';\n    }\n    const { Map } = root;\n    // required for compatability with es6-shim\n    if (Map) {\n      let keys = Object.getOwnPropertyNames(Map.prototype);\n      for (let i = 0; i < keys.length; ++i) {\n        let key = keys[i];\n        // according to spec, Map.prototype[@@iterator] and Map.orototype.entries must be equal.\n        if (key !== 'entries' && key !== 'size' && Map.prototype[key] === Map.prototype['entries']) {\n          return key;\n        }\n      }\n    }\n    return '@@iterator';\n  }\n}\n\nexport const iterator = symbolIteratorPonyfill(root);\n\n/**\n * @deprecated use iterator instead\n */\nexport const $$iterator = iterator;\n","import { Subscriber } from './Subscriber';\nimport { OuterSubscriber } from './OuterSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class InnerSubscriber<T, R> extends Subscriber<R> {\n  private index: number = 0;\n\n  constructor(private parent: OuterSubscriber<T, R>, private outerValue: T, private outerIndex: number) {\n    super();\n  }\n\n  protected _next(value: R): void {\n    this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);\n  }\n\n  protected _error(error: any): void {\n    this.parent.notifyError(error, this);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.parent.notifyComplete(this);\n    this.unsubscribe();\n  }\n}\n","import { root } from './root';\nimport { isArrayLike } from './isArrayLike';\nimport { isPromise } from './isPromise';\nimport { isObject } from './isObject';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { Subscription } from '../Subscription';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { observable as Symbol_observable } from '../symbol/observable';\n\nexport function subscribeToResult<T, R>(outerSubscriber: OuterSubscriber<T, R>,\n                                        result: any,\n                                        outerValue?: T,\n                                        outerIndex?: number): Subscription;\nexport function subscribeToResult<T>(outerSubscriber: OuterSubscriber<any, any>,\n                                     result: ObservableInput<T>,\n                                     outerValue?: T,\n                                     outerIndex?: number): Subscription {\n  let destination: Subscriber<any> = new InnerSubscriber(outerSubscriber, outerValue, outerIndex);\n\n  if (destination.closed) {\n    return null;\n  }\n\n  if (result instanceof Observable) {\n    if (result._isScalar) {\n      destination.next((<any>result).value);\n      destination.complete();\n      return null;\n    } else {\n      destination.syncErrorThrowable = true;\n      return result.subscribe(destination);\n    }\n  } else if (isArrayLike(result)) {\n    for (let i = 0, len = result.length; i < len && !destination.closed; i++) {\n      destination.next(result[i]);\n    }\n    if (!destination.closed) {\n      destination.complete();\n    }\n  } else if (isPromise(result)) {\n    result.then(\n      (value) => {\n        if (!destination.closed) {\n          destination.next(<any>value);\n          destination.complete();\n        }\n      },\n      (err: any) => destination.error(err)\n    )\n    .then(null, (err: any) => {\n      // Escaping the Promise trap: globally throw unhandled errors\n      root.setTimeout(() => { throw err; });\n    });\n    return destination;\n  } else if (result && typeof result[Symbol_iterator] === 'function') {\n    const iterator = <any>result[Symbol_iterator]();\n    do {\n      let item = iterator.next();\n      if (item.done) {\n        destination.complete();\n        break;\n      }\n      destination.next(item.value);\n      if (destination.closed) {\n        break;\n      }\n    } while (true);\n  } else if (result && typeof result[Symbol_observable] === 'function') {\n    const obs = result[Symbol_observable]();\n    if (typeof obs.subscribe !== 'function') {\n      destination.error(new TypeError('Provided object does not correctly implement Symbol.observable'));\n    } else {\n      return obs.subscribe(new InnerSubscriber(outerSubscriber, outerValue, outerIndex));\n    }\n  } else {\n    const value = isObject(result) ? 'an invalid object' : `'${result}'`;\n    const msg = `You provided ${value} where a stream was expected.`\n      + ' You can provide an Observable, Promise, Array, or Iterable.';\n    destination.error(new TypeError(msg));\n  }\n  return null;\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Ignores source values for a duration determined by another Observable, then\n * emits the most recent value from the source Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link auditTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/audit.png\" width=\"100%\">\n *\n * `audit` is similar to `throttle`, but emits the last value from the silenced\n * time window, instead of the first value. `audit` emits the most recent value\n * from the source Observable on the output Observable as soon as its internal\n * timer becomes disabled, and ignores source values while the timer is enabled.\n * Initially, the timer is disabled. As soon as the first source value arrives,\n * the timer is enabled by calling the `durationSelector` function with the\n * source value, which returns the \"duration\" Observable. When the duration\n * Observable emits a value or completes, the timer is disabled, then the most\n * recent source value is emitted on the output Observable, and this process\n * repeats for the next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.audit(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration, returned as an Observable or a Promise.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method audit\n * @owner Observable\n */\nexport function audit<T>(durationSelector: (value: T) => SubscribableOrPromise<any>): MonoTypeOperatorFunction<T> {\n  return function auditOperatorFunction(source: Observable<T>) {\n    return source.lift(new AuditOperator(durationSelector));\n  };\n}\n\nclass AuditOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new AuditSubscriber<T, T>(subscriber, this.durationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass AuditSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private value: T;\n  private hasValue: boolean = false;\n  private throttled: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private durationSelector: (value: T) => SubscribableOrPromise<any>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.value = value;\n    this.hasValue = true;\n    if (!this.throttled) {\n      const duration = tryCatch(this.durationSelector)(value);\n      if (duration === errorObject) {\n        this.destination.error(errorObject.e);\n      } else {\n        const innerSubscription = subscribeToResult(this, duration);\n        if (innerSubscription.closed) {\n          this.clearThrottle();\n        } else {\n          this.add(this.throttled = innerSubscription);\n        }\n      }\n    }\n  }\n\n  clearThrottle() {\n    const { value, hasValue, throttled } = this;\n    if (throttled) {\n      this.remove(throttled);\n      this.throttled = null;\n      throttled.unsubscribe();\n    }\n    if (hasValue) {\n      this.value = null;\n      this.hasValue = false;\n      this.destination.next(value);\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R, outerIndex: number, innerIndex: number): void {\n    this.clearThrottle();\n  }\n\n  notifyComplete(): void {\n    this.clearThrottle();\n  }\n}\n","import { Scheduler } from '../Scheduler';\nimport { Subscription } from '../Subscription';\n\n/**\n * A unit of work to be executed in a {@link Scheduler}. An action is typically\n * created from within a Scheduler and an RxJS user does not need to concern\n * themselves about creating and manipulating an Action.\n *\n * ```ts\n * class Action<T> extends Subscription {\n *   new (scheduler: Scheduler, work: (state?: T) => void);\n *   schedule(state?: T, delay: number = 0): Subscription;\n * }\n * ```\n *\n * @class Action<T>\n */\nexport class Action<T> extends Subscription {\n  constructor(scheduler: Scheduler, work: (this: Action<T>, state?: T) => void) {\n    super();\n  }\n  /**\n   * Schedules this action on its parent Scheduler for execution. May be passed\n   * some context object, `state`. May happen at some point in the future,\n   * according to the `delay` parameter, if specified.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler.\n   * @return {void}\n   */\n  public schedule(state?: T, delay: number = 0): Subscription {\n    return this;\n  }\n}\n","import { root } from '../util/root';\nimport { Action } from './Action';\nimport { Subscription } from '../Subscription';\nimport { AsyncScheduler } from './AsyncScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AsyncAction<T> extends Action<T> {\n\n  public id: any;\n  public state: T;\n  public delay: number;\n  protected pending: boolean = false;\n\n  constructor(protected scheduler: AsyncScheduler,\n              protected work: (this: AsyncAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n\n    if (this.closed) {\n      return this;\n     }\n\n    // Always replace the current state with the new state.\n    this.state = state;\n\n    // Set the pending flag indicating that this action has been scheduled, or\n    // has recursively rescheduled itself.\n    this.pending = true;\n\n    const id = this.id;\n    const scheduler = this.scheduler;\n\n    //\n    // Important implementation note:\n    //\n    // Actions only execute once by default, unless rescheduled from within the\n    // scheduled callback. This allows us to implement single and repeat\n    // actions via the same code path, without adding API surface area, as well\n    // as mimic traditional recursion but across asynchronous boundaries.\n    //\n    // However, JS runtimes and timers distinguish between intervals achieved by\n    // serial `setTimeout` calls vs. a single `setInterval` call. An interval of\n    // serial `setTimeout` calls can be individually delayed, which delays\n    // scheduling the next `setTimeout`, and so on. `setInterval` attempts to\n    // guarantee the interval callback will be invoked more precisely to the\n    // interval period, regardless of load.\n    //\n    // Therefore, we use `setInterval` to schedule single and repeat actions.\n    // If the action reschedules itself with the same delay, the interval is not\n    // canceled. If the action doesn't reschedule, or reschedules with a\n    // different delay, the interval will be canceled after scheduled callback\n    // execution.\n    //\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, delay);\n    }\n\n    this.delay = delay;\n    // If this action has already an async Id, don't request a new one.\n    this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);\n\n    return this;\n  }\n\n  protected requestAsyncId(scheduler: AsyncScheduler, id?: any, delay: number = 0): any {\n    return root.setInterval(scheduler.flush.bind(scheduler, this), delay);\n  }\n\n  protected recycleAsyncId(scheduler: AsyncScheduler, id: any, delay: number = 0): any {\n    // If this action is rescheduled with the same delay time, don't clear the interval id.\n    if (delay !== null && this.delay === delay && this.pending === false) {\n      return id;\n    }\n    // Otherwise, if the action's delay time is different from the current delay,\n    // or the action has been rescheduled before it's executed, clear the interval id\n    return root.clearInterval(id) && undefined || undefined;\n  }\n\n  /**\n   * Immediately executes this action and the `work` it contains.\n   * @return {any}\n   */\n  public execute(state: T, delay: number): any {\n\n    if (this.closed) {\n      return new Error('executing a cancelled action');\n    }\n\n    this.pending = false;\n    const error = this._execute(state, delay);\n    if (error) {\n      return error;\n    } else if (this.pending === false && this.id != null) {\n      // Dequeue if the action didn't reschedule itself. Don't call\n      // unsubscribe(), because the action could reschedule later.\n      // For example:\n      // ```\n      // scheduler.schedule(function doWork(counter) {\n      //   /* ... I'm a busy worker bee ... */\n      //   var originalAction = this;\n      //   /* wait 100ms before rescheduling the action */\n      //   setTimeout(function () {\n      //     originalAction.schedule(counter + 1);\n      //   }, 100);\n      // }, 1000);\n      // ```\n      this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n    }\n  }\n\n  protected _execute(state: T, delay: number): any {\n    let errored: boolean = false;\n    let errorValue: any = undefined;\n    try {\n      this.work(state);\n    } catch (e) {\n      errored = true;\n      errorValue = !!e && e || new Error(e);\n    }\n    if (errored) {\n      this.unsubscribe();\n      return errorValue;\n    }\n  }\n\n  protected _unsubscribe() {\n\n    const id = this.id;\n    const scheduler = this.scheduler;\n    const actions = scheduler.actions;\n    const index = actions.indexOf(this);\n\n    this.work  = null;\n    this.state = null;\n    this.pending = false;\n    this.scheduler = null;\n\n    if (index !== -1) {\n      actions.splice(index, 1);\n    }\n\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, null);\n    }\n\n    this.delay = null;\n  }\n}\n","import { Action } from './scheduler/Action';\nimport { Subscription } from './Subscription';\n\nexport interface IScheduler {\n  now(): number;\n  schedule<T>(work: (this: Action<T>, state?: T) => void, delay?: number, state?: T): Subscription;\n}\n/**\n * An execution context and a data structure to order tasks and schedule their\n * execution. Provides a notion of (potentially virtual) time, through the\n * `now()` getter method.\n *\n * Each unit of work in a Scheduler is called an {@link Action}.\n *\n * ```ts\n * class Scheduler {\n *   now(): number;\n *   schedule(work, delay?, state?): Subscription;\n * }\n * ```\n *\n * @class Scheduler\n */\nexport class Scheduler implements IScheduler {\n\n  public static now: () => number = Date.now ? Date.now : () => +new Date();\n\n  constructor(private SchedulerAction: typeof Action,\n              now: () => number = Scheduler.now) {\n    this.now = now;\n  }\n\n  /**\n   * A getter method that returns a number representing the current time\n   * (at the time this function was called) according to the scheduler's own\n   * internal clock.\n   * @return {number} A number that represents the current time. May or may not\n   * have a relation to wall-clock time. May or may not refer to a time unit\n   * (e.g. milliseconds).\n   */\n  public now: () => number;\n\n  /**\n   * Schedules a function, `work`, for execution. May happen at some point in\n   * the future, according to the `delay` parameter, if specified. May be passed\n   * some context object, `state`, which will be passed to the `work` function.\n   *\n   * The given arguments will be processed an stored as an Action object in a\n   * queue of actions.\n   *\n   * @param {function(state: ?T): ?Subscription} work A function representing a\n   * task, or some unit of work to be executed by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler itself.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @return {Subscription} A subscription in order to be able to unsubscribe\n   * the scheduled work.\n   */\n  public schedule<T>(work: (this: Action<T>, state?: T) => void, delay: number = 0, state?: T): Subscription {\n    return new this.SchedulerAction<T>(this, work).schedule(state, delay);\n  }\n}\n","import { Scheduler } from '../Scheduler';\nimport { AsyncAction } from './AsyncAction';\n\nexport class AsyncScheduler extends Scheduler {\n  public actions: Array<AsyncAction<any>> = [];\n  /**\n   * A flag to indicate whether the Scheduler is currently executing a batch of\n   * queued actions.\n   * @type {boolean}\n   */\n  public active: boolean = false;\n  /**\n   * An internal ID used to track the latest asynchronous task such as those\n   * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and\n   * others.\n   * @type {any}\n   */\n  public scheduled: any = undefined;\n\n  public flush(action: AsyncAction<any>): void {\n\n    const {actions} = this;\n\n    if (this.active) {\n      actions.push(action);\n      return;\n    }\n\n    let error: any;\n    this.active = true;\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (action = actions.shift()); // exhaust the scheduler queue\n\n    this.active = false;\n\n    if (error) {\n      while (action = actions.shift()) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\n/**\n *\n * Async Scheduler\n *\n * <span class=\"informal\">Schedule task as if you used setTimeout(task, duration)</span>\n *\n * `async` scheduler schedules tasks asynchronously, by putting them on the JavaScript\n * event loop queue. It is best used to delay tasks in time or to schedule tasks repeating\n * in intervals.\n *\n * If you just want to \"defer\" task, that is to perform it right after currently\n * executing synchronous code ends (commonly achieved by `setTimeout(deferredTask, 0)`),\n * better choice will be the {@link asap} scheduler.\n *\n * @example <caption>Use async scheduler to delay task</caption>\n * const task = () => console.log('it works!');\n *\n * Rx.Scheduler.async.schedule(task, 2000);\n *\n * // After 2 seconds logs:\n * // \"it works!\"\n *\n *\n * @example <caption>Use async scheduler to repeat task in intervals</caption>\n * function task(state) {\n *   console.log(state);\n *   this.schedule(state + 1, 1000); // `this` references currently executing Action,\n *                                   // which we reschedule with new state and delay\n * }\n *\n * Rx.Scheduler.async.schedule(task, 3000, 0);\n *\n * // Logs:\n * // 0 after 3s\n * // 1 after 4s\n * // 2 after 5s\n * // 3 after 6s\n *\n * @static true\n * @name async\n * @owner Scheduler\n */\n\nexport const async = new AsyncScheduler(AsyncAction);\n","import { isArray } from '../util/isArray';\n\nexport function isNumeric(val: any): val is number {\n  // parseFloat NaNs numeric-cast false positives (null|true|false|\"\")\n  // ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n  // subtraction forces infinities to NaN\n  // adding 1 corrects loss of precision from parseFloat (#15100)\n  return !isArray(val) && (val - parseFloat(val) + 1) >= 0;\n};\n","import { Scheduler } from '../Scheduler';\nexport function isScheduler(value: any): value is Scheduler {\n  return value && typeof (<any>value).schedule === 'function';\n}\n","export function isDate(value: any): value is Date {\n  return value instanceof Date && !isNaN(+value);\n}\n","import { isNumeric } from '../util/isNumeric';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\nimport { isScheduler } from '../util/isScheduler';\nimport { isDate } from '../util/isDate';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class TimerObservable extends Observable<number> {\n\n  /**\n   * Creates an Observable that starts emitting after an `initialDelay` and\n   * emits ever increasing numbers after each `period` of time thereafter.\n   *\n   * <span class=\"informal\">Its like {@link interval}, but you can specify when\n   * should the emissions start.</span>\n   *\n   * <img src=\"./img/timer.png\" width=\"100%\">\n   *\n   * `timer` returns an Observable that emits an infinite sequence of ascending\n   * integers, with a constant interval of time, `period` of your choosing\n   * between those emissions. The first emission happens after the specified\n   * `initialDelay`. The initial delay may be a {@link Date}. By default, this\n   * operator uses the `async` IScheduler to provide a notion of time, but you\n   * may pass any IScheduler to it. If `period` is not specified, the output\n   * Observable emits only one value, `0`. Otherwise, it emits an infinite\n   * sequence.\n   *\n   * @example <caption>Emits ascending numbers, one every second (1000ms), starting after 3 seconds</caption>\n   * var numbers = Rx.Observable.timer(3000, 1000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @example <caption>Emits one number after five seconds</caption>\n   * var numbers = Rx.Observable.timer(5000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link interval}\n   * @see {@link delay}\n   *\n   * @param {number|Date} initialDelay The initial delay time to wait before\n   * emitting the first value of `0`.\n   * @param {number} [period] The period of time between emissions of the\n   * subsequent numbers.\n   * @param {Scheduler} [scheduler=async] The IScheduler to use for scheduling\n   * the emission of values, and providing a notion of \"time\".\n   * @return {Observable} An Observable that emits a `0` after the\n   * `initialDelay` and ever increasing numbers after each `period` of time\n   * thereafter.\n   * @static true\n   * @name timer\n   * @owner Observable\n   */\n  static create(initialDelay: number | Date = 0,\n                period?: number | IScheduler,\n                scheduler?: IScheduler): Observable<number> {\n    return new TimerObservable(initialDelay, period, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { index, period, subscriber } = state;\n    const action = (<any> this);\n\n    subscriber.next(index);\n\n    if (subscriber.closed) {\n      return;\n    } else if (period === -1) {\n      return subscriber.complete();\n    }\n\n    state.index = index + 1;\n    action.schedule(state, period);\n  }\n\n  private period: number = -1;\n  private dueTime: number = 0;\n  private scheduler: IScheduler;\n\n  constructor(dueTime: number | Date = 0,\n              period?: number | IScheduler,\n              scheduler?: IScheduler) {\n    super();\n\n    if (isNumeric(period)) {\n      this.period = Number(period) < 1 && 1 || Number(period);\n    } else if (isScheduler(period)) {\n      scheduler = <IScheduler> period;\n    }\n\n    if (!isScheduler(scheduler)) {\n      scheduler = async;\n    }\n\n    this.scheduler = scheduler;\n    this.dueTime = isDate(dueTime) ?\n      (+dueTime - this.scheduler.now()) :\n      (<number> dueTime);\n  }\n\n  protected _subscribe(subscriber: Subscriber<number>): TeardownLogic {\n    const index = 0;\n    const { period, dueTime, scheduler } = this;\n\n    return scheduler.schedule(TimerObservable.dispatch, dueTime, {\n      index, period, subscriber\n    });\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Buffers the source Observable values until `closingNotifier` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when another Observable emits.</span>\n *\n * <img src=\"./img/buffer.png\" width=\"100%\">\n *\n * Buffers the incoming Observable values until the given `closingNotifier`\n * Observable emits a value, at which point it emits the buffer on the output\n * Observable and starts a new buffer internally, awaiting the next time\n * `closingNotifier` emits.\n *\n * @example <caption>On every click, emit array of most recent interval events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var buffered = interval.buffer(clicks);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link window}\n *\n * @param {Observable<any>} closingNotifier An Observable that signals the\n * buffer to be emitted on the output Observable.\n * @return {Observable<T[]>} An Observable of buffers, which are arrays of\n * values.\n * @method buffer\n * @owner Observable\n */\nexport function buffer<T>(closingNotifier: Observable<any>): OperatorFunction<T, T[]> {\n  return function bufferOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferOperator<T>(closingNotifier));\n  };\n}\n\nclass BufferOperator<T> implements Operator<T, T[]> {\n\n  constructor(private closingNotifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferSubscriber(subscriber, this.closingNotifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferSubscriber<T> extends OuterSubscriber<T, any> {\n  private buffer: T[] = [];\n\n  constructor(destination: Subscriber<T[]>, closingNotifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, closingNotifier));\n  }\n\n  protected _next(value: T) {\n    this.buffer.push(value);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    const buffer = this.buffer;\n    this.buffer = [];\n    this.destination.next(buffer);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Buffers the source Observable values until the size hits the maximum\n * `bufferSize` given.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when its size reaches `bufferSize`.</span>\n *\n * <img src=\"./img/bufferCount.png\" width=\"100%\">\n *\n * Buffers a number of values from the source Observable by `bufferSize` then\n * emits the buffer and clears it, and starts a new buffer each\n * `startBufferEvery` values. If `startBufferEvery` is not provided or is\n * `null`, then new buffers are started immediately at the start of the source\n * and when each buffer closes and is emitted.\n *\n * @example <caption>Emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>On every click, emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2, 1);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link pairwise}\n * @see {@link windowCount}\n *\n * @param {number} bufferSize The maximum size of the buffer emitted.\n * @param {number} [startBufferEvery] Interval at which to start a new buffer.\n * For example if `startBufferEvery` is `2`, then a new buffer will be started\n * on every other value from the source. A new buffer is started at the\n * beginning of the source by default.\n * @return {Observable<T[]>} An Observable of arrays of buffered values.\n * @method bufferCount\n * @owner Observable\n */\nexport function bufferCount<T>(bufferSize: number, startBufferEvery: number = null): OperatorFunction<T, T[]> {\n  return function bufferCountOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferCountOperator<T>(bufferSize, startBufferEvery));\n  };\n}\n\nclass BufferCountOperator<T> implements Operator<T, T[]> {\n  private subscriberClass: any;\n\n  constructor(private bufferSize: number, private startBufferEvery: number) {\n    if (!startBufferEvery || bufferSize === startBufferEvery) {\n      this.subscriberClass = BufferCountSubscriber;\n    } else {\n      this.subscriberClass = BufferSkipCountSubscriber;\n    }\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): TeardownLogic {\n    return source.subscribe(new this.subscriberClass(subscriber, this.bufferSize, this.startBufferEvery));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferCountSubscriber<T> extends Subscriber<T> {\n  private buffer: T[] = [];\n\n  constructor(destination: Subscriber<T[]>, private bufferSize: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const buffer = this.buffer;\n\n    buffer.push(value);\n\n    if (buffer.length == this.bufferSize) {\n      this.destination.next(buffer);\n      this.buffer = [];\n    }\n  }\n\n  protected _complete(): void {\n    const buffer = this.buffer;\n    if (buffer.length > 0) {\n      this.destination.next(buffer);\n    }\n    super._complete();\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferSkipCountSubscriber<T> extends Subscriber<T> {\n  private buffers: Array<T[]> = [];\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T[]>, private bufferSize: number, private startBufferEvery: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const { bufferSize, startBufferEvery, buffers, count } = this;\n\n    this.count++;\n    if (count % startBufferEvery === 0) {\n      buffers.push([]);\n    }\n\n    for (let i = buffers.length; i--; ) {\n      const buffer = buffers[i];\n      buffer.push(value);\n      if (buffer.length === bufferSize) {\n        buffers.splice(i, 1);\n        this.destination.next(buffer);\n      }\n    }\n  }\n\n  protected _complete(): void {\n    const { buffers, destination } = this;\n\n    while (buffers.length > 0) {\n      let buffer = buffers.shift();\n      if (buffer.length > 0) {\n        destination.next(buffer);\n      }\n    }\n    super._complete();\n  }\n\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Buffers the source Observable values starting from an emission from\n * `openings` and ending when the output of `closingSelector` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array. Starts\n * collecting only when `opening` emits, and calls the `closingSelector`\n * function to get an Observable that tells when to close the buffer.</span>\n *\n * <img src=\"./img/bufferToggle.png\" width=\"100%\">\n *\n * Buffers values from the source by opening the buffer via signals from an\n * Observable provided to `openings`, and closing and sending the buffers when\n * a Subscribable or Promise returned by the `closingSelector` function emits.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var buffered = clicks.bufferToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferWhen}\n * @see {@link windowToggle}\n *\n * @param {SubscribableOrPromise<O>} openings A Subscribable or Promise of notifications to start new\n * buffers.\n * @param {function(value: O): SubscribableOrPromise} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns a Subscribable or Promise,\n * which, when it emits, signals that the associated buffer should be emitted\n * and cleared.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferToggle\n * @owner Observable\n */\nexport function bufferToggle<T, O>(\n  openings: SubscribableOrPromise<O>,\n  closingSelector: (value: O) => SubscribableOrPromise<any>\n): OperatorFunction<T, T[]> {\n  return function bufferToggleOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferToggleOperator<T, O>(openings, closingSelector));\n  };\n}\n\nclass BufferToggleOperator<T, O> implements Operator<T, T[]> {\n\n  constructor(private openings: SubscribableOrPromise<O>,\n              private closingSelector: (value: O) => SubscribableOrPromise<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferToggleSubscriber(subscriber, this.openings, this.closingSelector));\n  }\n}\n\ninterface BufferContext<T> {\n  buffer: T[];\n  subscription: Subscription;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferToggleSubscriber<T, O> extends OuterSubscriber<T, O> {\n  private contexts: Array<BufferContext<T>> = [];\n\n  constructor(destination: Subscriber<T[]>,\n              private openings: SubscribableOrPromise<O>,\n              private closingSelector: (value: O) => SubscribableOrPromise<any> | void) {\n    super(destination);\n    this.add(subscribeToResult(this, openings));\n  }\n\n  protected _next(value: T): void {\n    const contexts = this.contexts;\n    const len = contexts.length;\n    for (let i = 0; i < len; i++) {\n      contexts[i].buffer.push(value);\n    }\n  }\n\n  protected _error(err: any): void {\n    const contexts = this.contexts;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      context.subscription.unsubscribe();\n      context.buffer = null;\n      context.subscription = null;\n    }\n    this.contexts = null;\n    super._error(err);\n  }\n\n  protected _complete(): void {\n    const contexts = this.contexts;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      this.destination.next(context.buffer);\n      context.subscription.unsubscribe();\n      context.buffer = null;\n      context.subscription = null;\n    }\n    this.contexts = null;\n    super._complete();\n  }\n\n  notifyNext(outerValue: any, innerValue: O,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, O>): void {\n    outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, O>): void {\n    this.closeBuffer((<any> innerSub).context);\n  }\n\n  private openBuffer(value: O): void {\n    try {\n      const closingSelector = this.closingSelector;\n      const closingNotifier = closingSelector.call(this, value);\n      if (closingNotifier) {\n        this.trySubscribe(closingNotifier);\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  }\n\n  private closeBuffer(context: BufferContext<T>): void {\n    const contexts = this.contexts;\n\n    if (contexts && context) {\n      const { buffer, subscription } = context;\n      this.destination.next(buffer);\n      contexts.splice(contexts.indexOf(context), 1);\n      this.remove(subscription);\n      subscription.unsubscribe();\n    }\n  }\n\n  private trySubscribe(closingNotifier: any): void {\n    const contexts = this.contexts;\n\n    const buffer: Array<T> = [];\n    const subscription = new Subscription();\n    const context = { buffer, subscription };\n    contexts.push(context);\n\n    const innerSubscription = subscribeToResult(this, closingNotifier, <any>context);\n\n    if (!innerSubscription || innerSubscription.closed) {\n      this.closeBuffer(context);\n    } else {\n      (<any> innerSubscription).context = context;\n\n      this.add(innerSubscription);\n      subscription.add(innerSubscription);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Buffers the source Observable values, using a factory function of closing\n * Observables to determine when to close, emit, and reset the buffer.\n *\n * <span class=\"informal\">Collects values from the past as an array. When it\n * starts collecting values, it calls a function that returns an Observable that\n * tells when to close the buffer and restart collecting.</span>\n *\n * <img src=\"./img/bufferWhen.png\" width=\"100%\">\n *\n * Opens a buffer immediately, then closes the buffer when the observable\n * returned by calling `closingSelector` function emits a value. When it closes\n * the buffer, it immediately opens a new buffer and repeats the process.\n *\n * @example <caption>Emit an array of the last clicks every [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferWhen(() =>\n *   Rx.Observable.interval(1000 + Math.random() * 4000)\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link windowWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals buffer closure.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferWhen\n * @owner Observable\n */\nexport function bufferWhen<T>(closingSelector: () => Observable<any>): OperatorFunction<T, T[]> {\n  return function (source: Observable<T>) {\n    return source.lift(new BufferWhenOperator(closingSelector));\n  };\n}\n\nclass BufferWhenOperator<T> implements Operator<T, T[]> {\n\n  constructor(private closingSelector: () => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferWhenSubscriber<T> extends OuterSubscriber<T, any> {\n  private buffer: T[];\n  private subscribing: boolean = false;\n  private closingSubscription: Subscription;\n\n  constructor(destination: Subscriber<T[]>, private closingSelector: () => Observable<any>) {\n    super(destination);\n    this.openBuffer();\n  }\n\n  protected _next(value: T) {\n    this.buffer.push(value);\n  }\n\n  protected _complete() {\n    const buffer = this.buffer;\n    if (buffer) {\n      this.destination.next(buffer);\n    }\n    super._complete();\n  }\n\n  protected _unsubscribe() {\n    this.buffer = null;\n    this.subscribing = false;\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openBuffer();\n  }\n\n  notifyComplete(): void {\n    if (this.subscribing) {\n      this.complete();\n    } else {\n      this.openBuffer();\n    }\n  }\n\n  openBuffer() {\n\n    let { closingSubscription } = this;\n\n    if (closingSubscription) {\n      this.remove(closingSubscription);\n      closingSubscription.unsubscribe();\n    }\n\n    const buffer = this.buffer;\n    if (this.buffer) {\n      this.destination.next(buffer);\n    }\n\n    this.buffer = [];\n\n    const closingNotifier = tryCatch(this.closingSelector)();\n\n    if (closingNotifier === errorObject) {\n      this.error(errorObject.e);\n    } else {\n      closingSubscription = new Subscription();\n      this.closingSubscription = closingSubscription;\n      this.add(closingSubscription);\n      this.subscribing = true;\n      closingSubscription.add(subscribeToResult(this, closingNotifier));\n      this.subscribing = false;\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Catches errors on the observable to be handled by returning a new observable or throwing an error.\n *\n * <img src=\"./img/catch.png\" width=\"100%\">\n *\n * @example <caption>Continues with a different Observable when there's an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n == 4) {\n * \t     throw 'four!';\n *     }\n *\t   return n;\n *   })\n *   .catch(err => Observable.of('I', 'II', 'III', 'IV', 'V'))\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, I, II, III, IV, V\n *\n * @example <caption>Retries the caught source Observable again in case of error, similar to retry() operator</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n === 4) {\n * \t     throw 'four!';\n *     }\n * \t   return n;\n *   })\n *   .catch((err, caught) => caught)\n *   .take(30)\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, 1, 2, 3, ...\n *\n * @example <caption>Throws a new error when the source Observable throws an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n *     if (n == 4) {\n *       throw 'four!';\n *     }\n *     return n;\n *   })\n *   .catch(err => {\n *     throw 'error in source. Details: ' + err;\n *   })\n *   .subscribe(\n *     x => console.log(x),\n *     err => console.log(err)\n *   );\n *   // 1, 2, 3, error in source. Details: four!\n *\n * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which\n *  is the source observable, in case you'd like to \"retry\" that observable by returning it again. Whatever observable\n *  is returned by the `selector` will be used to continue the observable chain.\n * @return {Observable} An observable that originates from either the source or the observable returned by the\n *  catch `selector` function.\n * @name catchError\n */\nexport function catchError<T, R>(selector: (err: any, caught: Observable<T>) => ObservableInput<R>): OperatorFunction<T, T | R> {\n  return function catchErrorOperatorFunction(source: Observable<T>): Observable<T | R> {\n    const operator = new CatchOperator(selector);\n    const caught = source.lift(operator);\n    return (operator.caught = caught as Observable<T>);\n  };\n}\n\nclass CatchOperator<T, R> implements Operator<T, T | R> {\n  caught: Observable<T>;\n\n  constructor(private selector: (err: any, caught: Observable<T>) => ObservableInput<T | R>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass CatchSubscriber<T, R> extends OuterSubscriber<T, T | R> {\n  constructor(destination: Subscriber<any>,\n              private selector: (err: any, caught: Observable<T>) => ObservableInput<T | R>,\n              private caught: Observable<T>) {\n    super(destination);\n  }\n\n  // NOTE: overriding `error` instead of `_error` because we don't want\n  // to have this flag this subscriber as `isStopped`. We can mimic the\n  // behavior of the RetrySubscriber (from the `retry` operator), where\n  // we unsubscribe from our source chain, reset our Subscriber flags,\n  // then subscribe to the selector result.\n  error(err: any) {\n    if (!this.isStopped) {\n      let result: any;\n      try {\n        result = this.selector(err, this.caught);\n      } catch (err2) {\n        super.error(err2);\n        return;\n      }\n      this._unsubscribeAndRecycle();\n      this.add(subscribeToResult(this, result));\n    }\n  }\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ScalarObservable<T> extends Observable<T> {\n  static create<T>(value: T, scheduler?: IScheduler): ScalarObservable<T> {\n    return new ScalarObservable(value, scheduler);\n  }\n\n  static dispatch(state: any): void {\n    const { done, value, subscriber } = state;\n\n    if (done) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(value);\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.done = true;\n    (<any> this).schedule(state);\n  }\n\n  _isScalar: boolean = true;\n\n  constructor(public value: T, private scheduler?: IScheduler) {\n    super();\n    if (scheduler) {\n      this._isScalar = false;\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const value = this.value;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(ScalarObservable.dispatch, 0, {\n        done: false, value, subscriber\n      });\n    } else {\n      subscriber.next(value);\n      if (!subscriber.closed) {\n        subscriber.complete();\n      }\n    }\n  }\n}\n","import { IScheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\nexport interface DispatchArg<T> {\n  subscriber: Subscriber<T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class EmptyObservable<T> extends Observable<T> {\n\n  /**\n   * Creates an Observable that emits no items to the Observer and immediately\n   * emits a complete notification.\n   *\n   * <span class=\"informal\">Just emits 'complete', and nothing else.\n   * </span>\n   *\n   * <img src=\"./img/empty.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the complete notification. It can be used for composing with other\n   * Observables, such as in a {@link mergeMap}.\n   *\n   * @example <caption>Emit the number 7, then complete.</caption>\n   * var result = Rx.Observable.empty().startWith(7);\n   * result.subscribe(x => console.log(x));\n   *\n   * @example <caption>Map and flatten only odd numbers to the sequence 'a', 'b', 'c'</caption>\n   * var interval = Rx.Observable.interval(1000);\n   * var result = interval.mergeMap(x =>\n   *   x % 2 === 1 ? Rx.Observable.of('a', 'b', 'c') : Rx.Observable.empty()\n   * );\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following to the console:\n   * // x is equal to the count on the interval eg(0,1,2,3,...)\n   * // x will occur every 1000ms\n   * // if x % 2 is equal to 1 print abc\n   * // if x % 2 is not equal to 1 nothing will be output\n   *\n   * @see {@link create}\n   * @see {@link never}\n   * @see {@link of}\n   * @see {@link throw}\n   *\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emission of the complete notification.\n   * @return {Observable} An \"empty\" Observable: emits only the complete\n   * notification.\n   * @static true\n   * @name empty\n   * @owner Observable\n   */\n  static create<T>(scheduler?: IScheduler): Observable<T> {\n    return new EmptyObservable<T>(scheduler);\n  }\n\n  static dispatch<T>(arg: DispatchArg<T>) {\n    const { subscriber } = arg;\n    subscriber.complete();\n  }\n\n  constructor(private scheduler?: IScheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(EmptyObservable.dispatch, 0, { subscriber });\n    } else {\n      subscriber.complete();\n    }\n  }\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { ScalarObservable } from './ScalarObservable';\nimport { EmptyObservable } from './EmptyObservable';\nimport { Subscriber } from '../Subscriber';\nimport { isScheduler } from '../util/isScheduler';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ArrayObservable<T> extends Observable<T> {\n\n  static create<T>(array: T[], scheduler?: IScheduler): Observable<T> {\n    return new ArrayObservable(array, scheduler);\n  }\n\n  static of<T>(item1: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, item5: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, item5: T, item6: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(...array: Array<T | IScheduler>): Observable<T>;\n  /**\n   * Creates an Observable that emits some values you specify as arguments,\n   * immediately one after the other, and then emits a complete notification.\n   *\n   * <span class=\"informal\">Emits the arguments you provide, then completes.\n   * </span>\n   *\n   * <img src=\"./img/of.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the arguments given, and the complete notification thereafter. It can\n   * be used for composing with other Observables, such as with {@link concat}.\n   * By default, it uses a `null` IScheduler, which means the `next`\n   * notifications are sent synchronously, although with a different IScheduler\n   * it is possible to determine when those notifications will be delivered.\n   *\n   * @example <caption>Emit 10, 20, 30, then 'a', 'b', 'c', then start ticking every second.</caption>\n   * var numbers = Rx.Observable.of(10, 20, 30);\n   * var letters = Rx.Observable.of('a', 'b', 'c');\n   * var interval = Rx.Observable.interval(1000);\n   * var result = numbers.concat(letters).concat(interval);\n   * result.subscribe(x => console.log(x));\n   *\n   * @see {@link create}\n   * @see {@link empty}\n   * @see {@link never}\n   * @see {@link throw}\n   *\n   * @param {...T} values Arguments that represent `next` values to be emitted.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emissions of the `next` notifications.\n   * @return {Observable<T>} An Observable that emits each given input value.\n   * @static true\n   * @name of\n   * @owner Observable\n   */\n  static of<T>(...array: Array<T | IScheduler>): Observable<T> {\n    let scheduler = <IScheduler>array[array.length - 1];\n    if (isScheduler(scheduler)) {\n      array.pop();\n    } else {\n      scheduler = null;\n    }\n\n    const len = array.length;\n    if (len > 1) {\n      return new ArrayObservable<T>(<any>array, scheduler);\n    } else if (len === 1) {\n      return new ScalarObservable<T>(<any>array[0], scheduler);\n    } else {\n      return new EmptyObservable<T>(scheduler);\n    }\n  }\n\n  static dispatch(state: any) {\n\n    const { array, index, count, subscriber } = state;\n\n    if (index >= count) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(array[index]);\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.index = index + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  // value used if Array has one value and _isScalar\n  value: any;\n\n  constructor(private array: T[], private scheduler?: IScheduler) {\n    super();\n    if (!scheduler && array.length === 1) {\n      this._isScalar = true;\n      this.value = array[0];\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    let index = 0;\n    const array = this.array;\n    const count = array.length;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(ArrayObservable.dispatch, 0, {\n        array, index, count, subscriber\n      });\n    } else {\n      for (let i = 0; i < count && !subscriber.closed; i++) {\n        subscriber.next(array[i]);\n      }\n      subscriber.complete();\n    }\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { isArray } from '../util/isArray';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\nconst none = {};\n\n/* tslint:disable:max-line-length */\nexport function combineLatest<T, R>(project: (v1: T) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): OperatorFunction<T, R> ;\nexport function combineLatest<T, T2>(v2: ObservableInput<T2>): OperatorFunction<T, [T, T2]>;\nexport function combineLatest<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, [T, T2, T3]>;\nexport function combineLatest<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, [T, T2, T3, T4]>;\nexport function combineLatest<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, [T, T2, T3, T4, T5]>;\nexport function combineLatest<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, [T, T2, T3, T4, T5, T6]> ;\nexport function combineLatest<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): OperatorFunction<T, R>;\nexport function combineLatest<T, R>(array: ObservableInput<T>[]): OperatorFunction<T, Array<T>>;\nexport function combineLatest<T, TOther, R>(array: ObservableInput<TOther>[], project: (v1: T, ...values: Array<TOther>) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from this Observable with values from\n * Observables passed as arguments. This is done by subscribing to each\n * Observable, in order, and collecting an array of each of the most recent\n * values any time any of the input Observables emits, then either taking that\n * array and passing it as arguments to an optional `project` function and\n * emitting the return value of that, or just emitting the array of recent\n * values directly if there is no `project` function.\n *\n * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = weight.combineLatest(height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method combineLatest\n * @owner Observable\n */\nexport function combineLatest<T, R>(...observables: Array<ObservableInput<any> |\n                                                    Array<ObservableInput<any>> |\n                                                    ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\n  let project: (...values: Array<any>) => R = null;\n  if (typeof observables[observables.length - 1] === 'function') {\n    project = <(...values: Array<any>) => R>observables.pop();\n  }\n\n  // if the first and only other argument besides the resultSelector is an array\n  // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n  if (observables.length === 1 && isArray(observables[0])) {\n    observables = (<any>observables[0]).slice();\n  }\n\n  return (source: Observable<T>) => source.lift.call(new ArrayObservable([source, ...observables]), new CombineLatestOperator(project));\n}\n\nexport class CombineLatestOperator<T, R> implements Operator<T, R> {\n  constructor(private project?: (...values: Array<any>) => R) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new CombineLatestSubscriber(subscriber, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class CombineLatestSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private active: number = 0;\n  private values: any[] = [];\n  private observables: any[] = [];\n  private toRespond: number;\n\n  constructor(destination: Subscriber<R>, private project?: (...values: Array<any>) => R) {\n    super(destination);\n  }\n\n  protected _next(observable: any) {\n    this.values.push(none);\n    this.observables.push(observable);\n  }\n\n  protected _complete() {\n    const observables = this.observables;\n    const len = observables.length;\n    if (len === 0) {\n      this.destination.complete();\n    } else {\n      this.active = len;\n      this.toRespond = len;\n      for (let i = 0; i < len; i++) {\n        const observable = observables[i];\n        this.add(subscribeToResult(this, observable, observable, i));\n      }\n    }\n  }\n\n  notifyComplete(unused: Subscriber<R>): void {\n    if ((this.active -= 1) === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const values = this.values;\n    const oldVal = values[outerIndex];\n    const toRespond = !this.toRespond\n      ? 0\n      : oldVal === none ? --this.toRespond : this.toRespond;\n    values[outerIndex] = innerValue;\n\n    if (toRespond === 0) {\n      if (this.project) {\n        this._tryProject(values);\n      } else {\n        this.destination.next(values.slice());\n      }\n    }\n  }\n\n  private _tryProject(values: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, values);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { ScalarObservable } from './ScalarObservable';\nimport { EmptyObservable } from './EmptyObservable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ArrayLikeObservable<T> extends Observable<T> {\n\n  static create<T>(arrayLike: ArrayLike<T>, scheduler?: IScheduler): Observable<T> {\n    const length = arrayLike.length;\n    if (length === 0) {\n      return new EmptyObservable<T>();\n    } else if (length === 1) {\n      return new ScalarObservable<T>(<any>arrayLike[0], scheduler);\n    } else {\n      return new ArrayLikeObservable(arrayLike, scheduler);\n    }\n  }\n\n  static dispatch(state: any) {\n    const { arrayLike, index, length, subscriber } = state;\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    if (index >= length) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(arrayLike[index]);\n\n    state.index = index + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  // value used if Array has one value and _isScalar\n  private value: any;\n\n  constructor(private arrayLike: ArrayLike<T>, private scheduler?: IScheduler) {\n    super();\n    if (!scheduler && arrayLike.length === 1) {\n      this._isScalar = true;\n      this.value = arrayLike[0];\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    let index = 0;\n    const { arrayLike, scheduler } = this;\n    const length = arrayLike.length;\n\n    if (scheduler) {\n      return scheduler.schedule(ArrayLikeObservable.dispatch, 0, {\n        arrayLike, index, length, subscriber\n      });\n    } else {\n      for (let i = 0; i < length && !subscriber.closed; i++) {\n        subscriber.next(arrayLike[i]);\n      }\n      subscriber.complete();\n    }\n  }\n}\n","import { PartialObserver } from './Observer';\nimport { Observable } from './Observable';\n\n/**\n * Represents a push-based event or value that an {@link Observable} can emit.\n * This class is particularly useful for operators that manage notifications,\n * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and\n * others. Besides wrapping the actual delivered value, it also annotates it\n * with metadata of, for instance, what type of push message it is (`next`,\n * `error`, or `complete`).\n *\n * @see {@link materialize}\n * @see {@link dematerialize}\n * @see {@link observeOn}\n *\n * @class Notification<T>\n */\nexport class Notification<T> {\n  hasValue: boolean;\n\n  constructor(public kind: string, public value?: T, public error?: any) {\n    this.hasValue = kind === 'N';\n  }\n\n  /**\n   * Delivers to the given `observer` the value wrapped by this Notification.\n   * @param {Observer} observer\n   * @return\n   */\n  observe(observer: PartialObserver<T>): any {\n    switch (this.kind) {\n      case 'N':\n        return observer.next && observer.next(this.value);\n      case 'E':\n        return observer.error && observer.error(this.error);\n      case 'C':\n        return observer.complete && observer.complete();\n    }\n  }\n\n  /**\n   * Given some {@link Observer} callbacks, deliver the value represented by the\n   * current Notification to the correctly corresponding callback.\n   * @param {function(value: T): void} next An Observer `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  do(next: (value: T) => void, error?: (err: any) => void, complete?: () => void): any {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return next && next(this.value);\n      case 'E':\n        return error && error(this.error);\n      case 'C':\n        return complete && complete();\n    }\n  }\n\n  /**\n   * Takes an Observer or its individual callback functions, and calls `observe`\n   * or `do` methods accordingly.\n   * @param {Observer|function(value: T): void} nextOrObserver An Observer or\n   * the `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  accept(nextOrObserver: PartialObserver<T> | ((value: T) => void), error?: (err: any) => void, complete?: () => void) {\n    if (nextOrObserver && typeof (<PartialObserver<T>>nextOrObserver).next === 'function') {\n      return this.observe(<PartialObserver<T>>nextOrObserver);\n    } else {\n      return this.do(<(value: T) => void>nextOrObserver, error, complete);\n    }\n  }\n\n  /**\n   * Returns a simple Observable that just delivers the notification represented\n   * by this Notification instance.\n   * @return {any}\n   */\n  toObservable(): Observable<T> {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return Observable.of(this.value);\n      case 'E':\n        return Observable.throw(this.error);\n      case 'C':\n        return Observable.empty<T>();\n    }\n    throw new Error('unexpected notification kind value');\n  }\n\n  private static completeNotification: Notification<any> = new Notification('C');\n  private static undefinedValueNotification: Notification<any> = new Notification('N', undefined);\n\n  /**\n   * A shortcut to create a Notification instance of the type `next` from a\n   * given value.\n   * @param {T} value The `next` value.\n   * @return {Notification<T>} The \"next\" Notification representing the\n   * argument.\n   */\n  static createNext<T>(value: T): Notification<T> {\n    if (typeof value !== 'undefined') {\n      return new Notification('N', value);\n    }\n    return Notification.undefinedValueNotification;\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `error` from a\n   * given error.\n   * @param {any} [err] The `error` error.\n   * @return {Notification<T>} The \"error\" Notification representing the\n   * argument.\n   */\n  static createError<T>(err?: any): Notification<T> {\n    return new Notification('E', undefined, err);\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `complete`.\n   * @return {Notification<any>} The valueless \"complete\" Notification.\n   */\n  static createComplete(): Notification<any> {\n    return Notification.completeNotification;\n  }\n}\n","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { TeardownLogic } from '../Subscription';\nimport { Action } from '../scheduler/Action';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n *\n * Re-emits all notifications from source Observable with specified scheduler.\n *\n * <span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span>\n *\n * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\n * notifications emitted by the source Observable. It might be useful, if you do not have control over\n * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\n *\n * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\n * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\n * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\n * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\n * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\n * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\n * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\n * little bit more, to ensure that they are emitted at expected moments.\n *\n * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\n * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\n * will delay all notifications - including error notifications - while `delay` will pass through error\n * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\n * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\n * for notification emissions in general.\n *\n * @example <caption>Ensure values in subscribe are called just before browser repaint.</caption>\n * const intervals = Rx.Observable.interval(10); // Intervals are scheduled\n *                                               // with async scheduler by default...\n *\n * intervals\n * .observeOn(Rx.Scheduler.animationFrame)       // ...but we will observe on animationFrame\n * .subscribe(val => {                           // scheduler to ensure smooth animation.\n *   someDiv.style.height = val + 'px';\n * });\n *\n * @see {@link delay}\n *\n * @param {IScheduler} scheduler Scheduler that will be used to reschedule notifications from source Observable.\n * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.\n * @return {Observable<T>} Observable that emits the same notifications as the source Observable,\n * but with provided scheduler.\n *\n * @method observeOn\n * @owner Observable\n */\nexport function observeOn<T>(scheduler: IScheduler, delay: number = 0): MonoTypeOperatorFunction<T> {\n  return function observeOnOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new ObserveOnOperator(scheduler, delay));\n  };\n}\n\nexport class ObserveOnOperator<T> implements Operator<T, T> {\n  constructor(private scheduler: IScheduler, private delay: number = 0) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ObserveOnSubscriber<T> extends Subscriber<T> {\n  static dispatch(this: Action<ObserveOnMessage>, arg: ObserveOnMessage) {\n    const { notification, destination } = arg;\n    notification.observe(destination);\n    this.unsubscribe();\n  }\n\n  constructor(destination: Subscriber<T>,\n              private scheduler: IScheduler,\n              private delay: number = 0) {\n    super(destination);\n  }\n\n  private scheduleMessage(notification: Notification<any>): void {\n    this.add(this.scheduler.schedule(\n      ObserveOnSubscriber.dispatch,\n      this.delay,\n      new ObserveOnMessage(notification, this.destination)\n    ));\n  }\n\n  protected _next(value: T): void {\n    this.scheduleMessage(Notification.createNext(value));\n  }\n\n  protected _error(err: any): void {\n    this.scheduleMessage(Notification.createError(err));\n  }\n\n  protected _complete(): void {\n    this.scheduleMessage(Notification.createComplete());\n  }\n}\n\nexport class ObserveOnMessage {\n  constructor(public notification: Notification<any>,\n              public destination: PartialObserver<any>) {\n  }\n}\n","import { isArray } from '../util/isArray';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isPromise } from '../util/isPromise';\nimport { PromiseObservable } from './PromiseObservable';\nimport { IteratorObservable } from'./IteratorObservable';\nimport { ArrayObservable } from './ArrayObservable';\nimport { ArrayLikeObservable } from './ArrayLikeObservable';\n\nimport { IScheduler } from '../Scheduler';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { ObserveOnSubscriber } from '../operators/observeOn';\nimport { observable as Symbol_observable } from '../symbol/observable';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class FromObservable<T> extends Observable<T> {\n  constructor(private ish: ObservableInput<T>, private scheduler?: IScheduler) {\n    super(null);\n  }\n\n  static create<T>(ish: ObservableInput<T>, scheduler?: IScheduler): Observable<T>;\n  static create<T, R>(ish: ArrayLike<T>, scheduler?: IScheduler): Observable<R>;\n\n  /**\n   * Creates an Observable from an Array, an array-like object, a Promise, an\n   * iterable object, or an Observable-like object.\n   *\n   * <span class=\"informal\">Converts almost anything to an Observable.</span>\n   *\n   * <img src=\"./img/from.png\" width=\"100%\">\n   *\n   * Convert various other objects and data types into Observables. `from`\n   * converts a Promise or an array-like or an\n   * [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable)\n   * object into an Observable that emits the items in that promise or array or\n   * iterable. A String, in this context, is treated as an array of characters.\n   * Observable-like objects (contains a function named with the ES2015 Symbol\n   * for Observable) can also be converted through this operator.\n   *\n   * @example <caption>Converts an array to an Observable</caption>\n   * var array = [10, 20, 30];\n   * var result = Rx.Observable.from(array);\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following:\n   * // 10 20 30\n   *\n   * @example <caption>Convert an infinite iterable (from a generator) to an Observable</caption>\n   * function* generateDoubles(seed) {\n   *   var i = seed;\n   *   while (true) {\n   *     yield i;\n   *     i = 2 * i; // double it\n   *   }\n   * }\n   *\n   * var iterator = generateDoubles(3);\n   * var result = Rx.Observable.from(iterator).take(10);\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following:\n   * // 3 6 12 24 48 96 192 384 768 1536\n   *\n   * @see {@link create}\n   * @see {@link fromEvent}\n   * @see {@link fromEventPattern}\n   * @see {@link fromPromise}\n   *\n   * @param {ObservableInput<T>} ish A subscribable object, a Promise, an\n   * Observable-like, an Array, an iterable or an array-like object to be\n   * converted.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * emissions of values.\n   * @return {Observable<T>} The Observable whose values are originally from the\n   * input object that was converted.\n   * @static true\n   * @name from\n   * @owner Observable\n   */\n  static create<T>(ish: ObservableInput<T>, scheduler?: IScheduler): Observable<T> {\n    if (ish != null) {\n      if (typeof ish[Symbol_observable] === 'function') {\n        if (ish instanceof Observable && !scheduler) {\n          return ish;\n        }\n        return new FromObservable<T>(ish, scheduler);\n      } else if (isArray(ish)) {\n        return new ArrayObservable<T>(ish, scheduler);\n      } else if (isPromise<T>(ish)) {\n        return new PromiseObservable<T>(ish, scheduler);\n      } else if (typeof ish[Symbol_iterator] === 'function' || typeof ish === 'string') {\n        return new IteratorObservable<T>(ish, scheduler);\n      } else if (isArrayLike(ish)) {\n        return new ArrayLikeObservable(ish, scheduler);\n      }\n    }\n\n    throw new TypeError((ish !== null && typeof ish || ish) + ' is not observable');\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const ish = this.ish;\n    const scheduler = this.scheduler;\n    if (scheduler == null) {\n      return ish[Symbol_observable]().subscribe(subscriber);\n    } else {\n      return ish[Symbol_observable]().subscribe(new ObserveOnSubscriber(subscriber, scheduler, 0));\n    }\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function mergeMap<T, R>(project: (value: T, index: number) => ObservableInput<R>, concurrent?: number): OperatorFunction<T, R>;\nexport function mergeMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\n * var letters = Rx.Observable.of('a', 'b', 'c');\n * var result = letters.mergeMap(x =>\n *   Rx.Observable.interval(1000).map(i => x+i)\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a,b,c with respective ascending integers\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and merging the results of the Observables obtained\n * from this transformation.\n * @method mergeMap\n * @owner Observable\n */\nexport function mergeMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>,\n                                  resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n                                  concurrent: number = Number.POSITIVE_INFINITY): OperatorFunction<T, I|R> {\n  return function mergeMapOperatorFunction(source: Observable<T>) {\n    if (typeof resultSelector === 'number') {\n      concurrent = <number>resultSelector;\n      resultSelector = null;\n    }\n    return source.lift(new MergeMapOperator(project, <any>resultSelector, concurrent));\n  };\n}\n\nexport class MergeMapOperator<T, I, R> implements Operator<T, I> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n  }\n\n  call(observer: Subscriber<I>, source: any): any {\n    return source.subscribe(new MergeMapSubscriber(\n      observer, this.project, this.resultSelector, this.concurrent\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasCompleted: boolean = false;\n  private buffer: T[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<I>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.active < this.concurrent) {\n      this._tryNext(value);\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  protected _tryNext(value: T) {\n    let result: ObservableInput<I>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.active++;\n    this._innerSub(result, value, index);\n  }\n\n  private _innerSub(ish: ObservableInput<I>, value: T, index: number): void {\n    this.add(subscribeToResult<T, I>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    if (this.resultSelector) {\n      this._notifyResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      this.destination.next(innerValue);\n    }\n  }\n\n  private _notifyResultSelector(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) {\n    let result: R;\n    try {\n      result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Counts the number of emissions on the source and emits that number when the\n * source completes.\n *\n * <span class=\"informal\">Tells how many values were emitted, when the source\n * completes.</span>\n *\n * <img src=\"./img/count.png\" width=\"100%\">\n *\n * `count` transforms an Observable that emits values into an Observable that\n * emits a single value that represents the number of values emitted by the\n * source Observable. If the source Observable terminates with an error, `count`\n * will pass this error notification along without emitting a value first. If\n * the source Observable does not terminate at all, `count` will neither emit\n * a value nor terminate. This operator takes an optional `predicate` function\n * as argument, in which case the output emission will represent the number of\n * source values that matched `true` with the `predicate`.\n *\n * @example <caption>Counts how many seconds have passed before the first click happened</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var secondsBeforeClick = seconds.takeUntil(clicks);\n * var result = secondsBeforeClick.count();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Counts how many odd numbers are there between 1 and 7</caption>\n * var numbers = Rx.Observable.range(1, 7);\n * var result = numbers.count(i => i % 2 === 1);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 4\n *\n * @see {@link max}\n * @see {@link min}\n * @see {@link reduce}\n *\n * @param {function(value: T, i: number, source: Observable<T>): boolean} [predicate] A\n * boolean function to select what values are to be counted. It is provided with\n * arguments of:\n * - `value`: the value from the source Observable.\n * - `index`: the (zero-based) \"index\" of the value from the source Observable.\n * - `source`: the source Observable instance itself.\n * @return {Observable} An Observable of one number that represents the count as\n * described above.\n * @method count\n * @owner Observable\n */\nexport function count<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): OperatorFunction<T, number> {\n  return (source: Observable<T>) => source.lift(new CountOperator(predicate, source));\n}\n\nclass CountOperator<T> implements Operator<T, number> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<number>, source: any): any {\n    return source.subscribe(new CountSubscriber(subscriber, this.predicate, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass CountSubscriber<T> extends Subscriber<T> {\n  private count: number = 0;\n  private index: number = 0;\n\n  constructor(destination: Observer<number>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.predicate) {\n      this._tryPredicate(value);\n    } else {\n      this.count++;\n    }\n  }\n\n  private _tryPredicate(value: T) {\n    let result: any;\n\n    try {\n      result = this.predicate(value, this.index++, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    if (result) {\n      this.count++;\n    }\n  }\n\n  protected _complete(): void {\n    this.destination.next(this.count);\n    this.destination.complete();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * determined by another Observable has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link debounceTime}, but the time span of\n * emission silence is determined by a second Observable.</span>\n *\n * <img src=\"./img/debounce.png\" width=\"100%\">\n *\n * `debounce` delays values emitted by the source Observable, but drops previous\n * pending delayed emissions if a new value arrives on the source Observable.\n * This operator keeps track of the most recent value from the source\n * Observable, and spawns a duration Observable by calling the\n * `durationSelector` function. The value is emitted only when the duration\n * Observable emits a value or completes, and if no other value was emitted on\n * the source Observable since the duration Observable was spawned. If a new\n * value appears before the duration Observable emits, the previous value will\n * be dropped and will not be emitted on the output Observable.\n *\n * Like {@link debounceTime}, this is a rate-limiting operator, and also a\n * delay-like operator since output emissions do not necessarily occur at the\n * same time as they did on the source Observable.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounce(() => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the timeout\n * duration for each source value, returned as an Observable or a Promise.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified duration Observable returned by\n * `durationSelector`, and may drop some values if they occur too frequently.\n * @method debounce\n * @owner Observable\n */\nexport function debounce<T>(durationSelector: (value: T) => SubscribableOrPromise<number>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DebounceOperator(durationSelector));\n}\n\nclass DebounceOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DebounceSubscriber(subscriber, this.durationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DebounceSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private value: T;\n  private hasValue: boolean = false;\n  private durationSubscription: Subscription = null;\n\n  constructor(destination: Subscriber<R>,\n              private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    try {\n      const result = this.durationSelector.call(this, value);\n\n      if (result) {\n        this._tryNext(value, result);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.emitValue();\n    this.destination.complete();\n  }\n\n  private _tryNext(value: T, duration: SubscribableOrPromise<number>): void {\n    let subscription = this.durationSubscription;\n    this.value = value;\n    this.hasValue = true;\n    if (subscription) {\n      subscription.unsubscribe();\n      this.remove(subscription);\n    }\n\n    subscription = subscribeToResult(this, duration);\n    if (!subscription.closed) {\n      this.add(this.durationSubscription = subscription);\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.emitValue();\n  }\n\n  notifyComplete(): void {\n    this.emitValue();\n  }\n\n  emitValue(): void {\n    if (this.hasValue) {\n      const value = this.value;\n      const subscription = this.durationSubscription;\n      if (subscription) {\n        this.durationSubscription = null;\n        subscription.unsubscribe();\n        this.remove(subscription);\n      }\n      this.value = null;\n      this.hasValue = false;\n      super._next(value);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function defaultIfEmpty<T>(defaultValue?: T): MonoTypeOperatorFunction<T>;\nexport function defaultIfEmpty<T, R>(defaultValue?: R): OperatorFunction<T, T | R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Emits a given value if the source Observable completes without emitting any\n * `next` value, otherwise mirrors the source Observable.\n *\n * <span class=\"informal\">If the source Observable turns out to be empty, then\n * this operator will emit a default value.</span>\n *\n * <img src=\"./img/defaultIfEmpty.png\" width=\"100%\">\n *\n * `defaultIfEmpty` emits the values emitted by the source Observable or a\n * specified default value if the source Observable is empty (completes without\n * having emitted any `next` value).\n *\n * @example <caption>If no clicks happen in 5 seconds, then emit \"no clicks\"</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksBeforeFive = clicks.takeUntil(Rx.Observable.interval(5000));\n * var result = clicksBeforeFive.defaultIfEmpty('no clicks');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link empty}\n * @see {@link last}\n *\n * @param {any} [defaultValue=null] The default value used if the source\n * Observable is empty.\n * @return {Observable} An Observable that emits either the specified\n * `defaultValue` if the source Observable emits no items, or the values emitted\n * by the source Observable.\n * @method defaultIfEmpty\n * @owner Observable\n */\nexport function defaultIfEmpty<T, R>(defaultValue: R = null): OperatorFunction<T, T | R> {\n  return (source: Observable<T>) => source.lift(new DefaultIfEmptyOperator(defaultValue)) as Observable<T | R>;\n}\n\nclass DefaultIfEmptyOperator<T, R> implements Operator<T, T | R> {\n\n  constructor(private defaultValue: R) {\n  }\n\n  call(subscriber: Subscriber<T | R>, source: any): any {\n    return source.subscribe(new DefaultIfEmptySubscriber(subscriber, this.defaultValue));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DefaultIfEmptySubscriber<T, R> extends Subscriber<T> {\n  private isEmpty: boolean = true;\n\n  constructor(destination: Subscriber<T | R>, private defaultValue: R) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.isEmpty = false;\n    this.destination.next(value);\n  }\n\n  protected _complete(): void {\n    if (this.isEmpty) {\n      this.destination.next(this.defaultValue);\n    }\n    this.destination.complete();\n  }\n}","import { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { Operator } from '../Operator';\nimport { IScheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Action } from '../scheduler/Action';\nimport { Notification } from '../Notification';\nimport { Observable } from '../Observable';\nimport { PartialObserver } from '../Observer';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Delays the emission of items from the source Observable by a given timeout or\n * until a given Date.\n *\n * <span class=\"informal\">Time shifts each item by some specified amount of\n * milliseconds.</span>\n *\n * <img src=\"./img/delay.png\" width=\"100%\">\n *\n * If the delay argument is a Number, this operator time shifts the source\n * Observable by that amount of time expressed in milliseconds. The relative\n * time intervals between the values are preserved.\n *\n * If the delay argument is a Date, this operator time shifts the start of the\n * Observable execution until the given date occurs.\n *\n * @example <caption>Delay each click by one second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delay(1000); // each click emitted after 1 second\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @example <caption>Delay all clicks until a future date happens</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var date = new Date('March 15, 2050 12:00:00'); // in the future\n * var delayedClicks = clicks.delay(date); // click emitted only after that date\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n *\n * @param {number|Date} delay The delay duration in milliseconds (a `number`) or\n * a `Date` until which the emission of the source items is delayed.\n * @param {Scheduler} [scheduler=async] The IScheduler to use for\n * managing the timers that handle the time-shift for each item.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified timeout or Date.\n * @method delay\n * @owner Observable\n */\nexport function delay<T>(delay: number|Date,\n                         scheduler: IScheduler = async): MonoTypeOperatorFunction<T> {\n  const absoluteDelay = isDate(delay);\n  const delayFor = absoluteDelay ? (+delay - scheduler.now()) : Math.abs(<number>delay);\n  return (source: Observable<T>) => source.lift(new DelayOperator(delayFor, scheduler));\n}\n\nclass DelayOperator<T> implements Operator<T, T> {\n  constructor(private delay: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DelaySubscriber(subscriber, this.delay, this.scheduler));\n  }\n}\n\ninterface DelayState<T> {\n  source: DelaySubscriber<T>;\n  destination: PartialObserver<T>;\n  scheduler: IScheduler;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DelaySubscriber<T> extends Subscriber<T> {\n  private queue: Array<DelayMessage<T>> = [];\n  private active: boolean = false;\n  private errored: boolean = false;\n\n  private static dispatch<T>(this: Action<DelayState<T>>, state: DelayState<T>): void {\n    const source = state.source;\n    const queue = source.queue;\n    const scheduler = state.scheduler;\n    const destination = state.destination;\n\n    while (queue.length > 0 && (queue[0].time - scheduler.now()) <= 0) {\n      queue.shift().notification.observe(destination);\n    }\n\n    if (queue.length > 0) {\n      const delay = Math.max(0, queue[0].time - scheduler.now());\n      this.schedule(state, delay);\n    } else {\n      source.active = false;\n    }\n  }\n\n  constructor(destination: Subscriber<T>,\n              private delay: number,\n              private scheduler: IScheduler) {\n    super(destination);\n  }\n\n  private _schedule(scheduler: IScheduler): void {\n    this.active = true;\n    this.add(scheduler.schedule<DelayState<T>>(DelaySubscriber.dispatch, this.delay, {\n      source: this, destination: this.destination, scheduler: scheduler\n    }));\n  }\n\n  private scheduleNotification(notification: Notification<T>): void {\n    if (this.errored === true) {\n      return;\n    }\n\n    const scheduler = this.scheduler;\n    const message = new DelayMessage(scheduler.now() + this.delay, notification);\n    this.queue.push(message);\n\n    if (this.active === false) {\n      this._schedule(scheduler);\n    }\n  }\n\n  protected _next(value: T) {\n    this.scheduleNotification(Notification.createNext(value));\n  }\n\n  protected _error(err: any) {\n    this.errored = true;\n    this.queue = [];\n    this.destination.error(err);\n  }\n\n  protected _complete() {\n    this.scheduleNotification(Notification.createComplete());\n  }\n}\n\nclass DelayMessage<T> {\n  constructor(public readonly time: number,\n              public readonly notification: Notification<T>) {\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Delays the emission of items from the source Observable by a given time span\n * determined by the emissions of another Observable.\n *\n * <span class=\"informal\">It's like {@link delay}, but the time span of the\n * delay duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/delayWhen.png\" width=\"100%\">\n *\n * `delayWhen` time shifts each emitted value from the source Observable by a\n * time span determined by another Observable. When the source emits a value,\n * the `delayDurationSelector` function is called with the source value as\n * argument, and should return an Observable, called the \"duration\" Observable.\n * The source value is emitted on the output Observable only when the duration\n * Observable emits a value or completes.\n *\n * Optionally, `delayWhen` takes a second argument, `subscriptionDelay`, which\n * is an Observable. When `subscriptionDelay` emits its first value or\n * completes, the source Observable is subscribed to and starts behaving like\n * described in the previous paragraph. If `subscriptionDelay` is not provided,\n * `delayWhen` will subscribe to the source Observable as soon as the output\n * Observable is subscribed.\n *\n * @example <caption>Delay each click by a random amount of time, between 0 and 5 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delayWhen(event =>\n *   Rx.Observable.interval(Math.random() * 5000)\n * );\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounce}\n * @see {@link delay}\n *\n * @param {function(value: T): Observable} delayDurationSelector A function that\n * returns an Observable for each value emitted by the source Observable, which\n * is then used to delay the emission of that item on the output Observable\n * until the Observable returned from this function emits a value.\n * @param {Observable} subscriptionDelay An Observable that triggers the\n * subscription to the source Observable once it emits any value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by an amount of time specified by the Observable returned by\n * `delayDurationSelector`.\n * @method delayWhen\n * @owner Observable\n */\nexport function delayWhen<T>(delayDurationSelector: (value: T) => Observable<any>,\n                             subscriptionDelay?: Observable<any>): MonoTypeOperatorFunction<T> {\n  if (subscriptionDelay) {\n    return (source: Observable<T>) =>\n      new SubscriptionDelayObservable(source, subscriptionDelay)\n        .lift(new DelayWhenOperator(delayDurationSelector));\n  }\n  return (source: Observable<T>) => source.lift(new DelayWhenOperator(delayDurationSelector));\n}\n\nclass DelayWhenOperator<T> implements Operator<T, T> {\n  constructor(private delayDurationSelector: (value: T) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DelayWhenSubscriber(subscriber, this.delayDurationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DelayWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private completed: boolean = false;\n  private delayNotifierSubscriptions: Array<Subscription> = [];\n  private values: Array<T> = [];\n\n  constructor(destination: Subscriber<T>,\n              private delayDurationSelector: (value: T) => Observable<any>) {\n    super(destination);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(outerValue);\n    this.removeSubscription(innerSub);\n    this.tryComplete();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, R>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    const value = this.removeSubscription(innerSub);\n    if (value) {\n      this.destination.next(value);\n    }\n    this.tryComplete();\n  }\n\n  protected _next(value: T): void {\n    try {\n      const delayNotifier = this.delayDurationSelector(value);\n      if (delayNotifier) {\n        this.tryDelay(delayNotifier, value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.completed = true;\n    this.tryComplete();\n  }\n\n  private removeSubscription(subscription: InnerSubscriber<T, R>): T {\n    subscription.unsubscribe();\n\n    const subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);\n    let value: T = null;\n\n    if (subscriptionIdx !== -1) {\n      value = this.values[subscriptionIdx];\n      this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);\n      this.values.splice(subscriptionIdx, 1);\n    }\n\n    return value;\n  }\n\n  private tryDelay(delayNotifier: Observable<any>, value: T): void {\n    const notifierSubscription = subscribeToResult(this, delayNotifier, value);\n\n    if (notifierSubscription && !notifierSubscription.closed) {\n      this.add(notifierSubscription);\n      this.delayNotifierSubscriptions.push(notifierSubscription);\n    }\n\n    this.values.push(value);\n  }\n\n  private tryComplete(): void {\n    if (this.completed && this.delayNotifierSubscriptions.length === 0) {\n      this.destination.complete();\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SubscriptionDelayObservable<T> extends Observable<T> {\n  constructor(protected source: Observable<T>, private subscriptionDelay: Observable<any>) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SubscriptionDelaySubscriber<T> extends Subscriber<T> {\n  private sourceSubscribed: boolean = false;\n\n  constructor(private parent: Subscriber<T>, private source: Observable<T>) {\n    super();\n  }\n\n  protected _next(unused: any) {\n    this.subscribeToSource();\n  }\n\n  protected _error(err: any) {\n    this.unsubscribe();\n    this.parent.error(err);\n  }\n\n  protected _complete() {\n    this.subscribeToSource();\n  }\n\n  private subscribeToSource(): void {\n    if (!this.sourceSubscribed) {\n      this.sourceSubscribed = true;\n      this.unsubscribe();\n      this.source.subscribe(this.parent);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Converts an Observable of {@link Notification} objects into the emissions\n * that they represent.\n *\n * <span class=\"informal\">Unwraps {@link Notification} objects as actual `next`,\n * `error` and `complete` emissions. The opposite of {@link materialize}.</span>\n *\n * <img src=\"./img/dematerialize.png\" width=\"100%\">\n *\n * `dematerialize` is assumed to operate an Observable that only emits\n * {@link Notification} objects as `next` emissions, and does not emit any\n * `error`. Such Observable is the output of a `materialize` operation. Those\n * notifications are then unwrapped using the metadata they contain, and emitted\n * as `next`, `error`, and `complete` on the output Observable.\n *\n * Use this operator in conjunction with {@link materialize}.\n *\n * @example <caption>Convert an Observable of Notifications to an actual Observable</caption>\n * var notifA = new Rx.Notification('N', 'A');\n * var notifB = new Rx.Notification('N', 'B');\n * var notifE = new Rx.Notification('E', void 0,\n *   new TypeError('x.toUpperCase is not a function')\n * );\n * var materialized = Rx.Observable.of(notifA, notifB, notifE);\n * var upperCase = materialized.dematerialize();\n * upperCase.subscribe(x => console.log(x), e => console.error(e));\n *\n * // Results in:\n * // A\n * // B\n * // TypeError: x.toUpperCase is not a function\n *\n * @see {@link Notification}\n * @see {@link materialize}\n *\n * @return {Observable} An Observable that emits items and notifications\n * embedded in Notification objects emitted by the source Observable.\n * @method dematerialize\n * @owner Observable\n */\nexport function dematerialize<T>(): OperatorFunction<Notification<T>, T> {\n  return function dematerializeOperatorFunction(source: Observable<Notification<T>>) {\n    return source.lift(new DeMaterializeOperator());\n  };\n}\n\nclass DeMaterializeOperator<T extends Notification<any>, R> implements Operator<T, R> {\n  call(subscriber: Subscriber<any>, source: any): any {\n    return source.subscribe(new DeMaterializeSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DeMaterializeSubscriber<T extends Notification<any>> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    value.observe(this.destination);\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { ISet, Set } from '../util/Set';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.\n *\n * If a keySelector function is provided, then it will project each value from the source observable into a new value that it will\n * check for equality with previously projected values. If a keySelector function is not provided, it will use each value from the\n * source observable directly with an equality check against previous values.\n *\n * In JavaScript runtimes that support `Set`, this operator will use a `Set` to improve performance of the distinct value checking.\n *\n * In other runtimes, this operator will use a minimal implementation of `Set` that relies on an `Array` and `indexOf` under the\n * hood, so performance will degrade as more values are checked for distinction. Even in newer browsers, a long-running `distinct`\n * use might result in memory leaks. To help alleviate this in some scenarios, an optional `flushes` parameter is also provided so\n * that the internal `Set` can be \"flushed\", basically clearing it of values.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 2, 3, 4, 3, 2, 1)\n *   .distinct()\n *   .subscribe(x => console.log(x)); // 1, 2, 3, 4\n *\n * @example <caption>An example using a keySelector function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     .distinct((p: Person) => p.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n *\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [keySelector] Optional function to select which value you want to check as distinct.\n * @param {Observable} [flushes] Optional Observable for flushing the internal HashSet of the operator.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinct\n * @owner Observable\n */\nexport function distinct<T, K>(keySelector?: (value: T) => K,\n                               flushes?: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DistinctOperator(keySelector, flushes));\n}\n\nclass DistinctOperator<T, K> implements Operator<T, T> {\n  constructor(private keySelector: (value: T) => K, private flushes: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DistinctSubscriber(subscriber, this.keySelector, this.flushes));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class DistinctSubscriber<T, K> extends OuterSubscriber<T, T> {\n  private values: ISet<K> = new Set<K>();\n\n  constructor(destination: Subscriber<T>, private keySelector: (value: T) => K, flushes: Observable<any>) {\n    super(destination);\n\n    if (flushes) {\n      this.add(subscribeToResult(this, flushes));\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    this.values.clear();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, T>): void {\n    this._error(error);\n  }\n\n  protected _next(value: T): void {\n    if (this.keySelector) {\n      this._useKeySelector(value);\n    } else {\n      this._finalizeNext(value, value);\n    }\n  }\n\n  private _useKeySelector(value: T): void {\n    let key: K;\n    const { destination } = this;\n    try {\n      key = this.keySelector(value);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n    this._finalizeNext(key, value);\n  }\n\n  private _finalizeNext(key: K|T, value: T) {\n    const { values } = this;\n    if (!values.has(<K>key)) {\n      values.add(<K>key);\n      this.destination.next(value);\n    }\n  }\n\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function distinctUntilChanged<T>(compare?: (x: T, y: T) => boolean): MonoTypeOperatorFunction<T>;\nexport function distinctUntilChanged<T, K>(compare: (x: K, y: K) => boolean, keySelector: (x: T) => K): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 1, 2, 3, 3, 4)\n *   .distinctUntilChanged()\n *   .subscribe(x => console.log(x)); // 1, 2, 1, 2, 3, 4\n *\n * @example <caption>An example using a compare function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilChanged((p: Person, q: Person) => p.name === q.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinctUntilChanged\n * @owner Observable\n */\nexport function distinctUntilChanged<T, K>(compare?: (x: K, y: K) => boolean, keySelector?: (x: T) => K): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DistinctUntilChangedOperator<T, K>(compare, keySelector));\n}\n\nclass DistinctUntilChangedOperator<T, K> implements Operator<T, T> {\n  constructor(private compare: (x: K, y: K) => boolean,\n              private keySelector: (x: T) => K) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DistinctUntilChangedSubscriber<T, K> extends Subscriber<T> {\n  private key: K;\n  private hasKey: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              compare: (x: K, y: K) => boolean,\n              private keySelector: (x: T) => K) {\n    super(destination);\n    if (typeof compare === 'function') {\n      this.compare = compare;\n    }\n  }\n\n  private compare(x: any, y: any): boolean {\n    return x === y;\n  }\n\n  protected _next(value: T): void {\n\n    const keySelector = this.keySelector;\n    let key: any = value;\n\n    if (keySelector) {\n      key = tryCatch(this.keySelector)(value);\n      if (key === errorObject) {\n        return this.destination.error(errorObject.e);\n      }\n    }\n\n    let result: any = false;\n\n    if (this.hasKey) {\n      result = tryCatch(this.compare)(this.key, key);\n      if (result === errorObject) {\n        return this.destination.error(errorObject.e);\n      }\n    } else {\n      this.hasKey = true;\n    }\n\n    if (Boolean(result) === false) {\n      this.key = key;\n      this.destination.next(value);\n    }\n  }\n}\n","/**\n * An error thrown when an element was queried at a certain index of an\n * Observable, but no such index or position exists in that sequence.\n *\n * @see {@link elementAt}\n * @see {@link take}\n * @see {@link takeLast}\n *\n * @class ArgumentOutOfRangeError\n */\nexport class ArgumentOutOfRangeError extends Error {\n  constructor() {\n    const err: any = super('argument out of range');\n    (<any> this).name = err.name = 'ArgumentOutOfRangeError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits the single value at the specified `index` in a sequence of emissions\n * from the source Observable.\n *\n * <span class=\"informal\">Emits only the i-th value, then completes.</span>\n *\n * <img src=\"./img/elementAt.png\" width=\"100%\">\n *\n * `elementAt` returns an Observable that emits the item at the specified\n * `index` in the source Observable, or a default value if that `index` is out\n * of range and the `default` argument is provided. If the `default` argument is\n * not given and the `index` is out of range, the output Observable will emit an\n * `ArgumentOutOfRangeError` error.\n *\n * @example <caption>Emit only the third click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.elementAt(2);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // click 1 = nothing\n * // click 2 = nothing\n * // click 3 = MouseEvent object logged to console\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link skip}\n * @see {@link single}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `elementAt(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0` or the\n * Observable has completed before emitting the i-th `next` notification.\n *\n * @param {number} index Is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {T} [defaultValue] The default value returned for missing indices.\n * @return {Observable} An Observable that emits a single item, if it is found.\n * Otherwise, will emit the default value if given. If not, then emits an error.\n * @method elementAt\n * @owner Observable\n */\nexport function elementAt<T>(index: number, defaultValue?: T): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new ElementAtOperator(index, defaultValue));\n}\n\nclass ElementAtOperator<T> implements Operator<T, T> {\n\n  constructor(private index: number, private defaultValue?: T) {\n    if (index < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new ElementAtSubscriber(subscriber, this.index, this.defaultValue));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ElementAtSubscriber<T> extends Subscriber<T> {\n\n  constructor(destination: Subscriber<T>, private index: number, private defaultValue?: T) {\n    super(destination);\n  }\n\n  protected _next(x: T) {\n    if (this.index-- === 0) {\n      this.destination.next(x);\n      this.destination.complete();\n    }\n  }\n\n  protected _complete() {\n    const destination = this.destination;\n    if (this.index >= 0) {\n      if (typeof this.defaultValue !== 'undefined') {\n        destination.next(this.defaultValue);\n      } else {\n        destination.error(new ArgumentOutOfRangeError);\n      }\n    }\n    destination.complete();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.\n *\n * @example <caption>A simple example emitting true if all elements are less than 5, false otherwise</caption>\n *  Observable.of(1, 2, 3, 4, 5, 6)\n *     .every(x => x < 5)\n *     .subscribe(x => console.log(x)); // -> false\n *\n * @param {function} predicate A function for determining if an item meets a specified condition.\n * @param {any} [thisArg] Optional object to use for `this` in the callback.\n * @return {Observable} An Observable of booleans that determines if all items of the source Observable meet the condition specified.\n * @method every\n * @owner Observable\n */\nexport function every<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                         thisArg?: any): OperatorFunction<T, boolean> {\n  return (source: Observable<T>) => source.lift(new EveryOperator(predicate, thisArg, source));\n}\n\nclass EveryOperator<T> implements Operator<T, boolean> {\n  constructor(private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private thisArg?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<boolean>, source: any): any {\n    return source.subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass EverySubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Observer<boolean>,\n              private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private thisArg: any,\n              private source?: Observable<T>) {\n    super(destination);\n    this.thisArg = thisArg || this;\n  }\n\n  private notifyComplete(everyValueMatch: boolean): void {\n    this.destination.next(everyValueMatch);\n    this.destination.complete();\n  }\n\n  protected _next(value: T): void {\n    let result = false;\n    try {\n      result = this.predicate.call(this.thisArg, value, this.index++, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    if (!result) {\n      this.notifyComplete(false);\n    }\n  }\n\n  protected _complete(): void {\n    this.notifyComplete(true);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by dropping\n * inner Observables while the previous inner Observable has not yet completed.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * next inner Observables while the current inner is still executing.</span>\n *\n * <img src=\"./img/exhaust.png\" width=\"100%\">\n *\n * `exhaust` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable begins emitting the items emitted by that\n * inner Observable. So far, it behaves like {@link mergeAll}. However,\n * `exhaust` ignores every new inner Observable if the previous Observable has\n * not yet completed. Once that one completes, it will accept and flatten the\n * next inner Observable and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(5));\n * var result = higherOrder.exhaust();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link switch}\n * @see {@link mergeAll}\n * @see {@link exhaustMap}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable that takes a source of Observables and propagates the first observable\n * exclusively until it completes before subscribing to the next.\n * @method exhaust\n * @owner Observable\n */\nexport function exhaust<T>(): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SwitchFirstOperator<T>());\n}\n\nclass SwitchFirstOperator<T> implements Operator<T, T> {\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SwitchFirstSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchFirstSubscriber<T> extends OuterSubscriber<T, T> {\n  private hasCompleted: boolean = false;\n  private hasSubscription: boolean = false;\n\n  constructor(destination: Subscriber<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSubscription) {\n      this.hasSubscription = true;\n      this.add(subscribeToResult(this, value));\n    }\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (!this.hasSubscription) {\n      this.destination.complete();\n    }\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n    this.hasSubscription = false;\n    if (this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function exhaustMap<T, R>(project: (value: T, index: number) => ObservableInput<R>): OperatorFunction<T, R>;\nexport function exhaustMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable only if the previous projected Observable has completed.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link exhaust}.</span>\n *\n * <img src=\"./img/exhaustMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. When it projects a source value to\n * an Observable, the output Observable begins emitting the items emitted by\n * that projected Observable. However, `exhaustMap` ignores every new projected\n * Observable if the previous projected Observable has not yet completed. Once\n * that one completes, it will accept and flatten the next projected Observable\n * and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.exhaustMap((ev) => Rx.Observable.interval(1000).take(5));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaust}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable containing projected Observables\n * of each item of the source, ignoring projected Observables that start before\n * their preceding Observable has completed.\n * @method exhaustMap\n * @owner Observable\n */\nexport function exhaustMap<T, I, R>(\n  project: (value: T, index: number) => ObservableInput<I>,\n  resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R\n  ): OperatorFunction<T, R> {\n    return (source: Observable<T>) => source.lift(new SwitchFirstMapOperator(project, resultSelector));\n  }\n\nclass SwitchFirstMapOperator<T, I, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new SwitchFirstMapSubscriber(subscriber, this.project, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchFirstMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasSubscription: boolean = false;\n  private hasCompleted: boolean = false;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSubscription) {\n      this.tryNext(value);\n    }\n  }\n\n  private tryNext(value: T): void {\n    const index = this.index++;\n    const destination = this.destination;\n    try {\n      const result = this.project(value, index);\n      this.hasSubscription = true;\n      this.add(subscribeToResult(this, result, value, index));\n    } catch (err) {\n      destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (!this.hasSubscription) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private trySelectResult(outerValue: T, innerValue: I,\n                          outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    try {\n      const result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n      destination.next(result);\n    } catch (err) {\n      destination.error(err);\n    }\n  }\n\n  notifyError(err: any): void {\n    this.destination.error(err);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n\n    this.hasSubscription = false;\n    if (this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction, OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function expand<T>(project: (value: T, index: number) => Observable<T>, concurrent?: number, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function expand<T, R>(project: (value: T, index: number) => Observable<R>, concurrent?: number, scheduler?: IScheduler): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Recursively projects each source value to an Observable which is merged in\n * the output Observable.\n *\n * <span class=\"informal\">It's similar to {@link mergeMap}, but applies the\n * projection function to every source value as well as every output value.\n * It's recursive.</span>\n *\n * <img src=\"./img/expand.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger. *Expand* will re-emit on the output\n * Observable every source value. Then, each output value is given to the\n * `project` function which returns an inner Observable to be merged on the\n * output Observable. Those output values resulting from the projection are also\n * given to the `project` function to produce new output values. This is how\n * *expand* behaves recursively.\n *\n * @example <caption>Start emitting the powers of two on every click, at most 10 of them</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var powersOfTwo = clicks\n *   .mapTo(1)\n *   .expand(x => Rx.Observable.of(2 * x).delay(1000))\n *   .take(10);\n * powersOfTwo.subscribe(x => console.log(x));\n *\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n *\n * @param {function(value: T, index: number) => Observable} project A function\n * that, when applied to an item emitted by the source or the output Observable,\n * returns an Observable.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\n * each projected inner Observable.\n * @return {Observable} An Observable that emits the source values and also\n * result of applying the projection function to each value emitted on the\n * output Observable and and merging the results of the Observables obtained\n * from this transformation.\n * @method expand\n * @owner Observable\n */\nexport function expand<T, R>(project: (value: T, index: number) => Observable<R>,\n                             concurrent: number = Number.POSITIVE_INFINITY,\n                             scheduler: IScheduler = undefined): OperatorFunction<T, R> {\n  concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;\n\n  return (source: Observable<T>) => source.lift(new ExpandOperator(project, concurrent, scheduler));\n}\n\nexport class ExpandOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => Observable<R>,\n              private concurrent: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));\n  }\n}\n\ninterface DispatchArg<T, R> {\n  subscriber: ExpandSubscriber<T, R>;\n  result: Observable<R>;\n  value: any;\n  index: number;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ExpandSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private index: number = 0;\n  private active: number = 0;\n  private hasCompleted: boolean = false;\n  private buffer: any[];\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => Observable<R>,\n              private concurrent: number,\n              private scheduler: IScheduler) {\n    super(destination);\n    if (concurrent < Number.POSITIVE_INFINITY) {\n      this.buffer = [];\n    }\n  }\n\n  private static dispatch<T, R>(arg: DispatchArg<T, R>): void {\n    const {subscriber, result, value, index} = arg;\n    subscriber.subscribeToProjection(result, value, index);\n  }\n\n  protected _next(value: any): void {\n    const destination = this.destination;\n\n    if (destination.closed) {\n      this._complete();\n      return;\n    }\n\n    const index = this.index++;\n    if (this.active < this.concurrent) {\n      destination.next(value);\n      let result = tryCatch(this.project)(value, index);\n      if (result === errorObject) {\n        destination.error(errorObject.e);\n      } else if (!this.scheduler) {\n        this.subscribeToProjection(result, value, index);\n      } else {\n        const state: DispatchArg<T, R> = { subscriber: this, result, value, index };\n        this.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));\n      }\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private subscribeToProjection(result: any, value: T, index: number): void {\n    this.active++;\n    this.add(subscribeToResult<T, R>(this, result, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this._next(innerValue);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer && buffer.length > 0) {\n      this._next(buffer.shift());\n    }\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function filter<T, S extends T>(predicate: (value: T, index: number) => value is S,\n                                       thisArg?: any): OperatorFunction<T, S>;\nexport function filter<T>(predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Filter items emitted by the source Observable by only emitting those that\n * satisfy a specified predicate.\n *\n * <span class=\"informal\">Like\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n * it only emits a value from the source if it passes a criterion function.</span>\n *\n * <img src=\"./img/filter.png\" width=\"100%\">\n *\n * Similar to the well-known `Array.prototype.filter` method, this operator\n * takes values from the source Observable, passes them through a `predicate`\n * function and only emits those values that yielded `true`.\n *\n * @example <caption>Emit only click events whose target was a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');\n * clicksOnDivs.subscribe(x => console.log(x));\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * @see {@link ignoreElements}\n * @see {@link partition}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted, if `false` the value is not passed to the output\n * Observable. The `index` parameter is the number `i` for the i-th source\n * emission that has happened since the subscription, starting from the number\n * `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of values from the source that were\n * allowed by the `predicate` function.\n * @method filter\n * @owner Observable\n */\nexport function filter<T>(predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): MonoTypeOperatorFunction<T> {\n  return function filterOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new FilterOperator(predicate, thisArg));\n  };\n}\n\nclass FilterOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean,\n              private thisArg?: any) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FilterSubscriber<T> extends Subscriber<T> {\n\n  count: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean,\n              private thisArg: any) {\n    super(destination);\n  }\n\n  // the try catch block below is left specifically for\n  // optimization and perf reasons. a tryCatcher is not necessary here.\n  protected _next(value: T) {\n    let result: any;\n    try {\n      result = this.predicate.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      this.destination.next(value);\n    }\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that mirrors the source Observable, but will call a specified function when\n * the source terminates on complete or error.\n * @param {function} callback Function to be called when source terminates.\n * @return {Observable} An Observable that mirrors the source, but will call the specified function on termination.\n * @method finally\n * @owner Observable\n */\nexport function finalize<T>(callback: () => void): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new FinallyOperator(callback));\n}\n\nclass FinallyOperator<T> implements Operator<T, T> {\n  constructor(private callback: () => void) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new FinallySubscriber(subscriber, this.callback));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FinallySubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<T>, callback: () => void) {\n    super(destination);\n    this.add(new Subscription(callback));\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\nexport function find<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                     thisArg?: any): OperatorFunction<T, S>;\nexport function find<T, S extends T>(predicate: (value: T, index: number) => value is S,\n                                     thisArg?: any): OperatorFunction<T, S>;\nexport function find<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        thisArg?: any): MonoTypeOperatorFunction<T>;\nexport function find<T>(predicate: (value: T, index: number) => boolean,\n                        thisArg?: any): MonoTypeOperatorFunction<T>;\n/**\n * Emits only the first value emitted by the source Observable that meets some\n * condition.\n *\n * <span class=\"informal\">Finds the first value that passes some test and emits\n * that.</span>\n *\n * <img src=\"./img/find.png\" width=\"100%\">\n *\n * `find` searches for the first item in the source Observable that matches the\n * specified condition embodied by the `predicate`, and returns the first\n * occurrence in the source. Unlike {@link first}, the `predicate` is required\n * in `find`, and does not emit an error if a valid value is not found.\n *\n * @example <caption>Find and emit the first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.find(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link first}\n * @see {@link findIndex}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable<T>} An Observable of the first item that matches the\n * condition.\n * @method find\n * @owner Observable\n */\nexport function find<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        thisArg?: any): MonoTypeOperatorFunction<T> {\n  if (typeof predicate !== 'function') {\n    throw new TypeError('predicate is not a function');\n  }\n  return (source: Observable<T>) => source.lift(new FindValueOperator(predicate, source, false, thisArg));\n}\n\nexport class FindValueOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private source: Observable<T>,\n              private yieldIndex: boolean,\n              private thisArg?: any) {\n  }\n\n  call(observer: Subscriber<T>, source: any): any {\n    return source.subscribe(new FindValueSubscriber(observer, this.predicate, this.source, this.yieldIndex, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class FindValueSubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private source: Observable<T>,\n              private yieldIndex: boolean,\n              private thisArg?: any) {\n    super(destination);\n  }\n\n  private notifyComplete(value: any): void {\n    const destination = this.destination;\n\n    destination.next(value);\n    destination.complete();\n  }\n\n  protected _next(value: T): void {\n    const { predicate, thisArg } = this;\n    const index = this.index++;\n    try {\n      const result = predicate.call(thisArg || this, value, index, this.source);\n      if (result) {\n        this.notifyComplete(this.yieldIndex ? index : value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.notifyComplete(this.yieldIndex ? -1 : undefined);\n  }\n}\n","/**\n * An error thrown when an Observable or a sequence was queried but has no\n * elements.\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link single}\n *\n * @class EmptyError\n */\nexport class EmptyError extends Error {\n  constructor() {\n    const err: any = super('no elements in sequence');\n    (<any> this).name = err.name = 'EmptyError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { EmptyError } from '../util/EmptyError';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n/* tslint:disable:max-line-length */\nexport function first<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S): OperatorFunction<T, S>;\nexport function first<T, S extends T, R>(predicate: (value: T | S, index: number, source: Observable<T>) => value is S,\n                                         resultSelector: (value: S, index: number) => R, defaultValue?: R): OperatorFunction<T, R>;\nexport function first<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                      resultSelector: void,\n                                      defaultValue?: S): OperatorFunction<T, S>;\nexport function first<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): MonoTypeOperatorFunction<T>;\nexport function first<T, R>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                            resultSelector?: (value: T, index: number) => R,\n                            defaultValue?: R): OperatorFunction<T, R>;\nexport function first<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                         resultSelector: void,\n                         defaultValue?: T): MonoTypeOperatorFunction<T>;\n\n/**\n * Emits only the first value (or the first value that meets some condition)\n * emitted by the source Observable.\n *\n * <span class=\"informal\">Emits only the first value. Or emits only the first\n * value that passes some test.</span>\n *\n * <img src=\"./img/first.png\" width=\"100%\">\n *\n * If called with no arguments, `first` emits the first value of the source\n * Observable, then completes. If called with a `predicate` function, `first`\n * emits the first value of the source that matches the specified condition. It\n * may also take a `resultSelector` function to produce the output value from\n * the input value, and a `defaultValue` to emit in case the source completes\n * before it is able to emit a valid value. Throws an error if `defaultValue`\n * was not provided and a matching element is not found.\n *\n * @example <caption>Emit only the first click that happens on the DOM</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Emits the first click that happens on a DIV</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link take}\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]\n * An optional function called with each item to test for condition matching.\n * @param {function(value: T, index: number): R} [resultSelector] A function to\n * produce the value on the output Observable based on the values\n * and the indices of the source Observable. The arguments passed to this\n * function are:\n * - `value`: the value that was emitted on the source.\n * - `index`: the \"index\" of the value from the source.\n * @param {R} [defaultValue] The default value emitted in case no valid value\n * was found on the source.\n * @return {Observable<T|R>} An Observable of the first item that matches the\n * condition.\n * @method first\n * @owner Observable\n */\nexport function first<T, R>(predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n                            resultSelector?: ((value: T, index: number) => R) | void,\n                            defaultValue?: R): OperatorFunction<T, T | R> {\n  return (source: Observable<T>) => source.lift(new FirstOperator(predicate, resultSelector, defaultValue, source));\n}\n\nclass FirstOperator<T, R> implements Operator<T, R> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source.subscribe(new FirstSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FirstSubscriber<T, R> extends Subscriber<T> {\n  private index: number = 0;\n  private hasCompleted: boolean = false;\n  private _emitted: boolean = false;\n\n  constructor(destination: Subscriber<R>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n    if (this.predicate) {\n      this._tryPredicate(value, index);\n    } else {\n      this._emit(value, index);\n    }\n  }\n\n  private _tryPredicate(value: T, index: number) {\n    let result: any;\n    try {\n      result = this.predicate(value, index, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      this._emit(value, index);\n    }\n  }\n\n  private _emit(value: any, index: number) {\n    if (this.resultSelector) {\n      this._tryResultSelector(value, index);\n      return;\n    }\n    this._emitFinal(value);\n  }\n\n  private _tryResultSelector(value: T, index: number) {\n    let result: any;\n    try {\n      result = (<any>this).resultSelector(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this._emitFinal(result);\n  }\n\n  private _emitFinal(value: any) {\n    const destination = this.destination;\n    if (!this._emitted) {\n      this._emitted = true;\n      destination.next(value);\n      destination.complete();\n      this.hasCompleted = true;\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    if (!this.hasCompleted && typeof this.defaultValue !== 'undefined') {\n      destination.next(this.defaultValue);\n      destination.complete();\n    } else if (!this.hasCompleted) {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","/**\n * An error thrown when an action is invalid because the object has been\n * unsubscribed.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n *\n * @class ObjectUnsubscribedError\n */\nexport class ObjectUnsubscribedError extends Error {\n  constructor() {\n    const err: any = super('object unsubscribed');\n    (<any> this).name = err.name = 'ObjectUnsubscribedError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { Subject } from './Subject';\nimport { Observer } from './Observer';\nimport { Subscription } from './Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SubjectSubscription<T> extends Subscription {\n  closed: boolean = false;\n\n  constructor(public subject: Subject<T>, public subscriber: Observer<T>) {\n    super();\n  }\n\n  unsubscribe() {\n    if (this.closed) {\n      return;\n    }\n\n    this.closed = true;\n\n    const subject = this.subject;\n    const observers = subject.observers;\n\n    this.subject = null;\n\n    if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {\n      return;\n    }\n\n    const subscriberIndex = observers.indexOf(this.subscriber);\n\n    if (subscriberIndex !== -1) {\n      observers.splice(subscriberIndex, 1);\n    }\n  }\n}\n","import { Operator } from './Operator';\nimport { Observer } from './Observer';\nimport { Observable } from './Observable';\nimport { Subscriber } from './Subscriber';\nimport { ISubscription, Subscription, TeardownLogic } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\nimport { rxSubscriber as rxSubscriberSymbol } from './symbol/rxSubscriber';\n\n/**\n * @class SubjectSubscriber<T>\n */\nexport class SubjectSubscriber<T> extends Subscriber<T> {\n  constructor(protected destination: Subject<T>) {\n    super(destination);\n  }\n}\n\n/**\n * @class Subject<T>\n */\nexport class Subject<T> extends Observable<T> implements ISubscription {\n\n  [rxSubscriberSymbol]() {\n    return new SubjectSubscriber(this);\n  }\n\n  observers: Observer<T>[] = [];\n\n  closed = false;\n\n  isStopped = false;\n\n  hasError = false;\n\n  thrownError: any = null;\n\n  constructor() {\n    super();\n  }\n\n  static create: Function = <T>(destination: Observer<T>, source: Observable<T>): AnonymousSubject<T> => {\n    return new AnonymousSubject<T>(destination, source);\n  }\n\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const subject = new AnonymousSubject(this, this);\n    subject.operator = <any>operator;\n    return <any>subject;\n  }\n\n  next(value?: T) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    if (!this.isStopped) {\n      const { observers } = this;\n      const len = observers.length;\n      const copy = observers.slice();\n      for (let i = 0; i < len; i++) {\n        copy[i].next(value);\n      }\n    }\n  }\n\n  error(err: any) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.hasError = true;\n    this.thrownError = err;\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].error(err);\n    }\n    this.observers.length = 0;\n  }\n\n  complete() {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].complete();\n    }\n    this.observers.length = 0;\n  }\n\n  unsubscribe() {\n    this.isStopped = true;\n    this.closed = true;\n    this.observers = null;\n  }\n\n  protected _trySubscribe(subscriber: Subscriber<T>): TeardownLogic {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return super._trySubscribe(subscriber);\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.isStopped) {\n      subscriber.complete();\n      return Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      return new SubjectSubscription(this, subscriber);\n    }\n  }\n\n  asObservable(): Observable<T> {\n    const observable = new Observable<T>();\n    (<any>observable).source = this;\n    return observable;\n  }\n}\n\n/**\n * @class AnonymousSubject<T>\n */\nexport class AnonymousSubject<T> extends Subject<T> {\n  constructor(protected destination?: Observer<T>, source?: Observable<T>) {\n    super();\n    this.source = source;\n  }\n\n  next(value: T) {\n    const { destination } = this;\n    if (destination && destination.next) {\n      destination.next(value);\n    }\n  }\n\n  error(err: any) {\n    const { destination } = this;\n    if (destination && destination.error) {\n      this.destination.error(err);\n    }\n  }\n\n  complete() {\n    const { destination } = this;\n    if (destination && destination.complete) {\n      this.destination.complete();\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const { source } = this;\n    if (source) {\n      return this.source.subscribe(subscriber);\n    } else {\n      return Subscription.EMPTY;\n    }\n  }\n}\n","export class MapPolyfill {\n  public size = 0;\n  private _values: any[] = [];\n  private _keys: any[] = [];\n\n  get(key: any) {\n    const i = this._keys.indexOf(key);\n    return i === -1 ? undefined : this._values[i];\n  }\n\n  set(key: any, value: any) {\n    const i = this._keys.indexOf(key);\n    if (i === -1) {\n      this._keys.push(key);\n      this._values.push(value);\n      this.size++;\n    } else {\n      this._values[i] = value;\n    }\n    return this;\n  }\n\n  delete(key: any): boolean {\n    const i = this._keys.indexOf(key);\n    if (i === -1) { return false; }\n    this._values.splice(i, 1);\n    this._keys.splice(i, 1);\n    this.size--;\n    return true;\n  }\n\n  clear(): void {\n    this._keys.length = 0;\n    this._values.length = 0;\n    this.size = 0;\n  }\n\n  forEach(cb: Function, thisArg: any): void {\n    for (let i = 0; i < this.size; i++) {\n      cb.call(thisArg, this._values[i], this._keys[i]);\n    }\n  }\n}","import { root } from './root';\nimport { MapPolyfill } from './MapPolyfill';\n\nexport const Map = root.Map || (() => MapPolyfill)();","export class FastMap {\n  private values: Object = {};\n\n  delete(key: string): boolean {\n    this.values[key] = null;\n    return true;\n  }\n\n  set(key: string, value: any): FastMap {\n    this.values[key] = value;\n    return this;\n  }\n\n  get(key: string): any {\n    return this.values[key];\n  }\n\n  forEach(cb: (value: any, key: any) => void, thisArg?: any): void {\n    const values = this.values;\n    for (let key in values) {\n      if (values.hasOwnProperty(key) && values[key] !== null) {\n        cb.call(thisArg, values[key], key);\n      }\n    }\n  }\n\n  clear(): void {\n    this.values = {};\n  }\n}","import { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subject } from '../Subject';\nimport { Map } from '../util/Map';\nimport { FastMap } from '../util/FastMap';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function groupBy<T, K>(keySelector: (value: T) => K): OperatorFunction<T, GroupedObservable<K, T>>;\nexport function groupBy<T, K>(keySelector: (value: T) => K, elementSelector: void, durationSelector: (grouped: GroupedObservable<K, T>) => Observable<any>): OperatorFunction<T, GroupedObservable<K, T>>;\nexport function groupBy<T, K, R>(keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>): OperatorFunction<T, GroupedObservable<K, R>>;\nexport function groupBy<T, K, R>(keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>, subjectSelector?: () => Subject<R>): OperatorFunction<T, GroupedObservable<K, R>>;\n/* tslint:enable:max-line-length */\n\n/**\n * Groups the items emitted by an Observable according to a specified criterion,\n * and emits these grouped items as `GroupedObservables`, one\n * {@link GroupedObservable} per group.\n *\n * <img src=\"./img/groupBy.png\" width=\"100%\">\n *\n * @example <caption>Group objects by id and return as array</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs3'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *     )\n *     .groupBy(p => p.id)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], []))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // [ { id: 1, name: 'aze1' },\n * //   { id: 1, name: 'erg1' },\n * //   { id: 1, name: 'df1' } ]\n * //\n * // [ { id: 2, name: 'sf2' },\n * //   { id: 2, name: 'dg2' },\n * //   { id: 2, name: 'sfqfb2' },\n * //   { id: 2, name: 'qsgqsfg2' } ]\n * //\n * // [ { id: 3, name: 'qfs3' } ]\n *\n * @example <caption>Pivot data on the id field</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs1'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *                   )\n *     .groupBy(p => p.id, p => p.name)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], [\"\" + group$.key]))\n *     .map(arr => ({'id': parseInt(arr[0]), 'values': arr.slice(1)}))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // { id: 1, values: [ 'aze1', 'erg1', 'df1' ] }\n * // { id: 2, values: [ 'sf2', 'dg2', 'sfqfb2', 'qsgqsfg2' ] }\n * // { id: 3, values: [ 'qfs1' ] }\n *\n * @param {function(value: T): K} keySelector A function that extracts the key\n * for each item.\n * @param {function(value: T): R} [elementSelector] A function that extracts the\n * return element for each item.\n * @param {function(grouped: GroupedObservable<K,R>): Observable<any>} [durationSelector]\n * A function that returns an Observable to determine how long each group should\n * exist.\n * @return {Observable<GroupedObservable<K,R>>} An Observable that emits\n * GroupedObservables, each of which corresponds to a unique key value and each\n * of which emits those items from the source Observable that share that key\n * value.\n * @method groupBy\n * @owner Observable\n */\nexport function groupBy<T, K, R>(keySelector: (value: T) => K,\n                                 elementSelector?: ((value: T) => R) | void,\n                                 durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n                                 subjectSelector?: () => Subject<R>): OperatorFunction<T, GroupedObservable<K, R>> {\n  return (source: Observable<T>) =>\n    source.lift(new GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector));\n}\n\nexport interface RefCountSubscription {\n  count: number;\n  unsubscribe: () => void;\n  closed: boolean;\n  attemptedToUnsubscribe: boolean;\n}\n\nclass GroupByOperator<T, K, R> implements Operator<T, GroupedObservable<K, R>> {\n  constructor(private keySelector: (value: T) => K,\n              private elementSelector?: ((value: T) => R) | void,\n              private durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n              private subjectSelector?: () => Subject<R>) {\n  }\n\n  call(subscriber: Subscriber<GroupedObservable<K, R>>, source: any): any {\n    return source.subscribe(new GroupBySubscriber(\n      subscriber, this.keySelector, this.elementSelector, this.durationSelector, this.subjectSelector\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass GroupBySubscriber<T, K, R> extends Subscriber<T> implements RefCountSubscription {\n  private groups: Map<K, Subject<T|R>> = null;\n  public attemptedToUnsubscribe: boolean = false;\n  public count: number = 0;\n\n  constructor(destination: Subscriber<GroupedObservable<K, R>>,\n              private keySelector: (value: T) => K,\n              private elementSelector?: ((value: T) => R) | void,\n              private durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n              private subjectSelector?: () => Subject<R>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    let key: K;\n    try {\n      key = this.keySelector(value);\n    } catch (err) {\n      this.error(err);\n      return;\n    }\n\n    this._group(value, key);\n  }\n\n  private _group(value: T, key: K) {\n    let groups = this.groups;\n\n    if (!groups) {\n      groups = this.groups = typeof key === 'string' ? new FastMap() : new Map();\n    }\n\n    let group = groups.get(key);\n\n    let element: R;\n    if (this.elementSelector) {\n      try {\n        element = this.elementSelector(value);\n      } catch (err) {\n        this.error(err);\n      }\n    } else {\n      element = <any>value;\n    }\n\n    if (!group) {\n      group = this.subjectSelector ? this.subjectSelector() : new Subject<R>();\n      groups.set(key, group);\n      const groupedObservable = new GroupedObservable(key, group, this);\n      this.destination.next(groupedObservable);\n      if (this.durationSelector) {\n        let duration: any;\n        try {\n          duration = this.durationSelector(new GroupedObservable<K, R>(key, <Subject<R>>group));\n        } catch (err) {\n          this.error(err);\n          return;\n        }\n        this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));\n      }\n    }\n\n    if (!group.closed) {\n      group.next(element);\n    }\n  }\n\n  protected _error(err: any): void {\n    const groups = this.groups;\n    if (groups) {\n      groups.forEach((group, key) => {\n        group.error(err);\n      });\n\n      groups.clear();\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    const groups = this.groups;\n    if (groups) {\n      groups.forEach((group, key) => {\n        group.complete();\n      });\n\n      groups.clear();\n    }\n    this.destination.complete();\n  }\n\n  removeGroup(key: K): void {\n    this.groups.delete(key);\n  }\n\n  unsubscribe() {\n    if (!this.closed) {\n      this.attemptedToUnsubscribe = true;\n      if (this.count === 0) {\n        super.unsubscribe();\n      }\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass GroupDurationSubscriber<K, T> extends Subscriber<T> {\n  constructor(private key: K,\n              private group: Subject<T>,\n              private parent: GroupBySubscriber<any, K, T>) {\n    super(group);\n  }\n\n  protected _next(value: T): void {\n    this.complete();\n  }\n\n  protected _unsubscribe() {\n    const { parent, key } = this;\n    this.key = this.parent = null;\n    if (parent) {\n      parent.removeGroup(key);\n    }\n  }\n}\n\n/**\n * An Observable representing values belonging to the same group represented by\n * a common key. The values emitted by a GroupedObservable come from the source\n * Observable. The common key is available as the field `key` on a\n * GroupedObservable instance.\n *\n * @class GroupedObservable<K, T>\n */\nexport class GroupedObservable<K, T> extends Observable<T> {\n  constructor(public key: K,\n              private groupSubject: Subject<T>,\n              private refCountSubscription?: RefCountSubscription) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const subscription = new Subscription();\n    const {refCountSubscription, groupSubject} = this;\n    if (refCountSubscription && !refCountSubscription.closed) {\n      subscription.add(new InnerRefCountSubscription(refCountSubscription));\n    }\n    subscription.add(groupSubject.subscribe(subscriber));\n    return subscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass InnerRefCountSubscription extends Subscription {\n  constructor(private parent: RefCountSubscription) {\n    super();\n    parent.count++;\n  }\n\n  unsubscribe() {\n    const parent = this.parent;\n    if (!parent.closed && !this.closed) {\n      super.unsubscribe();\n      parent.count -= 1;\n      if (parent.count === 0 && parent.attemptedToUnsubscribe) {\n        parent.unsubscribe();\n      }\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { noop } from '../util/noop';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.\n *\n * <img src=\"./img/ignoreElements.png\" width=\"100%\">\n *\n * @return {Observable} An empty Observable that only calls `complete`\n * or `error`, based on which one is called by the source Observable.\n * @method ignoreElements\n * @owner Observable\n */\nexport function ignoreElements<T>(): MonoTypeOperatorFunction<T> {\n  return function ignoreElementsOperatorFunction(source: Observable<T>) {\n    return source.lift(new IgnoreElementsOperator());\n  };\n}\n\nclass IgnoreElementsOperator<T, R> implements Operator<T, R> {\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new IgnoreElementsSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass IgnoreElementsSubscriber<T> extends Subscriber<T> {\n  protected _next(unused: T): void {\n    noop();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\nexport function isEmpty<T>(): OperatorFunction<T, boolean> {\n  return (source: Observable<T>) => source.lift(new IsEmptyOperator());\n}\n\nclass IsEmptyOperator implements Operator<any, boolean> {\n  call (observer: Subscriber<boolean>, source: any): any {\n    return source.subscribe(new IsEmptySubscriber(observer));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass IsEmptySubscriber extends Subscriber<any> {\n  constructor(destination: Subscriber<boolean>) {\n    super(destination);\n  }\n\n  private notifyComplete(isEmpty: boolean): void {\n    const destination = this.destination;\n\n    destination.next(isEmpty);\n    destination.complete();\n  }\n\n  protected _next(value: boolean) {\n    this.notifyComplete(false);\n  }\n\n  protected _complete() {\n    this.notifyComplete(true);\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { EmptyError } from '../util/EmptyError';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function last<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S): OperatorFunction<T, S>;\nexport function last<T, S extends T, R>(predicate: (value: T | S, index: number, source: Observable<T>) => value is S,\n                                        resultSelector: (value: S, index: number) => R, defaultValue?: R): OperatorFunction<T, R>;\nexport function last<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                     resultSelector: void,\n                                     defaultValue?: S): OperatorFunction<T, S>;\nexport function last<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): MonoTypeOperatorFunction<T>;\nexport function last<T, R>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                           resultSelector?: (value: T, index: number) => R,\n                           defaultValue?: R): OperatorFunction<T, R>;\nexport function last<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        resultSelector: void,\n                        defaultValue?: T): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits only the last item emitted by the source Observable.\n * It optionally takes a predicate function as a parameter, in which case, rather than emitting\n * the last item from the source Observable, the resulting Observable will emit the last item\n * from the source Observable that satisfies the predicate.\n *\n * <img src=\"./img/last.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {function} predicate - The condition any source emitted item has to satisfy.\n * @return {Observable} An Observable that emits only the last item satisfying the given condition\n * from the source, or an NoSuchElementException if no such items are emitted.\n * @throws - Throws if no items that match the predicate are emitted by the source Observable.\n * @method last\n * @owner Observable\n */\nexport function last<T, R>(predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n                           resultSelector?: ((value: T, index: number) => R) | void,\n                           defaultValue?: R): OperatorFunction<T, T | R> {\n  return (source: Observable<T>) => source.lift(new LastOperator(predicate, resultSelector, defaultValue, source));\n}\n\nclass LastOperator<T, R> implements Operator<T, R> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source.subscribe(new LastSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass LastSubscriber<T, R> extends Subscriber<T> {\n  private lastValue: T | R;\n  private hasValue: boolean = false;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n    super(destination);\n    if (typeof defaultValue !== 'undefined') {\n      this.lastValue = defaultValue;\n      this.hasValue = true;\n    }\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n    if (this.predicate) {\n      this._tryPredicate(value, index);\n    } else {\n      if (this.resultSelector) {\n        this._tryResultSelector(value, index);\n        return;\n      }\n      this.lastValue = value;\n      this.hasValue = true;\n    }\n  }\n\n  private _tryPredicate(value: T, index: number) {\n    let result: any;\n    try {\n      result = this.predicate(value, index, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      if (this.resultSelector) {\n        this._tryResultSelector(value, index);\n        return;\n      }\n      this.lastValue = value;\n      this.hasValue = true;\n    }\n  }\n\n  private _tryResultSelector(value: T, index: number) {\n    let result: any;\n    try {\n      result = (<any>this).resultSelector(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.lastValue = result;\n    this.hasValue = true;\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    if (this.hasValue) {\n      destination.next(this.lastValue);\n      destination.complete();\n    } else {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * <img src=\"./img/map.png\" width=\"100%\">\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * @example <caption>Map every click to the clientX position of that click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks.map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nexport function map<T, R>(project: (value: T, index: number) => R, thisArg?: any): OperatorFunction<T, R> {\n  return function mapOperation(source: Observable<T>): Observable<R> {\n    if (typeof project !== 'function') {\n      throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');\n    }\n    return source.lift(new MapOperator(project, thisArg));\n  };\n}\n\nexport class MapOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => R, private thisArg: any) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MapSubscriber<T, R> extends Subscriber<T> {\n  count: number = 0;\n  private thisArg: any;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => R,\n              thisArg: any) {\n    super(destination);\n    this.thisArg = thisArg || this;\n  }\n\n  // NOTE: This looks unoptimized, but it's actually purposefully NOT\n  // using try/catch optimizations.\n  protected _next(value: T) {\n    let result: any;\n    try {\n      result = this.project.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Emits the given constant value on the output Observable every time the source\n * Observable emits a value.\n *\n * <span class=\"informal\">Like {@link map}, but it maps every source value to\n * the same output value every time.</span>\n *\n * <img src=\"./img/mapTo.png\" width=\"100%\">\n *\n * Takes a constant `value` as argument, and emits that whenever the source\n * Observable emits a value. In other words, ignores the actual source value,\n * and simply uses the emission moment to know when to emit the given `value`.\n *\n * @example <caption>Map every click to the string 'Hi'</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var greetings = clicks.mapTo('Hi');\n * greetings.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {any} value The value to map each source value to.\n * @return {Observable} An Observable that emits the given `value` every time\n * the source Observable emits something.\n * @method mapTo\n * @owner Observable\n */\nexport function mapTo<T, R>(value: R): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift(new MapToOperator(value));\n}\n\nclass MapToOperator<T, R> implements Operator<T, R> {\n\n  value: R;\n\n  constructor(value: R) {\n    this.value = value;\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MapToSubscriber(subscriber, this.value));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MapToSubscriber<T, R> extends Subscriber<T> {\n\n  value: R;\n\n  constructor(destination: Subscriber<R>, value: R) {\n    super(destination);\n    this.value = value;\n  }\n\n  protected _next(x: T) {\n    this.destination.next(this.value);\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Represents all of the notifications from the source Observable as `next`\n * emissions marked with their original types within {@link Notification}\n * objects.\n *\n * <span class=\"informal\">Wraps `next`, `error` and `complete` emissions in\n * {@link Notification} objects, emitted as `next` on the output Observable.\n * </span>\n *\n * <img src=\"./img/materialize.png\" width=\"100%\">\n *\n * `materialize` returns an Observable that emits a `next` notification for each\n * `next`, `error`, or `complete` emission of the source Observable. When the\n * source Observable emits `complete`, the output Observable will emit `next` as\n * a Notification of type \"complete\", and then it will emit `complete` as well.\n * When the source Observable emits `error`, the output will emit `next` as a\n * Notification of type \"error\", and then `complete`.\n *\n * This operator is useful for producing metadata of the source Observable, to\n * be consumed as `next` emissions. Use it in conjunction with\n * {@link dematerialize}.\n *\n * @example <caption>Convert a faulty Observable to an Observable of Notifications</caption>\n * var letters = Rx.Observable.of('a', 'b', 13, 'd');\n * var upperCase = letters.map(x => x.toUpperCase());\n * var materialized = upperCase.materialize();\n * materialized.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - Notification {kind: \"N\", value: \"A\", error: undefined, hasValue: true}\n * // - Notification {kind: \"N\", value: \"B\", error: undefined, hasValue: true}\n * // - Notification {kind: \"E\", value: undefined, error: TypeError:\n * //   x.toUpperCase is not a function at MapSubscriber.letters.map.x\n * //   [as project] (http://1…, hasValue: false}\n *\n * @see {@link Notification}\n * @see {@link dematerialize}\n *\n * @return {Observable<Notification<T>>} An Observable that emits\n * {@link Notification} objects that wrap the original emissions from the source\n * Observable with metadata.\n * @method materialize\n * @owner Observable\n */\nexport function materialize<T>(): OperatorFunction<T, Notification<T>> {\n  return function materializeOperatorFunction(source: Observable<T>) {\n    return source.lift(new MaterializeOperator());\n  };\n}\n\nclass MaterializeOperator<T> implements Operator<T, Notification<T>> {\n  call(subscriber: Subscriber<Notification<T>>, source: any): any {\n    return source.subscribe(new MaterializeSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MaterializeSubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<Notification<T>>) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    this.destination.next(Notification.createNext(value));\n  }\n\n  protected _error(err: any) {\n    const destination = this.destination;\n    destination.next(Notification.createError(err));\n    destination.complete();\n  }\n\n  protected _complete() {\n    const destination = this.destination;\n    destination.next(Notification.createComplete());\n    destination.complete();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function scan<T>(accumulator: (acc: T, value: T, index: number) => T, seed?: T): MonoTypeOperatorFunction<T>;\nexport function scan<T>(accumulator: (acc: T[], value: T, index: number) => T[], seed?: T[]): OperatorFunction<T, T[]>;\nexport function scan<T, R>(accumulator: (acc: R, value: T, index: number) => R, seed?: R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Applies an accumulator function over the source Observable, and returns each\n * intermediate result, with an optional seed value.\n *\n * <span class=\"informal\">It's like {@link reduce}, but emits the current\n * accumulation whenever the source emits a value.</span>\n *\n * <img src=\"./img/scan.png\" width=\"100%\">\n *\n * Combines together all values emitted on the source, using an accumulator\n * function that knows how to join a new source value into the accumulation from\n * the past. Is similar to {@link reduce}, but emits the intermediate\n * accumulations.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var ones = clicks.mapTo(1);\n * var seed = 0;\n * var count = ones.scan((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link reduce}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator\n * The accumulator function called on each source value.\n * @param {T|R} [seed] The initial accumulation value.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method scan\n * @owner Observable\n */\nexport function scan<T, R>(accumulator: (acc: R, value: T, index: number) => R, seed?: T | R): OperatorFunction<T, R> {\n  let hasSeed = false;\n  // providing a seed of `undefined` *should* be valid and trigger\n  // hasSeed! so don't use `seed !== undefined` checks!\n  // For this reason, we have to check it here at the original call site\n  // otherwise inside Operator/Subscriber we won't know if `undefined`\n  // means they didn't provide anything or if they literally provided `undefined`\n  if (arguments.length >= 2) {\n    hasSeed = true;\n  }\n\n  return function scanOperatorFunction(source: Observable<T>): Observable<R> {\n    return source.lift(new ScanOperator(accumulator, seed, hasSeed));\n  };\n}\n\nclass ScanOperator<T, R> implements Operator<T, R> {\n  constructor(private accumulator: (acc: R, value: T, index: number) => R, private seed?: T | R, private hasSeed: boolean = false) {}\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ScanSubscriber<T, R> extends Subscriber<T> {\n  private index: number = 0;\n\n  get seed(): T | R {\n    return this._seed;\n  }\n\n  set seed(value: T | R) {\n    this.hasSeed = true;\n    this._seed = value;\n  }\n\n  constructor(destination: Subscriber<R>, private accumulator: (acc: R, value: T, index: number) => R, private _seed: T | R,\n              private hasSeed: boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSeed) {\n      this.seed = value;\n      this.destination.next(value);\n    } else {\n      return this._tryNext(value);\n    }\n  }\n\n  private _tryNext(value: T): void {\n    const index = this.index++;\n    let result: any;\n    try {\n      result = this.accumulator(<R>this.seed, value, index);\n    } catch (err) {\n      this.destination.error(err);\n    }\n    this.seed = result;\n    this.destination.next(result);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits only the last `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Remembers the latest `count` values, then emits those\n * only when the source completes.</span>\n *\n * <img src=\"./img/takeLast.png\" width=\"100%\">\n *\n * `takeLast` returns an Observable that emits at most the last `count` values\n * emitted by the source Observable. If the source emits fewer than `count`\n * values then all of its values are emitted. This operator must wait until the\n * `complete` notification emission from the source in order to emit the `next`\n * values on the output Observable, because otherwise it is impossible to know\n * whether or not more values will be emitted on the source. For this reason,\n * all values are emitted synchronously, followed by the complete notification.\n *\n * @example <caption>Take the last 3 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 100);\n * var lastThree = many.takeLast(3);\n * lastThree.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of values to emit from the end of\n * the sequence of values emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits at most the last count\n * values emitted by the source Observable.\n * @method takeLast\n * @owner Observable\n */\nexport function takeLast<T>(count: number): MonoTypeOperatorFunction<T> {\n  return function takeLastOperatorFunction(source: Observable<T>): Observable<T> {\n    if (count === 0) {\n      return new EmptyObservable<T>();\n    } else {\n      return source.lift(new TakeLastOperator(count));\n    }\n  };\n}\n\nclass TakeLastOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeLastSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeLastSubscriber<T> extends Subscriber<T> {\n  private ring: Array<T> = new Array();\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const ring = this.ring;\n    const total = this.total;\n    const count = this.count++;\n\n    if (ring.length < total) {\n      ring.push(value);\n    } else {\n      const index = count % total;\n      ring[index] = value;\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    let count = this.count;\n\n    if (count > 0) {\n      const total = this.count >= this.total ? this.total : this.count;\n      const ring  = this.ring;\n\n      for (let i = 0; i < total; i++) {\n        const idx = (count++) % total;\n        destination.next(ring[idx]);\n      }\n    }\n\n    destination.complete();\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function mergeMapTo<T, R>(observable: ObservableInput<R>, concurrent?: number): OperatorFunction<T, R>;\nexport function mergeMapTo<T, I, R>(observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in the output Observable.\n *\n * <span class=\"informal\">It's like {@link mergeMap}, but maps each value always\n * to the same inner Observable.</span>\n *\n * <img src=\"./img/mergeMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then merges those resulting Observables into one\n * single Observable, which is the output Observable.\n *\n * @example <caption>For each click event, start an interval Observable ticking every 1 second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.mergeMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable.\n * @method mergeMapTo\n * @owner Observable\n */\nexport function mergeMapTo<T, I, R>(innerObservable: Observable<I>,\n                                    resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n                                    concurrent: number = Number.POSITIVE_INFINITY): OperatorFunction<T, R> {\n  if (typeof resultSelector === 'number') {\n    concurrent = <number>resultSelector;\n    resultSelector = null;\n  }\n  return (source: Observable<T>) => source.lift(new MergeMapToOperator(innerObservable, <any>resultSelector, concurrent));\n}\n\n// TODO: Figure out correct signature here: an Operator<Observable<T>, R>\n//       needs to implement call(observer: Subscriber<R>): Subscriber<Observable<T>>\nexport class MergeMapToOperator<T, I, R> implements Operator<Observable<T>, R> {\n  constructor(private ish: ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source.subscribe(new MergeMapToSubscriber(observer, this.ish, this.resultSelector, this.concurrent));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeMapToSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasCompleted: boolean = false;\n  private buffer: T[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private ish: ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.active < this.concurrent) {\n      const resultSelector = this.resultSelector;\n      const index = this.index++;\n      const ish = this.ish;\n      const destination = this.destination;\n\n      this.active++;\n      this._innerSub(ish, destination, resultSelector, value, index);\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private _innerSub(ish: ObservableInput<I>,\n                    destination: PartialObserver<I>,\n                    resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n                    value: T,\n                    index: number): void {\n    this.add(subscribeToResult<T, I>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private trySelectResult(outerValue: T, innerValue: I,\n                          outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    let result: R;\n    try {\n      result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n\n    destination.next(result);\n  }\n\n  notifyError(err: any): void {\n    this.destination.error(err);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Applies an accumulator function over the source Observable where the\n * accumulator function itself returns an Observable, then each intermediate\n * Observable returned is merged into the output Observable.\n *\n * <span class=\"informal\">It's like {@link scan}, but the Observables returned\n * by the accumulator are merged into the outer Observable.</span>\n *\n * @example <caption>Count the number of click events</caption>\n * const click$ = Rx.Observable.fromEvent(document, 'click');\n * const one$ = click$.mapTo(1);\n * const seed = 0;\n * const count$ = one$.mergeScan((acc, one) => Rx.Observable.of(acc + one), seed);\n * count$.subscribe(x => console.log(x));\n *\n * // Results:\n * 1\n * 2\n * 3\n * 4\n * // ...and so on for each click\n *\n * @param {function(acc: R, value: T): Observable<R>} accumulator\n * The accumulator function called on each source value.\n * @param seed The initial accumulation value.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of\n * input Observables being subscribed to concurrently.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method mergeScan\n * @owner Observable\n */\nexport function mergeScan<T, R>(accumulator: (acc: R, value: T) => Observable<R>,\n                                seed: R,\n                                concurrent: number = Number.POSITIVE_INFINITY): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift(new MergeScanOperator(accumulator, seed, concurrent));\n}\n\nexport class MergeScanOperator<T, R> implements Operator<T, R> {\n  constructor(private accumulator: (acc: R, value: T) => Observable<R>,\n              private seed: R,\n              private concurrent: number) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MergeScanSubscriber(\n      subscriber, this.accumulator, this.seed, this.concurrent\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeScanSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private hasValue: boolean = false;\n  private hasCompleted: boolean = false;\n  private buffer: Observable<any>[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private accumulator: (acc: R, value: T) => Observable<R>,\n              private acc: R,\n              private concurrent: number) {\n    super(destination);\n  }\n\n  protected _next(value: any): void {\n    if (this.active < this.concurrent) {\n      const index = this.index++;\n      const ish = tryCatch(this.accumulator)(this.acc, value);\n      const destination = this.destination;\n      if (ish === errorObject) {\n        destination.error(errorObject.e);\n      } else {\n        this.active++;\n        this._innerSub(ish, value, index);\n      }\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private _innerSub(ish: any, value: T, index: number): void {\n    this.add(subscribeToResult<T, R>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      if (this.hasValue === false) {\n        this.destination.next(this.acc);\n      }\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const { destination } = this;\n    this.acc = innerValue;\n    this.hasValue = true;\n    destination.next(innerValue);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      if (this.hasValue === false) {\n        this.destination.next(this.acc);\n      }\n      this.destination.complete();\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { Observable } from '../Observable';\n\nexport function refCount<T>(): MonoTypeOperatorFunction<T> {\n  return function refCountOperatorFunction(source: ConnectableObservable<T>): Observable<T> {\n    return source.lift(new RefCountOperator(source));\n  };\n}\n\nclass RefCountOperator<T> implements Operator<T, T> {\n  constructor(private connectable: ConnectableObservable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n\n    const { connectable } = this;\n    (<any> connectable)._refCount++;\n\n    const refCounter = new RefCountSubscriber(subscriber, connectable);\n    const subscription = source.subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      (<any> refCounter).connection = connectable.connect();\n    }\n\n    return subscription;\n  }\n}\n\nclass RefCountSubscriber<T> extends Subscriber<T> {\n\n  private connection: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n\n  protected _unsubscribe() {\n\n    const { connectable } = this;\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n\n    this.connectable = null;\n    const refCount = (<any> connectable)._refCount;\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n\n    (<any> connectable)._refCount = refCount - 1;\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n\n    ///\n    // Compare the local RefCountSubscriber's connection Subscription to the\n    // connection Subscription on the shared ConnectableObservable. In cases\n    // where the ConnectableObservable source synchronously emits values, and\n    // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n    // execution continues to here before the RefCountOperator has a chance to\n    // supply the RefCountSubscriber with the shared connection Subscription.\n    // For example:\n    // ```\n    // Observable.range(0, 10)\n    //   .publish()\n    //   .refCount()\n    //   .take(5)\n    //   .subscribe();\n    // ```\n    // In order to account for this case, RefCountSubscriber should only dispose\n    // the ConnectableObservable's shared connection Subscription if the\n    // connection Subscription exists, *and* either:\n    //   a. RefCountSubscriber doesn't have a reference to the shared connection\n    //      Subscription yet, or,\n    //   b. RefCountSubscriber's connection Subscription reference is identical\n    //      to the shared connection Subscription\n    ///\n    const { connection } = this;\n    const sharedConnection = (<any> connectable)._connection;\n    this.connection = null;\n\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  }\n}\n","import { Subject, SubjectSubscriber } from '../Subject';\nimport { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { refCount as higherOrderRefCount } from '../operators/refCount';\n\n/**\n * @class ConnectableObservable<T>\n */\nexport class ConnectableObservable<T> extends Observable<T> {\n\n  protected _subject: Subject<T>;\n  protected _refCount: number = 0;\n  protected _connection: Subscription;\n  _isComplete = false;\n\n  constructor(protected source: Observable<T>,\n              protected subjectFactory: () => Subject<T>) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    return this.getSubject().subscribe(subscriber);\n  }\n\n  protected getSubject(): Subject<T> {\n    const subject = this._subject;\n    if (!subject || subject.isStopped) {\n      this._subject = this.subjectFactory();\n    }\n    return this._subject;\n  }\n\n  connect(): Subscription {\n    let connection = this._connection;\n    if (!connection) {\n      this._isComplete = false;\n      connection = this._connection = new Subscription();\n      connection.add(this.source\n        .subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n      if (connection.closed) {\n        this._connection = null;\n        connection = Subscription.EMPTY;\n      } else {\n        this._connection = connection;\n      }\n    }\n    return connection;\n  }\n\n  refCount(): Observable<T> {\n    return higherOrderRefCount()(this) as Observable<T>;\n  }\n}\n\nconst connectableProto = <any>ConnectableObservable.prototype;\n\nexport const connectableObservableDescriptor: PropertyDescriptorMap = {\n  operator: { value: null },\n  _refCount: { value: 0, writable: true },\n  _subject: { value: null, writable: true },\n  _connection: { value: null, writable: true },\n  _subscribe: { value: connectableProto._subscribe },\n  _isComplete: { value: connectableProto._isComplete, writable: true },\n  getSubject: { value: connectableProto.getSubject },\n  connect: { value: connectableProto.connect },\n  refCount: { value: connectableProto.refCount }\n};\n\nclass ConnectableSubscriber<T> extends SubjectSubscriber<T> {\n  constructor(destination: Subject<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n  protected _error(err: any): void {\n    this._unsubscribe();\n    super._error(err);\n  }\n  protected _complete(): void {\n    this.connectable._isComplete = true;\n    this._unsubscribe();\n    super._complete();\n  }\n  protected _unsubscribe() {\n    const connectable = <any>this.connectable;\n    if (connectable) {\n      this.connectable = null;\n      const connection = connectable._connection;\n      connectable._refCount = 0;\n      connectable._subject = null;\n      connectable._connection = null;\n      if (connection) {\n        connection.unsubscribe();\n      }\n    }\n  }\n}\n\nclass RefCountOperator<T> implements Operator<T, T> {\n  constructor(private connectable: ConnectableObservable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n\n    const { connectable } = this;\n    (<any> connectable)._refCount++;\n\n    const refCounter = new RefCountSubscriber(subscriber, connectable);\n    const subscription = source.subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      (<any> refCounter).connection = connectable.connect();\n    }\n\n    return subscription;\n  }\n}\n\nclass RefCountSubscriber<T> extends Subscriber<T> {\n\n  private connection: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n\n  protected _unsubscribe() {\n\n    const { connectable } = this;\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n\n    this.connectable = null;\n    const refCount = (<any> connectable)._refCount;\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n\n    (<any> connectable)._refCount = refCount - 1;\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n\n    ///\n    // Compare the local RefCountSubscriber's connection Subscription to the\n    // connection Subscription on the shared ConnectableObservable. In cases\n    // where the ConnectableObservable source synchronously emits values, and\n    // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n    // execution continues to here before the RefCountOperator has a chance to\n    // supply the RefCountSubscriber with the shared connection Subscription.\n    // For example:\n    // ```\n    // Observable.range(0, 10)\n    //   .publish()\n    //   .refCount()\n    //   .take(5)\n    //   .subscribe();\n    // ```\n    // In order to account for this case, RefCountSubscriber should only dispose\n    // the ConnectableObservable's shared connection Subscription if the\n    // connection Subscription exists, *and* either:\n    //   a. RefCountSubscriber doesn't have a reference to the shared connection\n    //      Subscription yet, or,\n    //   b. RefCountSubscriber's connection Subscription reference is identical\n    //      to the shared connection Subscription\n    ///\n    const { connection } = this;\n    const sharedConnection = (<any> connectable)._connection;\n    this.connection = null;\n\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { FromObservable } from '../observable/FromObservable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { isArray } from '../util/isArray';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function onErrorResumeNext<T, R>(v: ObservableInput<R>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, R> ;\nexport function onErrorResumeNext<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, R>(array: ObservableInput<any>[]): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * When any of the provided Observable emits an complete or error notification, it immediately subscribes to the next one\n * that was passed.\n *\n * <span class=\"informal\">Execute series of Observables no matter what, even if it means swallowing errors.</span>\n *\n * <img src=\"./img/onErrorResumeNext.png\" width=\"100%\">\n *\n * `onErrorResumeNext` is an operator that accepts a series of Observables, provided either directly as\n * arguments or as an array. If no single Observable is provided, returned Observable will simply behave the same\n * as the source.\n *\n * `onErrorResumeNext` returns an Observable that starts by subscribing and re-emitting values from the source Observable.\n * When its stream of values ends - no matter if Observable completed or emitted an error - `onErrorResumeNext`\n * will subscribe to the first Observable that was passed as an argument to the method. It will start re-emitting\n * its values as well and - again - when that stream ends, `onErrorResumeNext` will proceed to subscribing yet another\n * Observable in provided series, no matter if previous Observable completed or ended with an error. This will\n * be happening until there is no more Observables left in the series, at which point returned Observable will\n * complete - even if the last subscribed stream ended with an error.\n *\n * `onErrorResumeNext` can be therefore thought of as version of {@link concat} operator, which is more permissive\n * when it comes to the errors emitted by its input Observables. While `concat` subscribes to the next Observable\n * in series only if previous one successfully completed, `onErrorResumeNext` subscribes even if it ended with\n * an error.\n *\n * Note that you do not get any access to errors emitted by the Observables. In particular do not\n * expect these errors to appear in error callback passed to {@link subscribe}. If you want to take\n * specific actions based on what error was emitted by an Observable, you should try out {@link catch} instead.\n *\n *\n * @example <caption>Subscribe to the next Observable after map fails</caption>\n * Rx.Observable.of(1, 2, 3, 0)\n *   .map(x => {\n *       if (x === 0) { throw Error(); }\n         return 10 / x;\n *   })\n *   .onErrorResumeNext(Rx.Observable.of(1, 2, 3))\n *   .subscribe(\n *     val => console.log(val),\n *     err => console.log(err),          // Will never be called.\n *     () => console.log('that\\'s it!')\n *   );\n *\n * // Logs:\n * // 10\n * // 5\n * // 3.3333333333333335\n * // 1\n * // 2\n * // 3\n * // \"that's it!\"\n *\n * @see {@link concat}\n * @see {@link catch}\n *\n * @param {...ObservableInput} observables Observables passed either directly or as an array.\n * @return {Observable} An Observable that emits values from source Observable, but - if it errors - subscribes\n * to the next passed Observable and so on, until it completes or runs out of Observables.\n * @method onErrorResumeNext\n * @owner Observable\n */\n\nexport function onErrorResumeNext<T, R>(...nextSources: Array<ObservableInput<any> |\n                                                       Array<ObservableInput<any>> |\n                                                       ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\n  if (nextSources.length === 1 && isArray(nextSources[0])) {\n    nextSources = <Array<Observable<any>>>nextSources[0];\n  }\n\n  return (source: Observable<T>) => source.lift(new OnErrorResumeNextOperator<T, R>(nextSources));\n}\n\n/* tslint:disable:max-line-length */\nexport function onErrorResumeNextStatic<R>(v: ObservableInput<R>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<R>;\n\nexport function onErrorResumeNextStatic<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\nexport function onErrorResumeNextStatic<R>(array: ObservableInput<any>[]): Observable<R>;\n/* tslint:enable:max-line-length */\n\nexport function onErrorResumeNextStatic<T, R>(...nextSources: Array<ObservableInput<any> |\n                                                              Array<ObservableInput<any>> |\n                                                              ((...values: Array<any>) => R)>): Observable<R> {\n  let source: ObservableInput<any> = null;\n\n  if (nextSources.length === 1 && isArray(nextSources[0])) {\n    nextSources = <Array<ObservableInput<any>>>nextSources[0];\n  }\n  source = nextSources.shift();\n\n  return new FromObservable(source, null).lift(new OnErrorResumeNextOperator<T, R>(nextSources));\n}\n\nclass OnErrorResumeNextOperator<T, R> implements Operator<T, R> {\n  constructor(private nextSources: Array<ObservableInput<any>>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new OnErrorResumeNextSubscriber(subscriber, this.nextSources));\n  }\n}\n\nclass OnErrorResumeNextSubscriber<T, R> extends OuterSubscriber<T, R> {\n  constructor(protected destination: Subscriber<T>,\n              private nextSources: Array<ObservableInput<any>>) {\n    super(destination);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this.subscribeToNextSource();\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this.subscribeToNextSource();\n  }\n\n  protected _error(err: any): void {\n    this.subscribeToNextSource();\n  }\n\n  protected _complete(): void {\n    this.subscribeToNextSource();\n  }\n\n  private subscribeToNextSource(): void {\n    const next = this.nextSources.shift();\n    if (next) {\n      this.add(subscribeToResult(this, next));\n    } else {\n      this.destination.complete();\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Groups pairs of consecutive emissions together and emits them as an array of\n * two values.\n *\n * <span class=\"informal\">Puts the current value and previous value together as\n * an array, and emits that.</span>\n *\n * <img src=\"./img/pairwise.png\" width=\"100%\">\n *\n * The Nth emission from the source Observable will cause the output Observable\n * to emit an array [(N-1)th, Nth] of the previous and the current value, as a\n * pair. For this reason, `pairwise` emits on the second and subsequent\n * emissions from the source Observable, but not on the first emission, because\n * there is no previous value in that case.\n *\n * @example <caption>On every click (starting from the second), emit the relative distance to the previous click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var pairs = clicks.pairwise();\n * var distance = pairs.map(pair => {\n *   var x0 = pair[0].clientX;\n *   var y0 = pair[0].clientY;\n *   var x1 = pair[1].clientX;\n *   var y1 = pair[1].clientY;\n *   return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));\n * });\n * distance.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n *\n * @return {Observable<Array<T>>} An Observable of pairs (as arrays) of\n * consecutive values from the source Observable.\n * @method pairwise\n * @owner Observable\n */\nexport function pairwise<T>(): OperatorFunction<T, [T, T]> {\n  return (source: Observable<T>) => source.lift(new PairwiseOperator());\n}\n\nclass PairwiseOperator<T> implements Operator<T, [T, T]> {\n  call(subscriber: Subscriber<[T, T]>, source: any): any {\n    return source.subscribe(new PairwiseSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass PairwiseSubscriber<T> extends Subscriber<T> {\n  private prev: T;\n  private hasPrev: boolean = false;\n\n  constructor(destination: Subscriber<[T, T]>) {\n    super(destination);\n  }\n\n  _next(value: T): void {\n    if (this.hasPrev) {\n      this.destination.next([this.prev, value]);\n    } else {\n      this.hasPrev = true;\n    }\n\n    this.prev = value;\n  }\n}\n","import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription, ISubscription } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\n\n/**\n * @class BehaviorSubject<T>\n */\nexport class BehaviorSubject<T> extends Subject<T> {\n\n  constructor(private _value: T) {\n    super();\n  }\n\n  get value(): T {\n    return this.getValue();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const subscription = super._subscribe(subscriber);\n    if (subscription && !(<ISubscription>subscription).closed) {\n      subscriber.next(this._value);\n    }\n    return subscription;\n  }\n\n  getValue(): T {\n    if (this.hasError) {\n      throw this.thrownError;\n    } else if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return this._value;\n    }\n  }\n\n  next(value: T): void {\n    super.next(this._value = value);\n  }\n}\n","import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\n\n/**\n * @class AsyncSubject<T>\n */\nexport class AsyncSubject<T> extends Subject<T> {\n  private value: T = null;\n  private hasNext: boolean = false;\n  private hasCompleted: boolean = false;\n\n  protected _subscribe(subscriber: Subscriber<any>): Subscription {\n    if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.hasCompleted && this.hasNext) {\n      subscriber.next(this.value);\n      subscriber.complete();\n      return Subscription.EMPTY;\n    }\n    return super._subscribe(subscriber);\n  }\n\n  next(value: T): void {\n    if (!this.hasCompleted) {\n      this.value = value;\n      this.hasNext = true;\n    }\n  }\n\n  error(error: any): void {\n    if (!this.hasCompleted) {\n      super.error(error);\n    }\n  }\n\n  complete(): void {\n    this.hasCompleted = true;\n    if (this.hasNext) {\n      super.next(this.value);\n    }\n    super.complete();\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { Subscription } from '../Subscription';\nimport { QueueScheduler } from './QueueScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class QueueAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: QueueScheduler,\n              protected work: (this: QueueAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n    if (delay > 0) {\n      return super.schedule(state, delay);\n    }\n    this.delay = delay;\n    this.state = state;\n    this.scheduler.flush(this);\n    return this;\n  }\n\n  public execute(state: T, delay: number): any {\n    return (delay > 0 || this.closed) ?\n      super.execute(state, delay) :\n      this._execute(state, delay) ;\n  }\n\n  protected requestAsyncId(scheduler: QueueScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Otherwise flush the scheduler starting with this action.\n    return scheduler.flush(this);\n  }\n}\n","import { QueueAction } from './QueueAction';\nimport { QueueScheduler } from './QueueScheduler';\n\n/**\n *\n * Queue Scheduler\n *\n * <span class=\"informal\">Put every next task on a queue, instead of executing it immediately</span>\n *\n * `queue` scheduler, when used with delay, behaves the same as {@link async} scheduler.\n *\n * When used without delay, it schedules given task synchronously - executes it right when\n * it is scheduled. However when called recursively, that is when inside the scheduled task,\n * another task is scheduled with queue scheduler, instead of executing immediately as well,\n * that task will be put on a queue and wait for current one to finish.\n *\n * This means that when you execute task with `queue` scheduler, you are sure it will end\n * before any other task scheduled with that scheduler will start.\n *\n * @examples <caption>Schedule recursively first, then do something</caption>\n *\n * Rx.Scheduler.queue.schedule(() => {\n *   Rx.Scheduler.queue.schedule(() => console.log('second')); // will not happen now, but will be put on a queue\n *\n *   console.log('first');\n * });\n *\n * // Logs:\n * // \"first\"\n * // \"second\"\n *\n *\n * @example <caption>Reschedule itself recursively</caption>\n *\n * Rx.Scheduler.queue.schedule(function(state) {\n *   if (state !== 0) {\n *     console.log('before', state);\n *     this.schedule(state - 1); // `this` references currently executing Action,\n *                               // which we reschedule with new state\n *     console.log('after', state);\n *   }\n * }, 0, 3);\n *\n * // In scheduler that runs recursively, you would expect:\n * // \"before\", 3\n * // \"before\", 2\n * // \"before\", 1\n * // \"after\", 1\n * // \"after\", 2\n * // \"after\", 3\n *\n * // But with queue it logs:\n * // \"before\", 3\n * // \"after\", 3\n * // \"before\", 2\n * // \"after\", 2\n * // \"before\", 1\n * // \"after\", 1\n *\n *\n * @static true\n * @name queue\n * @owner Scheduler\n */\n\nexport const queue = new QueueScheduler(QueueAction);\n","import { AsyncScheduler } from './AsyncScheduler';\n\nexport class QueueScheduler extends AsyncScheduler {\n}\n","import { Subject } from './Subject';\nimport { IScheduler } from './Scheduler';\nimport { queue } from './scheduler/queue';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { ObserveOnSubscriber } from './operators/observeOn';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\n/**\n * @class ReplaySubject<T>\n */\nexport class ReplaySubject<T> extends Subject<T> {\n  private _events: ReplayEvent<T>[] = [];\n  private _bufferSize: number;\n  private _windowTime: number;\n\n  constructor(bufferSize: number = Number.POSITIVE_INFINITY,\n              windowTime: number = Number.POSITIVE_INFINITY,\n              private scheduler?: IScheduler) {\n    super();\n    this._bufferSize = bufferSize < 1 ? 1 : bufferSize;\n    this._windowTime = windowTime < 1 ? 1 : windowTime;\n  }\n\n  next(value: T): void {\n    const now = this._getNow();\n    this._events.push(new ReplayEvent(now, value));\n    this._trimBufferThenGetEvents();\n    super.next(value);\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const _events = this._trimBufferThenGetEvents();\n    const scheduler = this.scheduler;\n    let subscription: Subscription;\n\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.hasError) {\n      subscription = Subscription.EMPTY;\n    } else if (this.isStopped) {\n      subscription = Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      subscription = new SubjectSubscription(this, subscriber);\n    }\n\n    if (scheduler) {\n      subscriber.add(subscriber = new ObserveOnSubscriber<T>(subscriber, scheduler));\n    }\n\n    const len = _events.length;\n    for (let i = 0; i < len && !subscriber.closed; i++) {\n      subscriber.next(_events[i].value);\n    }\n\n    if (this.hasError) {\n      subscriber.error(this.thrownError);\n    } else if (this.isStopped) {\n      subscriber.complete();\n    }\n\n    return subscription;\n  }\n\n  _getNow(): number {\n    return (this.scheduler || queue).now();\n  }\n\n  private _trimBufferThenGetEvents(): ReplayEvent<T>[] {\n    const now = this._getNow();\n    const _bufferSize = this._bufferSize;\n    const _windowTime = this._windowTime;\n    const _events = this._events;\n\n    let eventsCount = _events.length;\n    let spliceCount = 0;\n\n    // Trim events that fall out of the time window.\n    // Start at the front of the list. Break early once\n    // we encounter an event that falls within the window.\n    while (spliceCount < eventsCount) {\n      if ((now - _events[spliceCount].time) < _windowTime) {\n        break;\n      }\n      spliceCount++;\n    }\n\n    if (eventsCount > _bufferSize) {\n      spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);\n    }\n\n    if (spliceCount > 0) {\n      _events.splice(0, spliceCount);\n    }\n\n    return _events;\n  }\n}\n\nclass ReplayEvent<T> {\n  constructor(public time: number, public value: T) {\n  }\n}\n","import { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item.\n * @param {...Observables} ...observables sources used to race for which Observable emits first.\n * @return {Observable} an Observable that mirrors the output of the first Observable to emit an item.\n * @static true\n * @name race\n * @owner Observable\n */\nexport function race<T>(observables: Array<Observable<T>>): Observable<T>;\nexport function race<T>(observables: Array<Observable<any>>): Observable<T>;\nexport function race<T>(...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T>;\nexport function race<T>(...observables: Array<Observable<any> | Array<Observable<any>>>): Observable<T> {\n  // if the only argument is an array, it was most likely called with\n  // `race([obs1, obs2, ...])`\n  if (observables.length === 1) {\n    if (isArray(observables[0])) {\n      observables = <Array<Observable<any>>>observables[0];\n    } else {\n      return <Observable<any>>observables[0];\n    }\n  }\n\n  return new ArrayObservable<T>(<any>observables).lift(new RaceOperator<T>());\n}\n\nexport class RaceOperator<T> implements Operator<T, T> {\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RaceSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class RaceSubscriber<T> extends OuterSubscriber<T, T> {\n  private hasFirst: boolean = false;\n  private observables: Observable<any>[] = [];\n  private subscriptions: Subscription[] = [];\n\n  constructor(destination: Subscriber<T>) {\n    super(destination);\n  }\n\n  protected _next(observable: any): void {\n    this.observables.push(observable);\n  }\n\n  protected _complete() {\n    const observables = this.observables;\n    const len = observables.length;\n\n    if (len === 0) {\n      this.destination.complete();\n    } else {\n      for (let i = 0; i < len && !this.hasFirst; i++) {\n        let observable = observables[i];\n        let subscription = subscribeToResult(this, observable, observable, i);\n\n        if (this.subscriptions) {\n          this.subscriptions.push(subscription);\n        }\n        this.add(subscription);\n      }\n      this.observables = null;\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    if (!this.hasFirst) {\n      this.hasFirst = true;\n\n      for (let i = 0; i < this.subscriptions.length; i++) {\n        if (i !== outerIndex) {\n          let subscription = this.subscriptions[i];\n\n          subscription.unsubscribe();\n          this.remove(subscription);\n        }\n      }\n\n      this.subscriptions = null;\n    }\n\n    this.destination.next(innerValue);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that repeats the stream of items emitted by the source Observable at most count times.\n *\n * <img src=\"./img/repeat.png\" width=\"100%\">\n *\n * @param {number} [count] The number of times the source Observable items are repeated, a count of 0 will yield\n * an empty Observable.\n * @return {Observable} An Observable that repeats the stream of items emitted by the source Observable at most\n * count times.\n * @method repeat\n * @owner Observable\n */\nexport function repeat<T>(count: number = -1): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => {\n    if (count === 0) {\n      return new EmptyObservable<T>();\n    } else if (count < 0) {\n      return source.lift(new RepeatOperator(-1, source));\n    } else {\n      return source.lift(new RepeatOperator(count - 1, source));\n    }\n  };\n}\n\nclass RepeatOperator<T> implements Operator<T, T> {\n  constructor(private count: number,\n              private source: Observable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RepeatSubscriber(subscriber, this.count, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RepeatSubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>,\n              private count: number,\n              private source: Observable<T>) {\n    super(destination);\n  }\n  complete() {\n    if (!this.isStopped) {\n      const { source, count } = this;\n      if (count === 0) {\n        return super.complete();\n      } else if (count > -1) {\n        this.count = count - 1;\n      }\n      source.subscribe(this._unsubscribeAndRecycle());\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of a `complete`. If the source\n * Observable calls `complete`, this method will emit to the Observable returned from `notifier`. If that Observable\n * calls `complete` or `error`, then this method will call `complete` or `error` on the child subscription. Otherwise\n * this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/repeatWhen.png\" width=\"100%\">\n *\n * @param {function(notifications: Observable): Observable} notifier - Receives an Observable of notifications with\n * which a user can `complete` or `error`, aborting the repetition.\n * @return {Observable} The source Observable modified with repeat logic.\n * @method repeatWhen\n * @owner Observable\n */\nexport function repeatWhen<T>(notifier: (notifications: Observable<any>) => Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new RepeatWhenOperator(notifier));\n}\n\nclass RepeatWhenOperator<T> implements Operator<T, T> {\n  constructor(protected notifier: (notifications: Observable<any>) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RepeatWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private notifications: Subject<any>;\n  private retries: Observable<any>;\n  private retriesSubscription: Subscription;\n  private sourceIsBeingSubscribedTo: boolean = true;\n\n  constructor(destination: Subscriber<R>,\n              private notifier: (notifications: Observable<any>) => Observable<any>,\n              private source: Observable<T>) {\n    super(destination);\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.sourceIsBeingSubscribedTo = true;\n    this.source.subscribe(this);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    if (this.sourceIsBeingSubscribedTo === false) {\n      return super.complete();\n    }\n  }\n\n  complete() {\n    this.sourceIsBeingSubscribedTo = false;\n\n    if (!this.isStopped) {\n      if (!this.retries) {\n        this.subscribeToRetries();\n      } else if (this.retriesSubscription.closed) {\n        return super.complete();\n      }\n\n      this._unsubscribeAndRecycle();\n      this.notifications.next();\n    }\n  }\n\n  protected _unsubscribe() {\n    const { notifications, retriesSubscription } = this;\n    if (notifications) {\n      notifications.unsubscribe();\n      this.notifications = null;\n    }\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = null;\n    }\n    this.retries = null;\n  }\n\n  protected _unsubscribeAndRecycle(): Subscriber<T> {\n    const { notifications, retries, retriesSubscription } = this;\n    this.notifications = null;\n    this.retries = null;\n    this.retriesSubscription = null;\n    super._unsubscribeAndRecycle();\n    this.notifications = notifications;\n    this.retries = retries;\n    this.retriesSubscription = retriesSubscription;\n    return this;\n  }\n\n  private subscribeToRetries() {\n    this.notifications = new Subject();\n    const retries = tryCatch(this.notifier)(this.notifications);\n    if (retries === errorObject) {\n      return super.complete();\n    }\n    this.retries = retries;\n    this.retriesSubscription = subscribeToResult(this, retries);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will resubscribe to the source Observable for a maximum of `count` resubscriptions (given\n * as a number parameter) rather than propagating the `error` call.\n *\n * <img src=\"./img/retry.png\" width=\"100%\">\n *\n * Any and all items emitted by the source Observable will be emitted by the resulting Observable, even those emitted\n * during failed subscriptions. For example, if an Observable fails at first but emits [1, 2] then succeeds the second\n * time and emits: [1, 2, 3, 4, 5] then the complete stream of emissions and notifications\n * would be: [1, 2, 1, 2, 3, 4, 5, `complete`].\n * @param {number} count - Number of retry attempts before failing.\n * @return {Observable} The source Observable modified with the retry logic.\n * @method retry\n * @owner Observable\n */\nexport function retry<T>(count: number = -1): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new RetryOperator(count, source));\n}\n\nclass RetryOperator<T> implements Operator<T, T> {\n  constructor(private count: number,\n              private source: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RetrySubscriber(subscriber, this.count, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RetrySubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>,\n              private count: number,\n              private source: Observable<T>) {\n    super(destination);\n  }\n  error(err: any) {\n    if (!this.isStopped) {\n      const { source, count } = this;\n      if (count === 0) {\n        return super.error(err);\n      } else if (count > -1) {\n        this.count = count - 1;\n      }\n      source.subscribe(this._unsubscribeAndRecycle());\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will emit the Throwable that caused the error to the Observable returned from `notifier`.\n * If that Observable calls `complete` or `error` then this method will call `complete` or `error` on the child\n * subscription. Otherwise this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/retryWhen.png\" width=\"100%\">\n *\n * @param {function(errors: Observable): Observable} notifier - Receives an Observable of notifications with which a\n * user can `complete` or `error`, aborting the retry.\n * @return {Observable} The source Observable modified with retry logic.\n * @method retryWhen\n * @owner Observable\n */\nexport function retryWhen<T>(notifier: (errors: Observable<any>) => Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new RetryWhenOperator(notifier, source));\n}\n\nclass RetryWhenOperator<T> implements Operator<T, T> {\n  constructor(protected notifier: (errors: Observable<any>) => Observable<any>,\n              protected source: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RetryWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private errors: Subject<any>;\n  private retries: Observable<any>;\n  private retriesSubscription: Subscription;\n\n  constructor(destination: Subscriber<R>,\n              private notifier: (errors: Observable<any>) => Observable<any>,\n              private source: Observable<T>) {\n    super(destination);\n  }\n\n  error(err: any) {\n    if (!this.isStopped) {\n\n      let errors = this.errors;\n      let retries: any = this.retries;\n      let retriesSubscription = this.retriesSubscription;\n\n      if (!retries) {\n        errors = new Subject();\n        retries = tryCatch(this.notifier)(errors);\n        if (retries === errorObject) {\n          return super.error(errorObject.e);\n        }\n        retriesSubscription = subscribeToResult(this, retries);\n      } else {\n        this.errors = null;\n        this.retriesSubscription = null;\n      }\n\n      this._unsubscribeAndRecycle();\n\n      this.errors = errors;\n      this.retries = retries;\n      this.retriesSubscription = retriesSubscription;\n\n      errors.next(err);\n    }\n  }\n\n  protected _unsubscribe() {\n    const { errors, retriesSubscription } = this;\n    if (errors) {\n      errors.unsubscribe();\n      this.errors = null;\n    }\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = null;\n    }\n    this.retries = null;\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const { errors, retries, retriesSubscription } = this;\n    this.errors = null;\n    this.retries = null;\n    this.retriesSubscription = null;\n\n    this._unsubscribeAndRecycle();\n\n    this.errors = errors;\n    this.retries = retries;\n    this.retriesSubscription = retriesSubscription;\n\n    this.source.subscribe(this);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits the most recently emitted value from the source Observable whenever\n * another Observable, the `notifier`, emits.\n *\n * <span class=\"informal\">It's like {@link sampleTime}, but samples whenever\n * the `notifier` Observable emits something.</span>\n *\n * <img src=\"./img/sample.png\" width=\"100%\">\n *\n * Whenever the `notifier` Observable emits a value or completes, `sample`\n * looks at the source Observable and emits whichever value it has most recently\n * emitted since the previous sampling, unless the source has not emitted\n * anything since the previous sampling. The `notifier` is subscribed to as soon\n * as the output Observable is subscribed.\n *\n * @example <caption>On every click, sample the most recent \"seconds\" timer</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = seconds.sample(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {Observable<any>} notifier The Observable to use for sampling the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable whenever the notifier Observable\n * emits value or completes.\n * @method sample\n * @owner Observable\n */\nexport function sample<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SampleOperator(notifier));\n}\n\nclass SampleOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    const sampleSubscriber = new SampleSubscriber(subscriber);\n    const subscription = source.subscribe(sampleSubscriber);\n    subscription.add(subscribeToResult(sampleSubscriber, this.notifier));\n    return subscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SampleSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private value: T;\n  private hasValue: boolean = false;\n\n  protected _next(value: T) {\n    this.value = value;\n    this.hasValue = true;\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.emitValue();\n  }\n\n  notifyComplete(): void {\n    this.emitValue();\n  }\n\n  emitValue() {\n    if (this.hasValue) {\n      this.hasValue = false;\n      this.destination.next(this.value);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Compares all values of two observables in sequence using an optional comparor function\n * and returns an observable of a single boolean value representing whether or not the two sequences\n * are equal.\n *\n * <span class=\"informal\">Checks to see of all values emitted by both observables are equal, in order.</span>\n *\n * <img src=\"./img/sequenceEqual.png\" width=\"100%\">\n *\n * `sequenceEqual` subscribes to two observables and buffers incoming values from each observable. Whenever either\n * observable emits a value, the value is buffered and the buffers are shifted and compared from the bottom\n * up; If any value pair doesn't match, the returned observable will emit `false` and complete. If one of the\n * observables completes, the operator will wait for the other observable to complete; If the other\n * observable emits before completing, the returned observable will emit `false` and complete. If one observable never\n * completes or emits after the other complets, the returned observable will never complete.\n *\n * @example <caption>figure out if the Konami code matches</caption>\n * var code = Rx.Observable.from([\n *  \"ArrowUp\",\n *  \"ArrowUp\",\n *  \"ArrowDown\",\n *  \"ArrowDown\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"KeyB\",\n *  \"KeyA\",\n *  \"Enter\" // no start key, clearly.\n * ]);\n *\n * var keys = Rx.Observable.fromEvent(document, 'keyup')\n *  .map(e => e.code);\n * var matches = keys.bufferCount(11, 1)\n *  .mergeMap(\n *    last11 =>\n *      Rx.Observable.from(last11)\n *        .sequenceEqual(code)\n *   );\n * matches.subscribe(matched => console.log('Successful cheat at Contra? ', matched));\n *\n * @see {@link combineLatest}\n * @see {@link zip}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} compareTo The observable sequence to compare the source sequence to.\n * @param {function} [comparor] An optional function to compare each value pair\n * @return {Observable} An Observable of a single boolean value representing whether or not\n * the values emitted by both observables were equal in sequence.\n * @method sequenceEqual\n * @owner Observable\n */\nexport function sequenceEqual<T>(compareTo: Observable<T>,\n                                 comparor?: (a: T, b: T) => boolean): OperatorFunction<T, boolean> {\n  return (source: Observable<T>) => source.lift(new SequenceEqualOperator(compareTo, comparor));\n}\n\nexport class SequenceEqualOperator<T> implements Operator<T, boolean> {\n  constructor(private compareTo: Observable<T>,\n              private comparor: (a: T, b: T) => boolean) {\n  }\n\n  call(subscriber: Subscriber<boolean>, source: any): any {\n    return source.subscribe(new SequenceEqualSubscriber(subscriber, this.compareTo, this.comparor));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SequenceEqualSubscriber<T, R> extends Subscriber<T> {\n  private _a: T[] = [];\n  private _b: T[] = [];\n  private _oneComplete = false;\n\n  constructor(destination: Observer<R>,\n              private compareTo: Observable<T>,\n              private comparor: (a: T, b: T) => boolean) {\n    super(destination);\n    this.add(compareTo.subscribe(new SequenceEqualCompareToSubscriber(destination, this)));\n  }\n\n  protected _next(value: T): void {\n    if (this._oneComplete && this._b.length === 0) {\n      this.emit(false);\n    } else {\n      this._a.push(value);\n      this.checkValues();\n    }\n  }\n\n  public _complete(): void {\n    if (this._oneComplete) {\n      this.emit(this._a.length === 0 && this._b.length === 0);\n    } else {\n      this._oneComplete = true;\n    }\n  }\n\n  checkValues() {\n    const { _a, _b, comparor } = this;\n    while (_a.length > 0 && _b.length > 0) {\n      let a = _a.shift();\n      let b = _b.shift();\n      let areEqual = false;\n      if (comparor) {\n        areEqual = tryCatch(comparor)(a, b);\n        if (areEqual === errorObject) {\n          this.destination.error(errorObject.e);\n        }\n      } else {\n        areEqual = a === b;\n      }\n      if (!areEqual) {\n        this.emit(false);\n      }\n    }\n  }\n\n  emit(value: boolean) {\n    const { destination } = this;\n    destination.next(value);\n    destination.complete();\n  }\n\n  nextB(value: T) {\n    if (this._oneComplete && this._a.length === 0) {\n      this.emit(false);\n    } else {\n      this._b.push(value);\n      this.checkValues();\n    }\n  }\n}\n\nclass SequenceEqualCompareToSubscriber<T, R> extends Subscriber<T> {\n  constructor(destination: Observer<R>, private parent: SequenceEqualSubscriber<T, R>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.parent.nextB(value);\n  }\n\n  protected _error(err: any): void {\n    this.parent.error(err);\n  }\n\n  protected _complete(): void {\n    this.parent._complete();\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observer } from '../Observer';\nimport { EmptyError } from '../util/EmptyError';\nimport { TeardownLogic } from '../Subscription';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that emits the single item emitted by the source Observable that matches a specified\n * predicate, if that Observable emits one such item. If the source Observable emits more than one such item or no\n * such items, notify of an IllegalArgumentException or NoSuchElementException respectively.\n *\n * <img src=\"./img/single.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {Function} predicate - A predicate function to evaluate items emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits the single item emitted by the source Observable that matches\n * the predicate.\n .\n * @method single\n * @owner Observable\n */\nexport function single<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SingleOperator(predicate, source));\n}\n\nclass SingleOperator<T> implements Operator<T, T> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SingleSubscriber(subscriber, this.predicate, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SingleSubscriber<T> extends Subscriber<T> {\n  private seenValue: boolean = false;\n  private singleValue: T;\n  private index: number = 0;\n\n  constructor(destination: Observer<T>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  private applySingleValue(value: T): void {\n    if (this.seenValue) {\n      this.destination.error('Sequence contains more than one element');\n    } else {\n      this.seenValue = true;\n      this.singleValue = value;\n    }\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n\n    if (this.predicate) {\n      this.tryNext(value, index);\n    } else {\n      this.applySingleValue(value);\n    }\n  }\n\n  private tryNext(value: T, index: number): void {\n    try {\n      if (this.predicate(value, index, this.source)) {\n        this.applySingleValue(value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n\n    if (this.index > 0) {\n      destination.next(this.seenValue ? this.singleValue : undefined);\n      destination.complete();\n    } else {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that skips the first `count` items emitted by the source Observable.\n *\n * <img src=\"./img/skip.png\" width=\"100%\">\n *\n * @param {Number} count - The number of times, items emitted by source Observable should be skipped.\n * @return {Observable} An Observable that skips values emitted by the source Observable.\n *\n * @method skip\n * @owner Observable\n */\nexport function skip<T>(count: number): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipOperator(count));\n}\n\nclass SkipOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SkipSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipSubscriber<T> extends Subscriber<T> {\n  count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(x: T) {\n    if (++this.count > this.total) {\n      this.destination.next(x);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Skip the last `count` values emitted by the source Observable.\n *\n * <img src=\"./img/skipLast.png\" width=\"100%\">\n *\n * `skipLast` returns an Observable that accumulates a queue with a length\n * enough to store the first `count` values. As more values are received,\n * values are taken from the front of the queue and produced on the result\n * sequence. This causes values to be delayed.\n *\n * @example <caption>Skip the last 2 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 5);\n * var skipLastTwo = many.skipLast(2);\n * skipLastTwo.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 1 2 3\n *\n * @see {@link skip}\n * @see {@link skipUntil}\n * @see {@link skipWhile}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `skipLast(i)`, it throws\n * ArgumentOutOrRangeError if `i < 0`.\n *\n * @param {number} count Number of elements to skip from the end of the source Observable.\n * @returns {Observable<T>} An Observable that skips the last count values\n * emitted by the source Observable.\n * @method skipLast\n * @owner Observable\n */\nexport function skipLast<T>(count: number): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipLastOperator(count));\n}\n\nclass SkipLastOperator<T> implements Operator<T, T> {\n  constructor(private _skipCount: number) {\n    if (this._skipCount < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    if (this._skipCount === 0) {\n      // If we don't want to skip any values then just subscribe\n      // to Subscriber without any further logic.\n      return source.subscribe(new Subscriber(subscriber));\n    } else {\n      return source.subscribe(new SkipLastSubscriber(subscriber, this._skipCount));\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipLastSubscriber<T> extends Subscriber<T> {\n  private _ring: T[];\n  private _count: number = 0;\n\n  constructor(destination: Subscriber<T>, private _skipCount: number) {\n    super(destination);\n    this._ring = new Array<T>(_skipCount);\n  }\n\n  protected _next(value: T): void {\n    const skipCount = this._skipCount;\n    const count = this._count++;\n\n    if (count < skipCount) {\n      this._ring[count] = value;\n    } else {\n      const currentIndex = count % skipCount;\n      const ring = this._ring;\n      const oldValue = ring[currentIndex];\n\n      ring[currentIndex] = value;\n      this.destination.next(oldValue);\n    }\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.\n *\n * <img src=\"./img/skipUntil.png\" width=\"100%\">\n *\n * @param {Observable} notifier - The second Observable that has to emit an item before the source Observable's elements begin to\n * be mirrored by the resulting Observable.\n * @return {Observable<T>} An Observable that skips items from the source Observable until the second Observable emits\n * an item, then emits the remaining items.\n * @method skipUntil\n * @owner Observable\n */\nexport function skipUntil<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipUntilOperator(notifier));\n}\n\nclass SkipUntilOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SkipUntilSubscriber(subscriber, this.notifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipUntilSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private hasValue: boolean = false;\n  private isInnerStopped: boolean = false;\n\n  constructor(destination: Subscriber<any>,\n              notifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, notifier));\n  }\n\n  protected _next(value: T) {\n    if (this.hasValue) {\n      super._next(value);\n    }\n  }\n\n  protected _complete() {\n    if (this.isInnerStopped) {\n      super._complete();\n    } else {\n      this.unsubscribe();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.hasValue = true;\n  }\n\n  notifyComplete(): void {\n    this.isInnerStopped = true;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds\n * true, but emits all further source items as soon as the condition becomes false.\n *\n * <img src=\"./img/skipWhile.png\" width=\"100%\">\n *\n * @param {Function} predicate - A function to test each item emitted from the source Observable.\n * @return {Observable<T>} An Observable that begins emitting items emitted by the source Observable when the\n * specified predicate becomes false.\n * @method skipWhile\n * @owner Observable\n */\nexport function skipWhile<T>(predicate: (value: T, index: number) => boolean): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipWhileOperator(predicate));\n}\n\nclass SkipWhileOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SkipWhileSubscriber(subscriber, this.predicate));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipWhileSubscriber<T> extends Subscriber<T> {\n  private skipping: boolean = true;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const destination = this.destination;\n    if (this.skipping) {\n      this.tryCallPredicate(value);\n    }\n\n    if (!this.skipping) {\n      destination.next(value);\n    }\n  }\n\n  private tryCallPredicate(value: T): void {\n    try {\n      const result = this.predicate(value, this.index++);\n      this.skipping = Boolean(result);\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function switchMap<T, R>(project: (value: T, index: number) => ObservableInput<R>): OperatorFunction<T, R>;\nexport function switchMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, emitting values only from the most recently projected Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link switch}.</span>\n *\n * <img src=\"./img/switchMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\n * inner Observables, the output Observable begins emitting the items emitted by\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\n * stops emitting items from the earlier-emitted inner Observable and begins\n * emitting items from the new one. It continues to behave like this for\n * subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switch}\n * @see {@link switchMapTo}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking only the values from the most recently\n * projected inner Observable.\n * @method switchMap\n * @owner Observable\n */\nexport function switchMap<T, I, R>(\n  project: (value: T, index: number) => ObservableInput<I>,\n  resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R\n): OperatorFunction<T, I | R> {\n  return function switchMapOperatorFunction(source: Observable<T>): Observable<I | R> {\n    return source.lift(new SwitchMapOperator(project, resultSelector));\n  };\n}\n\nclass SwitchMapOperator<T, I, R> implements Operator<T, I> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<I>, source: any): any {\n    return source.subscribe(new SwitchMapSubscriber(subscriber, this.project, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private index: number = 0;\n  private innerSubscription: Subscription;\n\n  constructor(destination: Subscriber<I>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    let result: ObservableInput<I>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (error) {\n      this.destination.error(error);\n      return;\n    }\n    this._innerSub(result, value, index);\n  }\n\n  private _innerSub(result: ObservableInput<I>, value: T, index: number) {\n    const innerSubscription = this.innerSubscription;\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n    }\n    this.add(this.innerSubscription = subscribeToResult(this, result, value, index));\n  }\n\n  protected _complete(): void {\n    const {innerSubscription} = this;\n    if (!innerSubscription || innerSubscription.closed) {\n      super._complete();\n    }\n  }\n\n  protected _unsubscribe() {\n    this.innerSubscription = null;\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n    this.innerSubscription = null;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    if (this.resultSelector) {\n      this._tryNotifyNext(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      this.destination.next(innerValue);\n    }\n  }\n\n  private _tryNotifyNext(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): void {\n    let result: R;\n    try {\n      result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function switchMapTo<T, R>(observable: ObservableInput<R>): OperatorFunction<T, R>;\nexport function switchMapTo<T, I, R>(observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is flattened multiple\n * times with {@link switch} in the output Observable.\n *\n * <span class=\"informal\">It's like {@link switchMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/switchMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. The output Observables\n * emits values only from the most recently emitted instance of\n * `innerObservable`.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link switch}\n * @see {@link switchMap}\n * @see {@link mergeMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable, and taking only the values\n * from the most recently projected inner Observable.\n * @method switchMapTo\n * @owner Observable\n */\nexport function switchMapTo<T, I, R>(innerObservable: Observable<I>,\n                                     resultSelector?: (outerValue: T,\n                                                       innerValue: I,\n                                                       outerIndex: number,\n                                                       innerIndex: number) => R): OperatorFunction<T, I | R> {\n  return (source: Observable<T>) => source.lift(new SwitchMapToOperator(innerObservable, resultSelector));\n}\n\nclass SwitchMapToOperator<T, I, R> implements Operator<T, I> {\n  constructor(private observable: Observable<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<I>, source: any): any {\n    return source.subscribe(new SwitchMapToSubscriber(subscriber, this.observable, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchMapToSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private index: number = 0;\n  private innerSubscription: Subscription;\n\n  constructor(destination: Subscriber<I>,\n              private inner: Observable<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: any) {\n    const innerSubscription = this.innerSubscription;\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n    }\n    this.add(this.innerSubscription = subscribeToResult(this, this.inner, value, this.index++));\n  }\n\n  protected _complete() {\n    const {innerSubscription} = this;\n    if (!innerSubscription || innerSubscription.closed) {\n      super._complete();\n    }\n  }\n\n  protected _unsubscribe() {\n    this.innerSubscription = null;\n  }\n\n  notifyComplete(innerSub: Subscription) {\n    this.remove(innerSub);\n    this.innerSubscription = null;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.tryResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private tryResultSelector(outerValue: T, innerValue: I,\n                            outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    let result: R;\n    try {\n      result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n\n    destination.next(result);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits only the first `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Takes the first `count` values from the source, then\n * completes.</span>\n *\n * <img src=\"./img/take.png\" width=\"100%\">\n *\n * `take` returns an Observable that emits only the first `count` values emitted\n * by the source Observable. If the source emits fewer than `count` values then\n * all of its values are emitted. After that, it completes, regardless if the\n * source completes.\n *\n * @example <caption>Take the first 5 seconds of an infinite 1-second interval Observable</caption>\n * var interval = Rx.Observable.interval(1000);\n * var five = interval.take(5);\n * five.subscribe(x => console.log(x));\n *\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `take(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of `next` values to emit.\n * @return {Observable<T>} An Observable that emits only the first `count`\n * values emitted by the source Observable, or all of the values from the source\n * if the source emits fewer than `count` values.\n * @method take\n * @owner Observable\n */\nexport function take<T>(count: number): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => {\n    if (count === 0) {\n      return new EmptyObservable<T>();\n    } else {\n      return source.lift(new TakeOperator(count));\n    }\n  };\n}\n\nclass TakeOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeSubscriber<T> extends Subscriber<T> {\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const total = this.total;\n    const count = ++this.count;\n    if (count <= total) {\n      this.destination.next(value);\n      if (count === total) {\n        this.destination.complete();\n        this.unsubscribe();\n      }\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits the values emitted by the source Observable until a `notifier`\n * Observable emits a value.\n *\n * <span class=\"informal\">Lets values pass until a second Observable,\n * `notifier`, emits something. Then, it completes.</span>\n *\n * <img src=\"./img/takeUntil.png\" width=\"100%\">\n *\n * `takeUntil` subscribes and begins mirroring the source Observable. It also\n * monitors a second Observable, `notifier` that you provide. If the `notifier`\n * emits a value or a complete notification, the output Observable stops\n * mirroring the source Observable and completes.\n *\n * @example <caption>Tick every second until the first click happens</caption>\n * var interval = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = interval.takeUntil(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param {Observable} notifier The Observable whose first emitted value will\n * cause the output Observable of `takeUntil` to stop emitting values from the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable until such time as `notifier` emits its first value.\n * @method takeUntil\n * @owner Observable\n */\nexport function takeUntil<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new TakeUntilOperator(notifier));\n}\n\nclass TakeUntilOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeUntilSubscriber(subscriber, this.notifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeUntilSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  constructor(destination: Subscriber<any>,\n              private notifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, notifier));\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.complete();\n  }\n\n  notifyComplete(): void {\n    // noop\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits values emitted by the source Observable so long as each value satisfies\n * the given `predicate`, and then completes as soon as this `predicate` is not\n * satisfied.\n *\n * <span class=\"informal\">Takes values from the source only while they pass the\n * condition given. When the first value does not satisfy, it completes.</span>\n *\n * <img src=\"./img/takeWhile.png\" width=\"100%\">\n *\n * `takeWhile` subscribes and begins mirroring the source Observable. Each value\n * emitted on the source is given to the `predicate` function which returns a\n * boolean, representing a condition to be satisfied by the source values. The\n * output Observable emits the source values until such time as the `predicate`\n * returns false, at which point `takeWhile` stops mirroring the source\n * Observable and completes the output Observable.\n *\n * @example <caption>Emit click events only while the clientX property is greater than 200</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.takeWhile(ev => ev.clientX > 200);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates a value emitted by the source Observable and returns a boolean.\n * Also takes the (zero-based) index as the second argument.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable so long as each value satisfies the condition defined by the\n * `predicate`, then completes.\n * @method takeWhile\n * @owner Observable\n */\nexport function takeWhile<T>(predicate: (value: T, index: number) => boolean): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new TakeWhileOperator(predicate));\n}\n\nclass TakeWhileOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeWhileSubscriber(subscriber, this.predicate));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeWhileSubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const destination = this.destination;\n    let result: boolean;\n    try {\n      result = this.predicate(value, this.index++);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n    this.nextOrComplete(value, result);\n  }\n\n  private nextOrComplete(value: T, predicateResult: boolean): void {\n    const destination = this.destination;\n    if (Boolean(predicateResult)) {\n      destination.next(value);\n    } else {\n      destination.complete();\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { PartialObserver } from '../Observer';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function tap<T>(next: (x: T) => void, error?: (e: any) => void, complete?: () => void): MonoTypeOperatorFunction<T>;\nexport function tap<T>(observer: PartialObserver<T>): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Perform a side effect for every emission on the source Observable, but return\n * an Observable that is identical to the source.\n *\n * <span class=\"informal\">Intercepts each emission on the source and runs a\n * function, but returns an output which is identical to the source as long as errors don't occur.</span>\n *\n * <img src=\"./img/do.png\" width=\"100%\">\n *\n * Returns a mirrored Observable of the source Observable, but modified so that\n * the provided Observer is called to perform a side effect for every value,\n * error, and completion emitted by the source. Any errors that are thrown in\n * the aforementioned Observer or handlers are safely sent down the error path\n * of the output Observable.\n *\n * This operator is useful for debugging your Observables for the correct values\n * or performing other side effects.\n *\n * Note: this is different to a `subscribe` on the Observable. If the Observable\n * returned by `do` is not subscribed, the side effects specified by the\n * Observer will never happen. `do` therefore simply spies on existing\n * execution, it does not trigger an execution to happen like `subscribe` does.\n *\n * @example <caption>Map every click to the clientX position of that click, while also logging the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks\n *   .do(ev => console.log(ev))\n *   .map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link map}\n * @see {@link subscribe}\n *\n * @param {Observer|function} [nextOrObserver] A normal Observer object or a\n * callback for `next`.\n * @param {function} [error] Callback for errors in the source.\n * @param {function} [complete] Callback for the completion of the source.\n * @return {Observable} An Observable identical to the source, but runs the\n * specified Observer or callback(s) for each item.\n * @name tap\n */\nexport function tap<T>(nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n                       error?: (e: any) => void,\n                       complete?: () => void): MonoTypeOperatorFunction<T> {\n  return function tapOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new DoOperator(nextOrObserver, error, complete));\n  };\n}\n\nclass DoOperator<T> implements Operator<T, T> {\n  constructor(private nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n              private error?: (e: any) => void,\n              private complete?: () => void) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DoSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DoSubscriber<T> extends Subscriber<T> {\n\n  private safeSubscriber: Subscriber<T>;\n\n  constructor(destination: Subscriber<T>,\n              nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n              error?: (e: any) => void,\n              complete?: () => void) {\n    super(destination);\n\n    const safeSubscriber = new Subscriber<T>(nextOrObserver, error, complete);\n    safeSubscriber.syncErrorThrowable = true;\n    this.add(safeSubscriber);\n    this.safeSubscriber = safeSubscriber;\n  }\n\n  protected _next(value: T): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.next(value);\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.next(value);\n    }\n  }\n\n  protected _error(err: any): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.error(err);\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.complete();\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.complete();\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\nexport interface ThrottleConfig {\n  leading?: boolean;\n  trailing?: boolean;\n}\n\nexport const defaultThrottleConfig: ThrottleConfig = {\n  leading: true,\n  trailing: false\n};\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for a duration determined by another Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link throttleTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/throttle.png\" width=\"100%\">\n *\n * `throttle` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled by calling the `durationSelector` function with the source value,\n * which returns the \"duration\" Observable. When the duration Observable emits a\n * value or completes, the timer is disabled, and this process repeats for the\n * next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttle(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration for each source value, returned as an Observable or a Promise.\n * @param {Object} config a configuration object to define `leading` and `trailing` behavior. Defaults\n * to `{ leading: true, trailing: false }`.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttle\n * @owner Observable\n */\nexport function throttle<T>(durationSelector: (value: T) => SubscribableOrPromise<number>,\n                            config: ThrottleConfig = defaultThrottleConfig): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new ThrottleOperator(durationSelector, config.leading, config.trailing));\n}\n\nclass ThrottleOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<number>,\n              private leading: boolean,\n              private trailing: boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(\n      new ThrottleSubscriber(subscriber, this.durationSelector, this.leading, this.trailing)\n    );\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc\n * @ignore\n * @extends {Ignored}\n */\nclass ThrottleSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private throttled: Subscription;\n  private _trailingValue: T;\n  private _hasTrailingValue = false;\n\n  constructor(protected destination: Subscriber<T>,\n              private durationSelector: (value: T) => SubscribableOrPromise<number>,\n              private _leading: boolean,\n              private _trailing: boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.throttled) {\n      if (this._trailing) {\n        this._hasTrailingValue = true;\n        this._trailingValue = value;\n      }\n    } else {\n      const duration = this.tryDurationSelector(value);\n      if (duration) {\n        this.add(this.throttled = subscribeToResult(this, duration));\n      }\n      if (this._leading) {\n        this.destination.next(value);\n        if (this._trailing) {\n          this._hasTrailingValue = true;\n          this._trailingValue = value;\n        }\n      }\n    }\n  }\n\n  private tryDurationSelector(value: T): SubscribableOrPromise<any> {\n    try {\n      return this.durationSelector(value);\n    } catch (err) {\n      this.destination.error(err);\n      return null;\n    }\n  }\n\n  protected _unsubscribe() {\n    const { throttled, _trailingValue, _hasTrailingValue, _trailing } = this;\n\n    this._trailingValue = null;\n    this._hasTrailingValue = false;\n\n    if (throttled) {\n      this.remove(throttled);\n      this.throttled = null;\n      throttled.unsubscribe();\n    }\n  }\n\n  private _sendTrailing() {\n    const { destination, throttled, _trailing, _trailingValue, _hasTrailingValue } = this;\n    if (throttled && _trailing && _hasTrailingValue) {\n      destination.next(_trailingValue);\n      this._trailingValue = null;\n      this._hasTrailingValue = false;\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this._sendTrailing();\n    this._unsubscribe();\n  }\n\n  notifyComplete(): void {\n    this._sendTrailing();\n    this._unsubscribe();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { OperatorFunction } from '../interfaces';\n\nexport function timeInterval<T>(scheduler: IScheduler = async): OperatorFunction<T, TimeInterval<T>> {\n  return (source: Observable<T>) => source.lift(new TimeIntervalOperator(scheduler));\n}\n\nexport class TimeInterval<T> {\n  constructor(public value: T, public interval: number) {\n\n  }\n};\n\nclass TimeIntervalOperator<T> implements Operator<T, TimeInterval<T>> {\n  constructor(private scheduler: IScheduler) {\n\n  }\n\n  call(observer: Subscriber<TimeInterval<T>>, source: any): any {\n    return source.subscribe(new TimeIntervalSubscriber(observer, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeIntervalSubscriber<T> extends Subscriber<T> {\n  private lastTime: number = 0;\n\n  constructor(destination: Subscriber<TimeInterval<T>>, private scheduler: IScheduler) {\n    super(destination);\n\n    this.lastTime = scheduler.now();\n  }\n\n  protected _next(value: T) {\n    let now = this.scheduler.now();\n    let span = now - this.lastTime;\n    this.lastTime = now;\n\n    this.destination.next(new TimeInterval(value, span));\n  }\n}\n","/**\r\n * An error thrown when duetime elapses.\r\n *\r\n * @see {@link timeout}\r\n *\r\n * @class TimeoutError\r\n */\r\nexport class TimeoutError extends Error {\r\n  constructor() {\r\n    const err: any = super('Timeout has occurred');\r\n    (<any> this).name = err.name = 'TimeoutError';\r\n    (<any> this).stack = err.stack;\r\n    (<any> this).message = err.message;\r\n  }\r\n}\r\n","import { Action } from '../scheduler/Action';\nimport { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { TimeoutError } from '../util/TimeoutError';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n *\n * Errors if Observable does not emit a value in given time span.\n *\n * <span class=\"informal\">Timeouts on Observable that doesn't emit values fast enough.</span>\n *\n * <img src=\"./img/timeout.png\" width=\"100%\">\n *\n * `timeout` operator accepts as an argument either a number or a Date.\n *\n * If number was provided, it returns an Observable that behaves like a source\n * Observable, unless there is a period of time where there is no value emitted.\n * So if you provide `100` as argument and first value comes after 50ms from\n * the moment of subscription, this value will be simply re-emitted by the resulting\n * Observable. If however after that 100ms passes without a second value being emitted,\n * stream will end with an error and source Observable will be unsubscribed.\n * These checks are performed throughout whole lifecycle of Observable - from the moment\n * it was subscribed to, until it completes or errors itself. Thus every value must be\n * emitted within specified period since previous value.\n *\n * If provided argument was Date, returned Observable behaves differently. It throws\n * if Observable did not complete before provided Date. This means that periods between\n * emission of particular values do not matter in this case. If Observable did not complete\n * before provided Date, source Observable will be unsubscribed. Other than that, resulting\n * stream behaves just as source Observable.\n *\n * `timeout` accepts also a Scheduler as a second parameter. It is used to schedule moment (or moments)\n * when returned Observable will check if source stream emitted value or completed.\n *\n * @example <caption>Check if ticks are emitted within certain timespan</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds.timeout(1100) // Let's use bigger timespan to be safe,\n *                       // since `interval` might fire a bit later then scheduled.\n * .subscribe(\n *     value => console.log(value), // Will emit numbers just as regular `interval` would.\n *     err => console.log(err) // Will never be called.\n * );\n *\n * seconds.timeout(900).subscribe(\n *     value => console.log(value), // Will never be called.\n *     err => console.log(err) // Will emit error before even first value is emitted,\n *                             // since it did not arrive within 900ms period.\n * );\n *\n * @example <caption>Use Date to check if Observable completed</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds.timeout(new Date(\"December 17, 2020 03:24:00\"))\n * .subscribe(\n *     value => console.log(value), // Will emit values as regular `interval` would\n *                                  // until December 17, 2020 at 03:24:00.\n *     err => console.log(err) // On December 17, 2020 at 03:24:00 it will emit an error,\n *                             // since Observable did not complete by then.\n * );\n *\n * @see {@link timeoutWith}\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source, unless timeout checks fail.\n * @method timeout\n * @owner Observable\n */\nexport function timeout<T>(due: number | Date,\n                           scheduler: IScheduler = async): MonoTypeOperatorFunction<T> {\n  const absoluteTimeout = isDate(due);\n  const waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(<number>due);\n  return (source: Observable<T>) => source.lift(new TimeoutOperator(waitFor, absoluteTimeout, scheduler, new TimeoutError()));\n}\n\nclass TimeoutOperator<T> implements Operator<T, T> {\n  constructor(private waitFor: number,\n              private absoluteTimeout: boolean,\n              private scheduler: IScheduler,\n              private errorInstance: TimeoutError) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TimeoutSubscriber<T>(\n      subscriber, this.absoluteTimeout, this.waitFor, this.scheduler, this.errorInstance\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeoutSubscriber<T> extends Subscriber<T> {\n\n  private action: Action<TimeoutSubscriber<T>> = null;\n\n  constructor(destination: Subscriber<T>,\n              private absoluteTimeout: boolean,\n              private waitFor: number,\n              private scheduler: IScheduler,\n              private errorInstance: TimeoutError) {\n    super(destination);\n    this.scheduleTimeout();\n  }\n\n  private static dispatchTimeout<T>(subscriber: TimeoutSubscriber<T>): void {\n    subscriber.error(subscriber.errorInstance);\n  }\n\n  private scheduleTimeout(): void {\n    const { action } = this;\n    if (action) {\n      // Recycle the action if we've already scheduled one. All the production\n      // Scheduler Actions mutate their state/delay time and return themeselves.\n      // VirtualActions are immutable, so they create and return a clone. In this\n      // case, we need to set the action reference to the most recent VirtualAction,\n      // to ensure that's the one we clone from next time.\n      this.action = (<Action<TimeoutSubscriber<T>>> action.schedule(this, this.waitFor));\n    } else {\n      this.add(this.action = (<Action<TimeoutSubscriber<T>>> this.scheduler.schedule(\n        TimeoutSubscriber.dispatchTimeout, this.waitFor, this\n      )));\n    }\n  }\n\n  protected _next(value: T): void {\n    if (!this.absoluteTimeout) {\n      this.scheduleTimeout();\n    }\n    super._next(value);\n  }\n\n  protected _unsubscribe() {\n    this.action = null;\n    this.scheduler = null;\n    this.errorInstance = null;\n  }\n}\n","import { Action } from '../scheduler/Action';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { TeardownLogic } from '../Subscription';\nimport { Observable, ObservableInput } from '../Observable';\nimport { isDate } from '../util/isDate';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function timeoutWith<T>(due: number | Date, withObservable: ObservableInput<T>, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function timeoutWith<T, R>(due: number | Date, withObservable: ObservableInput<R>, scheduler?: IScheduler): OperatorFunction<T, T | R>;\n/* tslint:enable:max-line-length */\n\n/**\n *\n * Errors if Observable does not emit a value in given time span, in case of which\n * subscribes to the second Observable.\n *\n * <span class=\"informal\">It's a version of `timeout` operator that let's you specify fallback Observable.</span>\n *\n * <img src=\"./img/timeoutWith.png\" width=\"100%\">\n *\n * `timeoutWith` is a variation of `timeout` operator. It behaves exactly the same,\n * still accepting as a first argument either a number or a Date, which control - respectively -\n * when values of source Observable should be emitted or when it should complete.\n *\n * The only difference is that it accepts a second, required parameter. This parameter\n * should be an Observable which will be subscribed when source Observable fails any timeout check.\n * So whenever regular `timeout` would emit an error, `timeoutWith` will instead start re-emitting\n * values from second Observable. Note that this fallback Observable is not checked for timeouts\n * itself, so it can emit values and complete at arbitrary points in time. From the moment of a second\n * subscription, Observable returned from `timeoutWith` simply mirrors fallback stream. When that\n * stream completes, it completes as well.\n *\n * Scheduler, which in case of `timeout` is provided as as second argument, can be still provided\n * here - as a third, optional parameter. It still is used to schedule timeout checks and -\n * as a consequence - when second Observable will be subscribed, since subscription happens\n * immediately after failing check.\n *\n * @example <caption>Add fallback observable</caption>\n * const seconds = Rx.Observable.interval(1000);\n * const minutes = Rx.Observable.interval(60 * 1000);\n *\n * seconds.timeoutWith(900, minutes)\n *     .subscribe(\n *         value => console.log(value), // After 900ms, will start emitting `minutes`,\n *                                      // since first value of `seconds` will not arrive fast enough.\n *         err => console.log(err) // Would be called after 900ms in case of `timeout`,\n *                                 // but here will never be called.\n *     );\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Observable<T>} withObservable Observable which will be subscribed if source fails timeout check.\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source or, when timeout check fails, of an Observable\n *                          passed as a second parameter.\n * @method timeoutWith\n * @owner Observable\n */\nexport function timeoutWith<T, R>(due: number | Date,\n                                  withObservable: ObservableInput<R>,\n                                  scheduler: IScheduler = async): OperatorFunction<T, T | R> {\n  return (source: Observable<T>) => {\n    let absoluteTimeout = isDate(due);\n    let waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(<number>due);\n    return source.lift(new TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler));\n  };\n}\n\nclass TimeoutWithOperator<T> implements Operator<T, T> {\n  constructor(private waitFor: number,\n              private absoluteTimeout: boolean,\n              private withObservable: ObservableInput<any>,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TimeoutWithSubscriber(\n      subscriber, this.absoluteTimeout, this.waitFor, this.withObservable, this.scheduler\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeoutWithSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private action: Action<TimeoutWithSubscriber<T, R>> = null;\n\n  constructor(destination: Subscriber<T>,\n              private absoluteTimeout: boolean,\n              private waitFor: number,\n              private withObservable: ObservableInput<any>,\n              private scheduler: IScheduler) {\n    super(destination);\n    this.scheduleTimeout();\n  }\n\n  private static dispatchTimeout<T, R>(subscriber: TimeoutWithSubscriber<T, R>): void {\n    const { withObservable } = subscriber;\n    (<any> subscriber)._unsubscribeAndRecycle();\n    subscriber.add(subscribeToResult(subscriber, withObservable));\n  }\n\n  private scheduleTimeout(): void {\n    const { action } = this;\n    if (action) {\n      // Recycle the action if we've already scheduled one. All the production\n      // Scheduler Actions mutate their state/delay time and return themeselves.\n      // VirtualActions are immutable, so they create and return a clone. In this\n      // case, we need to set the action reference to the most recent VirtualAction,\n      // to ensure that's the one we clone from next time.\n      this.action = (<Action<TimeoutWithSubscriber<T, R>>> action.schedule(this, this.waitFor));\n    } else {\n      this.add(this.action = (<Action<TimeoutWithSubscriber<T, R>>> this.scheduler.schedule(\n        TimeoutWithSubscriber.dispatchTimeout, this.waitFor, this\n      )));\n    }\n  }\n\n  protected _next(value: T): void {\n    if (!this.absoluteTimeout) {\n      this.scheduleTimeout();\n    }\n    super._next(value);\n  }\n\n  protected _unsubscribe() {\n    this.action = null;\n    this.scheduler = null;\n    this.withObservable = null;\n  }\n}\n","import { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\nimport { Subject } from '../Subject';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { Operator } from '../Operator';\n\n/**\n * Branch out the source Observable values as a nested Observable whenever\n * `windowBoundaries` emits.\n *\n * <span class=\"informal\">It's like {@link buffer}, but emits a nested Observable\n * instead of an array.</span>\n *\n * <img src=\"./img/window.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping\n * windows. It emits the current window and opens a new one whenever the\n * Observable `windowBoundaries` emits an item. Because each window is an\n * Observable, the output is a higher-order Observable.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var result = clicks.window(interval)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link buffer}\n *\n * @param {Observable<any>} windowBoundaries An Observable that completes the\n * previous window and starts a new window.\n * @return {Observable<Observable<T>>} An Observable of windows, which are\n * Observables emitting values of the source Observable.\n * @method window\n * @owner Observable\n */\nexport function window<T>(windowBoundaries: Observable<any>): OperatorFunction<T, Observable<T>> {\n  return function windowOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowOperator(windowBoundaries));\n  };\n}\n\nclass WindowOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowBoundaries: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    const windowSubscriber = new WindowSubscriber(subscriber);\n    const sourceSubscription = source.subscribe(windowSubscriber);\n    if (!sourceSubscription.closed) {\n      windowSubscriber.add(subscribeToResult(windowSubscriber, this.windowBoundaries));\n    }\n    return sourceSubscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowSubscriber<T> extends OuterSubscriber<T, any> {\n\n  private window: Subject<T> = new Subject<T>();\n\n  constructor(destination: Subscriber<Observable<T>>) {\n    super(destination);\n    destination.next(this.window);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this._complete();\n  }\n\n  protected _next(value: T): void {\n    this.window.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.window.error(err);\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    this.window.complete();\n    this.destination.complete();\n  }\n\n  protected _unsubscribe() {\n    this.window = null;\n  }\n\n  private openWindow(): void  {\n    const prevWindow = this.window;\n    if (prevWindow) {\n      prevWindow.complete();\n    }\n    const destination = this.destination;\n    const newWindow = this.window = new Subject<T>();\n    destination.next(newWindow);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Branch out the source Observable values as a nested Observable with each\n * nested Observable emitting at most `windowSize` values.\n *\n * <span class=\"informal\">It's like {@link bufferCount}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowCount.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows every `startWindowEvery`\n * items, each containing no more than `windowSize` items. When the source\n * Observable completes or encounters an error, the output Observable emits\n * the current window and propagates the notification from the source\n * Observable. If `startWindowEvery` is not provided, then new windows are\n * started immediately at the start of the source and when each window completes\n * with size `windowSize`.\n *\n * @example <caption>Ignore every 3rd click event, starting from the first one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(3)\n *   .map(win => win.skip(1)) // skip first of every 3 clicks\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Ignore every 3rd click event, starting from the third one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(2, 3)\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferCount}\n *\n * @param {number} windowSize The maximum number of values emitted by each\n * window.\n * @param {number} [startWindowEvery] Interval at which to start a new window.\n * For example if `startWindowEvery` is `2`, then a new window will be started\n * on every other value from the source. A new window is started at the\n * beginning of the source by default.\n * @return {Observable<Observable<T>>} An Observable of windows, which in turn\n * are Observable of values.\n * @method windowCount\n * @owner Observable\n */\nexport function windowCount<T>(windowSize: number,\n                               startWindowEvery: number = 0): OperatorFunction<T, Observable<T>> {\n  return function windowCountOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowCountOperator<T>(windowSize, startWindowEvery));\n  };\n}\n\nclass WindowCountOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowSize: number,\n              private startWindowEvery: number) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowCountSubscriber(subscriber, this.windowSize, this.startWindowEvery));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowCountSubscriber<T> extends Subscriber<T> {\n  private windows: Subject<T>[] = [ new Subject<T>() ];\n  private count: number = 0;\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private windowSize: number,\n              private startWindowEvery: number) {\n    super(destination);\n    destination.next(this.windows[0]);\n  }\n\n  protected _next(value: T) {\n    const startWindowEvery = (this.startWindowEvery > 0) ? this.startWindowEvery : this.windowSize;\n    const destination = this.destination;\n    const windowSize = this.windowSize;\n    const windows = this.windows;\n    const len = windows.length;\n\n    for (let i = 0; i < len && !this.closed; i++) {\n      windows[i].next(value);\n    }\n    const c = this.count - windowSize + 1;\n    if (c >= 0 && c % startWindowEvery === 0 && !this.closed) {\n      windows.shift().complete();\n    }\n    if (++this.count % startWindowEvery === 0 && !this.closed) {\n      const window = new Subject<T>();\n      windows.push(window);\n      destination.next(window);\n    }\n  }\n\n  protected _error(err: any) {\n    const windows = this.windows;\n    if (windows) {\n      while (windows.length > 0 && !this.closed) {\n        windows.shift().error(err);\n      }\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete() {\n    const windows = this.windows;\n    if (windows) {\n      while (windows.length > 0 && !this.closed) {\n        windows.shift().complete();\n      }\n    }\n    this.destination.complete();\n  }\n\n  protected _unsubscribe() {\n    this.count = 0;\n    this.windows = null;\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Branch out the source Observable values as a nested Observable starting from\n * an emission from `openings` and ending when the output of `closingSelector`\n * emits.\n *\n * <span class=\"informal\">It's like {@link bufferToggle}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowToggle.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows that contain those items\n * emitted by the source Observable between the time when the `openings`\n * Observable emits an item and when the Observable returned by\n * `closingSelector` emits an item.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var result = clicks.windowToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * ).mergeAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowWhen}\n * @see {@link bufferToggle}\n *\n * @param {Observable<O>} openings An observable of notifications to start new\n * windows.\n * @param {function(value: O): Observable} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns an Observable,\n * which, when it emits (either `next` or `complete`), signals that the\n * associated window should complete.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowToggle\n * @owner Observable\n */\nexport function windowToggle<T, O>(openings: Observable<O>,\n                                   closingSelector: (openValue: O) => Observable<any>): OperatorFunction<T, Observable<T>> {\n  return (source: Observable<T>) => source.lift(new WindowToggleOperator<T, O>(openings, closingSelector));\n}\n\nclass WindowToggleOperator<T, O> implements Operator<T, Observable<T>> {\n\n  constructor(private openings: Observable<O>,\n              private closingSelector: (openValue: O) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowToggleSubscriber(\n      subscriber, this.openings, this.closingSelector\n    ));\n  }\n}\n\ninterface WindowContext<T> {\n  window: Subject<T>;\n  subscription: Subscription;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowToggleSubscriber<T, O> extends OuterSubscriber<T, any> {\n  private contexts: WindowContext<T>[] = [];\n  private openSubscription: Subscription;\n\n  constructor(destination: Subscriber<Observable<T>>,\n              private openings: Observable<O>,\n              private closingSelector: (openValue: O) => Observable<any>) {\n    super(destination);\n    this.add(this.openSubscription = subscribeToResult(this, openings, openings));\n  }\n\n  protected _next(value: T) {\n    const { contexts } = this;\n    if (contexts) {\n      const len = contexts.length;\n      for (let i = 0; i < len; i++) {\n        contexts[i].window.next(value);\n      }\n    }\n  }\n\n  protected _error(err: any) {\n\n    const { contexts } = this;\n    this.contexts = null;\n\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.error(err);\n        context.subscription.unsubscribe();\n      }\n    }\n\n    super._error(err);\n  }\n\n  protected _complete() {\n    const { contexts } = this;\n    this.contexts = null;\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.complete();\n        context.subscription.unsubscribe();\n      }\n    }\n    super._complete();\n  }\n\n  protected _unsubscribe() {\n    const { contexts } = this;\n    this.contexts = null;\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.unsubscribe();\n        context.subscription.unsubscribe();\n      }\n    }\n  }\n\n  notifyNext(outerValue: any, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n\n    if (outerValue === this.openings) {\n\n      const { closingSelector } = this;\n      const closingNotifier = tryCatch(closingSelector)(innerValue);\n\n      if (closingNotifier === errorObject) {\n        return this.error(errorObject.e);\n      } else {\n        const window = new Subject<T>();\n        const subscription = new Subscription();\n        const context = { window, subscription };\n        this.contexts.push(context);\n        const innerSubscription = subscribeToResult(this, closingNotifier, context);\n\n        if (innerSubscription.closed) {\n          this.closeWindow(this.contexts.length - 1);\n        } else {\n          (<any> innerSubscription).context = context;\n          subscription.add(innerSubscription);\n        }\n\n        this.destination.next(window);\n\n      }\n    } else {\n      this.closeWindow(this.contexts.indexOf(outerValue));\n    }\n  }\n\n  notifyError(err: any): void {\n    this.error(err);\n  }\n\n  notifyComplete(inner: Subscription): void {\n    if (inner !== this.openSubscription) {\n      this.closeWindow(this.contexts.indexOf((<any> inner).context));\n    }\n  }\n\n  private closeWindow(index: number): void {\n    if (index === -1) {\n      return;\n    }\n\n    const { contexts } = this;\n    const context = contexts[index];\n    const { window, subscription } = context;\n    contexts.splice(index, 1);\n    window.complete();\n    subscription.unsubscribe();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Branch out the source Observable values as a nested Observable using a\n * factory function of closing Observables to determine when to start a new\n * window.\n *\n * <span class=\"informal\">It's like {@link bufferWhen}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowWhen.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping windows.\n * It emits the current window and opens a new one whenever the Observable\n * produced by the specified `closingSelector` function emits an item. The first\n * window is opened immediately when subscribing to the output Observable.\n *\n * @example <caption>Emit only the first two clicks events in every window of [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks\n *   .windowWhen(() => Rx.Observable.interval(1000 + Math.random() * 4000))\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link bufferWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals (on either `next` or\n * `complete`) when to close the previous window and start a new one.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowWhen\n * @owner Observable\n */\nexport function windowWhen<T>(closingSelector: () => Observable<any>): OperatorFunction<T, Observable<T>> {\n  return function windowWhenOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowOperator<T>(closingSelector));\n  };\n}\n\nclass WindowOperator<T> implements Operator<T, Observable<T>> {\n  constructor(private closingSelector: () => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowSubscriber(subscriber, this.closingSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowSubscriber<T> extends OuterSubscriber<T, any> {\n  private window: Subject<T>;\n  private closingNotification: Subscription;\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private closingSelector: () => Observable<any>) {\n    super(destination);\n    this.openWindow();\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow(innerSub);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow(innerSub);\n  }\n\n  protected _next(value: T): void {\n    this.window.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.window.error(err);\n    this.destination.error(err);\n    this.unsubscribeClosingNotification();\n  }\n\n  protected _complete(): void {\n    this.window.complete();\n    this.destination.complete();\n    this.unsubscribeClosingNotification();\n  }\n\n  private unsubscribeClosingNotification(): void {\n    if (this.closingNotification) {\n      this.closingNotification.unsubscribe();\n    }\n  }\n\n  private openWindow(innerSub: InnerSubscriber<T, any> = null): void {\n    if (innerSub) {\n      this.remove(innerSub);\n      innerSub.unsubscribe();\n    }\n\n    const prevWindow = this.window;\n    if (prevWindow) {\n      prevWindow.complete();\n    }\n\n    const window = this.window = new Subject<T>();\n    this.destination.next(window);\n\n    const closingNotifier = tryCatch(this.closingSelector)();\n    if (closingNotifier === errorObject) {\n      const err = errorObject.e;\n      this.destination.error(err);\n      this.window.error(err);\n    } else {\n      this.add(this.closingNotification = subscribeToResult(this, closingNotifier));\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function withLatestFrom<T, R>(project: (v1: T) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): OperatorFunction<T, R> ;\nexport function withLatestFrom<T, T2>(v2: ObservableInput<T2>): OperatorFunction<T, [T, T2]>;\nexport function withLatestFrom<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, [T, T2, T3]>;\nexport function withLatestFrom<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, [T, T2, T3, T4]>;\nexport function withLatestFrom<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, [T, T2, T3, T4, T5]>;\nexport function withLatestFrom<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, [T, T2, T3, T4, T5, T6]> ;\nexport function withLatestFrom<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R>;\nexport function withLatestFrom<T, R>(array: ObservableInput<any>[]): OperatorFunction<T, R>;\nexport function withLatestFrom<T, R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines the source Observable with other Observables to create an Observable\n * whose values are calculated from the latest values of each, only when the\n * source emits.\n *\n * <span class=\"informal\">Whenever the source Observable emits a value, it\n * computes a formula using that value plus the latest values from other input\n * Observables, then emits the output of that formula.</span>\n *\n * <img src=\"./img/withLatestFrom.png\" width=\"100%\">\n *\n * `withLatestFrom` combines each value from the source Observable (the\n * instance) with the latest values from the other input Observables only when\n * the source emits a value, optionally using a `project` function to determine\n * the value to be emitted on the output Observable. All input Observables must\n * emit at least one value before the output Observable will emit a value.\n *\n * @example <caption>On every click event, emit an array with the latest timer event plus the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var result = clicks.withLatestFrom(timer);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Function} [project] Projection function for combining values\n * together. Receives all values in order of the Observables passed, where the\n * first parameter is a value from the source Observable. (e.g.\n * `a.withLatestFrom(b, c, (a1, b1, c1) => a1 + b1 + c1)`). If this is not\n * passed, arrays will be emitted on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method withLatestFrom\n * @owner Observable\n */\nexport function withLatestFrom<T, R>(...args: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\n  return (source: Observable<T>) => {\n    let project: any;\n    if (typeof args[args.length - 1] === 'function') {\n      project = args.pop();\n    }\n    const observables = <Observable<any>[]>args;\n    return source.lift(new WithLatestFromOperator(observables, project));\n  };\n}\n\nclass WithLatestFromOperator<T, R> implements Operator<T, R> {\n  constructor(private observables: Observable<any>[],\n              private project?: (...values: any[]) => Observable<R>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new WithLatestFromSubscriber(subscriber, this.observables, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WithLatestFromSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private values: any[];\n  private toRespond: number[] = [];\n\n  constructor(destination: Subscriber<R>,\n              private observables: Observable<any>[],\n              private project?: (...values: any[]) => Observable<R>) {\n    super(destination);\n    const len = observables.length;\n    this.values = new Array(len);\n\n    for (let i = 0; i < len; i++) {\n      this.toRespond.push(i);\n    }\n\n    for (let i = 0; i < len; i++) {\n      let observable = observables[i];\n      this.add(subscribeToResult<T, R>(this, observable, <any>observable, i));\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.values[outerIndex] = innerValue;\n    const toRespond = this.toRespond;\n    if (toRespond.length > 0) {\n      const found = toRespond.indexOf(outerIndex);\n      if (found !== -1) {\n        toRespond.splice(found, 1);\n      }\n    }\n  }\n\n  notifyComplete() {\n    // noop\n  }\n\n  protected _next(value: T) {\n    if (this.toRespond.length === 0) {\n      const args = [value, ...this.values];\n      if (this.project) {\n        this._tryProject(args);\n      } else {\n        this.destination.next(args);\n      }\n    }\n  }\n\n  private _tryProject(args: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, args);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { isArray } from '../util/isArray';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function zip<T, R>(project: (v1: T) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): OperatorFunction<T, R> ;\nexport function zip<T, T2>(v2: ObservableInput<T2>): OperatorFunction<T, [T, T2]>;\nexport function zip<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, [T, T2, T3]>;\nexport function zip<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, [T, T2, T3, T4]>;\nexport function zip<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, [T, T2, T3, T4, T5]>;\nexport function zip<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, [T, T2, T3, T4, T5, T6]> ;\nexport function zip<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): OperatorFunction<T, R>;\nexport function zip<T, R>(array: Array<ObservableInput<T>>): OperatorFunction<T, R>;\nexport function zip<T, TOther, R>(array: Array<ObservableInput<TOther>>, project: (v1: T, ...values: Array<TOther>) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * @param observables\n * @return {Observable<R>}\n * @method zip\n * @owner Observable\n */\nexport function zip<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\n  return function zipOperatorFunction(source: Observable<T>) {\n    return source.lift.call(zipStatic<R>(source, ...observables));\n  };\n}\n\n/* tslint:disable:max-line-length */\nexport function zipStatic<T, R>(v1: ObservableInput<T>, project: (v1: T) => R): Observable<R>;\nexport function zipStatic<T, T2, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, T5, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, T5, T6, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R>;\n\nexport function zipStatic<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function zipStatic<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function zipStatic<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function zipStatic<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function zipStatic<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n\nexport function zipStatic<T>(array: ObservableInput<T>[]): Observable<T[]>;\nexport function zipStatic<R>(array: ObservableInput<any>[]): Observable<R>;\nexport function zipStatic<T, R>(array: ObservableInput<T>[], project: (...values: Array<T>) => R): Observable<R>;\nexport function zipStatic<R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R): Observable<R>;\n\nexport function zipStatic<T>(...observables: Array<ObservableInput<T>>): Observable<T[]>;\nexport function zipStatic<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): Observable<R>;\nexport function zipStatic<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are calculated from the values, in order, of each\n * of its input Observables.\n *\n * If the latest parameter is a function, this function is used to compute the created value from the input values.\n * Otherwise, an array of the input values is returned.\n *\n * @example <caption>Combine age and name from different sources</caption>\n *\n * let age$ = Observable.of<number>(27, 25, 29);\n * let name$ = Observable.of<string>('Foo', 'Bar', 'Beer');\n * let isDev$ = Observable.of<boolean>(true, true, false);\n *\n * Observable\n *     .zip(age$,\n *          name$,\n *          isDev$,\n *          (age: number, name: string, isDev: boolean) => ({ age, name, isDev }))\n *     .subscribe(x => console.log(x));\n *\n * // outputs\n * // { age: 27, name: 'Foo', isDev: true }\n * // { age: 25, name: 'Bar', isDev: true }\n * // { age: 29, name: 'Beer', isDev: false }\n *\n * @param observables\n * @return {Observable<R>}\n * @static true\n * @name zip\n * @owner Observable\n */\nexport function zipStatic<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R> {\n  const project = <((...ys: Array<any>) => R)> observables[observables.length - 1];\n  if (typeof project === 'function') {\n    observables.pop();\n  }\n  return new ArrayObservable(observables).lift(new ZipOperator(project));\n}\n\nexport class ZipOperator<T, R> implements Operator<T, R> {\n\n  project: (...values: Array<any>) => R;\n\n  constructor(project?: (...values: Array<any>) => R) {\n    this.project = project;\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ZipSubscriber(subscriber, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ZipSubscriber<T, R> extends Subscriber<T> {\n  private values: any;\n  private project: (...values: Array<any>) => R;\n  private iterators: LookAheadIterator<any>[] = [];\n  private active = 0;\n\n  constructor(destination: Subscriber<R>,\n              project?: (...values: Array<any>) => R,\n              values: any = Object.create(null)) {\n    super(destination);\n    this.project = (typeof project === 'function') ? project : null;\n    this.values = values;\n  }\n\n  protected _next(value: any) {\n    const iterators = this.iterators;\n    if (isArray(value)) {\n      iterators.push(new StaticArrayIterator(value));\n    } else if (typeof value[Symbol_iterator] === 'function') {\n      iterators.push(new StaticIterator(value[Symbol_iterator]()));\n    } else {\n      iterators.push(new ZipBufferIterator(this.destination, this, value));\n    }\n  }\n\n  protected _complete() {\n    const iterators = this.iterators;\n    const len = iterators.length;\n\n    if (len === 0) {\n      this.destination.complete();\n      return;\n    }\n\n    this.active = len;\n    for (let i = 0; i < len; i++) {\n      let iterator: ZipBufferIterator<any, any> = <any>iterators[i];\n      if (iterator.stillUnsubscribed) {\n        this.add(iterator.subscribe(iterator, i));\n      } else {\n        this.active--; // not an observable\n      }\n    }\n  }\n\n  notifyInactive() {\n    this.active--;\n    if (this.active === 0) {\n      this.destination.complete();\n    }\n  }\n\n  checkIterators() {\n    const iterators = this.iterators;\n    const len = iterators.length;\n    const destination = this.destination;\n\n    // abort if not all of them have values\n    for (let i = 0; i < len; i++) {\n      let iterator = iterators[i];\n      if (typeof iterator.hasValue === 'function' && !iterator.hasValue()) {\n        return;\n      }\n    }\n\n    let shouldComplete = false;\n    const args: any[] = [];\n    for (let i = 0; i < len; i++) {\n      let iterator = iterators[i];\n      let result = iterator.next();\n\n      // check to see if it's completed now that you've gotten\n      // the next value.\n      if (iterator.hasCompleted()) {\n        shouldComplete = true;\n      }\n\n      if (result.done) {\n        destination.complete();\n        return;\n      }\n\n      args.push(result.value);\n    }\n\n    if (this.project) {\n      this._tryProject(args);\n    } else {\n      destination.next(args);\n    }\n\n    if (shouldComplete) {\n      destination.complete();\n    }\n  }\n\n  protected _tryProject(args: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, args);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n\ninterface LookAheadIterator<T> extends Iterator<T> {\n  hasValue(): boolean;\n  hasCompleted(): boolean;\n}\n\nclass StaticIterator<T> implements LookAheadIterator<T> {\n  private nextResult: IteratorResult<T>;\n\n  constructor(private iterator: Iterator<T>) {\n    this.nextResult = iterator.next();\n  }\n\n  hasValue() {\n    return true;\n  }\n\n  next(): IteratorResult<T> {\n    const result = this.nextResult;\n    this.nextResult = this.iterator.next();\n    return result;\n  }\n\n  hasCompleted() {\n    const nextResult = this.nextResult;\n    return nextResult && nextResult.done;\n  }\n}\n\nclass StaticArrayIterator<T> implements LookAheadIterator<T> {\n  private index = 0;\n  private length = 0;\n\n  constructor(private array: T[]) {\n    this.length = array.length;\n  }\n\n  [Symbol_iterator]() {\n    return this;\n  }\n\n  next(value?: any): IteratorResult<T> {\n    const i = this.index++;\n    const array = this.array;\n    return i < this.length ? { value: array[i], done: false } : { value: null, done: true };\n  }\n\n  hasValue() {\n    return this.array.length > this.index;\n  }\n\n  hasCompleted() {\n    return this.array.length === this.index;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ZipBufferIterator<T, R> extends OuterSubscriber<T, R> implements LookAheadIterator<T> {\n  stillUnsubscribed = true;\n  buffer: T[] = [];\n  isComplete = false;\n\n  constructor(destination: PartialObserver<T>,\n              private parent: ZipSubscriber<T, R>,\n              private observable: Observable<T>) {\n    super(destination);\n  }\n\n  [Symbol_iterator]() {\n    return this;\n  }\n\n  // NOTE: there is actually a name collision here with Subscriber.next and Iterator.next\n  //    this is legit because `next()` will never be called by a subscription in this case.\n  next(): IteratorResult<T> {\n    const buffer = this.buffer;\n    if (buffer.length === 0 && this.isComplete) {\n      return { value: null, done: true };\n    } else {\n      return { value: buffer.shift(), done: false };\n    }\n  }\n\n  hasValue() {\n    return this.buffer.length > 0;\n  }\n\n  hasCompleted() {\n    return this.buffer.length === 0 && this.isComplete;\n  }\n\n  notifyComplete() {\n    if (this.buffer.length > 0) {\n      this.isComplete = true;\n      this.parent.notifyInactive();\n    } else {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.buffer.push(innerValue);\n    this.parent.checkIterators();\n  }\n\n  subscribe(value: any, index: number) {\n    return subscribeToResult<any, any>(this, this.observable, this, index);\n  }\n}\n","export { audit } from './audit';\nexport { auditTime } from './auditTime';\nexport { buffer } from './buffer';\nexport { bufferCount } from './bufferCount';\nexport { bufferTime } from './bufferTime';\nexport { bufferToggle } from './bufferToggle';\nexport { bufferWhen } from './bufferWhen';\nexport { catchError } from './catchError';\nexport { combineAll } from './combineAll';\nexport { combineLatest } from './combineLatest';\nexport { concat } from './concat';\nexport { concatAll } from './concatAll';\nexport { concatMap } from './concatMap';\nexport { concatMapTo } from './concatMapTo';\nexport { count } from './count';\nexport { debounce } from './debounce';\nexport { debounceTime } from './debounceTime';\nexport { defaultIfEmpty } from './defaultIfEmpty';\nexport { delay } from './delay';\nexport { delayWhen } from './delayWhen';\nexport { dematerialize } from './dematerialize';\nexport { distinct } from './distinct';\nexport { distinctUntilChanged } from './distinctUntilChanged';\nexport { distinctUntilKeyChanged } from './distinctUntilKeyChanged';\nexport { elementAt } from './elementAt';\nexport { every } from './every';\nexport { exhaust } from './exhaust';\nexport { exhaustMap } from './exhaustMap';\nexport { expand } from './expand';\nexport { filter } from './filter';\nexport { finalize } from './finalize';\nexport { find } from './find';\nexport { findIndex } from './findIndex';\nexport { first } from './first';\nexport { groupBy } from './groupBy';\nexport { ignoreElements } from './ignoreElements';\nexport { isEmpty } from './isEmpty';\nexport { last } from './last';\nexport { map } from './map';\nexport { mapTo } from './mapTo';\nexport { materialize } from './materialize';\nexport { max } from './max';\nexport { merge } from './merge';\nexport { mergeAll } from './mergeAll';\nexport { mergeMap } from './mergeMap';\nexport { mergeMap as flatMap } from './mergeMap';\nexport { mergeMapTo } from './mergeMapTo';\nexport { mergeScan } from './mergeScan';\nexport { min } from './min';\nexport { multicast } from './multicast';\nexport { observeOn } from './observeOn';\nexport { onErrorResumeNext } from './onErrorResumeNext';\nexport { pairwise } from './pairwise';\nexport { partition } from './partition';\nexport { pluck } from './pluck';\nexport { publish } from './publish';\nexport { publishBehavior } from './publishBehavior';\nexport { publishLast } from './publishLast';\nexport { publishReplay } from './publishReplay';\nexport { race } from './race';\nexport { reduce } from './reduce';\nexport { repeat } from './repeat';\nexport { repeatWhen } from './repeatWhen';\nexport { retry } from './retry';\nexport { retryWhen } from './retryWhen';\nexport { refCount } from './refCount';\nexport { sample } from './sample';\nexport { sampleTime } from './sampleTime';\nexport { scan } from './scan';\nexport { sequenceEqual } from './sequenceEqual';\nexport { share } from './share';\nexport { shareReplay } from './shareReplay';\nexport { single } from './single';\nexport { skip } from './skip';\nexport { skipLast } from './skipLast';\nexport { skipUntil } from './skipUntil';\nexport { skipWhile } from './skipWhile';\nexport { startWith } from './startWith';\n/**\n * TODO(https://github.com/ReactiveX/rxjs/issues/2900): Add back subscribeOn once it can be\n * treeshaken. Currently if this export is added back, it\n * forces apps to bring in asap scheduler along with\n * Immediate, root, and other supporting code.\n */\n// export { subscribeOn } from './subscribeOn';\nexport { switchAll } from './switchAll';\nexport { switchMap } from './switchMap';\nexport { switchMapTo } from './switchMapTo';\nexport { take } from './take';\nexport { takeLast } from './takeLast';\nexport { takeUntil } from './takeUntil';\nexport { takeWhile } from './takeWhile';\nexport { tap } from './tap';\nexport { throttle } from './throttle';\nexport { throttleTime } from './throttleTime';\nexport { timeInterval } from './timeInterval';\nexport { timeout } from './timeout';\nexport { timeoutWith } from './timeoutWith';\nexport { timestamp } from './timestamp';\nexport { toArray } from './toArray';\nexport { window } from './window';\nexport { windowCount } from './windowCount';\nexport { windowTime } from './windowTime';\nexport { windowToggle } from './windowToggle';\nexport { windowWhen } from './windowWhen';\nexport { withLatestFrom } from './withLatestFrom';\nexport { zip } from './zip';\nexport { zipAll } from './zipAll';\n","/*!\n * @license\n * Copyright 2016 Alfresco Software, Ltd.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { PeopleProcessService, UserProcessModel } from '@alfresco/adf-core';\nimport { Component, Directive, EventEmitter, Input, OnInit, Output, ViewEncapsulation } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { Observable } from 'rxjs/Observable';\nimport { debounceTime } from 'rxjs/operators';\nexport class PeopleSearchComponent implements OnInit {\n\n    \n    results: Observable<UserProcessModel[]>;\n\n    \n    searchPeople: EventEmitter<any> = new EventEmitter();\n\n    \n    success: EventEmitter<UserProcessModel> = new EventEmitter<UserProcessModel>();\n\n    \n    closeSearch = new EventEmitter();\n\n    searchUser: FormControl = new FormControl();\n\n    users: UserProcessModel[] = [];\n\n    selectedUser: UserProcessModel;\n/**\n * @param {?} peopleProcessService\n */\nconstructor(public peopleProcessService: PeopleProcessService) {\n        this.searchUser.valueChanges\n            .pipe(\n                debounceTime(200)\n            )\n            .subscribe((event: string) => {\n                if (event && event.trim()) {\n                    this.searchPeople.emit(event);\n                } else {\n                    this.users = [];\n                }\n            });\n    }\n/**\n * @return {?}\n */\nngOnInit() {\n        this.results.subscribe((list) => {\n            this.users = list;\n        });\n    }\n/**\n * @param {?} user\n * @return {?}\n */\nonRowClick(user: UserProcessModel) {\n        this.selectedUser = user;\n    }\n/**\n * @return {?}\n */\ncloseSearchList() {\n        this.closeSearch.emit();\n    }\n/**\n * @return {?}\n */\ninvolveUserAndClose() {\n        this.involveUser();\n        this.closeSearchList();\n    }\n/**\n * @return {?}\n */\ninvolveUser() {\n        if (this.selectedUser === undefined) {\n            return;\n        }\n        this.success.emit(this.selectedUser);\n        this.users = this.users.filter((user) => {\n            this.searchUser.reset();\n            return user.id !== this.selectedUser.id;\n        });\n    }\n/**\n * @param {?} firstName\n * @param {?} lastName\n * @param {?=} delimiter\n * @return {?}\n */\ngetDisplayUser(firstName: string, lastName: string, delimiter: string = '-'): string {\n        firstName = (firstName !== null ? firstName : '');\n        lastName = (lastName !== null ? lastName : '');\n        return firstName + delimiter + lastName;\n    }\n/**\n * @param {?} firstName\n * @param {?} lastName\n * @return {?}\n */\ngetInitialUserName(firstName: string, lastName: string) {\n        firstName = (firstName !== null && firstName !== '' ? firstName[0] : '');\n        lastName = (lastName !== null && lastName !== '' ? lastName[0] : '');\n        return this.getDisplayUser(firstName, lastName, '');\n    }\n/**\n * @return {?}\n */\nhasUsers() {\n        return (this.users && this.users.length > 0);\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'adf-people-search',\n    template: `\n      <div class=\"search-text-header\">\n          <ng-content select=\"[people-search-title]\"></ng-content>\n      </div>\n      <mat-form-field class=\"search-text-container\">\n      \t<input matInput placeholder=\"{{'ADF_TASK_LIST.PEOPLE.SEARCH_USER'|translate}}\" type=\"text\" id=\"userSearchText\" [value]=\"\" [formControl]=\"searchUser\">\n      </mat-form-field>\n      <div class=\"search-list-container\" id=\"search-people-list\" *ngIf=\"hasUsers()\">\n          <adf-people-list\n          [users]=\"users\"\n          (clickRow)=\"onRowClick($event)\">\n              <data-columns>\n                  <data-column key=\"firstName\">\n                      <ng-template let-entry=\"$implicit\">\n                              <div *ngIf=\"!entry.row.obj.pictureId\" class=\"people-pic\">\n                                  {{getInitialUserName(entry.row.obj.firstName, entry.row.obj.lastName)}}</div>\n                              <div>\n                                  <img *ngIf=\"entry.row.obj.pictureId\" class=\"people-img\"\n                                      [src]=\"peopleProcessService.getUserImage(entry.row.obj)\"/>\n                              </div>\n                      </ng-template>\n                  </data-column>\n                  <data-column key=\"email\" class=\"full-width\">\n                      <ng-template let-entry=\"$implicit\">\n                          <div class=\"people-full-name\">{{ getDisplayUser(entry.row.obj.firstName, entry.row.obj.lastName, ' ') }}</div>\n                      </ng-template>\n                  </data-column>\n              </data-columns>\n          </adf-people-list>\n      </div>\n      <div class=\"search-list-action-container\">\n          <button mat-button type=\"button\" id=\"close-people-search\" (click)=\"closeSearchList()\">\n              {{'ADF_TASK_LIST.PEOPLE.DIALOG_CLOSE' | translate }}\n          </button>\n          <button mat-button type=\"button\" id=\"add-people\" (click)=\"involveUserAndClose()\">\n              <ng-content select=\"[people-search-action-label]\"></ng-content>\n          </button>\n      </div>\n    `,\n    styles: [`\n\n    `],\n    host: {\n        'class': 'adf-people-search'\n    },\n    encapsulation: ViewEncapsulation.None\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: PeopleProcessService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'results': [{ type: Input },],\n'searchPeople': [{ type: Output },],\n'success': [{ type: Output },],\n'closeSearch': [{ type: Output },],\n};\n}\n\nfunction PeopleSearchComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nPeopleSearchComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPeopleSearchComponent.ctorParameters;\n/** @type {?} */\nPeopleSearchComponent.propDecorators;\n/** @type {?} */\nPeopleSearchComponent.prototype.results;\n/** @type {?} */\nPeopleSearchComponent.prototype.searchPeople;\n/** @type {?} */\nPeopleSearchComponent.prototype.success;\n/** @type {?} */\nPeopleSearchComponent.prototype.closeSearch;\n/** @type {?} */\nPeopleSearchComponent.prototype.searchUser;\n/** @type {?} */\nPeopleSearchComponent.prototype.users;\n/** @type {?} */\nPeopleSearchComponent.prototype.selectedUser;\n/** @type {?} */\nPeopleSearchComponent.prototype.peopleProcessService;\n}\n\nexport class PeopleSearchTitleDirective { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{ selector: 'people-search-title' }, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction PeopleSearchTitleDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nPeopleSearchTitleDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPeopleSearchTitleDirective.ctorParameters;\n}\n\nexport class PeopleSearchActionLabelDirective { static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{ selector: 'people-search-action-label' }, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction PeopleSearchActionLabelDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nPeopleSearchActionLabelDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPeopleSearchActionLabelDirective.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["ProcessModule","decorators","type","NgModule","args","imports","CoreModule","CommonModule","CommentsModule","FormsModule","ReactiveFormsModule","BrowserAnimationsModule","MaterialModule","ProcessListModule","TaskListModule","AppsListModule","AttachmentModule","PeopleModule","providers","provide","TRANSLATION_PROVIDER","multi","useValue","name","source","exports","ctorParameters","ProcessFilterRequestRepresentation","obj","this","processDefinitionId","appDefinitionId","state","sort","page","size","DataColumnModule","DataTableModule","TranslateModule","DirectiveModule","declarations","TaskAttachmentListComponent","ProcessAttachmentListComponent","CreateProcessAttachmentComponent","AttachmentComponent","activitiContentService","error","EventEmitter","success","prototype","ngOnChanges","changes","currentValue","taskId","onFileUpload","event","_this","_d","filesList_2","detail","files","map","file","length","createTaskRelatedContent","isRelatedContent","subscribe","res","emit","err","Component","selector","styles","template","ProcessContentService","propDecorators","Input","Output","processInstanceId","filesList_1","createProcessRelatedContent","contentService","thumbnailService","ngZone","disabled","attachmentClick","emptyListImageUrl","attachments","isLoading","loadAttachmentsByProcessInstanceId","reset","reload","run","add","content","push","id","created","createdBy","firstName","lastName","icon","getMimeTypeIcon","mimeType","getProcessRelatedContent","data","forEach","deleteAttachmentById","contentId","deleteRelatedContent","filter","isEmpty","onShowRowActionsMenu","value","actions","title","splice","onExecuteRowAction","action","emitDocumentContent","row","downloadContent","openContent","getFileRawContent","blob","contentBlob","downloadBlob","isDisabled","ContentService","ThumbnailService","NgZone","hasCustomTemplate","loadAttachmentsByTaskId","ngAfterContentInit","emptyTemplate","hasCutomEmptyTemplate","getTaskRelatedContent","attachList","encapsulation","ViewEncapsulation","None","ContentChild","EmptyListComponent","customTemplateRef","ViewChild","FlexLayoutModule","AppsListComponent","appsProcessService","translationService","layoutType","LAYOUT_GRID","appClick","appList","apps$","Observable","observer","appsObserver","share","ngOnInit","isValidType","setDefaultLayoutType","app","iconsMDL","IconModel","load","getDeployedApplications","filterApps","isDefaultApp","theme","DEFAULT_TASKS_APP_THEME","DEFAULT_TASKS_APP_ICON","next","deploymentId","defaultAppId","DEFAULT_TASKS_APP","getAppName","get","DEFAULT_TASKS_APP_NAME","of","selectApp","currentApp","isSelected","appId","undefined","apps","filteredApps","filtersAppId","modelId","tenantId","LAYOUT_LIST","isList","isGrid","getTheme","getBackgroundIcon","mapGlyphiconToMaterialDesignIcons","DEFAULT_TASKS_APP_MATERIAL_ICON","AppsProcessService","TranslationService","FormModule","CardViewModule","PipeModule","ProcessInstanceListComponent","ProcessFiltersComponent","ProcessInstanceDetailsComponent","ProcessAuditDirective","ProcessInstanceHeaderComponent","ProcessInstanceTasksComponent","StartProcessInstanceComponent","ProcessService","ProcessFilterService","CardViewUpdateService","initIconsMDL","Map","set","activitiProcess","start","cancel","processDefinitions","currentProcessDef","ProcessDefinitionRepresentation","errorMessageId","appIdChange","resetSelectedProcessDefinition","resetErrorMessage","getProcessDefinitions","startProcess","outcome","formValues","startForm","form","values","variables","onProcessDefChange","processDef","find","processDefinition","JSON","parse","stringify","cancelStartProcess","hasStartForm","isProcessDefinitionEmpty","isStartFormMissingOrValid","isValid","validateForm","hasErrorMessage","onOutcomeClick","hasProcessName","StartFormComponent","processPresetsDefaultModel","default","key","sortable","cssClass","processService","appConfig","rowClick","layoutPresets","loadLayoutPresets","setupSchema","schema","columnList","columns","c","setColumns","getColumns","presetColumn","setupDefaultColumns","ObjectDataTableAdapter","getLayoutPreset","isPropertyChanged","changed","processDefinitionKey","requestNode","createRequestNode","getProcessInstances","response","instancesRow","createDataRow","renderInstances","selectFirst","instances","instancesRows","ObjectDataRow","optimizeNames","setDatatableSorting","setRows","sortingParams","split","sortColumn","sortOrder","setSorting","DataSorting","isListEmpty","selectedRow","currentInstanceId","getRows","getValue","getCurrentId","onRowClick","item","onRowKeyUp","keyboardEvent","preventDefault","t","getProcessNameOrDescription","processInstance","dateFormat","processDefinitionName","getFormatDate","started","format","datePipe","DatePipe","transform","ProcessFilterParamRepresentationModel","preset","externalSettings","Object","assign","col","ObjectDataColumn","AppConfigService","DataColumnListComponent","logService","showTitle","showRefreshButton","processCancelled","taskClick","showProcessDiagram","processInstanceDetails","processId","getProcess","isRunning","ended","cancelProcess","onTaskClicked","onShowProcessDiagram","LogService","processInstanceHeader","tasksList","TaskDetailsEvent","_defaultPrevented","_value","defineProperty","dialog","activeTasks","completedTasks","task$","taskObserver","completedTask$","completedTaskObserver","task","loadActive","loadCompleted","getProcessTasks","hasStartFormDefined","startFormDefined","getUserFullName","user","clickTask","$event","clickStartTask","showStartDialog","open","startDialog","height","width","closeSartDialog","closeAll","onRefreshClicked","onFormContentClick","MatDialog","taskdetails","refreshData","properties","CardViewTextItemModel","label","getProcessStatus","CardViewDateItemModel","processDefinitionCategory","businessKey","getStartedByFullName","processDefinitionDescription","fullName","startedBy","processFilterService","filterClick","showIcon","filters","filter$","filterObserver","appName","getFiltersByAppName","getFiltersByAppId","getProcessFilters","isFilterListEmpty","createDefaultFilters","resDefault","resetFilter","selectProcessFilter","filterParam","errDefault","getDeployedApplicationsByName","application","selectFilter","currentFilter","processFilter","index","toLowerCase","isCurrentFilterEmpty","selectDefaultTaskFilter","selectRunningFilter","getRunningFilterInstance","getCurrentFilter","FilterProcessRepresentationModel","recent","hasFilter","alfrescoApiService","fromPromise","callApiProcessFilters","filterModel","catch","handleProcessError","getProcessFilterById","filterId","getProcessFilterByName","filterName","runningFilter","runningObservable","addProcessFilter","completedFilter","getCompletedFilterInstance","completedObservable","allFilter","getAllFilterInstance","allObservable","create","forkJoin","complete","getInstance","activiti","userFiltersApi","createUserProcessInstanceFilter","getUserProcessInstanceFilters","throw","Injectable","AlfrescoApiService","processListService","fileName","download","clicked","setDefaultFormatType","isJsonFormat","isPdfFormat","fetchAuditInfo","fetchProcessAuditPdfById","audit","fetchProcessAuditJsonById","onClickAudit","Directive","host","role","(click)","InfoDrawerModule","NoTaskDetailsTemplateDirective","TaskFiltersComponent","TaskListComponent","TaskDetailsComponent","TaskAuditDirective","ChecklistComponent","TaskHeaderComponent","StartTaskComponent","TaskListService","TaskFilterService","TaskUploadService","ProcessUploadService","description","category","version","metaDataValues","ProcessInstanceVariable","scope","valueUrl","ProcessInstance","graphicalNotationDefined","processDefinitionDeploymentId","processDefinitionVersion","processApi","process","getProcessAuditPdf","getProcessAuditJson","getProcessInstance","taskOpts","taskApi","listTasks","extractData","tasks","moment","opts","latest","processDefs","pd","startFormValues","startRequest","startNewProcessInstance","deleteProcessInstance","getProcessInstanceVariables","processInstanceVariablesApi","processVars","createOrUpdateProcessInstanceVariables","deleteProcessInstanceVariable","variableName","taskPresetsDefaultModel","DEFAULT_SIZE","taskListService","selectionMode","multiselect","rowsSelected","hasCustomDataSource","isStreamLoaded","initStream","tasksList$","selectTask","landingTaskId","setCustomDataSource","rows","isEqualToCurrentId","loadTasksByState","findAllTasksWithoutState","findTasksByState","taskIdSelected","dataRow","currentRow","onRowSelect","selectedInstances","selection","slice","onRowUnselect","istances","text","assignment","TaskQueryRequestRepresentationModel","activitiTaskService","bpmUserService","formName","claim","unclaim","inEdit","loadCurrentBpmUserId","taskDetails","parentInfoMap","getParentInfo","getFullName","clickable","isCompleted","getTaskStatus","priority","dueDate","editable","CardViewMapItemModel","multiline","getCurrentUserInfo","currentUserId","hasAssignee","assignee","isAssignedTo","userId","isAssignedToCurrentUser","isCandidateMember","managerOfCandidateGroup","memberOfCandidateGroup","memberOfCandidateUsers","isTaskClaimable","isTaskClaimedByCandidateMember","claimTask","info","unclaimTask","endDate","BpmUserService","taskFilterService","hasIcon","getFilters","getTaskListFilters","selectTaskFilter","selectFilterWithTask","filteredFilterList","getFilterForTaskById","FilterParamsModel","findTaskFilter","taskFilter","toString","fetchTaskAuditPdfById","fetchTaskAuditJsonById","StartTaskModel","UserProcessModel","formKey","taskService","peopleService","dateAdapter","preferences","FORMAT_DATE","people","startTaskmodel","locale$","locale","setLocale","loadFormsTask","getUsers","createNewTask","TaskDetailsModel","switchMap","createRes","attachForm","defaultIfEmpty","attachRes","assignTaskByUserId","assigneeId","attachFormToATask","onCancel","getFormList","forms","getWorkflowUsers","users","isUserNameEmpty","trim","getDisplayUser","delimiter","onDateChanged","newDateValue","dateError","DateAdapter","useClass","MomentDateAdapter","MAT_DATE_FORMATS","MOMENT_DATE_FORMATS","PeopleProcessService","UserPreferencesService","activitiTaskDetails","noTaskDetailsTemplateComponent","TemplateRef","authService","peopleProcessService","cardViewUpdateService","debugMode","showNextTask","showHeader","showHeaderContent","showInvolvePeople","showComments","showChecklist","showFormTitle","showFormCompleteButton","showFormSaveButton","readOnlyForm","showFormRefreshButton","fieldValidators","formSaved","formCompleted","formContentClicked","formLoaded","taskCreated","taskDeleted","executeOutcome","assignTask","taskFormName","taskPeople","showAssignee","peopleSearch$","peopleSearchObserver","loadDetails","itemUpdated$","updateTaskDetails","bind","itemClicked$","clickTaskDetails","hasFormKey","isTaskActive","duration","updateNotification","updateTask","clickNotification","target","getTaskDetails","isNaN","getTime","involvedPeople","isAssigned","isAssignedToMe","email","getBpmUsername","loadNextTask","getTasks","onComplete","completeTask","onFormCompleted","onFormSaved","onFormLoaded","onChecklistTaskCreated","onChecklistTaskDeleted","onFormError","errorDialogRef","errorDialog","onFormExecuteOutcome","closeErrorDialog","onClaimAction","toggleHeaderContent","isCompletedTask","searchUser","searchedWord","onCloseSearch","assignTaskToUser","selectedUser","getTaskHeaderViewClass","isReadOnlyComment","AuthenticationService","activiticomments","activitichecklist","activitiTaskList","readOnly","checklistTaskCreated","checklistTaskDeleted","checklist","getTaskChecklist","showDialog","addNewDialog","newTask","taskName","parentTaskId","addTask","delete","deleteTask","check","apiService","tasksListSubject","Subject","asObservable","involvedTasksFilter","getInvolvedTasksFilterInstance","involvedObservable","addFilter","myTasksFilter","getMyTasksFilterInstance","myTaskObservable","queuedTasksFilter","getQueuedTasksFilterInstance","queuedObservable","completedTasksFilter","getCompletedTasksFilterInstance","completeObservable","callApiTaskFilters","FilterRepresentationModel","handleError","getTaskFilterById","getTaskFilterByName","createUserTaskFilter","getUserTaskFilters","AppDefinitionRepresentationModel","FilterParamRepresentationModel","dueAfter","dueBefore","Form","adhocTaskCanBeReassigned","executionId","initiatorCanCompleteTask","involvedGroups","parentTaskName","processInstanceName","processInstanceStartUserId","taskDefinitionKey","filterList","from","flatMap","isTaskRelatedToFilter","generateTaskRequestNodeFromFilter","requestNodeForFilter","callApiTasksFiltered","element","findAllTaskByState","getTotalTasks","total","concat","callApiTaskDetails","details","callApiTaskChecklist","checklists","modelsApi","getModels","modelType","formId","callApiAddTask","callApiDeleteTask","callApiCreateTask","callApiAssignTask","updated","getTaskAuditPdf","getTaskAuditJson","getTask","addSubtask","getChecklist","_super","appConfigService","call","instanceApi","__extends","getUploadPromise","options","parentId","promise","contentApi","createRelatedContentOnProcessInstance","UploadService","createRelatedContentOnTask","ProcessCommentsComponent","CommentListComponent","CommentsComponent","commentProcessService","comments","beingAdded","comment$","commentObserver","comment","getTaskComments","resetComments","comment1","comment2","date1","Date","date2","message","addTaskComment","unshift","clear","isReadOnly","CommentProcessService","clickRow","selectComment","selectedComment","getUserShortName","shortName","toUpperCase","transformDate","aDate","formattedDate","givenDate","Number","parseInt","now","hasComments","getProcessInstanceComments","addProcessInstanceComment","onError","PeopleComponent","PeopleSearchComponent","PeopleSearchTitleDirective","PeopleSearchActionLabelDirective","PeopleListComponent","showAssignment","ngAfterViewInit","involveUserAndCloseSearch","peopleSearch","involveUserAndClose","involveUserWithoutCloseSearch","involveUser","involveUserWithTask","removeInvolvedUser","involvedUser","getInitialUserName","onAddAssignement","onClickAction","hasPeople","isEditMode","UserEventModel","clickAction","peopleDataTable","selectUser","hasActions","DataTableComponent","modules","MatAutocompleteModule","MatButtonModule","MatCardModule","MatDialogModule","MatCheckboxModule","MatDatepickerModule","MatGridListModule","MatIconModule","MatInputModule","MatListModule","MatOptionModule","MatRadioModule","MatSelectModule","MatSlideToggleModule","MatTableModule","MatTabsModule","MatProgressSpinnerModule","MatNativeDateModule","MatRippleModule","MatTooltipModule","MatChipsModule","tryCatcher","tryCatchTarget","apply","arguments","e","errorObject_1","errorObject","flattenUnsubscriptionErrors","errors","reduce","errs","UnsubscriptionError_1","UnsubscriptionError","pipeFromArray","fns","input","prev","fn","noop_1","noop","dispatchBufferTimeSpanOnly","subscriber","prevContext","context","closeContext","closed","openContext","closeAction","schedule","bufferTimeSpan","dispatchBufferCreation","bufferCreationInterval","scheduler","dispatchBufferClose","arg","dispatchNext","dispatchError","toLength","o","len","root_1","root","isFinite","numberIsFinite","valueAsNumber","sign","Math","floor","abs","maxSafeInteger","dispatchNext$1","debouncedNext","minimalSetImpl","MinimalSet","_values","has","indexOf","dispatchNotification","period","notifyNext","dispatchNext$2","clearThrottle","dispatchWindowTimeSpanOnly","windowTimeSpan","window","closeWindow","openWindow","dispatchWindowCreation","windowCreationInterval","subscription","timeSpanState","dispatchWindowClose","remove","MAT_PLACEHOLDER_GLOBAL_OPTIONS","float","x","Array","isArray","Error","i","join","stack","Subscription","unsubscribe","_parent","_parents","_subscriptions","_unsubscribe","hasErrors","isFunction_1","isFunction","trial","tryCatch_1","tryCatch","isArray_1","sub","isObject_1","isObject","teardown","EMPTY","_addParent","tmp","subscriptions","subscriptionIndex","parent","empty","__window","__self","self","WorkerGlobalScope","_root","global","Symbol","rxSubscriber","for","$$rxSubscriber","Subscriber","destinationOrNext","syncErrorValue","syncErrorThrown","syncErrorThrowable","isStopped","destination","Observer_1","SafeSubscriber","rxSubscriber_1","_next","_error","_complete","_unsubscribeAndRecycle","Subscription_1","Subscriber_2","_parentSubscriber","observerOrNext","_context","__tryOrSetError","__tryOrUnsub","wrappedComplete","OuterSubscriber","outerValue","innerValue","outerIndex","innerIndex","innerSub","notifyError","notifyComplete","Subscriber_1","then","nextOrObserver","getSymbolObservable","$$observable","observable","_i","Observable$$1","_isScalar","_subscribe","lift","operator","sink","toSubscriber_1","toSubscriber","_trySubscribe","PromiseCtor","Rx","config","Promise","resolve","reject","observable_1","pipe","operations","pipe_1","toPromise","symbolIteratorPonyfill","iterator","Set_1","Set","Map_1","keys","getOwnPropertyNames","$$iterator","InnerSubscriber","outerSubscriber","result","InnerSubscriber_1","Observable_1","isArrayLike_1","isArrayLike","isPromise_1","isPromise","setTimeout","iterator_1","done","obs","TypeError","msg","AuditSubscriber","durationSelector","hasValue","throttled","innerSubscription","subscribeToResult_1","subscribeToResult","OuterSubscriber_1","Action","work","delay","AsyncAction","pending","recycleAsyncId","requestAsyncId","setInterval","flush","clearInterval","execute","_execute","errored","errorValue","Action_1","Scheduler","SchedulerAction","AsyncScheduler","active","scheduled","shift","Scheduler_1","AsyncScheduler_1","AsyncAction_1","val","parseFloat","TimerObservable","dueTime","isNumeric_1","isNumeric","isScheduler_1","isScheduler","async_1","async","isDate_1","isDate","initialDelay","dispatch","BufferSubscriber","closingNotifier","buffer","BufferCountSubscriber","bufferSize","BufferSkipCountSubscriber","startBufferEvery","buffers","count","Context","BufferTimeSubscriber","maxBufferSize","contexts","timespanOnly","timeSpanOnlyState","closeState","creationState","filledBufferContext","onBufferFull","BufferToggleSubscriber","openings","closingSelector","closeBuffer","openBuffer","trySubscribe","BufferWhenSubscriber","subscribing","closingSubscription","CatchSubscriber","caught","err2","ScalarObservable","EmptyObservable","ArrayObservable","array","pop","ScalarObservable_1","EmptyObservable_1","none","CombineLatestSubscriber","project","observables","toRespond","unused","oldVal","_tryProject","PromiseObservable","IteratorObservable_2","IteratorObservable","StringIterator","ArrayIterator","getIterator","hasError","return","str","idx","charAt","arr","pow","ArrayLikeObservable","arrayLike","Notification","kind","observe","do","accept","toObservable","createNext","undefinedValueNotification","createError","createComplete","completeNotification","observeOn_2","ObserveOnOperator","ObserveOnSubscriber","ObserveOnOperator_1","notification","scheduleMessage","ObserveOnMessage","Notification_1","ObserveOnSubscriber_1","FromObservable","ish","ArrayObservable_1","PromiseObservable_1","IteratorObservable_1","ArrayLikeObservable_1","observeOn_1","MergeMapSubscriber","resultSelector","concurrent","POSITIVE_INFINITY","hasCompleted","_tryNext","_innerSub","_notifyResultSelector","CountSubscriber","predicate","_tryPredicate","DebounceSubscriber","durationSubscription","emitValue","debounceTime_2","DebounceTimeOperator","DebounceTimeSubscriber","debouncedSubscription","lastValue","clearDebounce","DefaultIfEmptySubscriber","defaultValue","DelayMessage","DelaySubscriber","queue","time","delay_1","max","_schedule","scheduleNotification","SubscriptionDelaySubscriber","DelayWhenSubscriber","delayDurationSelector","completed","delayNotifierSubscriptions","removeSubscription","tryComplete","delayNotifier","tryDelay","subscriptionIdx","notifierSubscription","SubscriptionDelayObservable","subscriptionDelay","sourceSubscribed","subscribeToSource","DeMaterializeSubscriber","DistinctSubscriber","keySelector","flushes","_useKeySelector","_finalizeNext","DistinctUntilChangedSubscriber","compare","hasKey","y","Boolean","ArgumentOutOfRangeError","ElementAtSubscriber","ArgumentOutOfRangeError_1","EverySubscriber","thisArg","everyValueMatch","SwitchFirstSubscriber","hasSubscription","SwitchFirstMapSubscriber","tryNext","trySelectResult","ExpandSubscriber","subscribeToProjection","FilterSubscriber","FinallySubscriber","callback","FindValueSubscriber","yieldIndex","EmptyError","FirstSubscriber","_emitted","_emit","_tryResultSelector","_emitFinal","EmptyError_1","ObjectUnsubscribedError","SubjectSubscription","subject","observers","subscriberIndex","SubjectSubscriber","SubjectSubscriber_1","Subject$$1","thrownError","AnonymousSubject","ObjectUnsubscribedError_1","copy","SubjectSubscription_1","Subject_2","MapPolyfill","_keys","cb","MapPolyfill_1","FastMap","hasOwnProperty","GroupDurationSubscriber","GroupBySubscriber","elementSelector","subjectSelector","groups","attemptedToUnsubscribe","_group","FastMap_1","group","Subject_1","groupedObservable","GroupedObservable","removeGroup","groupSubject","refCountSubscription","InnerRefCountSubscription","IgnoreElementsSubscriber","IsEmptySubscriber","LastSubscriber","MapSubscriber","MapToSubscriber","MaterializeSubscriber","ScanSubscriber","accumulator","_seed","hasSeed","seed","TakeLastSubscriber","ring","MergeMapToSubscriber","MergeScanSubscriber","acc","refCount_2","RefCountOperator","connectable","_refCount","refCounter","RefCountSubscriber","connection","connect","refCount","sharedConnection","_connection","ConnectableSubscriber","ConnectableObservable","subjectFactory","_isComplete","getSubject","_subject","refCount_1","OnErrorResumeNextSubscriber","nextSources","subscribeToNextSource","PairwiseSubscriber","hasPrev","BehaviorSubject","AsyncSubject","hasNext","QueueAction","QueueScheduler","QueueAction_1","ReplayEvent","ReplaySubject","windowTime","_events","_bufferSize","_windowTime","_getNow","_trimBufferThenGetEvents","queue_1","eventsCount","spliceCount","RaceSubscriber","hasFirst","RepeatSubscriber","RepeatWhenSubscriber","notifier","sourceIsBeingSubscribedTo","retries","retriesSubscription","subscribeToRetries","notifications","RetrySubscriber","RetryWhenSubscriber","SampleSubscriber","SampleTimeSubscriber","SequenceEqualCompareToSubscriber","SequenceEqualSubscriber","compareTo","comparor","_a","_b","_oneComplete","checkValues","a","b","areEqual","nextB","SingleSubscriber","seenValue","applySingleValue","singleValue","SkipSubscriber","SkipLastSubscriber","_skipCount","_count","_ring","skipCount","currentIndex","oldValue","SkipUntilSubscriber","isInnerStopped","SkipWhileSubscriber","skipping","tryCallPredicate","SwitchMapSubscriber","_tryNotifyNext","SwitchMapToSubscriber","inner","tryResultSelector","TakeSubscriber","TakeUntilSubscriber","TakeWhileSubscriber","nextOrComplete","predicateResult","DoSubscriber","safeSubscriber","defaultThrottleConfig","leading","trailing","throttle","ThrottleOperator","ThrottleSubscriber","_leading","_trailing","_hasTrailingValue","_trailingValue","tryDurationSelector","_sendTrailing","ThrottleTimeSubscriber","TimeInterval","interval","TimeIntervalSubscriber","lastTime","span","TimeoutError","TimeoutSubscriber","absoluteTimeout","waitFor","errorInstance","scheduleTimeout","dispatchTimeout","TimeoutWithSubscriber","withObservable","WindowSubscriber","prevWindow","newWindow","WindowCountSubscriber","windowSize","startWindowEvery","windows","window_1","CountedSubject","_numberOfNextedValues","WindowTimeSubscriber","maxWindowSize","numberOfNextedValues","window_2","WindowToggleSubscriber","openSubscription","unsubscribeClosingNotification","closingNotification","WithLatestFromSubscriber","found","StaticIterator","ZipSubscriber","iterators","StaticArrayIterator","ZipBufferIterator","stillUnsubscribed","notifyInactive","checkIterators","shouldComplete","nextResult","isComplete","debounceTime","debounceTime_1","throttle_1","searchPeople","closeSearch","FormControl","valueChanges","results","list","closeSearchList","hasUsers","class"],"mappings":"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"}
