/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { OnChanges, OnDestroy } from '@angular/core';
import { LogService } from '../../services/log.service';
import { RenderingQueueServices } from '../services/rendering-queue.services';
export declare class PdfViewerComponent implements OnChanges, OnDestroy {
    private renderingQueueServices;
    private logService;
    urlFile: string;
    blobFile: Blob;
    nameFile: string;
    showToolbar: boolean;
    allowThumbnails: boolean;
    currentPdfDocument: any;
    page: number;
    displayPage: number;
    totalPages: number;
    loadingPercent: number;
    pdfViewer: any;
    currentScaleMode: string;
    currentScale: number;
    MAX_AUTO_SCALE: number;
    DEFAULT_SCALE_DELTA: number;
    MIN_SCALE: number;
    MAX_SCALE: number;
    constructor(renderingQueueServices: RenderingQueueServices, logService: LogService);
    ngOnChanges(changes: any): Promise<{}>;
    executePdf(src: any, resolve: any, reject: any): void;
    /**
     * return the PDFJS global object (exist to facilitate the mock of PDFJS in the test)
     *
     * @returns {PDFJS}
     */
    getPDFJS(): any;
    initPDFViewer(pdfDocument: any): void;
    ngOnDestroy(): void;
    /**
     * Method to scale the page current support implementation
     *
     * @param {string} scaleMode - new scale mode
     */
    scalePage(scaleMode: any): void;
    /**
     * Update all the pages with the newScale scale
     *
     * @param {number} newScale - new scale page
     */
    setScaleUpdatePages(newScale: number): void;
    /**
     * method to check if the request scale of the page is the same for avoid unuseful re-rendering
     *
     * @param {number} oldScale - old scale page
     * @param {number} newScale - new scale page
     *
     * @returns {boolean}
     */
    isSameScale(oldScale: number, newScale: number): boolean;
    /**
     * method to check if is a land scape view
     *
     * @param {number} width
     * @param {number} height
     *
     * @returns {boolean}
     */
    isLandscape(width: number, height: number): boolean;
    /**
     * Method triggered when the page is resized
     */
    onResize(): void;
    /**
     * toggle the fit page pdf
     */
    pageFit(): void;
    /**
     * zoom in page pdf
     *
     * @param {number} ticks
     */
    zoomIn(ticks: number): void;
    /**
     * zoom out page pdf
     *
     * @param {number} ticks
     */
    zoomOut(ticks: number): void;
    /**
     * load the previous page
     */
    previousPage(): void;
    /**
     * load the next page
     */
    nextPage(): void;
    /**
     * load the page in input
     *
     * @param {string} page - page to load
     */
    inputPage(page: string): void;
    /**
     * Litener Scroll Event
     *
     * @param {any} target
     */
    watchScroll(target: any): void;
    /**
     * find out what elements are visible within a scroll pane
     *
     * @param {any} target
     *
     * @returns {Object} page
     */
    getVisibleElement(target: any): any;
    /**
     * check if a page is visible
     *
     * @param {any} page
     * @param {any} target
     *
     * @returns {boolean}
     */
    isOnScreen(page: any, target: any): boolean;
    /**
     * Litener Keyboard Event
     * @param {KeyboardEvent} event
     */
    handleKeyboardEvent(event: KeyboardEvent): void;
    onDocumentScroll(event: Event): void;
}
