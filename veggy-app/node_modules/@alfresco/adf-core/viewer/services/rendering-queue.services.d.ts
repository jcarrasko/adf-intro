/**
 *
 * RenderingQueueServices rendering of the views for pages and thumbnails.
 *
 * @returns {RenderingQueueServices} .
 */
export declare class RenderingQueueServices {
    renderingStates: {
        INITIAL: number;
        RUNNING: number;
        PAUSED: number;
        FINISHED: number;
    };
    CLEANUP_TIMEOUT: number;
    pdfViewer: any;
    pdfThumbnailViewer: any;
    onIdle: any;
    highestPriorityPage: any;
    idleTimeout: any;
    printing: any;
    isThumbnailViewEnabled: any;
    /**
     * @param {PDFViewer} pdfViewer
     */
    setViewer(pdfViewer: any): void;
    /**
     * @param {PDFThumbnailViewer} pdfThumbnailViewer
     */
    setThumbnailViewer(pdfThumbnailViewer: any): void;
    /**
     * @param {IRenderableView} view
     * @returns {boolean}
     */
    isHighestPriority(view: any): boolean;
    renderHighestPriority(currentlyVisiblePages: any): void;
    getHighestPriority(visible: any, views: any, scrolledDown: any): any;
    /**
     * @param {IRenderableView} view
     * @returns {boolean}
     */
    isViewFinished(view: any): boolean;
    /**
     * Render a page or thumbnail view. This calls the appropriate function
     * based on the views state. If the view is already rendered it will return
     * false.
     * @param {IRenderableView} view
     */
    renderView(view: any): boolean;
}
