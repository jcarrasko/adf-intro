/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { EventEmitter, OnChanges, OnInit, SimpleChanges } from '@angular/core';
import { EcmModelService } from './../services/ecm-model.service';
import { FormService } from './../services/form.service';
import { NodeService } from './../services/node.service';
import { ContentLinkModel } from './widgets/core/content-link.model';
import { FormFieldModel, FormModel, FormOutcomeEvent, FormOutcomeModel, FormValues, FormFieldValidator } from './widgets/core/index';
import { Observable } from 'rxjs/Observable';
import { WidgetVisibilityService } from './../services/widget-visibility.service';
export declare class FormComponent implements OnInit, OnChanges {
    protected formService: FormService;
    protected visibilityService: WidgetVisibilityService;
    private ecmModelService;
    private nodeService;
    static SAVE_OUTCOME_ID: string;
    static COMPLETE_OUTCOME_ID: string;
    static START_PROCESS_OUTCOME_ID: string;
    static CUSTOM_OUTCOME_ID: string;
    form: FormModel;
    taskId: string;
    nodeId: string;
    formId: string;
    formName: string;
    saveMetadata: boolean;
    data: FormValues;
    path: string;
    nameNode: string;
    showTitle: boolean;
    showCompleteButton: boolean;
    disableCompleteButton: boolean;
    disableStartProcessButton: boolean;
    showSaveButton: boolean;
    showDebugButton: boolean;
    readOnly: boolean;
    showRefreshButton: boolean;
    showValidationIcon: boolean;
    fieldValidators: FormFieldValidator[];
    formSaved: EventEmitter<FormModel>;
    formCompleted: EventEmitter<FormModel>;
    formContentClicked: EventEmitter<ContentLinkModel>;
    formLoaded: EventEmitter<FormModel>;
    formDataRefreshed: EventEmitter<FormModel>;
    executeOutcome: EventEmitter<FormOutcomeEvent>;
    onError: EventEmitter<any>;
    debugMode: boolean;
    constructor(formService: FormService, visibilityService: WidgetVisibilityService, ecmModelService: EcmModelService, nodeService: NodeService);
    hasForm(): boolean;
    isTitleEnabled(): boolean;
    isOutcomeButtonEnabled(outcome: FormOutcomeModel): boolean;
    isOutcomeButtonVisible(outcome: FormOutcomeModel, isFormReadOnly: boolean): boolean;
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    /**
     * Invoked when user clicks outcome button.
     * @param outcome Form outcome model
     * @returns {boolean} True if outcome action was executed, otherwise false.
     */
    onOutcomeClicked(outcome: FormOutcomeModel): boolean;
    /**
     * Invoked when user clicks form refresh button.
     */
    onRefreshClicked(): void;
    loadForm(): void;
    findProcessVariablesByTaskId(taskId: string): Observable<any>;
    isAProcessTask(taskRepresentation: any): boolean;
    getFormByTaskId(taskId: string): Promise<FormModel>;
    getFormDefinitionByFormId(formId: string): void;
    getFormDefinitionByFormName(formName: string): void;
    saveTaskForm(): void;
    completeTaskForm(outcome?: string): void;
    handleError(err: any): any;
    parseForm(json: any): FormModel;
    /**
     * Get custom set of outcomes for a Form Definition.
     * @param form Form definition model.
     * @returns {FormOutcomeModel[]} Outcomes for a given form definition.
     */
    getFormDefinitionOutcomes(form: FormModel): FormOutcomeModel[];
    checkVisibility(field: FormFieldModel): void;
    private refreshFormData();
    private loadFormForEcmNode(nodeId);
    loadFormFromActiviti(nodeType: string): any;
    private loadFormFromFormId(formId);
    private storeFormAsMetadata();
    protected onFormLoaded(form: FormModel): void;
    protected onFormDataRefreshed(form: FormModel): void;
    protected onTaskSaved(form: FormModel): void;
    protected onTaskSavedError(form: FormModel, error: any): void;
    protected onTaskCompleted(form: FormModel): void;
    protected onTaskCompletedError(form: FormModel, error: any): void;
    protected onExecuteOutcome(outcome: FormOutcomeModel): boolean;
}
