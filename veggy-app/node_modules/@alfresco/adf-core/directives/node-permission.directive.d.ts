/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { ChangeDetectorRef, ElementRef, OnChanges, Renderer2, SimpleChanges } from '@angular/core';
import { MinimalNodeEntity } from 'alfresco-js-api';
import { ContentService } from './../services/content.service';
export interface NodePermissionSubject {
    disabled: boolean;
}
export declare class NodePermissionDirective implements OnChanges {
    private elementRef;
    private renderer;
    private contentService;
    private changeDetector;
    private parentComponent;
    permission: string;
    nodes: MinimalNodeEntity[];
    constructor(elementRef: ElementRef, renderer: Renderer2, contentService: ContentService, changeDetector: ChangeDetectorRef, parentComponent?: NodePermissionSubject);
    ngOnChanges(changes: SimpleChanges): void;
    /**
     * Updates disabled state for the decorated elememtn
     *
     * @returns {boolean} True if decorated element got disabled, otherwise False
     * @memberof NodePermissionDirective
     */
    updateElement(): boolean;
    private enable();
    private disable();
    /**
     * Enables decorated element
     *
     * @memberof NodePermissionDirective
     */
    enableElement(): void;
    /**
     * Disables decorated element
     *
     * @memberof NodePermissionDirective
     */
    disableElement(): void;
    /**
     * Checks whether all nodes have a particular permission
     *
     * @param {MinimalNodeEntity[]} nodes Node collection to check
     * @param {string} permission Permission to check for each node
     * @returns {boolean} True if all nodes have provided permission, otherwise False
     * @memberof NodePermissionDirective
     */
    hasPermission(nodes: MinimalNodeEntity[], permission: string): boolean;
}
