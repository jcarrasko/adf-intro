/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { AfterContentInit, DoCheck, ElementRef, EventEmitter, IterableDiffers, OnChanges, SimpleChange, SimpleChanges, TemplateRef } from '@angular/core';
import { MatCheckboxChange } from '@angular/material';
import { DataColumnListComponent } from '../../../data-column/data-column-list.component';
import { DataColumn } from '../../data/data-column.model';
import { DataRowEvent } from '../../data/data-row-event.model';
import { DataRow } from '../../data/data-row.model';
import { DataTableAdapter } from '../../data/datatable-adapter';
import { ObjectDataRow } from '../../data/object-datarow.model';
import { DataCellEvent } from './data-cell.event';
import { DataRowActionEvent } from './data-row-action.event';
import 'rxjs/add/operator/debounceTime';
import 'rxjs/add/operator/buffer';
import 'rxjs/add/operator/filter';
export declare class DataTableComponent implements AfterContentInit, OnChanges, DoCheck {
    private elementRef;
    columnList: DataColumnListComponent;
    data: DataTableAdapter;
    rows: any[];
    selectionMode: string;
    multiselect: boolean;
    actions: boolean;
    actionsPosition: string;
    fallbackThumbnail: string;
    contextMenu: boolean;
    allowDropFiles: boolean;
    rowStyle: string;
    rowStyleClass: string;
    showHeader: boolean;
    rowClick: EventEmitter<DataRowEvent>;
    rowDblClick: EventEmitter<DataRowEvent>;
    showRowContextMenu: EventEmitter<DataCellEvent>;
    showRowActionsMenu: EventEmitter<DataCellEvent>;
    executeRowAction: EventEmitter<DataRowActionEvent>;
    loading: boolean;
    noPermission: boolean;
    noContentTemplate: TemplateRef<any>;
    noPermissionTemplate: TemplateRef<any>;
    loadingTemplate: TemplateRef<any>;
    isSelectAllChecked: boolean;
    selection: DataRow[];
    private clickObserver;
    private click$;
    private schema;
    private differ;
    private rowMenuCache;
    private singleClickStreamSub;
    private multiClickStreamSub;
    constructor(elementRef: ElementRef, differs: IterableDiffers);
    ngAfterContentInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngDoCheck(): void;
    isPropertyChanged(property: SimpleChange): boolean;
    convertToRowsData(rows: any[]): ObjectDataRow[];
    private initAndSubscribeClickStream();
    private unsubscribeClickStream();
    private initTable();
    isTableEmpty(): boolean;
    private setTableRows(rows);
    private setTableSchema();
    onRowClick(row: DataRow, e: MouseEvent): void;
    resetSelection(): void;
    onRowDblClick(row: DataRow, e?: Event): void;
    onRowKeyUp(row: DataRow, e: KeyboardEvent): void;
    private onKeyboardNavigate(row, e);
    onColumnHeaderClick(column: DataColumn): void;
    onSelectAllClick(e: MatCheckboxChange): void;
    onCheckboxChange(row: DataRow, event: MatCheckboxChange): void;
    onImageLoadingError(event: Event): void;
    isIconValue(row: DataRow, col: DataColumn): boolean;
    asIconValue(row: DataRow, col: DataColumn): string;
    iconAltTextKey(value: string): string;
    isColumnSorted(col: DataColumn, direction: string): boolean;
    getContextMenuActions(row: DataRow, col: DataColumn): any[];
    getRowActions(row: DataRow, col: DataColumn): any[];
    onExecuteRowAction(row: DataRow, action: any): void;
    rowAllowsDrop(row: DataRow): boolean;
    hasSelectionMode(): boolean;
    isSingleSelectionMode(): boolean;
    isMultiSelectionMode(): boolean;
    getRowStyle(row: DataRow): string;
    private selectRow(row, value);
    getCellTooltip(row: DataRow, col: DataColumn): string;
    private emitRowSelectionEvent(name, row);
}
