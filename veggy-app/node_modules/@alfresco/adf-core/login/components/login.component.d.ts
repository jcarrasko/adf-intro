/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { ElementRef, EventEmitter, OnInit, TemplateRef } from '@angular/core';
import { AbstractControl, FormBuilder, FormGroup } from '@angular/forms';
import { Router } from '@angular/router';
import { AuthenticationService } from '../../services/authentication.service';
import { LogService } from '../../services/log.service';
import { SettingsService } from '../../services/settings.service';
import { TranslationService } from '../../services/translation.service';
import { UserPreferencesService } from '../../services/user-preferences.service';
import { LoginErrorEvent } from '../models/login-error.event';
import { LoginSubmitEvent } from '../models/login-submit.event';
import { LoginSuccessEvent } from '../models/login-success.event';
export declare class LoginComponent implements OnInit {
    private _fb;
    private authService;
    private settingsService;
    private translateService;
    private logService;
    private elementRef;
    private router;
    private userPreferences;
    isPasswordShow: boolean;
    showRememberMe: boolean;
    showLoginActions: boolean;
    needHelpLink: string;
    registerLink: string;
    logoImageUrl: string;
    backgroundImageUrl: string;
    copyrightText: string;
    providers: string;
    fieldsValidation: any;
    disableCsrf: boolean;
    successRoute: string;
    success: EventEmitter<LoginSuccessEvent>;
    error: EventEmitter<LoginErrorEvent>;
    executeSubmit: EventEmitter<LoginSubmitEvent>;
    form: FormGroup;
    isError: boolean;
    errorMsg: string;
    actualLoginStep: any;
    LoginSteps: any;
    rememberMe: boolean;
    formError: {
        [id: string]: string;
    };
    minLength: number;
    footerTemplate: TemplateRef<any>;
    headerTemplate: TemplateRef<any>;
    data: any;
    private _message;
    /**
     * Constructor
     * @param _fb
     * @param authService
     * @param settingsService
     * @param translate
     */
    constructor(_fb: FormBuilder, authService: AuthenticationService, settingsService: SettingsService, translateService: TranslationService, logService: LogService, elementRef: ElementRef, router: Router, userPreferences: UserPreferencesService);
    ngOnInit(): void;
    /**
     * Method called on submit form
     * @param values
     * @param event
     */
    onSubmit(values: any): boolean;
    /**
     * The method check the error in the form and push the error in the formError object
     * @param data
     */
    onValueChanged(data: any): void;
    /**
     * Performe the login service
     * @param values
     */
    private performLogin(values);
    /**
     * Check and display the right error message in the UI
     */
    private displayErrorMessage(err);
    /**
     * Check the require parameter
     * @returns {boolean}
     */
    private checkRequiredParams();
    /**
     * Add a custom form error for a field
     * @param field
     * @param msg
     */
    addCustomFormError(field: string, msg: string): void;
    /**
     * Add a custom validation rule error for a field
     * @param field
     * @param ruleId - i.e. required | minlength | maxlength
     * @param msg
     */
    addCustomValidationError(field: string, ruleId: string, msg: string, params?: any): void;
    /**
     * Display and hide the password value.
     */
    toggleShowPassword(): void;
    /**
     * The method return if a field is valid or not
     * @param field
     * @returns {boolean}
     */
    isErrorStyle(field: AbstractControl): boolean;
    /**
     * Trim username
     */
    trimUsername(event: any): void;
    /**
     * Default formError values
     */
    private initFormError();
    /**
     * Init form fields messages
     */
    private initFormFieldsMessages();
    /**
     * Default form fields messages
     */
    private initFormFieldsMessagesDefault();
    private initFormFieldsDefault();
    /**
     * Disable the error flag
     */
    private disableError();
    /**
     * Enable the error flag
     */
    private enableError();
    private hasCustomFiledsValidation();
}
