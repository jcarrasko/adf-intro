/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { AlfrescoApiService, LogService } from '@alfresco/adf-core';
import { Observable } from 'rxjs/Observable';
import 'rxjs/add/observable/throw';
export declare class AnalyticsService {
    private apiService;
    private logService;
    constructor(apiService: AlfrescoApiService, logService: LogService);
    /**
     * Retrive all the Deployed app
     * @returns {Observable<any>}
     */
    getReportList(appId: number): Observable<any>;
    /**
     * Retrive Report by name
     * @param reportName - string - The name of report
     * @returns {Observable<any>}
     */
    getReportByName(reportName: string): Observable<any>;
    private isReportValid(appId, report);
    getReportParams(reportId: string): Observable<any>;
    getParamValuesByType(type: string, appId: number, reportId?: string, processDefinitionId?: string): any;
    getProcessStatusValues(): Observable<any>;
    getDateIntervalValues(): Observable<any>;
    getMetricValues(): Observable<any>;
    getProcessDefinitionsValuesNoApp(): Observable<any>;
    getProcessDefinitionsValues(appId: number): Observable<any>;
    getTasksByProcessDefinitionId(reportId: string, processDefinitionId: string): Observable<any>;
    getReportsByParams(reportId: number, paramsQuery: any): Observable<any>;
    createDefaultReports(): Observable<any>;
    updateReport(reportId: number, name: string): Observable<any>;
    exportReportToCsv(reportId: string, paramsQuery: any): Observable<any>;
    saveReport(reportId: string, paramsQuery: any): Observable<any>;
    deleteReport(reportId: string): Observable<any>;
    private handleError(error);
    toJson(res: any): any;
}
