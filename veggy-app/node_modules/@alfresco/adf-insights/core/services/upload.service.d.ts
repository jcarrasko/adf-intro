/*!
 * @license
 * Copyright 2016 Alfresco Software, Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { EventEmitter } from '@angular/core';
import { Subject } from 'rxjs/Subject';
import { AppConfigService } from '../app-config/app-config.service';
import { FileUploadCompleteEvent, FileUploadDeleteEvent, FileUploadErrorEvent, FileUploadEvent } from '../events/file.event';
import { FileModel } from '../models/file.model';
import { AlfrescoApiService } from './alfresco-api.service';
export declare class UploadService {
    private apiService;
    private appConfigService;
    private queue;
    private cache;
    private totalComplete;
    private totalAborted;
    private totalError;
    private activeTask;
    private excludedFileList;
    queueChanged: Subject<FileModel[]>;
    fileUpload: Subject<FileUploadEvent>;
    fileUploadStarting: Subject<FileUploadEvent>;
    fileUploadCancelled: Subject<FileUploadEvent>;
    fileUploadProgress: Subject<FileUploadEvent>;
    fileUploadAborted: Subject<FileUploadEvent>;
    fileUploadError: Subject<FileUploadErrorEvent>;
    fileUploadComplete: Subject<FileUploadCompleteEvent>;
    fileUploadDeleted: Subject<FileUploadDeleteEvent>;
    fileDeleted: Subject<string>;
    constructor(apiService: AlfrescoApiService, appConfigService: AppConfigService);
    isUploading(): boolean;
    getQueue(): FileModel[];
    addToQueue(...files: FileModel[]): FileModel[];
    private filterElement(file);
    uploadFilesInTheQueue(emitter: EventEmitter<any>): void;
    cancelUpload(...files: FileModel[]): void;
    clearQueue(): void;
    getUploadPromise(file: FileModel): any;
    private beginUpload(file, emitter);
    private onUploadStarting(file);
    private onUploadProgress(file, progress);
    private onUploadError(file, error);
    private onUploadComplete(file, data);
    private onUploadAborted(file);
    private onUploadCancelled(file);
    private onUploadDeleted(file);
    private getAction(file);
}
